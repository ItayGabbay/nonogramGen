INFO:root:

*******STARTING!!!******


INFO:root:

*******Configuration******


INFO:root:import time


INFO:root:


INFO:root:# NUM_ROWS = 20


INFO:root:NUM_ROWS = 5


INFO:root:# NUM_COLS = 20


INFO:root:NUM_COLS = 5


INFO:root:empty_in_split = '\xa0'


INFO:root:pickle_unsolved_file_path = 'data/%dx%d_nonograms.pkl' % (NUM_ROWS, NUM_COLS)


INFO:root:pickle_solved_file_path = 'data/%dx%d_nonograms_solved.pkl' % (NUM_ROWS, NUM_COLS)


INFO:root:pickle_row_options_path = 'data/%dx%d_row_options.pkl' % (NUM_ROWS, NUM_ROWS)


INFO:root:fitness_plot_path = 'plots/fitness' + str(time.time()) + '.pkl'


INFO:root:nums_plot_path = 'plots/nums' + str(time.time()) + '.pkl'


INFO:root:plot_fitness_distr_path = 'plots/fitness_distr' + str(time.time()) + '.pkl'


INFO:root:plot_population_3d = 'plots/population_3d' + str(time.time()) + '.pkl'


INFO:root:


INFO:root:convert_to_sat = True


INFO:root:should_run_in_parallel = True


INFO:root:print_individual_fitness = True


INFO:root:


INFO:root:plot_fitness_stats = True


INFO:root:plot_min_max_stats = True


INFO:root:plot_d3_fitness = False


INFO:root:plot_fitness_distribution_2d = True


INFO:root:


INFO:root:NUM_COND_TREES = 5


INFO:root:NUM_VAL_TREES = NUM_COND_TREES + 1


INFO:root:prob_crossover_global = 0.8  # global probability for cx


INFO:root:prob_crossover_individual_cond = 0.7  # probability to cx a specific cond tree in an individual


INFO:root:prob_crossover_individual_val = 0.7  # probability to cx a specific cond tree in an individual


INFO:root:prob_mutate_global = 0.1


INFO:root:prob_mutate_individual_cond = 1


INFO:root:prob_mutate_individual_val = 1


INFO:root:


INFO:root:points_correct_box = 5


INFO:root:points_incorrect_box = -1


INFO:root:# points_incorrect_box = -2


INFO:root:pop_size = 20


INFO:root:hof_size = 1


INFO:root:# num_gen = 40


INFO:root:num_gen = 3


INFO:root:train_size = 3


INFO:root:


INFO:root:

*******DONE!!!******


INFO:root:run time: 18 sec

INFO:root:max possible fitness for the nonograms ran: %d

INFO:root:log:    	      	                                    fitness                                    
   	      	-------------------------------------------------------------------------------
gen	nevals	avg    	max    	median 	min    	most common	num max	num min	size	std    
0  	20    	327.556	698.656	400.24 	8.66025	620.069    	1      	7      	20  	268.943
1  	16    	70.163 	416.416	8.66025	8.66025	178.474    	1      	16     	20  	128.988
2  	12    	75.1631	481.163	8.66025	8.66025	39.6358    	2      	15     	20  	153.942
3  	16    	127.184	481.163	8.66025	8.66025	178.14     	2      	14     	20  	192.011

INFO:root:pop: COND TREES:
or_(ge(_if_then_else(False, zeros_diff_rows, ones_diff_rows), zeros_diff_cols), and_(False, False))
or_(or_(False, True), False)
or_(ge(zeros_diff_rows, _if_then_else(True, ones_diff_cols, _if_then_else(True, max_col_clue, _if_then_else(True, compare_blocks_rows, max_col_clue)))), le(_if_then_else(True, compare_blocks_rows, max_col_clue), 1))
or_(and_(False, True), or_(False, False))
ge(_if_then_else(or_(False, True), 3, ones_diff_cols), _if_then_else(or_(False, False), _if_then_else(or_(False, True), _if_then_else(False, compare_blocks_rows, 4), _if_then_else(True, ones_diff_rows, zeros_diff_cols)), _if_then_else(False, zeros_diff_rows, max_row_clue)))
VAL TREES:
add(add(zeros_diff_rows, add(ones_diff_rows, compare_blocks_rows)), mul(mul(max_col_clue, ones_diff_rows), mul(zeros_diff_cols, compare_blocks_rows)))
mul(mul(mul(compare_blocks_cols, max_col_clue), mul(compare_blocks_rows, max_row_clue)), add(add(zeros_diff_cols, zeros_diff_cols), add(compare_blocks_rows, ones_diff_rows)))
add(mul(compare_blocks_cols, compare_blocks_cols), mul(compare_blocks_rows, 0))
mul(add(compare_blocks_cols, compare_blocks_cols), mul(max_row_clue, compare_blocks_cols))
add(add(ones_diff_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))
mul(mul(mul(compare_blocks_cols, compare_blocks_cols), mul(max_col_clue, zeros_diff_rows)), mul(mul(compare_blocks_rows, max_row_clue), add(ones_diff_cols, max_row_clue)))
COND TREES:
or_(and_(ge(_if_then_else(False, zeros_diff_cols, zeros_diff_rows), _if_then_else(False, zeros_diff_cols, zeros_diff_rows)), or_(le(compare_blocks_cols, compare_blocks_cols), or_(True, False))), and_(le(_if_then_else(True, ones_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_cols, 0)), le(_if_then_else(False, max_row_clue, zeros_diff_rows), _if_then_else(True, compare_blocks_rows, compare_blocks_cols))))
or_(or_(and_(and_(True, True), False), False), or_(True, True))
and_(ge(max_col_clue, ones_diff_rows), le(_if_then_else(True, compare_blocks_cols, max_col_clue), 2))
or_(or_(False, False), and_(False, True))
ge(_if_then_else(and_(False, True), _if_then_else(False, zeros_diff_rows, 1), _if_then_else(True, zeros_diff_cols, ones_diff_rows)), _if_then_else(and_(False, True), _if_then_else(True, max_row_clue, max_col_clue), _if_then_else(True, max_row_clue, max_col_clue)))
VAL TREES:
mul(add(add(zeros_diff_rows, 2), mul(zeros_diff_cols, compare_blocks_cols)), mul(mul(max_col_clue, ones_diff_cols), mul(max_row_clue, zeros_diff_rows)))
add(add(3, compare_blocks_rows), add(ones_diff_cols, max_row_clue))
add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_rows, max_col_clue))
add(mul(max_row_clue, ones_diff_rows), mul(compare_blocks_rows, zeros_diff_cols))
mul(add(max_row_clue, zeros_diff_rows), mul(1, zeros_diff_cols))
add(mul(add(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_rows, compare_blocks_cols)), mul(add(ones_diff_rows, max_row_clue), add(max_row_clue, compare_blocks_rows)))
COND TREES:
or_(ge(zeros_diff_rows, zeros_diff_cols), and_(False, False))
or_(or_(False, True), and_(False, False))
or_(ge(zeros_diff_rows, zeros_diff_rows), or_(ge(max_col_clue, compare_blocks_cols), False))
or_(and_(False, False), or_(False, False))
ge(_if_then_else(or_(False, True), 3, ones_diff_cols), _if_then_else(or_(False, le(compare_blocks_rows, max_row_clue)), _if_then_else(False, max_col_clue, max_row_clue), _if_then_else(False, zeros_diff_rows, max_row_clue)))
VAL TREES:
add(add(zeros_diff_rows, add(ones_diff_rows, compare_blocks_rows)), mul(mul(max_col_clue, ones_diff_rows), mul(zeros_diff_cols, compare_blocks_rows)))
mul(mul(mul(compare_blocks_cols, max_col_clue), mul(compare_blocks_rows, max_row_clue)), add(add(zeros_diff_cols, zeros_diff_cols), add(compare_blocks_rows, ones_diff_rows)))
add(mul(compare_blocks_cols, compare_blocks_cols), mul(compare_blocks_rows, 0))
mul(add(compare_blocks_cols, compare_blocks_cols), mul(max_row_clue, compare_blocks_cols))
add(add(ones_diff_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))
mul(mul(mul(compare_blocks_cols, compare_blocks_cols), mul(max_col_clue, zeros_diff_rows)), mul(mul(compare_blocks_rows, max_row_clue), add(ones_diff_cols, max_row_clue)))
COND TREES:
le(_if_then_else(and_(False, or_(True, False)), _if_then_else(ge(zeros_diff_rows, zeros_diff_rows), _if_then_else(False, zeros_diff_cols, zeros_diff_cols), max_col_clue), ones_diff_rows), _if_then_else(False, _if_then_else(or_(True, False), compare_blocks_cols, zeros_diff_cols), _if_then_else(True, _if_then_else(True, 2, zeros_diff_cols), _if_then_else(False, max_col_clue, zeros_diff_cols))))
le(_if_then_else(ge(_if_then_else(False, 0, max_row_clue), _if_then_else(False, ones_diff_cols, ones_diff_rows)), _if_then_else(and_(False, True), _if_then_else(False, zeros_diff_cols, 4), _if_then_else(True, ones_diff_cols, ones_diff_rows)), _if_then_else(ge(4, max_col_clue), _if_then_else(False, max_row_clue, 2), _if_then_else(False, 1, 4))), _if_then_else(ge(_if_then_else(False, compare_blocks_rows, ones_diff_cols), _if_then_else(False, compare_blocks_rows, zeros_diff_rows)), _if_then_else(and_(False, False), _if_then_else(False, zeros_diff_rows, ones_diff_rows), _if_then_else(True, max_row_clue, ones_diff_rows)), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, compare_blocks_cols, zeros_diff_rows), _if_then_else(True, zeros_diff_cols, max_row_clue))))
or_(le(_if_then_else(True, compare_blocks_rows, max_col_clue), 1), le(_if_then_else(False, zeros_diff_cols, ones_diff_rows), _if_then_else(False, max_col_clue, compare_blocks_rows)))
le(_if_then_else(False, ones_diff_cols, compare_blocks_cols), _if_then_else(True, zeros_diff_rows, compare_blocks_rows))
and_(False, True)
VAL TREES:
add(add(ones_diff_cols, zeros_diff_rows), mul(ones_diff_rows, ones_diff_cols))
mul(mul(mul(add(compare_blocks_rows, zeros_diff_cols), add(compare_blocks_cols, max_row_clue)), add(mul(max_col_clue, 4), add(zeros_diff_cols, ones_diff_cols))), mul(add(add(zeros_diff_rows, max_col_clue), mul(zeros_diff_rows, max_row_clue)), mul(mul(compare_blocks_cols, max_col_clue), add(1, max_col_clue))))
mul(mul(compare_blocks_rows, zeros_diff_cols), mul(mul(compare_blocks_rows, 3), zeros_diff_cols))
mul(add(max_col_clue, 3), add(compare_blocks_cols, zeros_diff_rows))
mul(mul(1, max_col_clue), mul(zeros_diff_cols, ones_diff_rows))
mul(add(4, mul(max_col_clue, max_col_clue)), mul(add(0, ones_diff_cols), compare_blocks_cols))
COND TREES:
or_(ge(zeros_diff_rows, _if_then_else(or_(True, False), compare_blocks_cols, zeros_diff_cols)), and_(False, False))
or_(or_(False, True), True)
or_(ge(zeros_diff_rows, zeros_diff_rows), le(_if_then_else(True, compare_blocks_rows, max_col_clue), 1))
or_(and_(False, False), or_(False, False))
ge(_if_then_else(or_(False, le(compare_blocks_rows, max_row_clue)), 3, ones_diff_cols), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, max_row_clue), _if_then_else(False, zeros_diff_rows, max_row_clue)))
VAL TREES:
add(add(zeros_diff_rows, add(ones_diff_rows, compare_blocks_rows)), mul(mul(max_col_clue, ones_diff_rows), mul(zeros_diff_cols, compare_blocks_rows)))
mul(mul(mul(compare_blocks_cols, max_col_clue), mul(compare_blocks_rows, max_row_clue)), add(add(zeros_diff_cols, zeros_diff_cols), add(compare_blocks_rows, ones_diff_rows)))
add(mul(compare_blocks_cols, compare_blocks_cols), mul(compare_blocks_rows, 0))
mul(add(compare_blocks_cols, compare_blocks_cols), mul(max_row_clue, compare_blocks_cols))
add(add(ones_diff_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))
mul(mul(mul(compare_blocks_cols, compare_blocks_cols), mul(max_col_clue, zeros_diff_rows)), mul(mul(compare_blocks_rows, max_row_clue), add(ones_diff_cols, max_row_clue)))
COND TREES:
le(_if_then_else(and_(False, or_(True, False)), _if_then_else(ge(zeros_diff_rows, zeros_diff_rows), _if_then_else(False, zeros_diff_cols, zeros_diff_cols), max_col_clue), ones_diff_rows), _if_then_else(False, zeros_diff_cols, _if_then_else(True, _if_then_else(True, 2, zeros_diff_cols), _if_then_else(False, max_col_clue, zeros_diff_cols))))
le(_if_then_else(ge(_if_then_else(False, 0, max_row_clue), _if_then_else(False, ones_diff_cols, ones_diff_rows)), _if_then_else(and_(False, True), _if_then_else(False, zeros_diff_cols, 4), _if_then_else(and_(False, False), ones_diff_cols, ones_diff_rows)), _if_then_else(ge(4, max_col_clue), _if_then_else(False, max_row_clue, 2), _if_then_else(False, 1, 4))), _if_then_else(ge(_if_then_else(False, compare_blocks_rows, ones_diff_cols), _if_then_else(False, compare_blocks_rows, zeros_diff_rows)), _if_then_else(and_(False, False), _if_then_else(False, zeros_diff_rows, ones_diff_rows), _if_then_else(True, max_row_clue, ones_diff_rows)), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, compare_blocks_cols, zeros_diff_rows), _if_then_else(True, zeros_diff_cols, max_row_clue))))
or_(or_(ge(max_col_clue, compare_blocks_cols), False), le(_if_then_else(False, zeros_diff_cols, ones_diff_rows), _if_then_else(False, max_col_clue, compare_blocks_rows)))
le(_if_then_else(False, ones_diff_cols, compare_blocks_cols), _if_then_else(True, zeros_diff_rows, compare_blocks_rows))
and_(True, True)
VAL TREES:
add(add(ones_diff_cols, zeros_diff_rows), mul(ones_diff_rows, ones_diff_cols))
mul(mul(mul(add(compare_blocks_rows, zeros_diff_cols), add(compare_blocks_cols, max_row_clue)), add(mul(max_col_clue, 4), add(zeros_diff_cols, ones_diff_cols))), mul(add(add(zeros_diff_rows, max_col_clue), mul(zeros_diff_rows, max_row_clue)), mul(mul(compare_blocks_cols, max_col_clue), add(1, max_col_clue))))
mul(mul(compare_blocks_rows, zeros_diff_cols), mul(mul(compare_blocks_rows, 3), zeros_diff_cols))
mul(add(max_col_clue, 3), add(compare_blocks_cols, zeros_diff_rows))
mul(mul(1, max_col_clue), mul(zeros_diff_cols, ones_diff_rows))
mul(add(4, mul(max_col_clue, max_col_clue)), mul(add(0, ones_diff_cols), compare_blocks_cols))
COND TREES:
le(_if_then_else(le(compare_blocks_rows, max_row_clue), ones_diff_rows, max_col_clue), _if_then_else(False, _if_then_else(True, compare_blocks_cols, compare_blocks_cols), _if_then_else(False, max_row_clue, ones_diff_rows)))
or_(le(_if_then_else(True, compare_blocks_cols, max_row_clue), compare_blocks_cols), ge(1, _if_then_else(True, max_row_clue, zeros_diff_cols)))
ge(_if_then_else(True, ones_diff_cols, _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(False, ones_diff_rows, ones_diff_rows))
ge(_if_then_else(and_(True, False), _if_then_else(False, 3, compare_blocks_rows), _if_then_else(True, compare_blocks_rows, compare_blocks_rows)), _if_then_else(or_(True, True), _if_then_else(False, compare_blocks_rows, 4), _if_then_else(True, max_col_clue, 2)))
le(ones_diff_cols, _if_then_else(or_(False, True), _if_then_else(False, compare_blocks_rows, 4), _if_then_else(True, ones_diff_rows, zeros_diff_cols)))
VAL TREES:
mul(add(max_row_clue, compare_blocks_rows), add(zeros_diff_cols, max_col_clue))
add(add(mul(max_col_clue, max_row_clue), add(compare_blocks_cols, max_col_clue)), mul(add(ones_diff_cols, zeros_diff_cols), mul(max_row_clue, ones_diff_rows)))
add(add(add(add(max_col_clue, ones_diff_cols), add(zeros_diff_cols, compare_blocks_cols)), add(add(ones_diff_cols, compare_blocks_cols), add(zeros_diff_cols, compare_blocks_cols))), mul(mul(mul(compare_blocks_cols, compare_blocks_rows), add(ones_diff_rows, zeros_diff_cols)), mul(mul(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_cols, compare_blocks_cols))))
mul(mul(add(add(zeros_diff_rows, max_col_clue), mul(ones_diff_rows, max_row_clue)), add(mul(max_col_clue, max_row_clue), mul(zeros_diff_rows, zeros_diff_cols))), add(add(add(max_row_clue, max_col_clue), add(zeros_diff_rows, zeros_diff_cols)), add(add(compare_blocks_cols, ones_diff_rows), add(compare_blocks_rows, compare_blocks_cols))))
mul(add(ones_diff_cols, compare_blocks_cols), mul(max_row_clue, ones_diff_rows))
mul(mul(compare_blocks_cols, compare_blocks_rows), mul(compare_blocks_rows, zeros_diff_rows))
COND TREES:
and_(or_(le(zeros_diff_cols, ones_diff_rows), and_(True, False)), le(_if_then_else(False, _if_then_else(False, compare_blocks_rows, compare_blocks_cols), ones_diff_rows), _if_then_else(True, zeros_diff_rows, 4)))
and_(False, and_(True, ge(zeros_diff_cols, 2)))
le(_if_then_else(or_(False, False), zeros_diff_rows, max_row_clue), _if_then_else(False, ones_diff_rows, 4))
le(_if_then_else(and_(True, True), _if_then_else(False, zeros_diff_rows, max_row_clue), _if_then_else(False, max_col_clue, compare_blocks_rows)), _if_then_else(ge(compare_blocks_cols, max_row_clue), _if_then_else(False, zeros_diff_rows, ones_diff_cols), _if_then_else(True, _if_then_else(False, compare_blocks_cols, ones_diff_rows), ones_diff_cols)))
ge(_if_then_else(le(_if_then_else(True, zeros_diff_rows, compare_blocks_cols), _if_then_else(True, zeros_diff_rows, ones_diff_cols)), _if_then_else(le(compare_blocks_cols, ones_diff_cols), _if_then_else(True, compare_blocks_rows, ones_diff_cols), _if_then_else(False, ones_diff_rows, compare_blocks_cols)), _if_then_else(and_(False, True), _if_then_else(True, 3, compare_blocks_rows), _if_then_else(True, zeros_diff_cols, ones_diff_rows))), _if_then_else(le(_if_then_else(or_(False, False), _if_then_else(False, max_col_clue, max_row_clue), _if_then_else(False, zeros_diff_rows, max_row_clue)), _if_then_else(True, compare_blocks_rows, 4)), _if_then_else(le(compare_blocks_rows, ones_diff_rows), _if_then_else(True, ones_diff_rows, zeros_diff_cols), _if_then_else(or_(True, True), zeros_diff_cols, ones_diff_cols)), _if_then_else(or_(False, True), _if_then_else(False, ones_diff_rows, zeros_diff_cols), _if_then_else(False, compare_blocks_cols, compare_blocks_cols))))
VAL TREES:
add(mul(ones_diff_cols, max_row_clue), mul(ones_diff_cols, compare_blocks_rows))
add(add(compare_blocks_rows, max_col_clue), add(1, compare_blocks_rows))
add(add(zeros_diff_cols, ones_diff_rows), add(max_col_clue, mul(ones_diff_rows, compare_blocks_rows)))
mul(add(compare_blocks_rows, max_col_clue), mul(zeros_diff_cols, max_col_clue))
mul(mul(2, zeros_diff_cols), add(2, compare_blocks_rows))
add(mul(max_row_clue, compare_blocks_cols), mul(compare_blocks_rows, ones_diff_cols))
COND TREES:
and_(or_(le(2, zeros_diff_rows), and_(True, False)), le(_if_then_else(False, compare_blocks_rows, compare_blocks_cols), _if_then_else(True, zeros_diff_rows, 4)))
and_(le(zeros_diff_cols, ones_diff_cols), ge(zeros_diff_cols, 2))
le(_if_then_else(False, compare_blocks_rows, max_row_clue), _if_then_else(le(_if_then_else(True, compare_blocks_cols, max_col_clue), zeros_diff_rows), ones_diff_rows, 4))
le(_if_then_else(and_(True, False), _if_then_else(False, zeros_diff_rows, max_row_clue), _if_then_else(False, max_col_clue, compare_blocks_rows)), _if_then_else(ge(compare_blocks_cols, max_row_clue), _if_then_else(False, zeros_diff_rows, ones_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_cols)))
ge(_if_then_else(le(_if_then_else(True, zeros_diff_rows, compare_blocks_cols), _if_then_else(True, zeros_diff_rows, ones_diff_cols)), _if_then_else(le(compare_blocks_cols, ones_diff_cols), _if_then_else(True, compare_blocks_rows, ones_diff_cols), _if_then_else(False, ones_diff_rows, compare_blocks_cols)), _if_then_else(and_(False, True), _if_then_else(True, 3, compare_blocks_rows), _if_then_else(True, zeros_diff_cols, ones_diff_rows))), _if_then_else(le(_if_then_else(False, zeros_diff_cols, zeros_diff_cols), _if_then_else(True, compare_blocks_rows, 4)), _if_then_else(True, _if_then_else(True, ones_diff_rows, zeros_diff_cols), _if_then_else(True, zeros_diff_cols, zeros_diff_rows)), _if_then_else(or_(False, True), _if_then_else(False, ones_diff_rows, zeros_diff_cols), _if_then_else(False, compare_blocks_cols, compare_blocks_cols))))
VAL TREES:
add(mul(ones_diff_cols, max_row_clue), mul(ones_diff_cols, compare_blocks_rows))
add(add(compare_blocks_rows, max_col_clue), add(1, compare_blocks_rows))
add(add(zeros_diff_cols, ones_diff_rows), add(max_col_clue, mul(ones_diff_rows, compare_blocks_rows)))
mul(add(compare_blocks_rows, max_col_clue), mul(zeros_diff_cols, max_col_clue))
mul(mul(2, zeros_diff_cols), add(2, compare_blocks_rows))
add(mul(max_row_clue, compare_blocks_cols), mul(compare_blocks_rows, ones_diff_cols))
COND TREES:
or_(and_(ge(_if_then_else(False, zeros_diff_cols, ones_diff_rows), _if_then_else(False, zeros_diff_cols, _if_then_else(False, compare_blocks_cols, zeros_diff_rows))), or_(le(compare_blocks_cols, compare_blocks_cols), or_(True, False))), and_(le(_if_then_else(True, ones_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_cols, 0)), le(_if_then_else(False, zeros_diff_rows, zeros_diff_rows), _if_then_else(True, compare_blocks_rows, compare_blocks_cols))))
or_(False, or_(or_(False, False), or_(True, True)))
and_(ge(_if_then_else(True, max_col_clue, _if_then_else(True, compare_blocks_rows, max_col_clue)), ones_diff_rows), or_(le(max_row_clue, 2), True))
or_(or_(False, False), and_(True, or_(True, True)))
ge(_if_then_else(and_(False, True), _if_then_else(False, zeros_diff_rows, 1), _if_then_else(or_(True, False), zeros_diff_cols, ones_diff_rows)), _if_then_else(and_(False, True), _if_then_else(True, max_row_clue, max_col_clue), _if_then_else(le(compare_blocks_rows, ones_diff_rows), max_row_clue, max_col_clue)))
VAL TREES:
mul(add(add(zeros_diff_rows, 2), mul(zeros_diff_cols, compare_blocks_cols)), mul(mul(max_col_clue, ones_diff_cols), mul(max_row_clue, zeros_diff_rows)))
add(add(3, compare_blocks_rows), add(ones_diff_cols, max_row_clue))
add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_rows, max_col_clue))
add(mul(max_row_clue, ones_diff_rows), mul(compare_blocks_rows, zeros_diff_cols))
mul(add(max_row_clue, zeros_diff_rows), mul(1, zeros_diff_cols))
add(mul(add(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_rows, compare_blocks_cols)), mul(add(ones_diff_rows, max_row_clue), add(max_row_clue, compare_blocks_rows)))
COND TREES:
and_(or_(le(2, ones_diff_rows), and_(True, False)), le(_if_then_else(False, compare_blocks_rows, compare_blocks_cols), _if_then_else(True, zeros_diff_rows, 4)))
and_(le(zeros_diff_cols, ones_diff_cols), ge(zeros_diff_cols, 2))
le(_if_then_else(False, compare_blocks_rows, max_row_clue), _if_then_else(ge(zeros_diff_rows, zeros_diff_rows), compare_blocks_rows, 4))
le(_if_then_else(and_(False, True), _if_then_else(False, zeros_diff_rows, max_row_clue), _if_then_else(False, max_col_clue, compare_blocks_rows)), _if_then_else(ge(compare_blocks_cols, max_row_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_cols)))
ge(_if_then_else(le(_if_then_else(True, zeros_diff_rows, compare_blocks_cols), _if_then_else(ge(zeros_diff_rows, ones_diff_cols), zeros_diff_rows, ones_diff_cols)), _if_then_else(le(compare_blocks_cols, ones_diff_cols), _if_then_else(True, compare_blocks_rows, ones_diff_cols), _if_then_else(False, ones_diff_rows, compare_blocks_cols)), _if_then_else(and_(False, True), _if_then_else(True, 3, compare_blocks_rows), _if_then_else(True, zeros_diff_cols, ones_diff_rows))), _if_then_else(False, _if_then_else(le(compare_blocks_rows, ones_diff_rows), _if_then_else(True, ones_diff_rows, zeros_diff_cols), _if_then_else(True, zeros_diff_cols, ones_diff_cols)), _if_then_else(or_(False, True), _if_then_else(False, ones_diff_rows, zeros_diff_cols), _if_then_else(False, compare_blocks_cols, compare_blocks_cols))))
VAL TREES:
add(mul(ones_diff_cols, max_row_clue), mul(ones_diff_cols, compare_blocks_rows))
add(add(compare_blocks_rows, max_col_clue), add(1, compare_blocks_rows))
add(add(zeros_diff_cols, ones_diff_rows), add(max_col_clue, mul(ones_diff_rows, compare_blocks_rows)))
mul(add(compare_blocks_rows, max_col_clue), mul(zeros_diff_cols, max_col_clue))
mul(mul(2, zeros_diff_cols), add(2, compare_blocks_rows))
add(mul(max_row_clue, compare_blocks_cols), mul(compare_blocks_rows, ones_diff_cols))
COND TREES:
or_(ge(zeros_diff_rows, _if_then_else(False, zeros_diff_cols, max_row_clue)), and_(False, False))
or_(or_(False, or_(True, True)), and_(le(zeros_diff_cols, ones_diff_cols), False))
or_(False, le(_if_then_else(False, 3, _if_then_else(False, compare_blocks_rows, max_row_clue)), 1))
and_(or_(and_(False, True), or_(False, False)), True)
ge(_if_then_else(or_(False, True), 3, ones_diff_cols), _if_then_else(or_(False, and_(True, le(_if_then_else(False, zeros_diff_cols, zeros_diff_cols), _if_then_else(True, compare_blocks_rows, 4)))), _if_then_else(True, max_col_clue, max_row_clue), _if_then_else(False, zeros_diff_rows, max_row_clue)))
VAL TREES:
add(add(zeros_diff_rows, add(ones_diff_rows, compare_blocks_rows)), mul(mul(max_col_clue, ones_diff_rows), mul(zeros_diff_cols, compare_blocks_rows)))
mul(mul(mul(compare_blocks_cols, max_col_clue), mul(compare_blocks_rows, max_row_clue)), add(add(zeros_diff_cols, zeros_diff_cols), add(compare_blocks_rows, ones_diff_rows)))
add(mul(compare_blocks_cols, compare_blocks_cols), mul(compare_blocks_rows, 0))
mul(add(compare_blocks_cols, compare_blocks_cols), mul(max_row_clue, compare_blocks_cols))
add(add(ones_diff_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))
mul(mul(mul(compare_blocks_cols, compare_blocks_cols), mul(max_col_clue, zeros_diff_rows)), mul(mul(compare_blocks_rows, max_row_clue), add(ones_diff_cols, max_row_clue)))
COND TREES:
le(_if_then_else(and_(False, or_(True, False)), _if_then_else(ge(zeros_diff_rows, zeros_diff_rows), _if_then_else(False, zeros_diff_cols, zeros_diff_cols), max_col_clue), ones_diff_rows), _if_then_else(False, _if_then_else(or_(True, False), compare_blocks_cols, zeros_diff_cols), _if_then_else(True, _if_then_else(True, 2, zeros_diff_cols), _if_then_else(False, max_col_clue, zeros_diff_cols))))
le(_if_then_else(ge(_if_then_else(False, 0, max_row_clue), _if_then_else(False, ones_diff_cols, ones_diff_rows)), _if_then_else(and_(False, True), _if_then_else(False, zeros_diff_cols, 4), _if_then_else(True, ones_diff_cols, ones_diff_rows)), _if_then_else(ge(4, max_col_clue), _if_then_else(False, max_row_clue, 2), _if_then_else(False, 1, 4))), _if_then_else(ge(_if_then_else(False, compare_blocks_rows, ones_diff_cols), _if_then_else(False, compare_blocks_rows, zeros_diff_rows)), _if_then_else(and_(False, False), _if_then_else(False, zeros_diff_rows, ones_diff_rows), _if_then_else(True, max_row_clue, ones_diff_rows)), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, compare_blocks_cols, zeros_diff_rows), _if_then_else(True, zeros_diff_cols, max_row_clue))))
or_(or_(ge(max_col_clue, compare_blocks_cols), False), le(_if_then_else(False, zeros_diff_cols, ones_diff_rows), _if_then_else(False, max_col_clue, compare_blocks_rows)))
le(_if_then_else(False, ones_diff_cols, compare_blocks_cols), _if_then_else(False, zeros_diff_rows, compare_blocks_rows))
and_(le(compare_blocks_rows, max_row_clue), True)
VAL TREES:
add(add(ones_diff_cols, zeros_diff_rows), mul(ones_diff_rows, ones_diff_cols))
mul(mul(mul(add(compare_blocks_rows, zeros_diff_cols), add(compare_blocks_cols, max_row_clue)), add(mul(max_col_clue, 4), add(zeros_diff_cols, ones_diff_cols))), mul(add(add(zeros_diff_rows, max_col_clue), mul(zeros_diff_rows, max_row_clue)), mul(mul(compare_blocks_cols, max_col_clue), add(1, max_col_clue))))
mul(mul(compare_blocks_rows, zeros_diff_cols), mul(mul(compare_blocks_rows, 3), zeros_diff_cols))
mul(add(max_col_clue, 3), add(compare_blocks_cols, zeros_diff_rows))
mul(mul(1, max_col_clue), mul(zeros_diff_cols, ones_diff_rows))
mul(add(4, mul(max_col_clue, max_col_clue)), mul(add(0, ones_diff_cols), compare_blocks_cols))
COND TREES:
or_(ge(zeros_diff_rows, zeros_diff_cols), and_(False, False))
or_(or_(False, True), and_(le(zeros_diff_cols, ones_diff_cols), False))
or_(ge(zeros_diff_rows, zeros_diff_rows), le(_if_then_else(False, compare_blocks_rows, max_row_clue), 1))
or_(and_(False, True), or_(False, False))
ge(_if_then_else(or_(False, True), 3, ones_diff_cols), _if_then_else(or_(False, False), _if_then_else(True, max_col_clue, max_row_clue), _if_then_else(False, zeros_diff_rows, max_row_clue)))
VAL TREES:
add(add(zeros_diff_rows, add(ones_diff_rows, compare_blocks_rows)), mul(mul(max_col_clue, ones_diff_rows), mul(zeros_diff_cols, compare_blocks_rows)))
mul(mul(mul(compare_blocks_cols, max_col_clue), mul(compare_blocks_rows, max_row_clue)), add(add(zeros_diff_cols, zeros_diff_cols), add(compare_blocks_rows, ones_diff_rows)))
add(mul(compare_blocks_cols, compare_blocks_cols), mul(compare_blocks_rows, 0))
mul(add(compare_blocks_cols, compare_blocks_cols), mul(max_row_clue, compare_blocks_cols))
add(add(ones_diff_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))
mul(mul(mul(compare_blocks_cols, compare_blocks_cols), mul(max_col_clue, zeros_diff_rows)), mul(mul(compare_blocks_rows, max_row_clue), add(ones_diff_cols, max_row_clue)))
COND TREES:
or_(and_(ge(_if_then_else(False, zeros_diff_cols, zeros_diff_rows), _if_then_else(False, zeros_diff_cols, zeros_diff_rows)), or_(le(zeros_diff_cols, compare_blocks_cols), or_(True, False))), and_(le(_if_then_else(True, ones_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_cols, 0)), le(_if_then_else(False, zeros_diff_rows, zeros_diff_rows), _if_then_else(True, compare_blocks_rows, compare_blocks_cols))))
or_(or_(False, False), or_(True, True))
and_(ge(_if_then_else(True, 1, _if_then_else(True, compare_blocks_rows, max_col_clue)), ones_diff_rows), le(_if_then_else(True, compare_blocks_cols, max_col_clue), 2))
or_(or_(False, False), and_(False, True))
ge(_if_then_else(and_(False, True), _if_then_else(False, zeros_diff_rows, 1), _if_then_else(True, _if_then_else(False, max_col_clue, max_row_clue), ones_diff_rows)), _if_then_else(and_(False, True), _if_then_else(True, max_row_clue, max_col_clue), _if_then_else(True, max_row_clue, max_col_clue)))
VAL TREES:
mul(add(add(zeros_diff_rows, 2), mul(zeros_diff_cols, compare_blocks_cols)), mul(mul(max_col_clue, ones_diff_cols), mul(max_row_clue, zeros_diff_rows)))
add(add(3, compare_blocks_rows), add(ones_diff_cols, max_row_clue))
add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_rows, max_col_clue))
add(mul(max_row_clue, ones_diff_rows), mul(compare_blocks_rows, zeros_diff_cols))
mul(add(max_row_clue, zeros_diff_rows), mul(1, zeros_diff_cols))
add(mul(add(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_rows, compare_blocks_cols)), mul(add(ones_diff_rows, max_row_clue), add(max_row_clue, compare_blocks_rows)))
COND TREES:
or_(ge(zeros_diff_rows, compare_blocks_cols), and_(False, False))
or_(or_(False, True), and_(False, ge(zeros_diff_cols, 2)))
or_(ge(zeros_diff_rows, max_col_clue), le(_if_then_else(True, compare_blocks_rows, max_col_clue), max_col_clue))
or_(and_(False, True), False)
ge(_if_then_else(or_(or_(False, True), or_(False, False)), 3, ones_diff_cols), _if_then_else(or_(False, False), zeros_diff_cols, _if_then_else(False, zeros_diff_rows, max_row_clue)))
VAL TREES:
add(add(zeros_diff_rows, add(add(ones_diff_rows, 1), compare_blocks_rows)), mul(mul(max_col_clue, ones_diff_rows), mul(zeros_diff_cols, compare_blocks_rows)))
mul(mul(mul(compare_blocks_cols, max_col_clue), mul(compare_blocks_rows, add(max_row_clue, max_row_clue))), add(add(zeros_diff_cols, zeros_diff_cols), add(compare_blocks_rows, ones_diff_rows)))
add(mul(compare_blocks_cols, compare_blocks_cols), mul(add(zeros_diff_rows, compare_blocks_rows), 0))
mul(add(compare_blocks_cols, compare_blocks_cols), mul(max_row_clue, mul(compare_blocks_cols, compare_blocks_rows)))
add(add(ones_diff_rows, add(max_row_clue, ones_diff_cols)), add(ones_diff_cols, ones_diff_rows))
mul(mul(mul(compare_blocks_cols, compare_blocks_cols), mul(max_col_clue, zeros_diff_rows)), mul(mul(mul(compare_blocks_rows, max_row_clue), add(ones_diff_cols, max_row_clue)), ones_diff_rows))
COND TREES:
le(_if_then_else(le(compare_blocks_rows, max_row_clue), ones_diff_rows, max_col_clue), _if_then_else(False, _if_then_else(True, compare_blocks_cols, compare_blocks_cols), _if_then_else(le(2, ones_diff_rows), max_row_clue, ones_diff_rows)))
or_(le(_if_then_else(True, compare_blocks_cols, max_row_clue), 2), ge(1, _if_then_else(True, max_row_clue, zeros_diff_cols)))
ge(_if_then_else(True, ones_diff_cols, max_row_clue), _if_then_else(False, ones_diff_rows, ones_diff_rows))
ge(_if_then_else(and_(True, False), _if_then_else(False, 3, compare_blocks_rows), _if_then_else(True, compare_blocks_rows, compare_blocks_rows)), _if_then_else(or_(True, True), _if_then_else(False, compare_blocks_rows, 4), _if_then_else(True, max_col_clue, 2)))
le(ones_diff_cols, _if_then_else(or_(False, True), _if_then_else(False, compare_blocks_rows, 4), _if_then_else(True, ones_diff_rows, zeros_diff_cols)))
VAL TREES:
mul(add(max_row_clue, compare_blocks_rows), add(zeros_diff_cols, max_col_clue))
add(add(mul(max_col_clue, max_row_clue), add(compare_blocks_cols, max_col_clue)), mul(add(ones_diff_cols, zeros_diff_cols), mul(max_row_clue, ones_diff_rows)))
add(add(add(add(max_col_clue, ones_diff_cols), add(zeros_diff_cols, compare_blocks_cols)), add(add(ones_diff_cols, compare_blocks_cols), add(zeros_diff_cols, compare_blocks_cols))), mul(mul(mul(compare_blocks_cols, compare_blocks_rows), add(ones_diff_rows, zeros_diff_cols)), mul(mul(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_cols, compare_blocks_cols))))
mul(mul(add(add(zeros_diff_rows, max_col_clue), mul(ones_diff_rows, max_row_clue)), add(mul(max_col_clue, max_row_clue), mul(zeros_diff_rows, zeros_diff_cols))), add(add(add(max_row_clue, max_col_clue), add(zeros_diff_rows, zeros_diff_cols)), add(add(compare_blocks_cols, ones_diff_rows), add(compare_blocks_rows, compare_blocks_cols))))
mul(add(ones_diff_cols, compare_blocks_cols), mul(max_row_clue, ones_diff_rows))
mul(mul(compare_blocks_cols, compare_blocks_rows), mul(compare_blocks_rows, zeros_diff_rows))
COND TREES:
and_(or_(False, and_(True, False)), le(_if_then_else(False, compare_blocks_rows, compare_blocks_cols), _if_then_else(True, zeros_diff_rows, 4)))
and_(le(zeros_diff_cols, ones_diff_cols), ge(zeros_diff_cols, compare_blocks_cols))
le(_if_then_else(False, compare_blocks_rows, _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(False, compare_blocks_rows, 4))
le(_if_then_else(and_(False, True), _if_then_else(False, zeros_diff_rows, max_row_clue), _if_then_else(False, max_col_clue, compare_blocks_rows)), _if_then_else(ge(compare_blocks_cols, max_row_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_cols)))
ge(_if_then_else(le(_if_then_else(True, zeros_diff_rows, compare_blocks_cols), _if_then_else(ge(zeros_diff_rows, ones_diff_cols), zeros_diff_rows, ones_diff_cols)), _if_then_else(le(compare_blocks_cols, ones_diff_cols), _if_then_else(True, compare_blocks_rows, ones_diff_cols), _if_then_else(False, ones_diff_rows, compare_blocks_cols)), _if_then_else(and_(False, True), _if_then_else(True, 3, compare_blocks_rows), _if_then_else(True, zeros_diff_cols, ones_diff_rows))), _if_then_else(le(_if_then_else(False, zeros_diff_cols, zeros_diff_cols), _if_then_else(True, compare_blocks_rows, 4)), _if_then_else(le(compare_blocks_rows, ones_diff_rows), _if_then_else(True, ones_diff_rows, zeros_diff_cols), _if_then_else(True, zeros_diff_cols, ones_diff_cols)), _if_then_else(or_(False, True), _if_then_else(False, ones_diff_rows, zeros_diff_cols), _if_then_else(False, compare_blocks_cols, compare_blocks_cols))))
VAL TREES:
add(mul(ones_diff_cols, max_row_clue), mul(ones_diff_cols, compare_blocks_rows))
add(add(compare_blocks_rows, max_col_clue), add(1, compare_blocks_rows))
add(add(zeros_diff_cols, ones_diff_rows), add(max_col_clue, mul(ones_diff_rows, compare_blocks_rows)))
mul(add(compare_blocks_rows, max_col_clue), mul(zeros_diff_cols, max_col_clue))
mul(mul(2, zeros_diff_cols), add(2, compare_blocks_rows))
add(mul(max_row_clue, compare_blocks_cols), mul(compare_blocks_rows, ones_diff_cols))
COND TREES:
and_(or_(le(2, ones_diff_rows), and_(True, False)), le(_if_then_else(False, compare_blocks_rows, compare_blocks_cols), _if_then_else(True, zeros_diff_rows, 4)))
and_(or_(False, True), ge(zeros_diff_cols, 2))
le(_if_then_else(le(_if_then_else(True, compare_blocks_rows, max_col_clue), 1), compare_blocks_rows, max_row_clue), _if_then_else(False, compare_blocks_rows, 4))
le(_if_then_else(and_(False, True), _if_then_else(False, zeros_diff_rows, max_row_clue), _if_then_else(False, max_col_clue, compare_blocks_rows)), _if_then_else(ge(compare_blocks_cols, max_row_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_cols)))
ge(_if_then_else(le(_if_then_else(True, zeros_diff_rows, compare_blocks_cols), _if_then_else(ge(zeros_diff_rows, ones_diff_cols), zeros_diff_rows, ones_diff_cols)), _if_then_else(le(compare_blocks_cols, ones_diff_cols), _if_then_else(True, compare_blocks_rows, ones_diff_cols), _if_then_else(False, ones_diff_rows, compare_blocks_cols)), _if_then_else(and_(False, or_(False, False)), _if_then_else(True, 3, compare_blocks_rows), _if_then_else(True, zeros_diff_cols, ones_diff_rows))), _if_then_else(le(_if_then_else(False, zeros_diff_cols, zeros_diff_cols), _if_then_else(True, compare_blocks_rows, 4)), _if_then_else(le(compare_blocks_rows, ones_diff_rows), _if_then_else(True, ones_diff_rows, zeros_diff_cols), _if_then_else(True, zeros_diff_cols, ones_diff_cols)), _if_then_else(or_(False, True), _if_then_else(False, ones_diff_rows, zeros_diff_cols), _if_then_else(False, compare_blocks_cols, compare_blocks_cols))))
VAL TREES:
add(mul(ones_diff_cols, max_row_clue), mul(ones_diff_cols, compare_blocks_rows))
add(add(compare_blocks_rows, max_col_clue), add(1, compare_blocks_rows))
add(add(zeros_diff_cols, ones_diff_rows), add(max_col_clue, mul(ones_diff_rows, compare_blocks_rows)))
mul(add(compare_blocks_rows, max_col_clue), mul(zeros_diff_cols, max_col_clue))
mul(mul(2, zeros_diff_cols), add(2, compare_blocks_rows))
add(mul(max_row_clue, compare_blocks_cols), mul(compare_blocks_rows, ones_diff_cols))
COND TREES:
or_(ge(zeros_diff_rows, zeros_diff_cols), and_(False, False))
or_(le(zeros_diff_cols, ones_diff_cols), and_(False, False))
or_(ge(zeros_diff_rows, zeros_diff_rows), False)
or_(and_(False, True), or_(False, False))
ge(_if_then_else(or_(False, True), 3, ones_diff_cols), _if_then_else(True, _if_then_else(False, max_col_clue, max_row_clue), _if_then_else(False, zeros_diff_rows, max_row_clue)))
VAL TREES:
add(add(zeros_diff_rows, add(ones_diff_rows, compare_blocks_rows)), mul(mul(max_col_clue, ones_diff_rows), mul(zeros_diff_cols, compare_blocks_rows)))
mul(mul(mul(compare_blocks_cols, max_col_clue), mul(compare_blocks_rows, max_row_clue)), add(add(zeros_diff_cols, zeros_diff_cols), add(compare_blocks_rows, ones_diff_rows)))
add(mul(compare_blocks_cols, compare_blocks_cols), mul(compare_blocks_rows, 0))
mul(add(compare_blocks_cols, compare_blocks_cols), mul(max_row_clue, compare_blocks_cols))
add(add(ones_diff_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))
mul(mul(mul(compare_blocks_cols, compare_blocks_cols), mul(max_col_clue, zeros_diff_rows)), mul(mul(compare_blocks_rows, max_row_clue), add(ones_diff_cols, max_row_clue)))


INFO:root:hof: COND TREES:
ge(_if_then_else(True, zeros_diff_rows, zeros_diff_rows), _if_then_else(False, 0, _if_then_else(False, zeros_diff_cols, compare_blocks_cols)))
le(_if_then_else(False, zeros_diff_cols, compare_blocks_cols), _if_then_else(False, _if_then_else(le(0, zeros_diff_rows), zeros_diff_cols, ones_diff_rows), 0))
ge(_if_then_else(False, zeros_diff_rows, max_col_clue), _if_then_else(False, zeros_diff_cols, zeros_diff_rows))
or_(le(_if_then_else(ge(ones_diff_cols, max_col_clue), _if_then_else(True, ones_diff_rows, 1), _if_then_else(False, ones_diff_rows, zeros_diff_cols)), _if_then_else(ge(max_col_clue, max_row_clue), _if_then_else(False, max_row_clue, max_col_clue), _if_then_else(False, zeros_diff_rows, zeros_diff_cols))), and_(or_(and_(False, True), le(0, zeros_diff_cols)), or_(le(compare_blocks_cols, ones_diff_rows), and_(True, True))))
ge(_if_then_else(True, 4, zeros_diff_cols), _if_then_else(ge(max_row_clue, compare_blocks_cols), 1, zeros_diff_rows))
VAL TREES:
add(add(4, zeros_diff_cols), mul(mul(add(ones_diff_rows, ones_diff_cols), max_row_clue), ones_diff_cols))
mul(mul(compare_blocks_rows, zeros_diff_rows), add(zeros_diff_cols, ones_diff_rows))
add(add(add(zeros_diff_cols, max_col_clue), mul(4, zeros_diff_rows)), mul(add(compare_blocks_rows, max_row_clue), add(zeros_diff_cols, zeros_diff_rows)))
mul(add(mul(mul(0, ones_diff_rows), add(compare_blocks_rows, zeros_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_cols), mul(ones_diff_cols, zeros_diff_rows))), mul(mul(mul(zeros_diff_cols, max_col_clue), mul(zeros_diff_rows, max_col_clue)), add(mul(0, max_row_clue), add(max_row_clue, 0))))
add(add(compare_blocks_cols, add(max_col_clue, max_col_clue)), mul(mul(4, max_col_clue), mul(max_row_clue, ones_diff_cols)))
mul(add(max_col_clue, ones_diff_cols), mul(compare_blocks_cols, compare_blocks_rows))


INFO:root:stats: {'fitness': <deap.tools.support.Statistics object at 0x000001EF5C284E10>}

DEBUG:matplotlib.axes._base:update_title_pos
DEBUG:matplotlib.font_manager:findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\Itay Gabbay\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
DEBUG:matplotlib.axes._base:update_title_pos
DEBUG:matplotlib.axes._base:update_title_pos
DEBUG:matplotlib.axes._base:update_title_pos
DEBUG:matplotlib.axes._base:update_title_pos
DEBUG:matplotlib.axes._base:update_title_pos
