INFO:root:

*******STARTING!!!******


INFO:root:

*******Configuration******


INFO:root:# NUM_ROWS = 20


INFO:root:NUM_ROWS = 5


INFO:root:# NUM_COLS = 20


INFO:root:NUM_COLS = 5


INFO:root:empty_in_split = '\xa0'


INFO:root:convert_to_sat = True


INFO:root:pickle_unsolved_file_path = 'data/%dx%d_nonograms.pkl' % (NUM_ROWS, NUM_COLS)


INFO:root:pickle_solved_file_path = 'data/%dx%d_nonograms_solved.pkl' % (NUM_ROWS, NUM_COLS)


INFO:root:pickle_row_options_path = 'data/%dx%d_row_options.pkl' % (NUM_ROWS, NUM_ROWS)


INFO:root:should_run_in_parallel = True


INFO:root:print_individual_fitness = True


INFO:root:


INFO:root:NUM_COND_TREES = 5


INFO:root:NUM_VAL_TREES = NUM_COND_TREES + 1


INFO:root:prob_crossover_global = 0.7  # global probability for cx


INFO:root:prob_crossover_individual_cond = 0.8  # probability to cx a specific cond tree in an individual


INFO:root:prob_crossover_individual_val = 0.8  # probability to cx a specific cond tree in an individual


INFO:root:prob_mutate_global = 0.3


INFO:root:prob_mutate_individual_cond = 0.7


INFO:root:prob_mutate_individual_val = 0.7


INFO:root:


INFO:root:points_correct_box = 5


INFO:root:points_incorrect_box = 0


INFO:root:# points_incorrect_box = -2


INFO:root:pop_size = 1


INFO:root:hof_size = 1


INFO:root:# num_gen = 40


INFO:root:num_gen = 10


INFO:root:train_size = 1


INFO:root:

*******DONE!!!******


INFO:root:run time: 0 sec

INFO:root:max possible fitness for the nonograms ran: %d

INFO:root:log:    	      	              fitness              	                size               
   	      	-----------------------------------	-----------------------------------
gen	nevals	avg	max	min	size	std	avg	max	min	size	std
0  	1     	35 	35 	35 	1   	0  	6  	6  	6  	1   	0  
1  	0     	35 	35 	35 	1   	0  	6  	6  	6  	1   	0  
2  	1     	40 	40 	40 	1   	0  	9  	9  	9  	1   	0  
3  	1     	25 	25 	25 	1   	0  	10 	10 	10 	1   	0  
4  	0     	25 	25 	25 	1   	0  	10 	10 	10 	1   	0  
5  	1     	25 	25 	25 	1   	0  	12 	12 	12 	1   	0  
6  	0     	25 	25 	25 	1   	0  	12 	12 	12 	1   	0  
7  	0     	25 	25 	25 	1   	0  	12 	12 	12 	1   	0  
8  	0     	25 	25 	25 	1   	0  	12 	12 	12 	1   	0  
9  	0     	25 	25 	25 	1   	0  	12 	12 	12 	1   	0  
10 	1     	25 	25 	25 	1   	0  	13 	13 	13 	1   	0  

INFO:root:pop: COND TREES:
le(_if_then_else(or_(le(_if_then_else(or_(False, True), _if_then_else(True, ones_diff_cols, zeros_diff_cols), _if_then_else(True, max_col_clue, compare_blocks_rows)), 2), ge(_if_then_else(True, 1, zeros_diff_rows), _if_then_else(True, ones_diff_rows, zeros_diff_rows))), ones_diff_rows, compare_blocks_cols), _if_then_else(False, zeros_diff_cols, 1))
le(_if_then_else(and_(True, True), 0, zeros_diff_cols), _if_then_else(True, _if_then_else(ge(_if_then_else(le(max_row_clue, ones_diff_rows), _if_then_else(True, 4, 3), _if_then_else(False, 2, compare_blocks_cols)), _if_then_else(ge(3, zeros_diff_cols), _if_then_else(True, 0, max_col_clue), _if_then_else(True, 50, max_col_clue))), _if_then_else(ge(_if_then_else(True, 0, 1), _if_then_else(True, ones_diff_cols, zeros_diff_rows)), _if_then_else(or_(True, True), _if_then_else(False, compare_blocks_cols, 4), _if_then_else(True, 1, 2)), _if_then_else(ge(_if_then_else(True, ones_diff_cols, ones_diff_cols), _if_then_else(True, max_row_clue, 91)), _if_then_else(True, ones_diff_cols, ones_diff_cols), _if_then_else(True, zeros_diff_cols, -17))), _if_then_else(or_(le(0, 3), or_(True, True)), _if_then_else(or_(True, True), _if_then_else(True, 2, -77), _if_then_else(False, 2, compare_blocks_cols)), _if_then_else(ge(2, 4), _if_then_else(False, 2, compare_blocks_cols), _if_then_else(True, compare_blocks_rows, compare_blocks_cols)))), 3))
le(_if_then_else(and_(True, False), _if_then_else(False, 1, 3), _if_then_else(True, zeros_diff_rows, 1)), _if_then_else(ge(compare_blocks_rows, max_row_clue), _if_then_else(True, _if_then_else(le(ones_diff_rows, ones_diff_rows), _if_then_else(False, max_row_clue, ones_diff_rows), _if_then_else(True, ones_diff_rows, 1)), compare_blocks_cols), _if_then_else(ge(_if_then_else(or_(or_(True, True), and_(False, False)), _if_then_else(ge(2, 2), _if_then_else(True, ones_diff_cols, ones_diff_rows), _if_then_else(True, 4, 2)), _if_then_else(and_(True, True), _if_then_else(True, ones_diff_rows, ones_diff_rows), _if_then_else(False, zeros_diff_rows, compare_blocks_cols))), _if_then_else(le(_if_then_else(True, zeros_diff_cols, 0), _if_then_else(False, compare_blocks_cols, zeros_diff_cols)), _if_then_else(and_(True, False), _if_then_else(False, compare_blocks_rows, ones_diff_rows), _if_then_else(False, compare_blocks_cols, 0)), _if_then_else(le(ones_diff_rows, 4), _if_then_else(False, 3, 32), _if_then_else(True, 1, max_col_clue)))), ones_diff_cols, ones_diff_cols)))
or_(le(_if_then_else(ge(_if_then_else(True, 1, ones_diff_rows), _if_then_else(False, compare_blocks_rows, compare_blocks_rows)), _if_then_else(and_(False, False), _if_then_else(True, max_col_clue, 1), _if_then_else(True, 1, 0)), _if_then_else(and_(False, False), _if_then_else(False, 0, 2), _if_then_else(False, ones_diff_rows, zeros_diff_rows))), _if_then_else(and_(ge(zeros_diff_rows, 2), and_(True, True)), _if_then_else(le(zeros_diff_cols, 4), _if_then_else(False, -73, 2), _if_then_else(True, compare_blocks_cols, zeros_diff_rows)), _if_then_else(or_(True, False), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(True, 0, 2)))), and_(le(_if_then_else(or_(False, True), _if_then_else(False, ones_diff_cols, compare_blocks_rows), _if_then_else(True, zeros_diff_rows, 0)), _if_then_else(ge(-92, max_col_clue), _if_then_else(False, 3, 1), _if_then_else(True, 3, 0))), ge(_if_then_else(or_(False, le(_if_then_else(True, _if_then_else(True, 4, 2), _if_then_else(True, zeros_diff_rows, 2)), _if_then_else(True, 4, _if_then_else(ge(_if_then_else(True, max_col_clue, ones_diff_cols), ones_diff_cols), max_row_clue, 4)))), _if_then_else(True, 3, compare_blocks_rows), _if_then_else(True, max_col_clue, ones_diff_cols)), _if_then_else(ge(compare_blocks_rows, zeros_diff_rows), _if_then_else(False, compare_blocks_cols, compare_blocks_cols), _if_then_else(False, max_row_clue, 3)))))
and_(le(_if_then_else(ge(_if_then_else(True, _if_then_else(and_(le(_if_then_else(False, 0, 4), _if_then_else(False, -38, 1)), ge(_if_then_else(False, ones_diff_rows, ones_diff_cols), _if_then_else(False, ones_diff_rows, zeros_diff_cols))), _if_then_else(or_(le(zeros_diff_rows, zeros_diff_rows), le(ones_diff_rows, compare_blocks_cols)), _if_then_else(ge(1, max_row_clue), _if_then_else(True, 33, 4), _if_then_else(True, 0, 0)), _if_then_else(and_(False, False), _if_then_else(False, 1, 2), _if_then_else(True, 0, zeros_diff_rows))), _if_then_else(and_(and_(True, False), ge(ones_diff_cols, zeros_diff_rows)), _if_then_else(ge(4, compare_blocks_rows), _if_then_else(False, 2, 72), _if_then_else(True, max_row_clue, 2)), _if_then_else(or_(False, True), _if_then_else(True, ones_diff_cols, ones_diff_cols), _if_then_else(False, zeros_diff_rows, ones_diff_rows)))), zeros_diff_cols), _if_then_else(le(68, ones_diff_cols), 0, _if_then_else(False, ones_diff_cols, zeros_diff_cols))), _if_then_else(True, max_row_clue, max_col_clue), _if_then_else(False, 3, 3)), 3), and_(True, True))
VAL TREES:
mul(mul(add(add(ones_diff_rows, zeros_diff_rows), mul(19, -1)), add(mul(zeros_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols))), mul(add(mul(ones_diff_rows, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), add(mul(mul(zeros_diff_rows, compare_blocks_cols), -49), mul(37, compare_blocks_cols))))
add(mul(add(mul(add(add(add(mul(ones_diff_rows, 90), add(ones_diff_cols, compare_blocks_cols)), add(mul(zeros_diff_cols, ones_diff_rows), mul(compare_blocks_rows, ones_diff_rows))), add(mul(add(compare_blocks_rows, zeros_diff_cols), mul(-71, ones_diff_rows)), add(add(ones_diff_cols, ones_diff_rows), add(ones_diff_cols, zeros_diff_cols)))), add(mul(mul(mul(ones_diff_cols, compare_blocks_rows), add(zeros_diff_cols, zeros_diff_cols)), add(add(compare_blocks_cols, zeros_diff_rows), mul(26, ones_diff_rows))), mul(mul(mul(compare_blocks_rows, compare_blocks_rows), mul(zeros_diff_cols, ones_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_cols), add(compare_blocks_cols, zeros_diff_rows))))), 96), add(zeros_diff_cols, zeros_diff_cols)), add(mul(compare_blocks_rows, zeros_diff_rows), mul(-5, -70)))
mul(mul(mul(add(compare_blocks_cols, zeros_diff_cols), mul(compare_blocks_rows, compare_blocks_cols)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(add(zeros_diff_rows, ones_diff_cols), mul(zeros_diff_cols, -76)))), add(mul(mul(compare_blocks_rows, ones_diff_rows), add(-45, compare_blocks_rows)), mul(mul(zeros_diff_cols, ones_diff_rows), add(zeros_diff_rows, compare_blocks_rows))))
add(add(mul(add(mul(zeros_diff_cols, compare_blocks_rows), add(compare_blocks_cols, compare_blocks_cols)), add(mul(-75, -95), add(zeros_diff_cols, ones_diff_cols))), ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols))
mul(mul(mul(add(mul(mul(add(zeros_diff_cols, zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), mul(ones_diff_cols, zeros_diff_rows))), mul(compare_blocks_cols, compare_blocks_cols)), mul(mul(compare_blocks_cols, ones_diff_cols), mul(19, zeros_diff_rows))), mul(mul(add(ones_diff_cols, zeros_diff_cols), add(ones_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, compare_blocks_cols), add(compare_blocks_cols, -4)))), add(mul(mul(add(-61, ones_diff_cols), add(ones_diff_cols, 50)), add(mul(compare_blocks_rows, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols))), add(mul(add(zeros_diff_cols, -57), add(compare_blocks_cols, compare_blocks_cols)), mul(add(zeros_diff_cols, zeros_diff_rows), add(compare_blocks_cols, zeros_diff_cols)))))
add(add(add(add(add(zeros_diff_cols, 16), mul(ones_diff_rows, zeros_diff_cols)), mul(add(zeros_diff_rows, zeros_diff_rows), add(ones_diff_cols, ones_diff_cols))), add(add(mul(zeros_diff_rows, zeros_diff_rows), add(-32, ones_diff_cols)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_rows, zeros_diff_rows)))), add(mul(mul(mul(zeros_diff_cols, zeros_diff_cols), mul(ones_diff_rows, zeros_diff_rows)), mul(mul(compare_blocks_rows, compare_blocks_cols), add(25, ones_diff_rows))), add(mul(mul(-25, compare_blocks_cols), mul(mul(mul(zeros_diff_rows, ones_diff_rows), add(compare_blocks_cols, compare_blocks_rows)), zeros_diff_rows)), mul(add(-27, ones_diff_cols), add(compare_blocks_cols, zeros_diff_cols)))))


INFO:root:hof: COND TREES:
le(_if_then_else(False, ones_diff_rows, compare_blocks_cols), _if_then_else(False, zeros_diff_cols, 1))
le(_if_then_else(and_(True, True), 0, zeros_diff_cols), _if_then_else(True, _if_then_else(True, max_row_clue, max_col_clue), 3))
le(_if_then_else(and_(True, False), _if_then_else(False, 1, 3), _if_then_else(True, zeros_diff_rows, 1)), _if_then_else(ge(compare_blocks_rows, max_row_clue), _if_then_else(True, ones_diff_cols, compare_blocks_cols), _if_then_else(False, ones_diff_cols, ones_diff_cols)))
or_(le(_if_then_else(ge(_if_then_else(True, 1, ones_diff_rows), _if_then_else(False, compare_blocks_rows, compare_blocks_rows)), _if_then_else(and_(False, False), _if_then_else(True, max_col_clue, 1), _if_then_else(True, 1, 0)), _if_then_else(and_(False, False), _if_then_else(False, 0, 2), _if_then_else(False, ones_diff_rows, zeros_diff_rows))), _if_then_else(and_(ge(zeros_diff_rows, 2), and_(True, True)), _if_then_else(le(zeros_diff_cols, 4), _if_then_else(False, -73, 2), _if_then_else(True, compare_blocks_cols, zeros_diff_rows)), _if_then_else(or_(True, False), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(True, 0, 2)))), and_(le(_if_then_else(or_(False, True), _if_then_else(False, ones_diff_cols, compare_blocks_rows), _if_then_else(True, zeros_diff_rows, 0)), _if_then_else(ge(-92, max_col_clue), _if_then_else(False, 3, 1), _if_then_else(True, 3, 0))), ge(_if_then_else(or_(False, True), _if_then_else(True, 3, compare_blocks_rows), _if_then_else(True, max_col_clue, ones_diff_cols)), _if_then_else(ge(compare_blocks_rows, zeros_diff_rows), _if_then_else(False, compare_blocks_cols, compare_blocks_cols), _if_then_else(False, max_row_clue, 3)))))
and_(le(max_col_clue, 3), and_(True, True))
VAL TREES:
mul(mul(add(add(ones_diff_rows, zeros_diff_rows), mul(19, -1)), add(mul(zeros_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols))), mul(add(mul(ones_diff_rows, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(ones_diff_cols, ones_diff_cols), mul(compare_blocks_rows, zeros_diff_rows))))
add(mul(add(ones_diff_rows, 96), add(zeros_diff_cols, zeros_diff_cols)), add(mul(compare_blocks_rows, zeros_diff_rows), mul(-5, -70)))
mul(mul(mul(add(compare_blocks_cols, zeros_diff_cols), mul(compare_blocks_rows, compare_blocks_cols)), mul(mul(compare_blocks_cols, zeros_diff_cols), add(ones_diff_rows, zeros_diff_rows))), add(mul(mul(compare_blocks_rows, ones_diff_rows), add(-45, compare_blocks_rows)), mul(mul(zeros_diff_cols, ones_diff_rows), add(zeros_diff_rows, compare_blocks_rows))))
add(add(compare_blocks_rows, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols))
mul(mul(mul(add(mul(zeros_diff_cols, zeros_diff_cols), mul(compare_blocks_cols, compare_blocks_cols)), mul(mul(compare_blocks_cols, ones_diff_cols), mul(19, zeros_diff_rows))), mul(mul(add(ones_diff_cols, zeros_diff_cols), add(ones_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, compare_blocks_cols), add(compare_blocks_cols, -4)))), add(mul(mul(add(-61, ones_diff_cols), add(ones_diff_cols, 50)), add(mul(compare_blocks_rows, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols))), add(mul(add(zeros_diff_cols, -57), add(compare_blocks_cols, compare_blocks_cols)), mul(add(zeros_diff_cols, zeros_diff_rows), add(compare_blocks_cols, zeros_diff_cols)))))
add(add(add(add(add(zeros_diff_cols, 16), mul(ones_diff_rows, zeros_diff_cols)), mul(add(zeros_diff_rows, zeros_diff_rows), add(ones_diff_cols, ones_diff_cols))), add(add(mul(zeros_diff_rows, zeros_diff_rows), add(-32, ones_diff_cols)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_rows, zeros_diff_rows)))), add(mul(mul(mul(zeros_diff_cols, zeros_diff_cols), mul(ones_diff_rows, zeros_diff_rows)), mul(mul(compare_blocks_rows, compare_blocks_cols), add(25, ones_diff_rows))), add(mul(mul(-25, compare_blocks_cols), mul(ones_diff_rows, zeros_diff_rows)), mul(add(-27, ones_diff_cols), add(compare_blocks_cols, zeros_diff_cols)))))


INFO:root:stats: {'fitness': <deap.tools.support.Statistics object at 0x000001B4BA849BE0>, 'size': <deap.tools.support.Statistics object at 0x000001B4BA849CC0>}

