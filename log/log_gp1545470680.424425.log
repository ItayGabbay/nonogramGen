INFO:root:

*******STARTING!!!******


INFO:root:

*******Configuration******


INFO:root:# NUM_ROWS = 20


INFO:root:NUM_ROWS = 5


INFO:root:# NUM_COLS = 20


INFO:root:NUM_COLS = 5


INFO:root:empty_in_split = '\xa0'


INFO:root:convert_to_sat = True


INFO:root:pickle_unsolved_file_path = 'data/%dx%d_nonograms.pkl' % (NUM_ROWS, NUM_COLS)


INFO:root:pickle_solved_file_path = 'data/%dx%d_nonograms_solved.pkl' % (NUM_ROWS, NUM_COLS)


INFO:root:pickle_row_options_path = 'data/%dx%d_row_options.pkl' % (NUM_ROWS, NUM_ROWS)


INFO:root:should_run_in_parallel = True


INFO:root:print_individual_fitness = False


INFO:root:


INFO:root:NUM_COND_TREES = 5


INFO:root:NUM_VAL_TREES = NUM_COND_TREES + 1


INFO:root:prob_crossover_global = 0.7  # global probability for cx


INFO:root:prob_crossover_individual_cond = 0.8  # probability to cx a specific cond tree in an individual


INFO:root:prob_crossover_individual_val = 0.8  # probability to cx a specific cond tree in an individual


INFO:root:prob_mutate_global = 0.3


INFO:root:prob_mutate_individual_cond = 0.7


INFO:root:prob_mutate_individual_val = 0.7


INFO:root:


INFO:root:points_correct_box = 5


INFO:root:points_incorrect_box = 0


INFO:root:# points_incorrect_box = -2


INFO:root:pop_size = 1


INFO:root:hof_size = 1


INFO:root:# num_gen = 40


INFO:root:num_gen = 10


INFO:root:train_size = 1


INFO:root:

*******DONE!!!******


INFO:root:run time: 0 sec

INFO:root:max possible fitness for the nonograms ran: %d

INFO:root:log:    	      	              fitness              	                size               
   	      	-----------------------------------	-----------------------------------
gen	nevals	avg  	max  	min  	size	std	avg	max	min	size	std
0  	1     	0.656	0.656	0.656	1   	0  	6  	6  	6  	1   	0  
1  	0     	0.656	0.656	0.656	1   	0  	6  	6  	6  	1   	0  
2  	0     	0.656	0.656	0.656	1   	0  	6  	6  	6  	1   	0  
3  	0     	0.656	0.656	0.656	1   	0  	6  	6  	6  	1   	0  
4  	0     	0.656	0.656	0.656	1   	0  	6  	6  	6  	1   	0  
5  	1     	0.656	0.656	0.656	1   	0  	8  	8  	8  	1   	0  
6  	0     	0.656	0.656	0.656	1   	0  	8  	8  	8  	1   	0  
7  	1     	0.656	0.656	0.656	1   	0  	8  	8  	8  	1   	0  
8  	0     	0.656	0.656	0.656	1   	0  	8  	8  	8  	1   	0  
9  	1     	0.656	0.656	0.656	1   	0  	9  	9  	9  	1   	0  
10 	0     	0.656	0.656	0.656	1   	0  	9  	9  	9  	1   	0  

INFO:root:pop: COND TREES:
and_(ge(_if_then_else(or_(le(2, 4), or_(False, False)), _if_then_else(or_(False, False), _if_then_else(True, compare_blocks_rows, 77), _if_then_else(False, 1, compare_blocks_cols)), _if_then_else(ge(max_col_clue, 1), _if_then_else(True, max_row_clue, compare_blocks_rows), _if_then_else(True, zeros_diff_rows, compare_blocks_cols))), _if_then_else(or_(or_(False, True), or_(False, False)), _if_then_else(or_(False, True), _if_then_else(True, zeros_diff_rows, zeros_diff_rows), _if_then_else(False, 4, zeros_diff_cols)), _if_then_else(ge(3, max_col_clue), _if_then_else(False, 4, zeros_diff_rows), _if_then_else(True, 5, -10)))), and_(or_(and_(le(-3, 2), le(zeros_diff_cols, compare_blocks_cols)), and_(and_(True, True), ge(77, ones_diff_rows))), or_(le(_if_then_else(ge(compare_blocks_cols, max_col_clue), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(True, 3, compare_blocks_cols)), _if_then_else(le(_if_then_else(True, 4, 4), _if_then_else(True, 1, 19)), _if_then_else(True, zeros_diff_cols, ones_diff_rows), _if_then_else(False, zeros_diff_cols, zeros_diff_rows))), le(_if_then_else(le(4, ones_diff_cols), _if_then_else(True, max_row_clue, -96), _if_then_else(False, max_col_clue, max_col_clue)), _if_then_else(le(max_col_clue, 3), _if_then_else(False, ones_diff_cols, compare_blocks_rows), _if_then_else(False, 3, 3))))))
ge(_if_then_else(and_(and_(le(1, max_row_clue), or_(False, True)), or_(or_(True, True), and_(True, True))), _if_then_else(le(_if_then_else(ge(ones_diff_rows, -78), _if_then_else(True, max_col_clue, _if_then_else(True, _if_then_else(False, 1, 3), _if_then_else(False, _if_then_else(True, _if_then_else(True, compare_blocks_cols, zeros_diff_rows), ones_diff_cols), 0))), ones_diff_cols), 1), _if_then_else(le(2, compare_blocks_cols), _if_then_else(False, compare_blocks_rows, max_col_clue), _if_then_else(False, zeros_diff_rows, zeros_diff_cols)), _if_then_else(and_(True, True), _if_then_else(False, 4, max_row_clue), _if_then_else(False, ones_diff_rows, ones_diff_rows))), _if_then_else(and_(and_(False, True), le(compare_blocks_cols, zeros_diff_cols)), _if_then_else(and_(False, False), _if_then_else(True, compare_blocks_cols, 0), _if_then_else(False, compare_blocks_rows, 4)), _if_then_else(and_(False, True), _if_then_else(False, 4, max_row_clue), _if_then_else(False, compare_blocks_rows, 3)))), _if_then_else(le(_if_then_else(le(compare_blocks_cols, compare_blocks_rows), _if_then_else(True, max_row_clue, compare_blocks_cols), _if_then_else(and_(False, False), 2, 3)), _if_then_else(ge(zeros_diff_cols, compare_blocks_rows), _if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(False, -69, 4))), _if_then_else(and_(ge(4, max_col_clue), ge(zeros_diff_cols, 3)), _if_then_else(le(max_row_clue, 4), _if_then_else(True, zeros_diff_cols, zeros_diff_rows), _if_then_else(True, 0, 4)), _if_then_else(and_(True, True), _if_then_else(False, zeros_diff_cols, ones_diff_rows), _if_then_else(True, ones_diff_rows, 3))), _if_then_else(ge(_if_then_else(False, compare_blocks_rows, zeros_diff_rows), _if_then_else(True, 2, 3)), _if_then_else(or_(False, True), _if_then_else(True, 1, max_col_clue), _if_then_else(False, zeros_diff_rows, compare_blocks_rows)), _if_then_else(le(0, max_col_clue), _if_then_else(True, zeros_diff_cols, zeros_diff_rows), _if_then_else(False, compare_blocks_cols, 4)))))
ge(_if_then_else(ge(_if_then_else(or_(True, False), _if_then_else(True, compare_blocks_cols, ones_diff_rows), _if_then_else(True, ones_diff_rows, 0)), _if_then_else(ge(-70, 1), _if_then_else(True, zeros_diff_cols, 1), _if_then_else(True, ones_diff_rows, 0))), _if_then_else(ge(_if_then_else(False, zeros_diff_rows, ones_diff_cols), _if_then_else(False, -89, max_row_clue)), _if_then_else(and_(True, False), _if_then_else(False, ones_diff_cols, compare_blocks_cols), _if_then_else(False, 4, compare_blocks_rows)), _if_then_else(or_(False, True), _if_then_else(False, compare_blocks_rows, ones_diff_rows), _if_then_else(True, 1, 2))), _if_then_else(and_(ge(max_col_clue, zeros_diff_rows), le(0, 0)), _if_then_else(and_(True, True), _if_then_else(True, max_col_clue, 0), _if_then_else(False, zeros_diff_cols, zeros_diff_cols)), _if_then_else(and_(True, True), _if_then_else(True, compare_blocks_rows, 96), _if_then_else(False, compare_blocks_rows, 0)))), _if_then_else(or_(ge(_if_then_else(True, ones_diff_cols, _if_then_else(le(ones_diff_cols, ones_diff_cols), _if_then_else(False, zeros_diff_rows, max_col_clue), _if_then_else(True, 4, 4))), _if_then_else(True, zeros_diff_cols, 4)), or_(le(1, ones_diff_rows), ge(max_col_clue, 3))), _if_then_else(or_(or_(False, True), or_(True, False)), _if_then_else(le(compare_blocks_rows, zeros_diff_rows), _if_then_else(False, zeros_diff_rows, ones_diff_cols), _if_then_else(False, max_col_clue, 2)), _if_then_else(le(4, 1), _if_then_else(False, 0, 2), _if_then_else(False, zeros_diff_rows, zeros_diff_cols))), _if_then_else(and_(or_(False, False), le(compare_blocks_rows, zeros_diff_cols)), _if_then_else(or_(True, True), _if_then_else(True, compare_blocks_rows, 0), _if_then_else(False, 1, max_col_clue)), _if_then_else(ge(zeros_diff_cols, max_col_clue), _if_then_else(True, ones_diff_rows, zeros_diff_rows), _if_then_else(True, ones_diff_cols, compare_blocks_rows)))))
or_(ge(_if_then_else(False, compare_blocks_rows, 0), _if_then_else(True, 3, -95)), ge(_if_then_else(True, zeros_diff_rows, zeros_diff_cols), _if_then_else(and_(ge(_if_then_else(True, 0, 4), _if_then_else(True, max_col_clue, zeros_diff_rows)), and_(and_(False, False), ge(32, _if_then_else(True, 10, max_row_clue)))), 4, max_col_clue)))
and_(or_(False, ge(4, compare_blocks_rows)), or_(ge(_if_then_else(True, ones_diff_cols, ones_diff_rows), _if_then_else(False, compare_blocks_rows, ones_diff_cols)), ge(_if_then_else(False, zeros_diff_cols, 3), _if_then_else(True, zeros_diff_rows, zeros_diff_rows))))
VAL TREES:
add(mul(zeros_diff_rows, ones_diff_rows), add(zeros_diff_rows, -31))
mul(zeros_diff_rows, -12)
add(compare_blocks_cols, mul(mul(compare_blocks_cols, ones_diff_rows), compare_blocks_rows))
add(mul(zeros_diff_cols, compare_blocks_cols), -38)
mul(add(mul(-35, compare_blocks_cols), add(zeros_diff_cols, compare_blocks_rows)), ones_diff_rows)
mul(add(add(mul(add(zeros_diff_rows, zeros_diff_cols), mul(ones_diff_cols, compare_blocks_rows)), add(mul(compare_blocks_cols, ones_diff_cols), mul(zeros_diff_rows, zeros_diff_cols))), mul(add(add(79, zeros_diff_rows), add(ones_diff_cols, compare_blocks_cols)), mul(add(ones_diff_rows, compare_blocks_cols), mul(ones_diff_rows, 46)))), add(add(add(mul(zeros_diff_rows, 45), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, zeros_diff_cols), mul(ones_diff_rows, compare_blocks_rows))), add(mul(mul(zeros_diff_rows, zeros_diff_cols), add(zeros_diff_rows, compare_blocks_cols)), mul(add(ones_diff_rows, zeros_diff_rows), mul(ones_diff_rows, compare_blocks_rows)))))


INFO:root:hof: COND TREES:
and_(ge(_if_then_else(or_(le(2, 4), or_(False, False)), _if_then_else(or_(False, False), _if_then_else(True, compare_blocks_rows, 77), _if_then_else(False, 1, compare_blocks_cols)), _if_then_else(ge(max_col_clue, 1), _if_then_else(True, max_row_clue, compare_blocks_rows), _if_then_else(True, zeros_diff_rows, compare_blocks_cols))), _if_then_else(or_(or_(False, True), or_(False, False)), _if_then_else(or_(False, True), _if_then_else(True, zeros_diff_rows, zeros_diff_rows), _if_then_else(False, 4, zeros_diff_cols)), _if_then_else(ge(3, max_col_clue), _if_then_else(False, 4, zeros_diff_rows), _if_then_else(True, 5, -10)))), and_(or_(and_(le(-3, 2), le(zeros_diff_cols, compare_blocks_cols)), and_(and_(True, True), ge(77, ones_diff_rows))), ge(_if_then_else(ge(zeros_diff_cols, ones_diff_rows), _if_then_else(True, 2, compare_blocks_cols), _if_then_else(True, zeros_diff_cols, 3)), _if_then_else(le(max_row_clue, ones_diff_cols), _if_then_else(False, 3, compare_blocks_cols), _if_then_else(False, zeros_diff_cols, 0)))))
ge(_if_then_else(and_(and_(le(1, max_row_clue), or_(False, True)), or_(or_(True, True), and_(True, True))), _if_then_else(le(_if_then_else(True, zeros_diff_rows, zeros_diff_rows), _if_then_else(False, 2, compare_blocks_rows)), _if_then_else(le(2, compare_blocks_cols), _if_then_else(False, compare_blocks_rows, max_col_clue), _if_then_else(False, zeros_diff_rows, zeros_diff_cols)), _if_then_else(and_(True, True), _if_then_else(False, 4, max_row_clue), _if_then_else(False, ones_diff_rows, ones_diff_rows))), _if_then_else(and_(and_(False, True), le(compare_blocks_cols, zeros_diff_cols)), _if_then_else(and_(False, False), _if_then_else(True, compare_blocks_cols, 0), _if_then_else(False, compare_blocks_rows, 4)), _if_then_else(and_(False, True), _if_then_else(False, 4, max_row_clue), _if_then_else(False, compare_blocks_rows, 3)))), _if_then_else(le(_if_then_else(le(compare_blocks_cols, compare_blocks_rows), _if_then_else(True, max_row_clue, compare_blocks_cols), _if_then_else(False, 2, 3)), _if_then_else(ge(zeros_diff_cols, compare_blocks_rows), _if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(False, -69, 4))), _if_then_else(and_(ge(4, max_col_clue), ge(zeros_diff_cols, 3)), _if_then_else(le(max_row_clue, 4), _if_then_else(True, zeros_diff_cols, zeros_diff_rows), _if_then_else(True, 0, 4)), _if_then_else(and_(True, True), _if_then_else(False, zeros_diff_cols, ones_diff_rows), _if_then_else(True, ones_diff_rows, 3))), _if_then_else(ge(_if_then_else(False, compare_blocks_rows, zeros_diff_rows), _if_then_else(True, 2, 3)), _if_then_else(or_(False, True), _if_then_else(True, 1, max_col_clue), _if_then_else(False, zeros_diff_rows, compare_blocks_rows)), _if_then_else(le(0, max_col_clue), _if_then_else(True, zeros_diff_cols, zeros_diff_rows), _if_then_else(False, compare_blocks_cols, 4)))))
ge(_if_then_else(ge(_if_then_else(or_(True, False), _if_then_else(True, compare_blocks_cols, ones_diff_rows), _if_then_else(True, ones_diff_rows, 0)), _if_then_else(ge(-70, 1), _if_then_else(True, zeros_diff_cols, 1), _if_then_else(True, ones_diff_rows, 0))), _if_then_else(ge(_if_then_else(False, zeros_diff_rows, ones_diff_cols), _if_then_else(False, -89, max_row_clue)), _if_then_else(and_(True, False), _if_then_else(False, ones_diff_cols, compare_blocks_cols), _if_then_else(False, 4, compare_blocks_rows)), _if_then_else(or_(False, True), _if_then_else(False, compare_blocks_rows, ones_diff_rows), _if_then_else(True, 1, 2))), _if_then_else(and_(ge(max_col_clue, zeros_diff_rows), le(0, 0)), _if_then_else(and_(True, True), _if_then_else(True, max_col_clue, 0), _if_then_else(False, zeros_diff_cols, zeros_diff_cols)), _if_then_else(and_(True, True), _if_then_else(True, compare_blocks_rows, 96), _if_then_else(False, compare_blocks_rows, 0)))), _if_then_else(or_(ge(_if_then_else(True, ones_diff_cols, zeros_diff_cols), _if_then_else(True, zeros_diff_cols, 4)), or_(le(1, ones_diff_rows), ge(max_col_clue, 3))), _if_then_else(or_(or_(False, True), or_(True, False)), _if_then_else(le(compare_blocks_rows, zeros_diff_rows), _if_then_else(False, zeros_diff_rows, ones_diff_cols), _if_then_else(False, max_col_clue, 2)), _if_then_else(le(4, 1), _if_then_else(False, 0, 2), _if_then_else(False, zeros_diff_rows, zeros_diff_cols))), _if_then_else(and_(or_(False, False), le(compare_blocks_rows, zeros_diff_cols)), _if_then_else(or_(True, True), _if_then_else(True, compare_blocks_rows, 0), _if_then_else(False, 1, max_col_clue)), _if_then_else(ge(zeros_diff_cols, max_col_clue), _if_then_else(True, ones_diff_rows, zeros_diff_rows), _if_then_else(True, ones_diff_cols, compare_blocks_rows)))))
or_(ge(_if_then_else(False, compare_blocks_rows, 0), _if_then_else(True, 3, -95)), ge(_if_then_else(True, zeros_diff_rows, zeros_diff_cols), _if_then_else(False, 4, max_col_clue)))
and_(ge(_if_then_else(or_(True, True), _if_then_else(True, max_col_clue, 3), _if_then_else(False, ones_diff_rows, compare_blocks_cols)), _if_then_else(le(max_row_clue, 3), _if_then_else(False, 1, 4), _if_then_else(False, 0, 4))), or_(ge(_if_then_else(True, ones_diff_cols, ones_diff_rows), _if_then_else(False, compare_blocks_rows, ones_diff_cols)), ge(_if_then_else(False, zeros_diff_cols, 3), _if_then_else(True, zeros_diff_rows, zeros_diff_rows))))
VAL TREES:
add(mul(zeros_diff_rows, ones_diff_rows), compare_blocks_cols)
add(zeros_diff_rows, -64)
add(compare_blocks_cols, 59)
mul(ones_diff_cols, compare_blocks_rows)
mul(zeros_diff_rows, ones_diff_rows)
mul(add(add(mul(add(zeros_diff_rows, zeros_diff_cols), mul(ones_diff_cols, compare_blocks_rows)), add(mul(compare_blocks_cols, ones_diff_cols), mul(zeros_diff_rows, zeros_diff_cols))), mul(add(add(79, zeros_diff_rows), add(ones_diff_cols, compare_blocks_cols)), mul(add(ones_diff_rows, compare_blocks_cols), mul(ones_diff_rows, 46)))), add(add(add(mul(zeros_diff_rows, 45), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, zeros_diff_cols), mul(ones_diff_rows, compare_blocks_rows))), add(mul(mul(zeros_diff_rows, zeros_diff_cols), add(zeros_diff_rows, compare_blocks_cols)), mul(add(ones_diff_rows, zeros_diff_rows), mul(ones_diff_rows, compare_blocks_rows)))))


INFO:root:stats: {'fitness': <deap.tools.support.Statistics object at 0x000001FA88997A20>, 'size': <deap.tools.support.Statistics object at 0x000001FA88997A90>}

