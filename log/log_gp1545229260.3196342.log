INFO:root:

*******STARTING!!!******


INFO:root:

*******Configuration******


INFO:root:# NUM_ROWS = 20


INFO:root:NUM_ROWS = 5


INFO:root:# NUM_COLS = 20


INFO:root:NUM_COLS = 5


INFO:root:empty_in_split = '\xa0'


INFO:root:


INFO:root:pickle_unsolved_file_path = 'data/%dx%d_nonograms.pkl' % (NUM_ROWS, NUM_COLS)


INFO:root:pickle_solved_file_path = 'data/%dx%d_nonograms_solved.pkl' % (NUM_ROWS, NUM_COLS)


INFO:root:should_run_in_parallel = True


INFO:root:


INFO:root:NUM_COND_TREES = 5


INFO:root:NUM_VAL_TREES = NUM_COND_TREES + 1


INFO:root:prob_crossover_global = 0.7  # global probability for cx


INFO:root:prob_crossover_individual_cond = 0.8  # probability to cx a specific cond tree in an individual


INFO:root:prob_crossover_individual_val = 0.8  # probability to cx a specific cond tree in an individual


INFO:root:prob_mutate_global = 0.2


INFO:root:prob_mutate_individual_cond = 0.5


INFO:root:prob_mutate_individual_val = 0.5


INFO:root:


INFO:root:points_correct_box = 5


INFO:root:points_incorrect_box = 0


INFO:root:# points_incorrect_box = -2


INFO:root:pop_size = 100


INFO:root:hof_size = 1


INFO:root:# num_gen = 40


INFO:root:num_gen = 10


INFO:root:train_size = 3


INFO:root:

*******DONE!!!******


INFO:root:run time: 68 sec

INFO:root:max possible fitness for the nonograms ran: 56

INFO:root:log:    	      	            fitness            	              size              
   	      	-------------------------------	--------------------------------
gen	nevals	avg    	max    	min    	std    	avg 	max	min	std     
0  	100   	30     	30     	30     	0      	7.38	8  	6  	0.543691
1  	75    	36.8   	53.3333	26.6667	7.63282	7.76	11 	6  	0.917824
2  	77    	41.4833	51.6667	25     	7.72764	7.77	11 	6  	0.998549
3  	74    	44.0333	51.6667	26.6667	8.72792	7.54	10 	6  	1.03363 
4  	79    	44.5833	51.6667	26.6667	9.11158	7.54	11 	6  	1.0141  
5  	72    	43.8333	51.6667	26.6667	9.39119	7.46	11 	6  	1.05281 
6  	78    	44.1833	51.6667	26.6667	8.81758	7.37	11 	6  	1.05504 
7  	64    	45.4333	51.6667	26.6667	8.5914 	7.23	12 	6  	1.07569 
8  	79    	45.1   	51.6667	26.6667	8.54342	7.32	11 	6  	1.13912 
9  	77    	42.9333	51.6667	26.6667	10.1984	7.13	9  	6  	0.934398
10 	73    	44.9   	51.6667	26.6667	9.26409	7.1 	11 	6  	1.10905 

INFO:root:pop: COND TREES:
or_(ge(_if_then_else(True, compare_blocks_rows, 2), _if_then_else(True, 2, 4)), and_(True, le(compare_blocks_cols, 1)))
and_(or_(and_(False, ge(1, zeros_diff_cols)), ge(_if_then_else(True, 1, compare_blocks_cols), ones_diff_cols)), ge(_if_then_else(True, ones_diff_cols, zeros_diff_cols), _if_then_else(True, 1, ones_diff_rows)))
ge(2, _if_then_else(False, _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(le(4, zeros_diff_rows), compare_blocks_cols, compare_blocks_rows), _if_then_else(False, 2, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(False, 2, 2)), _if_then_else(False, _if_then_else(True, max_row_clue, zeros_diff_cols), max_row_clue))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(add(add(add(compare_blocks_rows, zeros_diff_cols), mul(ones_diff_rows, compare_blocks_cols)), mul(add(ones_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_rows))), ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(add(mul(mul(add(add(compare_blocks_cols, ones_diff_rows), add(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, ones_diff_cols), mul(compare_blocks_cols, zeros_diff_cols))), mul(mul(add(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_rows, compare_blocks_rows)), mul(add(compare_blocks_rows, compare_blocks_cols), mul(ones_diff_cols, ones_diff_cols)))), add(mul(mul(mul(zeros_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, compare_blocks_cols)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_rows))), mul(mul(mul(ones_diff_rows, ones_diff_cols), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, zeros_diff_rows))))), zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(add(add(mul(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, compare_blocks_cols)), mul(mul(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols))), ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(3, compare_blocks_rows), True)
and_(or_(and_(False, ge(1, _if_then_else(True, max_col_clue, 4))), True), ge(_if_then_else(True, ones_diff_cols, _if_then_else(True, max_col_clue, 4)), _if_then_else(le(max_row_clue, _if_then_else(False, 1, zeros_diff_cols)), 1, ones_diff_rows)))
ge(_if_then_else(and_(False, True), _if_then_else(False, _if_then_else(False, 0, zeros_diff_cols), 2), _if_then_else(False, 1, 0)), _if_then_else(False, _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, _if_then_else(and_(False, True), _if_then_else(True, _if_then_else(False, 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, _if_then_else(False, ones_diff_cols, ones_diff_rows), 0)), max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(True, 2, zeros_diff_cols), _if_then_else(True, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, _if_then_else(False, compare_blocks_cols, 3)), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, _if_then_else(False, compare_blocks_rows, compare_blocks_cols)), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)), _if_then_else(True, _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_cols))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(compare_blocks_rows, compare_blocks_rows), and_(and_(True, le(compare_blocks_cols, zeros_diff_cols)), le(0, 1)))
and_(or_(and_(False, ge(ones_diff_cols, zeros_diff_cols)), ge(_if_then_else(True, 1, compare_blocks_cols), ones_diff_cols)), ge(_if_then_else(True, ones_diff_cols, _if_then_else(True, max_col_clue, 4)), _if_then_else(or_(and_(False, ge(1, zeros_diff_cols)), ge(_if_then_else(True, 1, ones_diff_rows), ones_diff_cols)), 1, ones_diff_rows)))
ge(_if_then_else(and_(False, False), _if_then_else(False, _if_then_else(False, 0, zeros_diff_cols), 0), _if_then_else(False, 1, 0)), _if_then_else(False, _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(False, _if_then_else(True, 2, zeros_diff_rows), _if_then_else(le(4, zeros_diff_rows), zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols)))
le(compare_blocks_rows, _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, ones_diff_cols, 4), compare_blocks_cols))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(False, zeros_diff_rows, zeros_diff_cols), _if_then_else(and_(True, False), 2, max_col_clue)), and_(and_(True, False), le(compare_blocks_cols, 1)))
and_(le(zeros_diff_rows, compare_blocks_cols), True)
ge(_if_then_else(False, _if_then_else(False, _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, _if_then_else(True, ones_diff_cols, ones_diff_rows), 0)), _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, 1), 1, _if_then_else(True, 1, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(False, compare_blocks_rows, 2)), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), _if_then_else(False, 0, 2)))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(False, True)
and_(or_(and_(False, ge(1, 1)), ge(_if_then_else(True, 1, compare_blocks_cols), 1)), ge(_if_then_else(True, ones_diff_cols, 3), _if_then_else(True, 1, ones_diff_rows)))
ge(_if_then_else(and_(False, True), _if_then_else(False, _if_then_else(False, 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, _if_then_else(True, ones_diff_cols, ones_diff_rows), 0)), _if_then_else(True, _if_then_else(False, 0, 0), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(False, 2, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(False, compare_blocks_rows, 0)), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, 4, zeros_diff_cols), compare_blocks_cols))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(True, compare_blocks_rows, 2), _if_then_else(and_(True, le(compare_blocks_cols, 1)), 2, 3)), and_(True, le(compare_blocks_cols, 1)))
and_(or_(and_(False, ge(1, zeros_diff_cols)), ge(_if_then_else(True, 1, compare_blocks_cols), ones_diff_cols)), ge(_if_then_else(True, ones_diff_cols, _if_then_else(True, max_col_clue, 4)), _if_then_else(True, zeros_diff_cols, ones_diff_rows)))
ge(_if_then_else(and_(False, True), _if_then_else(True, _if_then_else(False, 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, _if_then_else(False, ones_diff_cols, ones_diff_rows), 0)), _if_then_else(False, _if_then_else(False, 0, zeros_diff_rows), _if_then_else(False, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(True, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(le(4, zeros_diff_rows), compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, max_row_clue), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)), _if_then_else(False, _if_then_else(True, max_row_clue, zeros_diff_cols), max_row_clue))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(mul(mul(compare_blocks_cols, ones_diff_cols), mul(compare_blocks_rows, zeros_diff_rows)), add(mul(ones_diff_rows, zeros_diff_cols), add(zeros_diff_rows, zeros_diff_rows))), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, add(add(add(compare_blocks_cols, compare_blocks_cols), mul(ones_diff_rows, compare_blocks_cols)), mul(mul(ones_diff_cols, ones_diff_rows), mul(zeros_diff_cols, compare_blocks_rows))))))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, mul(add(add(mul(ones_diff_rows, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), mul(add(compare_blocks_cols, zeros_diff_cols), mul(compare_blocks_rows, ones_diff_cols))), mul(mul(add(ones_diff_cols, ones_diff_cols), add(ones_diff_rows, ones_diff_cols)), add(add(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_cols, compare_blocks_rows)))))))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(False, zeros_diff_rows, zeros_diff_cols), _if_then_else(and_(True, False), zeros_diff_cols, max_col_clue)), and_(and_(True, False), le(compare_blocks_cols, 1)))
and_(True, True)
ge(_if_then_else(False, _if_then_else(False, _if_then_else(False, compare_blocks_cols, 3), ones_diff_rows), _if_then_else(False, _if_then_else(True, 0, ones_diff_rows), 0)), _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, 1), 1, _if_then_else(True, 1, _if_then_else(False, ones_diff_rows, zeros_diff_cols))))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(False, compare_blocks_rows, 2)), _if_then_else(ge(zeros_diff_cols, ones_diff_cols), _if_then_else(True, max_row_clue, zeros_diff_cols), _if_then_else(False, 0, 0)))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(False, zeros_diff_rows, zeros_diff_cols), _if_then_else(and_(True, False), 2, max_col_clue)), and_(and_(True, False), le(compare_blocks_cols, 1)))
and_(le(compare_blocks_cols, compare_blocks_cols), False)
ge(_if_then_else(False, _if_then_else(False, _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, _if_then_else(and_(False, True), ones_diff_cols, ones_diff_rows), 0)), _if_then_else(ge(zeros_diff_rows, _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), 0, zeros_diff_cols)), _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, 1), 1, _if_then_else(True, 1, zeros_diff_cols)))
le(_if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_cols), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), _if_then_else(False, 2, 2)))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(False, zeros_diff_rows, zeros_diff_rows), compare_blocks_rows), and_(True, le(compare_blocks_cols, zeros_diff_cols)))
and_(or_(and_(False, ge(1, 4)), ge(_if_then_else(True, 1, ones_diff_rows), ones_diff_cols)), ge(_if_then_else(True, ones_diff_cols, _if_then_else(True, max_col_clue, 4)), _if_then_else(True, 1, ones_diff_rows)))
ge(_if_then_else(and_(False, True), _if_then_else(False, _if_then_else(False, 0, zeros_diff_cols), 2), _if_then_else(False, 1, 0)), _if_then_else(False, _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(True, 2, zeros_diff_cols), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(le(4, zeros_diff_rows), compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(True, compare_blocks_rows, compare_blocks_cols)), _if_then_else(True, _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_cols))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(False, zeros_diff_cols, zeros_diff_cols), compare_blocks_rows), and_(True, le(0, 1)))
and_(or_(and_(False, ge(ones_diff_cols, zeros_diff_cols)), ge(_if_then_else(True, 1, compare_blocks_cols), ones_diff_cols)), ge(_if_then_else(True, ones_diff_cols, _if_then_else(True, max_col_clue, zeros_diff_cols)), _if_then_else(True, 1, ones_diff_rows)))
ge(_if_then_else(and_(False, True), _if_then_else(False, _if_then_else(False, 0, zeros_diff_cols), 0), _if_then_else(False, 1, 0)), _if_then_else(False, _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(False, _if_then_else(True, 2, zeros_diff_rows), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols)))
le(compare_blocks_rows, _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(False, max_row_clue, zeros_diff_cols), compare_blocks_cols))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(False, and_(True, le(compare_blocks_cols, 1)))
and_(or_(and_(False, False), ge(_if_then_else(True, 1, compare_blocks_cols), 1)), ge(_if_then_else(True, ones_diff_cols, 3), _if_then_else(True, 1, ones_diff_rows)))
ge(_if_then_else(and_(False, True), _if_then_else(True, _if_then_else(False, 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, _if_then_else(True, ones_diff_cols, ones_diff_rows), 0)), _if_then_else(False, _if_then_else(False, 0, 0), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(_if_then_else(ge(1, _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols)), _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(False, compare_blocks_rows, 0)), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_cols))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(True, and_(True, le(compare_blocks_cols, zeros_diff_cols)))
and_(or_(True, ge(_if_then_else(True, ones_diff_cols, _if_then_else(True, max_col_clue, 4)), _if_then_else(True, 1, ones_diff_rows))), ge(_if_then_else(True, ones_diff_cols, _if_then_else(True, max_col_clue, 4)), _if_then_else(True, 1, ones_diff_rows)))
ge(_if_then_else(and_(False, True), _if_then_else(False, _if_then_else(False, 0, _if_then_else(True, ones_diff_cols, ones_diff_rows)), 2), _if_then_else(False, 1, 0)), _if_then_else(False, _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(4, _if_then_else(ge(1, _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(False, 4, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)), _if_then_else(True, _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_cols))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
le(_if_then_else(and_(and_(and_(True, True), or_(True, True)), le(_if_then_else(True, 1, max_row_clue), _if_then_else(True, ones_diff_rows, compare_blocks_cols))), _if_then_else(and_(and_(True, False), and_(False, True)), _if_then_else(and_(False, False), _if_then_else(True, max_col_clue, 2), _if_then_else(True, ones_diff_cols, 4)), _if_then_else(or_(True, True), _if_then_else(False, zeros_diff_cols, 2), max_row_clue)), _if_then_else(le(_if_then_else(True, zeros_diff_cols, zeros_diff_rows), _if_then_else(False, max_col_clue, 1)), _if_then_else(and_(True, True), _if_then_else(True, 3, 2), _if_then_else(True, 1, max_row_clue)), _if_then_else(and_(True, True), _if_then_else(False, zeros_diff_cols, compare_blocks_cols), _if_then_else(True, compare_blocks_cols, ones_diff_rows)))), _if_then_else(le(_if_then_else(le(2, max_col_clue), _if_then_else(True, max_row_clue, 4), _if_then_else(True, 2, compare_blocks_rows)), _if_then_else(le(max_row_clue, 3), _if_then_else(True, 4, 1), _if_then_else(False, compare_blocks_cols, 2))), _if_then_else(and_(ge(max_row_clue, 4), le(1, zeros_diff_cols)), _if_then_else(ge(max_col_clue, 4), _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 0, ones_diff_cols)), _if_then_else(ge(3, compare_blocks_rows), _if_then_else(True, ones_diff_rows, 0), _if_then_else(False, 3, max_row_clue))), _if_then_else(ge(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(True, max_row_clue, 4)), _if_then_else(and_(True, False), _if_then_else(True, 0, 3), _if_then_else(False, 4, compare_blocks_rows)), _if_then_else(or_(True, True), _if_then_else(False, 4, 3), _if_then_else(and_(True, le(compare_blocks_cols, zeros_diff_cols)), 4, 4)))))
or_(and_(or_(True, True), ge(max_row_clue, ones_diff_cols)), ge(_if_then_else(False, 0, _if_then_else(True, max_col_clue, 3)), _if_then_else(True, 3, _if_then_else(False, 2, ones_diff_cols))))
ge(_if_then_else(ge(_if_then_else(le(1, zeros_diff_cols), _if_then_else(False, 0, 2), _if_then_else(True, max_row_clue, zeros_diff_rows)), _if_then_else(le(0, compare_blocks_rows), _if_then_else(False, 2, ones_diff_rows), _if_then_else(True, zeros_diff_rows, compare_blocks_cols))), _if_then_else(False, _if_then_else(and_(False, True), _if_then_else(True, 4, 2), _if_then_else(True, max_col_clue, max_col_clue)), _if_then_else(ge(compare_blocks_rows, max_col_clue), _if_then_else(False, 0, 1), _if_then_else(False, compare_blocks_cols, zeros_diff_rows))), _if_then_else(and_(le(0, compare_blocks_rows), le(0, compare_blocks_rows)), _if_then_else(ge(ones_diff_rows, ones_diff_rows), _if_then_else(True, compare_blocks_rows, 3), _if_then_else(False, zeros_diff_cols, 1)), _if_then_else(le(1, compare_blocks_cols), _if_then_else(False, 1, 1), _if_then_else(False, ones_diff_cols, 1)))), _if_then_else(ge(_if_then_else(and_(False, True), _if_then_else(False, 4, zeros_diff_cols), _if_then_else(False, ones_diff_rows, 4)), _if_then_else(and_(True, False), _if_then_else(False, 0, max_row_clue), _if_then_else(False, 2, ones_diff_rows))), _if_then_else(or_(le(zeros_diff_rows, zeros_diff_cols), ge(2, 3)), _if_then_else(and_(True, False), _if_then_else(False, 0, max_row_clue), _if_then_else(False, 3, compare_blocks_rows)), _if_then_else(or_(True, False), _if_then_else(False, zeros_diff_rows, 1), _if_then_else(True, compare_blocks_rows, 0))), _if_then_else(and_(and_(True, False), ge(3, max_row_clue)), _if_then_else(le(ones_diff_cols, zeros_diff_cols), _if_then_else(False, compare_blocks_cols, max_col_clue), _if_then_else(False, compare_blocks_rows, zeros_diff_cols)), _if_then_else(and_(False, False), _if_then_else(False, ones_diff_cols, compare_blocks_cols), _if_then_else(True, 1, 3)))))
or_(and_(le(_if_then_else(False, compare_blocks_cols, compare_blocks_rows), 4), and_(False, False)), ge(_if_then_else(False, 0, 0), _if_then_else(True, compare_blocks_rows, zeros_diff_rows)))
le(_if_then_else(le(zeros_diff_cols, 1), _if_then_else(True, ones_diff_cols, max_row_clue), _if_then_else(False, 3, 4)), _if_then_else(le(max_row_clue, 0), _if_then_else(and_(le(compare_blocks_rows, 3), or_(True, True)), 3, compare_blocks_cols), _if_then_else(False, 2, compare_blocks_rows)))
VAL TREES:
mul(add(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_rows, ones_diff_rows)), add(add(ones_diff_rows, compare_blocks_rows), add(compare_blocks_rows, zeros_diff_rows)))
mul(add(mul(zeros_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, zeros_diff_rows)), mul(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, zeros_diff_cols)))
add(mul(add(compare_blocks_rows, zeros_diff_cols), mul(ones_diff_cols, compare_blocks_rows)), mul(add(ones_diff_cols, zeros_diff_cols), add(ones_diff_cols, compare_blocks_rows)))
add(add(add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, compare_blocks_cols)), mul(add(ones_diff_rows, compare_blocks_rows), mul(compare_blocks_rows, zeros_diff_cols))), add(add(add(compare_blocks_cols, compare_blocks_cols), mul(zeros_diff_cols, compare_blocks_rows)), add(mul(zeros_diff_cols, ones_diff_cols), add(zeros_diff_cols, compare_blocks_rows))))
add(mul(mul(add(ones_diff_rows, zeros_diff_cols), add(ones_diff_rows, compare_blocks_cols)), add(add(ones_diff_rows, compare_blocks_rows), add(zeros_diff_rows, compare_blocks_rows))), add(mul(add(zeros_diff_cols, ones_diff_cols), add(ones_diff_rows, zeros_diff_cols)), add(add(zeros_diff_rows, ones_diff_cols), add(zeros_diff_rows, compare_blocks_cols))))
mul(mul(mul(add(compare_blocks_rows, zeros_diff_rows), mul(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_cols))), add(add(add(zeros_diff_cols, zeros_diff_cols), mul(ones_diff_cols, zeros_diff_rows)), mul(add(compare_blocks_cols, ones_diff_cols), mul(zeros_diff_cols, compare_blocks_rows))))
COND TREES:
or_(True, False)
and_(or_(True, ge(_if_then_else(True, ones_diff_cols, _if_then_else(True, max_col_clue, 4)), _if_then_else(True, 1, ones_diff_rows))), ge(_if_then_else(True, zeros_diff_rows, _if_then_else(True, max_col_clue, 4)), _if_then_else(True, 1, ones_diff_rows)))
ge(_if_then_else(and_(or_(ge(2, max_col_clue), ge(1, 1)), True), _if_then_else(False, _if_then_else(False, 0, _if_then_else(True, ones_diff_cols, ones_diff_rows)), 2), _if_then_else(False, 1, 0)), _if_then_else(False, _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(4, _if_then_else(ge(1, 0), _if_then_else(False, 4, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(True, compare_blocks_rows, compare_blocks_cols)), _if_then_else(True, _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_cols))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(True, compare_blocks_rows, 2), _if_then_else(True, 2, 3)), and_(True, le(compare_blocks_cols, 1)))
and_(or_(and_(False, ge(1, zeros_diff_cols)), ge(_if_then_else(True, 1, compare_blocks_cols), ones_diff_cols)), ge(_if_then_else(True, ones_diff_cols, _if_then_else(True, max_col_clue, 4)), _if_then_else(True, 1, ones_diff_rows)))
ge(_if_then_else(and_(False, True), _if_then_else(True, _if_then_else(False, 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, _if_then_else(False, ones_diff_cols, ones_diff_rows), 0)), _if_then_else(False, _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(le(4, zeros_diff_rows), compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)), _if_then_else(False, _if_then_else(True, max_row_clue, zeros_diff_cols), max_row_clue))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(False, zeros_diff_rows, zeros_diff_cols), _if_then_else(and_(True, False), 2, max_col_clue)), and_(and_(True, False), le(compare_blocks_cols, 1)))
and_(le(zeros_diff_rows, compare_blocks_cols), True)
ge(_if_then_else(False, _if_then_else(False, _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, _if_then_else(True, ones_diff_cols, ones_diff_rows), 0)), _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, 1), 1, _if_then_else(True, 1, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(False, compare_blocks_rows, 2)), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), _if_then_else(False, 0, 2)))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(False, zeros_diff_rows, zeros_diff_cols), _if_then_else(and_(True, False), zeros_diff_cols, max_col_clue)), and_(and_(True, False), le(compare_blocks_cols, 1)))
and_(le(compare_blocks_cols, compare_blocks_cols), True)
ge(_if_then_else(False, _if_then_else(False, _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, _if_then_else(and_(False, True), ones_diff_cols, ones_diff_rows), 0)), _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, 1), 1, _if_then_else(True, 1, zeros_diff_cols)))
le(_if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_cols), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), _if_then_else(False, 0, 2)))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(False, zeros_diff_rows, _if_then_else(le(_if_then_else(True, compare_blocks_cols, 3), _if_then_else(True, ones_diff_cols, ones_diff_rows)), _if_then_else(le(compare_blocks_cols, max_row_clue), _if_then_else(False, compare_blocks_rows, max_col_clue), _if_then_else(True, 4, 3)), _if_then_else(le(compare_blocks_rows, zeros_diff_rows), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(True, ones_diff_cols, 4)))), compare_blocks_rows), and_(True, le(compare_blocks_cols, zeros_diff_cols)))
and_(or_(and_(False, ge(1, zeros_diff_cols)), ge(_if_then_else(True, 1, ones_diff_rows), ones_diff_cols)), ge(_if_then_else(True, ones_diff_cols, _if_then_else(True, max_col_clue, 4)), _if_then_else(True, 1, ones_diff_rows)))
ge(_if_then_else(and_(False, True), _if_then_else(False, _if_then_else(False, 0, zeros_diff_cols), 2), _if_then_else(False, 1, 0)), _if_then_else(False, _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(True, 2, zeros_diff_cols), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(_if_then_else(le(_if_then_else(or_(False, False), _if_then_else(True, 0, 4), _if_then_else(True, 4, zeros_diff_cols)), _if_then_else(le(compare_blocks_cols, 0), _if_then_else(True, 4, max_col_clue), _if_then_else(True, zeros_diff_cols, zeros_diff_cols))), _if_then_else(and_(le(max_col_clue, zeros_diff_cols), ge(4, compare_blocks_cols)), _if_then_else(le(2, ones_diff_rows), _if_then_else(False, ones_diff_cols, 0), _if_then_else(True, ones_diff_cols, ones_diff_rows)), _if_then_else(and_(False, False), _if_then_else(True, 0, compare_blocks_cols), _if_then_else(True, 4, ones_diff_cols))), _if_then_else(or_(and_(False, True), le(0, ones_diff_rows)), _if_then_else(le(ones_diff_cols, 4), _if_then_else(True, zeros_diff_rows, max_col_clue), _if_then_else(True, 4, max_col_clue)), _if_then_else(and_(True, False), _if_then_else(True, zeros_diff_rows, 1), _if_then_else(True, ones_diff_cols, 2)))), _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)), _if_then_else(True, _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_cols))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(False, zeros_diff_rows, zeros_diff_cols), _if_then_else(and_(True, False), zeros_diff_cols, max_col_clue)), and_(and_(True, False), le(compare_blocks_cols, 1)))
and_(le(compare_blocks_cols, compare_blocks_cols), True)
ge(_if_then_else(False, _if_then_else(False, _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, _if_then_else(and_(False, True), ones_diff_cols, ones_diff_rows), 0)), _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, 1), 1, _if_then_else(True, 1, zeros_diff_cols)))
le(_if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_cols), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), _if_then_else(False, 0, 2)))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(False, zeros_diff_rows, zeros_diff_cols), _if_then_else(and_(True, False), 2, 2)), and_(and_(True, False), le(compare_blocks_cols, 1)))
and_(le(zeros_diff_rows, compare_blocks_cols), True)
ge(_if_then_else(False, _if_then_else(False, _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, _if_then_else(True, ones_diff_cols, ones_diff_rows), 0)), _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), _if_then_else(False, 0, ones_diff_cols), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(False, _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, 1), 1, _if_then_else(True, 1, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(False, compare_blocks_rows, 2)), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), _if_then_else(False, 0, 2)))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(False, and_(True, le(_if_then_else(True, compare_blocks_rows, 2), 1)))
and_(or_(and_(False, ge(1, zeros_diff_cols)), ge(_if_then_else(True, 1, compare_blocks_cols), 1)), ge(_if_then_else(True, ones_diff_cols, _if_then_else(True, 1, compare_blocks_cols)), _if_then_else(True, 1, ones_diff_rows)))
ge(0, _if_then_else(False, _if_then_else(False, 0, 0), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(False, compare_blocks_rows, 0)), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_cols))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(compare_blocks_cols, _if_then_else(True, 2, 3)), and_(True, le(compare_blocks_cols, 1)))
and_(or_(and_(False, ge(1, zeros_diff_cols)), ge(3, ones_diff_cols)), ge(_if_then_else(True, ones_diff_cols, _if_then_else(True, max_col_clue, 4)), _if_then_else(True, 1, ones_diff_rows)))
ge(_if_then_else(and_(False, True), _if_then_else(True, _if_then_else(False, 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, _if_then_else(False, ones_diff_cols, ones_diff_rows), _if_then_else(and_(False, True), _if_then_else(False, _if_then_else(False, 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, _if_then_else(True, ones_diff_cols, ones_diff_rows), 0)))), _if_then_else(False, _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(le(4, zeros_diff_rows), compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)), _if_then_else(False, _if_then_else(True, max_row_clue, zeros_diff_cols), max_row_clue))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(False, zeros_diff_rows, zeros_diff_cols), _if_then_else(and_(True, False), 2, max_col_clue)), False)
and_(le(zeros_diff_rows, zeros_diff_cols), True)
ge(ones_diff_rows, _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, 1), 1, _if_then_else(True, 1, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(True, compare_blocks_rows, 2)), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), _if_then_else(False, 0, 2)))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(mul(mul(mul(compare_blocks_rows, zeros_diff_rows), mul(zeros_diff_rows, ones_diff_cols)), mul(add(compare_blocks_rows, compare_blocks_cols), mul(ones_diff_rows, compare_blocks_cols))), compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(False, zeros_diff_rows, zeros_diff_cols), _if_then_else(and_(True, False), 2, max_col_clue)), and_(and_(True, False), le(compare_blocks_cols, 1)))
and_(le(zeros_diff_rows, compare_blocks_cols), True)
ge(_if_then_else(False, _if_then_else(False, _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, _if_then_else(True, ones_diff_cols, ones_diff_rows), 0)), _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, 1), 1, _if_then_else(True, 1, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(False, compare_blocks_rows, 2)), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), _if_then_else(False, 0, 2)))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(mul(mul(mul(compare_blocks_rows, zeros_diff_rows), mul(zeros_diff_rows, ones_diff_cols)), mul(add(compare_blocks_rows, compare_blocks_cols), mul(ones_diff_rows, compare_blocks_cols))), compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(True, and_(True, False))
and_(or_(and_(False, le(_if_then_else(ge(ones_diff_rows, 1), _if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(True, 2, ones_diff_rows)), _if_then_else(le(0, 0), _if_then_else(False, 4, 1), _if_then_else(True, ones_diff_rows, compare_blocks_rows)))), True), ge(_if_then_else(True, ones_diff_cols, _if_then_else(True, max_col_clue, 4)), _if_then_else(True, 1, ones_diff_rows)))
ge(_if_then_else(and_(False, True), _if_then_else(False, _if_then_else(False, 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, 1, 0)), _if_then_else(False, _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(False, _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(True, compare_blocks_cols, compare_blocks_cols)), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_cols))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(False, and_(ge(_if_then_else(False, zeros_diff_rows, zeros_diff_cols), compare_blocks_rows), le(compare_blocks_cols, 1)))
and_(or_(and_(False, ge(1, zeros_diff_cols)), ge(_if_then_else(True, 1, compare_blocks_cols), 1)), ge(_if_then_else(False, ones_diff_cols, 3), _if_then_else(True, 1, ones_diff_rows)))
ge(_if_then_else(and_(False, True), _if_then_else(False, _if_then_else(False, 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, _if_then_else(True, ones_diff_cols, ones_diff_rows), 0)), _if_then_else(False, _if_then_else(False, 0, 0), _if_then_else(True, 2, max_col_clue)))
and_(and_(le(ones_diff_cols, 2), or_(True, False)), or_(or_(True, False), and_(True, True)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(False, compare_blocks_rows, 0)), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_rows))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
le(_if_then_else(and_(and_(and_(True, True), or_(True, True)), le(_if_then_else(True, 1, max_row_clue), _if_then_else(True, ones_diff_rows, compare_blocks_cols))), _if_then_else(and_(and_(True, False), and_(False, True)), _if_then_else(and_(False, False), _if_then_else(True, max_col_clue, 2), _if_then_else(True, ones_diff_cols, 4)), _if_then_else(or_(True, True), _if_then_else(False, zeros_diff_cols, 2), max_row_clue)), _if_then_else(le(_if_then_else(True, zeros_diff_cols, zeros_diff_rows), _if_then_else(False, max_col_clue, 1)), _if_then_else(and_(True, True), _if_then_else(True, 3, 2), _if_then_else(True, 1, max_row_clue)), _if_then_else(and_(True, True), _if_then_else(False, zeros_diff_cols, compare_blocks_cols), _if_then_else(True, compare_blocks_cols, ones_diff_rows)))), max_row_clue)
or_(and_(True, ge(max_row_clue, zeros_diff_rows)), ge(_if_then_else(False, 0, _if_then_else(True, max_col_clue, 3)), _if_then_else(True, 3, _if_then_else(False, 2, ones_diff_cols))))
ge(_if_then_else(ge(_if_then_else(le(1, zeros_diff_cols), _if_then_else(False, 0, 2), _if_then_else(True, max_row_clue, zeros_diff_rows)), _if_then_else(le(0, compare_blocks_rows), _if_then_else(False, 2, ones_diff_rows), _if_then_else(True, zeros_diff_rows, compare_blocks_cols))), _if_then_else(or_(ge(2, max_col_clue), ge(1, 1)), _if_then_else(and_(False, True), _if_then_else(True, 4, 2), _if_then_else(True, max_col_clue, max_col_clue)), _if_then_else(ge(compare_blocks_rows, max_col_clue), _if_then_else(False, 0, 1), _if_then_else(False, compare_blocks_cols, zeros_diff_rows))), _if_then_else(and_(le(0, compare_blocks_rows), le(0, compare_blocks_rows)), _if_then_else(ge(ones_diff_rows, ones_diff_rows), _if_then_else(True, compare_blocks_rows, compare_blocks_cols), _if_then_else(False, zeros_diff_cols, 1)), _if_then_else(le(1, compare_blocks_cols), _if_then_else(False, 1, 1), _if_then_else(False, ones_diff_cols, 1)))), _if_then_else(ge(_if_then_else(and_(False, True), _if_then_else(False, 4, zeros_diff_cols), _if_then_else(False, ones_diff_rows, 4)), _if_then_else(and_(True, False), _if_then_else(False, 0, max_row_clue), _if_then_else(False, 2, ones_diff_rows))), _if_then_else(or_(le(zeros_diff_rows, zeros_diff_cols), ge(2, 3)), _if_then_else(and_(False, False), _if_then_else(False, 0, max_row_clue), _if_then_else(False, 3, compare_blocks_rows)), _if_then_else(or_(True, False), _if_then_else(False, zeros_diff_rows, 1), _if_then_else(True, compare_blocks_rows, 0))), _if_then_else(and_(and_(True, False), ge(3, max_row_clue)), _if_then_else(le(ones_diff_cols, zeros_diff_cols), _if_then_else(False, compare_blocks_cols, max_col_clue), _if_then_else(False, compare_blocks_rows, zeros_diff_cols)), _if_then_else(and_(False, False), _if_then_else(False, ones_diff_cols, compare_blocks_cols), _if_then_else(True, 1, 3)))))
or_(and_(le(0, 4), and_(False, False)), ge(compare_blocks_rows, _if_then_else(False, compare_blocks_rows, zeros_diff_rows)))
le(_if_then_else(le(zeros_diff_cols, 4), _if_then_else(True, ones_diff_cols, max_row_clue), _if_then_else(True, 3, 4)), _if_then_else(le(max_row_clue, 0), _if_then_else(and_(le(compare_blocks_rows, 3), or_(True, True)), 3, compare_blocks_cols), _if_then_else(False, 2, compare_blocks_rows)))
VAL TREES:
mul(add(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_rows, ones_diff_rows)), add(add(ones_diff_rows, compare_blocks_rows), add(compare_blocks_rows, zeros_diff_rows)))
mul(add(mul(zeros_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, zeros_diff_rows)), mul(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, zeros_diff_cols)))
add(mul(add(compare_blocks_rows, zeros_diff_cols), mul(ones_diff_cols, compare_blocks_rows)), mul(add(ones_diff_cols, zeros_diff_cols), add(ones_diff_cols, compare_blocks_rows)))
add(add(add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, compare_blocks_cols)), mul(add(ones_diff_rows, compare_blocks_rows), mul(compare_blocks_rows, zeros_diff_cols))), add(add(add(compare_blocks_cols, compare_blocks_cols), mul(zeros_diff_cols, compare_blocks_rows)), add(mul(zeros_diff_cols, ones_diff_cols), add(zeros_diff_cols, compare_blocks_rows))))
add(mul(mul(add(ones_diff_rows, zeros_diff_cols), add(ones_diff_rows, compare_blocks_cols)), add(add(ones_diff_rows, compare_blocks_rows), add(zeros_diff_rows, compare_blocks_rows))), add(mul(add(zeros_diff_cols, ones_diff_cols), add(ones_diff_rows, zeros_diff_cols)), add(add(zeros_diff_rows, ones_diff_cols), add(zeros_diff_rows, compare_blocks_cols))))
mul(mul(mul(add(compare_blocks_rows, zeros_diff_rows), mul(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_cols))), add(add(add(zeros_diff_cols, zeros_diff_cols), mul(ones_diff_cols, zeros_diff_rows)), mul(add(compare_blocks_cols, ones_diff_cols), mul(zeros_diff_cols, compare_blocks_rows))))
COND TREES:
or_(ge(_if_then_else(ge(2, _if_then_else(le(_if_then_else(le(2, max_col_clue), _if_then_else(True, max_row_clue, 4), _if_then_else(True, 2, compare_blocks_rows)), _if_then_else(le(max_row_clue, 3), _if_then_else(True, 4, 1), _if_then_else(False, compare_blocks_cols, 2))), _if_then_else(and_(ge(max_row_clue, 4), le(1, zeros_diff_cols)), _if_then_else(ge(max_col_clue, 4), _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 0, ones_diff_cols)), _if_then_else(ge(3, compare_blocks_rows), _if_then_else(True, ones_diff_rows, 0), _if_then_else(False, 3, max_row_clue))), _if_then_else(ge(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(True, max_row_clue, 4)), _if_then_else(and_(True, False), _if_then_else(True, 0, 3), _if_then_else(False, 4, compare_blocks_rows)), _if_then_else(or_(True, True), _if_then_else(False, 4, 3), _if_then_else(False, 4, 4))))), zeros_diff_rows, zeros_diff_cols), _if_then_else(and_(True, False), 2, 3)), and_(and_(True, False), le(compare_blocks_cols, 1)))
and_(or_(and_(False, ge(1, zeros_diff_cols)), ge(_if_then_else(True, 1, compare_blocks_cols), ones_diff_cols)), ge(_if_then_else(True, ones_diff_cols, _if_then_else(True, max_col_clue, 4)), _if_then_else(False, compare_blocks_cols, compare_blocks_cols)))
ge(_if_then_else(and_(False, False), _if_then_else(False, _if_then_else(ge(zeros_diff_rows, _if_then_else(False, ones_diff_cols, 3)), 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, _if_then_else(True, ones_diff_cols, ones_diff_rows), 0)), _if_then_else(ge(zeros_diff_rows, _if_then_else(False, 3, 3)), _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, 1), 1, _if_then_else(or_(le(_if_then_else(ge(ones_diff_cols, compare_blocks_rows), _if_then_else(True, 3, 2), _if_then_else(True, 1, compare_blocks_cols)), _if_then_else(ge(zeros_diff_cols, ones_diff_cols), _if_then_else(True, ones_diff_cols, 0), _if_then_else(False, compare_blocks_rows, zeros_diff_cols))), True), 2, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(False, compare_blocks_rows, 3)), _if_then_else(ge(_if_then_else(False, compare_blocks_rows, compare_blocks_cols), 1), _if_then_else(True, max_row_clue, zeros_diff_cols), _if_then_else(False, 0, 2)))
VAL TREES:
add(mul(mul(mul(mul(mul(mul(mul(zeros_diff_rows, zeros_diff_cols), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_cols, ones_diff_rows), add(ones_diff_cols, zeros_diff_rows))), mul(add(add(zeros_diff_rows, zeros_diff_rows), mul(ones_diff_cols, zeros_diff_rows)), add(mul(add(add(mul(mul(zeros_diff_rows, zeros_diff_cols), add(zeros_diff_rows, zeros_diff_rows)), add(add(compare_blocks_cols, compare_blocks_rows), add(zeros_diff_cols, zeros_diff_rows))), add(mul(add(compare_blocks_rows, zeros_diff_rows), add(ones_diff_cols, compare_blocks_rows)), add(add(compare_blocks_cols, compare_blocks_cols), add(zeros_diff_rows, ones_diff_cols)))), mul(add(add(add(zeros_diff_cols, compare_blocks_rows), mul(compare_blocks_cols, compare_blocks_rows)), add(mul(zeros_diff_rows, ones_diff_cols), add(ones_diff_rows, compare_blocks_cols))), mul(add(mul(compare_blocks_cols, zeros_diff_cols), add(compare_blocks_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, ones_diff_cols))))), add(zeros_diff_rows, compare_blocks_cols)))), ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_rows, zeros_diff_rows)), add(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_rows, compare_blocks_cols)))), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(add(compare_blocks_cols, ones_diff_cols), add(zeros_diff_rows, zeros_diff_cols)), mul(add(compare_blocks_cols, ones_diff_cols), add(ones_diff_cols, zeros_diff_rows))), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(add(mul(mul(ones_diff_rows, add(zeros_diff_rows, zeros_diff_rows)), mul(ones_diff_cols, ones_diff_rows)), add(mul(zeros_diff_rows, add(zeros_diff_rows, compare_blocks_rows)), mul(add(ones_diff_cols, ones_diff_cols), compare_blocks_cols))), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(False, and_(True, le(compare_blocks_cols, 1)))
and_(or_(and_(False, ge(1, zeros_diff_cols)), ge(_if_then_else(True, 1, compare_blocks_cols), 1)), ge(_if_then_else(True, ones_diff_cols, 3), _if_then_else(True, 1, ones_diff_rows)))
ge(_if_then_else(and_(False, True), _if_then_else(False, _if_then_else(False, 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, _if_then_else(True, ones_diff_cols, ones_diff_rows), 0)), _if_then_else(False, _if_then_else(False, 0, 0), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(False, compare_blocks_rows, 0)), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_cols))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(False, zeros_diff_cols, zeros_diff_cols), compare_blocks_rows), and_(and_(True, le(compare_blocks_cols, _if_then_else(ge(2, max_row_clue), ones_diff_rows, compare_blocks_cols))), le(compare_blocks_cols, zeros_diff_cols)))
and_(or_(and_(False, ge(1, zeros_diff_cols)), ge(_if_then_else(True, ones_diff_cols, ones_diff_rows), ones_diff_cols)), ge(_if_then_else(ge(1, zeros_diff_cols), ones_diff_cols, _if_then_else(True, max_col_clue, 4)), _if_then_else(True, 1, ones_diff_rows)))
ge(_if_then_else(and_(False, True), _if_then_else(and_(False, True), _if_then_else(False, 0, zeros_diff_cols), 2), _if_then_else(False, 1, 0)), _if_then_else(False, _if_then_else(False, _if_then_else(and_(ge(_if_then_else(and_(True, True), _if_then_else(False, 2, 4), _if_then_else(True, zeros_diff_cols, zeros_diff_cols)), _if_then_else(and_(True, False), _if_then_else(False, 0, 4), _if_then_else(True, 0, 0))), le(_if_then_else(le(1, compare_blocks_rows), _if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(False, compare_blocks_rows, 0)), _if_then_else(ge(4, max_row_clue), _if_then_else(True, 1, max_col_clue), _if_then_else(True, 2, compare_blocks_rows)))), _if_then_else(ge(_if_then_else(or_(False, True), _if_then_else(False, max_row_clue, max_col_clue), _if_then_else(True, ones_diff_cols, compare_blocks_cols)), _if_then_else(le(0, zeros_diff_rows), _if_then_else(False, compare_blocks_rows, 3), _if_then_else(True, zeros_diff_rows, compare_blocks_rows))), _if_then_else(or_(le(zeros_diff_rows, ones_diff_cols), or_(False, False)), _if_then_else(or_(True, True), _if_then_else(True, zeros_diff_cols, zeros_diff_rows), _if_then_else(True, compare_blocks_rows, zeros_diff_rows)), _if_then_else(ge(3, 4), _if_then_else(True, compare_blocks_rows, 3), _if_then_else(False, max_row_clue, 0))), _if_then_else(or_(and_(True, True), ge(compare_blocks_cols, max_col_clue)), _if_then_else(le(3, zeros_diff_rows), _if_then_else(True, 0, 1), _if_then_else(False, compare_blocks_cols, 3)), _if_then_else(ge(compare_blocks_rows, zeros_diff_rows), _if_then_else(False, zeros_diff_rows, 1), _if_then_else(False, zeros_diff_rows, zeros_diff_cols)))), _if_then_else(le(_if_then_else(or_(False, False), _if_then_else(False, 3, 4), _if_then_else(True, 2, zeros_diff_rows)), _if_then_else(or_(False, True), _if_then_else(False, zeros_diff_cols, 4), _if_then_else(False, ones_diff_rows, 2))), _if_then_else(ge(_if_then_else(True, ones_diff_cols, ones_diff_cols), _if_then_else(False, max_col_clue, ones_diff_cols)), _if_then_else(le(0, 4), _if_then_else(True, max_row_clue, compare_blocks_cols), _if_then_else(False, 3, 0)), _if_then_else(ge(ones_diff_rows, max_col_clue), _if_then_else(True, compare_blocks_rows, compare_blocks_cols), _if_then_else(True, max_row_clue, zeros_diff_rows))), _if_then_else(or_(ge(2, ones_diff_rows), and_(False, False)), _if_then_else(le(1, zeros_diff_cols), _if_then_else(False, 3, ones_diff_rows), _if_then_else(False, zeros_diff_cols, 0)), _if_then_else(le(1, 4), _if_then_else(False, max_row_clue, 4), _if_then_else(False, 0, 2))))), zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(True, 2, zeros_diff_cols), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(or_(ge(_if_then_else(False, ones_diff_rows, max_row_clue), _if_then_else(False, ones_diff_rows, compare_blocks_cols)), and_(and_(True, True), ge(compare_blocks_rows, zeros_diff_rows))), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(False, 2, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(ge(zeros_diff_cols, _if_then_else(and_(and_(or_(le(ones_diff_rows, 0), False), le(1, 3)), le(_if_then_else(False, 1, zeros_diff_cols), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_cols))), _if_then_else(or_(True, or_(le(4, 4), True)), _if_then_else(True, _if_then_else(True, ones_diff_cols, 1), zeros_diff_cols), _if_then_else(True, _if_then_else(True, _if_then_else(False, zeros_diff_cols, 1), 2), 3)), _if_then_else(and_(False, or_(ge(max_col_clue, 3), True)), _if_then_else(False, max_col_clue, _if_then_else(ge(compare_blocks_rows, max_row_clue), max_row_clue, zeros_diff_cols)), _if_then_else(False, 3, 2)))), compare_blocks_rows, compare_blocks_cols)), _if_then_else(True, _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_cols))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, mul(mul(mul(mul(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, compare_blocks_cols)), mul(mul(compare_blocks_cols, compare_blocks_cols), add(zeros_diff_cols, ones_diff_rows))), add(add(mul(zeros_diff_cols, zeros_diff_cols), mul(zeros_diff_rows, zeros_diff_cols)), add(mul(compare_blocks_rows, ones_diff_rows), mul(zeros_diff_rows, compare_blocks_cols)))), add(add(mul(add(compare_blocks_rows, compare_blocks_rows), mul(compare_blocks_cols, zeros_diff_cols)), mul(add(ones_diff_rows, zeros_diff_rows), mul(compare_blocks_rows, ones_diff_cols))), mul(mul(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, zeros_diff_cols)), mul(add(compare_blocks_cols, compare_blocks_rows), mul(compare_blocks_rows, ones_diff_rows))))))), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(mul(mul(add(compare_blocks_rows, ones_diff_rows), mul(ones_diff_cols, zeros_diff_rows)), mul(add(compare_blocks_cols, zeros_diff_rows), mul(ones_diff_rows, zeros_diff_cols))), mul(mul(add(zeros_diff_cols, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols)), add(add(compare_blocks_rows, compare_blocks_cols), mul(ones_diff_cols, compare_blocks_rows))))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, mul(mul(mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, compare_blocks_rows)), add(mul(zeros_diff_rows, zeros_diff_cols), mul(compare_blocks_rows, zeros_diff_rows))), add(add(add(zeros_diff_rows, zeros_diff_cols), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, zeros_diff_cols), add(zeros_diff_cols, compare_blocks_cols)))), mul(mul(mul(add(zeros_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, compare_blocks_cols)), mul(mul(ones_diff_rows, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))), mul(mul(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_cols, ones_diff_rows)), add(add(compare_blocks_rows, compare_blocks_rows), add(compare_blocks_cols, compare_blocks_cols))))))), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(False, and_(True, le(compare_blocks_cols, 1)))
and_(or_(and_(False, ge(1, zeros_diff_cols)), ge(_if_then_else(True, 1, compare_blocks_cols), 1)), ge(_if_then_else(True, ones_diff_cols, 3), _if_then_else(True, 1, ones_diff_rows)))
ge(_if_then_else(and_(False, True), _if_then_else(False, _if_then_else(False, 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, _if_then_else(True, ones_diff_cols, ones_diff_rows), 0)), _if_then_else(False, _if_then_else(False, 0, 0), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(False, compare_blocks_rows, 1)), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_cols))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(True, compare_blocks_rows, 2), _if_then_else(True, 2, 3)), and_(True, le(compare_blocks_cols, 1)))
and_(or_(and_(False, ge(1, zeros_diff_cols)), ge(_if_then_else(True, 1, compare_blocks_cols), ones_diff_cols)), ge(_if_then_else(True, ones_diff_cols, _if_then_else(True, max_col_clue, 4)), _if_then_else(True, 1, ones_diff_rows)))
ge(_if_then_else(and_(False, True), _if_then_else(True, _if_then_else(False, 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, _if_then_else(False, ones_diff_cols, ones_diff_rows), 0)), _if_then_else(False, _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(ge(_if_then_else(ge(_if_then_else(and_(True, False), _if_then_else(True, 0, compare_blocks_rows), _if_then_else(False, 3, 2)), _if_then_else(ge(1, ones_diff_rows), _if_then_else(True, 0, 0), _if_then_else(False, max_col_clue, 2))), _if_then_else(or_(or_(False, True), or_(True, False)), _if_then_else(le(max_col_clue, zeros_diff_rows), _if_then_else(False, compare_blocks_cols, zeros_diff_rows), _if_then_else(True, ones_diff_rows, 1)), _if_then_else(or_(True, True), _if_then_else(True, 1, max_col_clue), _if_then_else(True, 0, zeros_diff_cols))), _if_then_else(and_(ge(max_row_clue, ones_diff_cols), or_(False, True)), _if_then_else(or_(False, False), _if_then_else(False, compare_blocks_rows, 1), _if_then_else(True, max_col_clue, compare_blocks_rows)), _if_then_else(le(compare_blocks_cols, 4), _if_then_else(True, max_row_clue, ones_diff_cols), _if_then_else(False, 0, 1)))), _if_then_else(le(_if_then_else(ge(3, 4), _if_then_else(False, max_col_clue, compare_blocks_rows), _if_then_else(True, 4, 4)), _if_then_else(le(2, 1), _if_then_else(True, 3, compare_blocks_cols), _if_then_else(False, max_col_clue, compare_blocks_cols))), _if_then_else(or_(le(max_col_clue, 1), or_(False, True)), _if_then_else(or_(False, False), _if_then_else(False, zeros_diff_rows, 2), _if_then_else(True, 4, zeros_diff_cols)), _if_then_else(or_(True, False), _if_then_else(False, zeros_diff_cols, 3), _if_then_else(False, 0, 2))), _if_then_else(le(_if_then_else(False, 2, 1), _if_then_else(False, zeros_diff_rows, compare_blocks_cols)), _if_then_else(and_(True, True), _if_then_else(False, max_row_clue, ones_diff_cols), _if_then_else(True, 0, max_col_clue)), _if_then_else(ge(1, 2), _if_then_else(False, max_col_clue, max_row_clue), _if_then_else(True, 3, max_row_clue))))), ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(le(4, zeros_diff_rows), compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(ge(_if_then_else(False, ones_diff_cols, max_col_clue), _if_then_else(True, ones_diff_cols, max_row_clue)), _if_then_else(or_(True, True), _if_then_else(False, max_col_clue, zeros_diff_cols), _if_then_else(False, compare_blocks_rows, ones_diff_cols)), _if_then_else(ge(ones_diff_cols, ones_diff_cols), _if_then_else(False, max_row_clue, compare_blocks_cols), _if_then_else(True, 1, zeros_diff_cols))), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)), _if_then_else(False, _if_then_else(True, max_row_clue, zeros_diff_cols), max_row_clue))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(False, and_(True, le(compare_blocks_cols, 1)))
and_(or_(True, ge(_if_then_else(True, 1, compare_blocks_cols), 1)), ge(_if_then_else(True, ones_diff_cols, 3), _if_then_else(True, 1, ones_diff_rows)))
ge(_if_then_else(and_(False, True), _if_then_else(False, _if_then_else(False, 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, _if_then_else(True, ones_diff_cols, ones_diff_rows), 0)), _if_then_else(False, _if_then_else(False, 0, 0), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, zeros_diff_cols, compare_blocks_rows), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(False, compare_blocks_rows, 0)), 4)
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(True, compare_blocks_rows, 2), _if_then_else(True, 2, 3)), and_(True, le(compare_blocks_cols, 1)))
and_(or_(and_(False, ge(1, zeros_diff_cols)), ge(_if_then_else(and_(False, ge(1, zeros_diff_cols)), 1, compare_blocks_cols), ones_diff_cols)), ge(_if_then_else(True, ones_diff_cols, _if_then_else(True, max_col_clue, 4)), _if_then_else(True, 1, ones_diff_rows)))
ge(_if_then_else(and_(False, True), _if_then_else(True, _if_then_else(False, 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, _if_then_else(True, ones_diff_cols, ones_diff_rows), 0)), _if_then_else(False, _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, ones_diff_rows, 4)), _if_then_else(ge(1, _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_cols)), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)), _if_then_else(False, _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_cols))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(False, zeros_diff_rows, zeros_diff_cols), _if_then_else(and_(True, False), 2, zeros_diff_rows)), and_(and_(True, False), le(compare_blocks_cols, 1)))
and_(le(zeros_diff_rows, compare_blocks_cols), and_(False, ge(_if_then_else(True, 4, zeros_diff_rows), zeros_diff_cols)))
ge(_if_then_else(False, _if_then_else(False, _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), _if_then_else(True, 2, max_col_clue), zeros_diff_cols), ones_diff_rows), _if_then_else(False, _if_then_else(True, ones_diff_cols, ones_diff_rows), 0)), _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(False, 1, _if_then_else(True, 1, zeros_diff_cols)))
le(_if_then_else(or_(ge(zeros_diff_cols, 4), True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(False, compare_blocks_rows, 2)), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), _if_then_else(False, 0, 2)))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(False, zeros_diff_rows, zeros_diff_cols), compare_blocks_rows), and_(and_(and_(ge(_if_then_else(False, max_col_clue, zeros_diff_cols), compare_blocks_rows), False), le(max_row_clue, ones_diff_cols)), le(compare_blocks_cols, 1)))
and_(or_(True, ge(_if_then_else(True, 1, compare_blocks_cols), ones_diff_cols)), ge(_if_then_else(True, ones_diff_cols, _if_then_else(True, max_col_clue, 4)), _if_then_else(True, 1, ones_diff_rows)))
ge(_if_then_else(and_(False, True), _if_then_else(False, _if_then_else(False, 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, 3, 0)), _if_then_else(False, _if_then_else(False, 0, zeros_diff_rows), 0))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, _if_then_else(ge(1, 1), compare_blocks_cols, compare_blocks_rows)), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols)))
le(_if_then_else(or_(True, ge(1, max_row_clue)), _if_then_else(True, ones_diff_cols, 4), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)), _if_then_else(True, _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_cols))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(mul(add(zeros_diff_cols, compare_blocks_rows), add(compare_blocks_rows, ones_diff_rows)), add(mul(ones_diff_rows, compare_blocks_cols), mul(ones_diff_rows, zeros_diff_cols))), add(add(mul(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_rows, ones_diff_cols)), mul(mul(zeros_diff_rows, compare_blocks_cols), add(compare_blocks_rows, ones_diff_rows)))))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, add(mul(add(add(ones_diff_cols, ones_diff_cols), zeros_diff_cols), mul(ones_diff_rows, zeros_diff_cols)), mul(mul(zeros_diff_rows, compare_blocks_cols), mul(compare_blocks_cols, compare_blocks_cols)))), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(False, zeros_diff_rows, zeros_diff_cols), _if_then_else(and_(True, False), 2, 2)), and_(and_(True, False), le(compare_blocks_cols, 1)))
and_(le(zeros_diff_rows, compare_blocks_cols), True)
ge(_if_then_else(False, _if_then_else(False, _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, _if_then_else(True, ones_diff_cols, ones_diff_rows), 0)), _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), _if_then_else(False, 0, ones_diff_cols), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(False, _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, 1), 1, _if_then_else(True, 1, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(False, compare_blocks_rows, 2)), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), _if_then_else(False, 0, 2)))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(mul(mul(zeros_diff_rows, compare_blocks_rows), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(compare_blocks_cols, ones_diff_rows), add(zeros_diff_cols, ones_diff_rows))), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
add(mul(mul(compare_blocks_cols, compare_blocks_cols), mul(ones_diff_rows, compare_blocks_cols)), mul(mul(compare_blocks_cols, ones_diff_rows), add(ones_diff_rows, ones_diff_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), add(mul(mul(mul(mul(zeros_diff_rows, ones_diff_cols), add(zeros_diff_rows, zeros_diff_cols)), add(mul(zeros_diff_cols, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), add(mul(mul(zeros_diff_rows, compare_blocks_rows), add(ones_diff_cols, zeros_diff_cols)), mul(mul(ones_diff_rows, zeros_diff_cols), mul(ones_diff_rows, ones_diff_cols)))), mul(add(add(add(compare_blocks_rows, ones_diff_cols), mul(zeros_diff_rows, compare_blocks_cols)), add(mul(ones_diff_cols, compare_blocks_rows), add(zeros_diff_rows, ones_diff_cols))), add(mul(add(compare_blocks_cols, ones_diff_rows), add(ones_diff_cols, zeros_diff_rows)), add(add(ones_diff_rows, compare_blocks_cols), add(ones_diff_rows, zeros_diff_rows)))))))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(mul(mul(mul(add(add(compare_blocks_rows, compare_blocks_cols), add(compare_blocks_rows, ones_diff_cols)), add(add(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_rows, ones_diff_rows))), mul(mul(mul(zeros_diff_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(zeros_diff_rows, zeros_diff_cols)))), add(add(add(mul(compare_blocks_cols, zeros_diff_rows), mul(zeros_diff_cols, ones_diff_cols)), mul(add(compare_blocks_rows, ones_diff_rows), mul(ones_diff_rows, ones_diff_rows))), add(mul(mul(zeros_diff_rows, zeros_diff_rows), add(zeros_diff_cols, compare_blocks_cols)), mul(mul(ones_diff_rows, ones_diff_rows), mul(ones_diff_rows, zeros_diff_cols))))), zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(False, zeros_diff_rows, zeros_diff_cols), _if_then_else(and_(True, False), zeros_diff_cols, max_col_clue)), and_(and_(True, False), le(compare_blocks_cols, 1)))
and_(le(compare_blocks_cols, compare_blocks_cols), True)
ge(_if_then_else(False, _if_then_else(False, _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, _if_then_else(and_(False, True), ones_diff_cols, ones_diff_rows), 0)), _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, 1), 1, _if_then_else(True, 1, zeros_diff_cols)))
le(_if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_cols), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), _if_then_else(False, 0, 2)))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(ge(2, max_row_clue), zeros_diff_rows, zeros_diff_cols), _if_then_else(and_(True, False), 2, 3)), and_(and_(True, False), le(compare_blocks_cols, 1)))
and_(or_(and_(False, ge(1, zeros_diff_cols)), ge(_if_then_else(True, 1, compare_blocks_cols), ones_diff_cols)), ge(_if_then_else(True, ones_diff_cols, _if_then_else(True, max_col_clue, 4)), _if_then_else(False, compare_blocks_cols, compare_blocks_cols)))
ge(_if_then_else(and_(False, True), _if_then_else(False, _if_then_else(ge(zeros_diff_rows, _if_then_else(False, ones_diff_cols, 3)), 0, zeros_diff_cols), ones_diff_rows), _if_then_else(le(4, compare_blocks_rows), _if_then_else(True, ones_diff_cols, ones_diff_rows), 0)), _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(False, 1, _if_then_else(or_(False, False), 2, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(False, compare_blocks_rows, 3)), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), _if_then_else(False, 0, 2)))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(False, zeros_diff_rows, zeros_diff_cols), _if_then_else(and_(True, False), zeros_diff_cols, max_col_clue)), and_(and_(True, False), le(compare_blocks_cols, 1)))
and_(le(compare_blocks_cols, compare_blocks_cols), True)
ge(_if_then_else(False, _if_then_else(False, _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, _if_then_else(and_(False, True), ones_diff_cols, ones_diff_rows), 0)), _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(True, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, 1), 1, _if_then_else(True, 1, zeros_diff_cols)))
le(_if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_cols), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), _if_then_else(ge(compare_blocks_cols, compare_blocks_cols), 0, 2)))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(False, zeros_diff_rows, zeros_diff_cols), compare_blocks_rows), and_(and_(and_(ge(_if_then_else(False, zeros_diff_rows, zeros_diff_cols), compare_blocks_rows), False), le(max_row_clue, ones_diff_cols)), le(compare_blocks_cols, 1)))
and_(or_(and_(False, ge(_if_then_else(True, 4, zeros_diff_rows), zeros_diff_cols)), ge(_if_then_else(True, 1, compare_blocks_cols), ones_diff_cols)), ge(_if_then_else(True, ones_diff_cols, _if_then_else(True, max_col_clue, 4)), _if_then_else(True, 1, ones_diff_rows)))
ge(_if_then_else(and_(False, True), _if_then_else(False, _if_then_else(False, 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, 3, 0)), _if_then_else(False, _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols)))
le(_if_then_else(or_(True, ge(1, max_row_clue)), _if_then_else(True, ones_diff_cols, 4), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_cols))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(mul(add(zeros_diff_cols, compare_blocks_rows), add(compare_blocks_rows, ones_diff_rows)), add(mul(ones_diff_rows, compare_blocks_cols), mul(ones_diff_rows, zeros_diff_cols))), add(add(mul(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_rows, ones_diff_cols)), mul(mul(zeros_diff_rows, compare_blocks_cols), add(compare_blocks_rows, ones_diff_rows)))))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, add(mul(add(add(ones_diff_cols, ones_diff_cols), zeros_diff_cols), mul(ones_diff_rows, zeros_diff_cols)), mul(mul(zeros_diff_rows, compare_blocks_cols), mul(compare_blocks_cols, compare_blocks_cols)))), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(False, zeros_diff_rows, zeros_diff_cols), compare_blocks_rows), and_(True, le(0, 1)))
and_(or_(and_(False, ge(ones_diff_cols, _if_then_else(le(_if_then_else(True, zeros_diff_rows, compare_blocks_cols), _if_then_else(False, 4, 3)), _if_then_else(ge(3, 2), _if_then_else(False, ones_diff_cols, 0), _if_then_else(True, ones_diff_cols, 0)), _if_then_else(and_(True, True), _if_then_else(True, 4, 2), _if_then_else(True, ones_diff_rows, ones_diff_rows))))), ge(_if_then_else(True, 1, compare_blocks_cols), ones_diff_cols)), ge(_if_then_else(True, ones_diff_cols, _if_then_else(True, max_col_clue, 4)), _if_then_else(True, 1, ones_diff_rows)))
ge(_if_then_else(and_(False, True), _if_then_else(False, _if_then_else(False, 0, zeros_diff_cols), 0), _if_then_else(False, 1, 0)), _if_then_else(False, _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(True, 2, zeros_diff_rows), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols)))
le(compare_blocks_rows, _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_cols))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(le(compare_blocks_cols, 1), and_(and_(True, False), le(compare_blocks_cols, _if_then_else(ge(2, max_row_clue), ones_diff_rows, compare_blocks_cols))))
and_(or_(and_(False, ge(1, zeros_diff_cols)), ge(_if_then_else(False, 1, compare_blocks_cols), ones_diff_cols)), True)
ge(_if_then_else(and_(False, True), _if_then_else(False, _if_then_else(False, 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, _if_then_else(True, ones_diff_cols, ones_diff_rows), 0)), _if_then_else(False, _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, ones_diff_cols)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), 4, _if_then_else(True, 2, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, _if_then_else(and_(or_(ge(ones_diff_cols, _if_then_else(True, 0, 4)), le(_if_then_else(False, 1, max_row_clue), 2)), le(_if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(False, zeros_diff_cols, 4))), max_row_clue, compare_blocks_cols), 4), _if_then_else(False, compare_blocks_rows, 0)), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_cols))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(False, and_(True, le(compare_blocks_cols, 1)))
and_(or_(and_(False, ge(1, zeros_diff_cols)), ge(_if_then_else(True, 1, compare_blocks_cols), 1)), ge(_if_then_else(True, ones_diff_cols, 3), _if_then_else(True, 1, ones_diff_rows)))
ge(_if_then_else(and_(False, True), _if_then_else(False, _if_then_else(False, 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, _if_then_else(True, ones_diff_cols, ones_diff_rows), 0)), _if_then_else(False, _if_then_else(False, 0, 0), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(False, compare_blocks_rows, 0)), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_cols))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(False, zeros_diff_rows, zeros_diff_cols), _if_then_else(and_(True, False), 2, max_col_clue)), and_(and_(True, False), le(compare_blocks_cols, 1)))
and_(le(zeros_diff_rows, compare_blocks_cols), True)
ge(_if_then_else(False, _if_then_else(False, _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, _if_then_else(True, ones_diff_cols, ones_diff_rows), 0)), _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, 1), 1, _if_then_else(True, 1, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(False, compare_blocks_rows, 2)), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), _if_then_else(False, 0, 2)))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(add(mul(add(zeros_diff_cols, ones_diff_cols), mul(ones_diff_cols, mul(compare_blocks_cols, ones_diff_cols))), add(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, mul(mul(compare_blocks_cols, compare_blocks_rows), ones_diff_rows)))), ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(add(add(mul(compare_blocks_rows, add(zeros_diff_cols, ones_diff_rows)), mul(zeros_diff_rows, ones_diff_rows)), add(mul(compare_blocks_cols, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, add(mul(add(compare_blocks_cols, zeros_diff_cols), mul(ones_diff_rows, zeros_diff_cols)), mul(mul(compare_blocks_cols, compare_blocks_cols), add(zeros_diff_cols, compare_blocks_cols)))), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(False, zeros_diff_rows, 1), compare_blocks_rows), and_(and_(True, le(compare_blocks_cols, zeros_diff_cols)), le(compare_blocks_cols, 1)))
and_(or_(and_(False, ge(_if_then_else(ge(_if_then_else(True, 3, 3), _if_then_else(True, zeros_diff_cols, max_row_clue)), _if_then_else(le(compare_blocks_cols, zeros_diff_cols), _if_then_else(ge(max_row_clue, compare_blocks_rows), 3, 3), _if_then_else(True, 1, _if_then_else(False, 2, compare_blocks_rows))), _if_then_else(and_(False, False), _if_then_else(and_(False, True), compare_blocks_cols, 4), _if_then_else(True, _if_then_else(True, compare_blocks_rows, 4), ones_diff_rows))), zeros_diff_cols)), ge(_if_then_else(True, 1, compare_blocks_cols), ones_diff_cols)), ge(_if_then_else(True, ones_diff_cols, _if_then_else(ge(_if_then_else(True, 1, ones_diff_rows), ones_diff_cols), max_col_clue, 4)), _if_then_else(True, 1, ones_diff_rows)))
ge(_if_then_else(and_(False, False), _if_then_else(False, _if_then_else(False, 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, 1, 0)), _if_then_else(False, _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, _if_then_else(ge(_if_then_else(and_(True, False), _if_then_else(True, 3, compare_blocks_cols), _if_then_else(True, _if_then_else(False, 2, ones_diff_rows), zeros_diff_rows)), _if_then_else(and_(True, True), _if_then_else(True, 0, _if_then_else(False, 0, zeros_diff_rows)), _if_then_else(False, 3, max_row_clue))), compare_blocks_cols, compare_blocks_rows)), _if_then_else(le(4, zeros_diff_rows), compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(or_(True, True), max_row_clue, zeros_diff_cols), compare_blocks_cols))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(False, zeros_diff_rows, zeros_diff_cols), _if_then_else(and_(True, False), 2, max_col_clue)), le(compare_blocks_cols, 1))
and_(le(zeros_diff_rows, 1), True)
ge(_if_then_else(and_(False, True), _if_then_else(False, _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, _if_then_else(True, ones_diff_cols, ones_diff_rows), 0)), _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), 4), _if_then_else(ge(1, 1), 1, _if_then_else(True, 1, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(False, compare_blocks_rows, 2)), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), _if_then_else(False, 0, compare_blocks_cols)))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(mul(mul(mul(compare_blocks_rows, zeros_diff_rows), mul(zeros_diff_rows, ones_diff_cols)), mul(add(compare_blocks_rows, compare_blocks_cols), mul(ones_diff_rows, compare_blocks_cols))), compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(True, compare_blocks_rows, 2), _if_then_else(True, 2, 3)), and_(True, and_(and_(True, False), le(compare_blocks_cols, 1))))
and_(or_(and_(False, ge(1, zeros_diff_cols)), ge(_if_then_else(True, compare_blocks_cols, compare_blocks_cols), ones_diff_cols)), ge(_if_then_else(True, ones_diff_cols, _if_then_else(True, max_col_clue, 4)), _if_then_else(True, 1, ones_diff_rows)))
ge(_if_then_else(False, _if_then_else(True, _if_then_else(False, 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, _if_then_else(True, ones_diff_cols, ones_diff_rows), 0)), _if_then_else(False, _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(_if_then_else(False, zeros_diff_cols, compare_blocks_rows), zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)), _if_then_else(False, _if_then_else(True, max_row_clue, zeros_diff_cols), 2))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(True, and_(True, le(compare_blocks_cols, zeros_diff_cols)))
and_(or_(False, ge(_if_then_else(True, ones_diff_cols, _if_then_else(True, max_col_clue, 4)), _if_then_else(True, 1, ones_diff_rows))), ge(_if_then_else(True, ones_diff_cols, _if_then_else(True, max_col_clue, 4)), _if_then_else(True, 1, ones_diff_rows)))
ge(_if_then_else(and_(False, True), _if_then_else(False, _if_then_else(False, 0, _if_then_else(True, ones_diff_cols, ones_diff_rows)), 2), _if_then_else(False, 1, 0)), _if_then_else(False, _if_then_else(False, 4, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(4, _if_then_else(False, _if_then_else(False, 4, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, _if_then_else(True, ones_diff_cols, max_row_clue)), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)), _if_then_else(True, _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_cols))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
le(_if_then_else(and_(and_(and_(True, True), or_(True, True)), le(_if_then_else(True, 1, max_row_clue), _if_then_else(True, ones_diff_rows, compare_blocks_cols))), _if_then_else(and_(and_(True, False), and_(False, True)), _if_then_else(and_(False, False), _if_then_else(True, max_col_clue, 2), _if_then_else(True, ones_diff_cols, 4)), _if_then_else(or_(True, True), _if_then_else(False, zeros_diff_cols, 2), max_row_clue)), _if_then_else(le(_if_then_else(True, zeros_diff_cols, zeros_diff_rows), _if_then_else(False, max_col_clue, 1)), _if_then_else(and_(True, True), _if_then_else(True, 3, 2), _if_then_else(True, 1, max_row_clue)), _if_then_else(and_(True, True), _if_then_else(False, zeros_diff_cols, compare_blocks_cols), _if_then_else(True, compare_blocks_cols, ones_diff_rows)))), _if_then_else(le(_if_then_else(le(2, max_col_clue), _if_then_else(True, max_row_clue, 4), _if_then_else(True, 2, compare_blocks_rows)), _if_then_else(le(max_row_clue, 3), _if_then_else(True, 4, 1), _if_then_else(False, compare_blocks_cols, 2))), _if_then_else(and_(ge(max_row_clue, 4), le(1, zeros_diff_cols)), _if_then_else(ge(max_col_clue, 4), _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 0, ones_diff_cols)), _if_then_else(ge(3, compare_blocks_rows), _if_then_else(True, ones_diff_rows, 0), _if_then_else(False, 3, max_row_clue))), _if_then_else(ge(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(True, max_row_clue, 4)), _if_then_else(and_(True, False), _if_then_else(True, 0, 3), _if_then_else(False, 4, compare_blocks_rows)), _if_then_else(or_(True, True), _if_then_else(False, 4, 3), _if_then_else(False, 4, 4)))))
or_(and_(or_(True, True), ge(max_row_clue, zeros_diff_rows)), ge(_if_then_else(True, 0, _if_then_else(True, max_col_clue, 3)), _if_then_else(True, 3, _if_then_else(False, 2, ones_diff_cols))))
ge(_if_then_else(ge(_if_then_else(le(1, zeros_diff_cols), _if_then_else(False, 0, 2), _if_then_else(True, max_row_clue, zeros_diff_rows)), _if_then_else(le(0, compare_blocks_rows), _if_then_else(False, 2, ones_diff_rows), _if_then_else(True, zeros_diff_rows, compare_blocks_cols))), _if_then_else(or_(ge(2, max_col_clue), ge(1, 1)), _if_then_else(and_(False, True), _if_then_else(True, 4, 2), _if_then_else(True, max_col_clue, max_col_clue)), _if_then_else(ge(compare_blocks_rows, max_col_clue), _if_then_else(False, 0, 1), _if_then_else(False, compare_blocks_cols, zeros_diff_rows))), _if_then_else(and_(le(0, compare_blocks_rows), le(0, compare_blocks_rows)), _if_then_else(ge(ones_diff_rows, ones_diff_rows), _if_then_else(True, compare_blocks_rows, 3), _if_then_else(False, zeros_diff_cols, 1)), _if_then_else(le(1, compare_blocks_cols), _if_then_else(False, 1, 1), _if_then_else(False, ones_diff_cols, 1)))), _if_then_else(ge(_if_then_else(and_(False, True), _if_then_else(False, 0, zeros_diff_cols), _if_then_else(False, ones_diff_rows, 4)), _if_then_else(and_(True, False), _if_then_else(False, 0, max_row_clue), _if_then_else(False, 2, ones_diff_rows))), _if_then_else(or_(le(zeros_diff_rows, zeros_diff_cols), ge(2, 3)), _if_then_else(and_(True, False), _if_then_else(False, 0, max_row_clue), _if_then_else(False, 3, compare_blocks_rows)), _if_then_else(or_(True, False), _if_then_else(False, zeros_diff_rows, 1), _if_then_else(True, compare_blocks_rows, 0))), _if_then_else(and_(and_(True, False), ge(3, max_row_clue)), _if_then_else(le(ones_diff_cols, zeros_diff_cols), _if_then_else(False, compare_blocks_cols, max_col_clue), _if_then_else(False, compare_blocks_rows, zeros_diff_cols)), _if_then_else(and_(False, False), _if_then_else(False, ones_diff_cols, compare_blocks_cols), _if_then_else(True, 1, 3)))))
or_(and_(le(0, 4), and_(False, ge(1, _if_then_else(False, compare_blocks_cols, compare_blocks_rows)))), ge(_if_then_else(False, 0, 0), _if_then_else(True, compare_blocks_rows, zeros_diff_rows)))
le(_if_then_else(le(zeros_diff_cols, 1), 4, _if_then_else(True, 3, 4)), _if_then_else(le(max_row_clue, 0), _if_then_else(and_(le(compare_blocks_rows, 3), or_(True, True)), 3, compare_blocks_cols), _if_then_else(False, 2, compare_blocks_rows)))
VAL TREES:
mul(add(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_rows, ones_diff_rows)), add(add(ones_diff_rows, compare_blocks_rows), add(compare_blocks_rows, zeros_diff_rows)))
mul(add(mul(zeros_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, zeros_diff_rows)), mul(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, zeros_diff_cols)))
add(mul(add(compare_blocks_rows, zeros_diff_cols), mul(ones_diff_cols, compare_blocks_rows)), mul(add(ones_diff_cols, zeros_diff_cols), add(ones_diff_cols, compare_blocks_rows)))
add(add(add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, compare_blocks_cols)), mul(add(ones_diff_rows, compare_blocks_rows), mul(compare_blocks_rows, zeros_diff_cols))), add(add(add(compare_blocks_cols, compare_blocks_cols), mul(zeros_diff_cols, compare_blocks_rows)), add(mul(zeros_diff_cols, ones_diff_cols), add(zeros_diff_cols, compare_blocks_rows))))
add(mul(mul(add(ones_diff_rows, zeros_diff_cols), add(ones_diff_rows, compare_blocks_cols)), add(add(ones_diff_rows, compare_blocks_rows), add(zeros_diff_rows, compare_blocks_rows))), add(mul(add(zeros_diff_cols, ones_diff_cols), add(ones_diff_rows, zeros_diff_cols)), add(add(zeros_diff_rows, ones_diff_cols), add(zeros_diff_rows, compare_blocks_cols))))
mul(mul(mul(add(compare_blocks_rows, zeros_diff_rows), mul(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_cols))), add(add(add(zeros_diff_cols, zeros_diff_cols), mul(ones_diff_cols, zeros_diff_rows)), mul(add(compare_blocks_cols, ones_diff_cols), mul(zeros_diff_cols, compare_blocks_rows))))
COND TREES:
or_(ge(compare_blocks_rows, compare_blocks_rows), and_(and_(ge(_if_then_else(ge(max_row_clue, 0), _if_then_else(False, compare_blocks_rows, 3), _if_then_else(True, 4, 4)), _if_then_else(or_(False, True), _if_then_else(True, max_col_clue, zeros_diff_cols), _if_then_else(False, max_col_clue, max_row_clue))), le(compare_blocks_cols, zeros_diff_cols)), le(0, 1)))
and_(or_(and_(False, ge(ones_diff_cols, zeros_diff_cols)), ge(_if_then_else(ge(_if_then_else(True, _if_then_else(or_(le(ones_diff_rows, compare_blocks_cols), le(4, max_row_clue)), _if_then_else(ge(_if_then_else(le(compare_blocks_rows, 4), 4, 0), _if_then_else(False, max_col_clue, zeros_diff_rows)), _if_then_else(False, 1, 2), _if_then_else(False, compare_blocks_cols, _if_then_else(True, _if_then_else(False, 4, 4), max_row_clue))), _if_then_else(ge(1, 0), _if_then_else(ge(ones_diff_cols, 0), _if_then_else(True, compare_blocks_cols, ones_diff_cols), 0), _if_then_else(False, ones_diff_rows, 1))), compare_blocks_cols), ones_diff_cols), 1, compare_blocks_cols), ones_diff_cols)), ge(_if_then_else(True, ones_diff_cols, _if_then_else(True, max_col_clue, 4)), _if_then_else(or_(and_(False, ge(1, zeros_diff_cols)), ge(_if_then_else(True, 1, ones_diff_rows), ones_diff_cols)), 1, ones_diff_rows)))
ge(_if_then_else(and_(False, False), _if_then_else(False, _if_then_else(False, 0, zeros_diff_cols), 0), _if_then_else(False, 1, 0)), _if_then_else(False, _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(False, _if_then_else(True, 2, zeros_diff_rows), _if_then_else(le(4, zeros_diff_rows), zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols)))
le(compare_blocks_rows, _if_then_else(ge(zeros_diff_cols, max_row_clue), _if_then_else(True, ones_diff_cols, _if_then_else(or_(and_(False, False), and_(True, or_(or_(True, True), False))), _if_then_else(le(_if_then_else(True, ones_diff_cols, ones_diff_cols), compare_blocks_cols), _if_then_else(True, zeros_diff_rows, compare_blocks_cols), _if_then_else(False, 0, 1)), _if_then_else(or_(False, ge(1, _if_then_else(False, 4, ones_diff_rows))), _if_then_else(True, max_col_clue, 4), _if_then_else(False, compare_blocks_cols, max_col_clue)))), compare_blocks_cols))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(ge(2, max_row_clue), zeros_diff_rows, zeros_diff_cols), _if_then_else(and_(True, False), 2, 3)), and_(and_(True, False), le(compare_blocks_cols, 1)))
and_(or_(and_(False, ge(1, zeros_diff_cols)), True), ge(_if_then_else(True, ones_diff_cols, _if_then_else(True, max_col_clue, 4)), _if_then_else(False, compare_blocks_cols, compare_blocks_cols)))
ge(_if_then_else(and_(False, True), _if_then_else(False, _if_then_else(ge(zeros_diff_rows, _if_then_else(False, ones_diff_cols, 3)), 0, zeros_diff_cols), ones_diff_rows), _if_then_else(le(4, compare_blocks_rows), _if_then_else(True, ones_diff_cols, ones_diff_rows), 0)), _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(False, 1, _if_then_else(or_(False, True), 2, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(False, compare_blocks_rows, 3)), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, 4, zeros_diff_cols), _if_then_else(ge(compare_blocks_cols, compare_blocks_cols), 0, 2)))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(True, compare_blocks_rows, 2), _if_then_else(True, 2, 3)), False)
and_(or_(and_(False, ge(1, zeros_diff_cols)), ge(1, zeros_diff_cols)), ge(_if_then_else(True, ones_diff_cols, _if_then_else(True, max_col_clue, 4)), _if_then_else(True, 1, ones_diff_rows)))
ge(_if_then_else(and_(False, True), _if_then_else(True, _if_then_else(False, 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, _if_then_else(True, ones_diff_cols, ones_diff_rows), 0)), _if_then_else(False, _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, zeros_diff_rows, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_cols)), _if_then_else(False, _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_cols))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(and_(True, le(compare_blocks_cols, 1)), zeros_diff_rows, zeros_diff_cols), compare_blocks_rows), and_(True, le(compare_blocks_cols, zeros_diff_cols)))
and_(or_(and_(False, ge(_if_then_else(True, 1, compare_blocks_cols), ones_diff_cols)), ge(_if_then_else(True, 1, ones_diff_rows), ones_diff_cols)), ge(_if_then_else(True, ones_diff_cols, _if_then_else(True, max_col_clue, 4)), _if_then_else(True, 1, ones_diff_rows)))
ge(_if_then_else(and_(False, True), _if_then_else(False, _if_then_else(False, 0, zeros_diff_cols), 2), _if_then_else(False, 1, 0)), _if_then_else(False, _if_then_else(False, 0, 2), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(True, 2, zeros_diff_cols), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(False, ones_diff_rows, 4), _if_then_else(True, 2, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)), _if_then_else(True, _if_then_else(True, max_row_clue, compare_blocks_rows), compare_blocks_cols))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(False, and_(True, le(compare_blocks_cols, 1)))
and_(or_(and_(False, ge(1, zeros_diff_cols)), ge(_if_then_else(True, 1, compare_blocks_cols), 1)), ge(_if_then_else(or_(and_(False, ge(1, zeros_diff_cols)), ge(_if_then_else(True, 1, compare_blocks_cols), 1)), ones_diff_cols, 3), _if_then_else(True, 1, ones_diff_rows)))
ge(_if_then_else(and_(False, True), _if_then_else(False, _if_then_else(False, 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, _if_then_else(True, ones_diff_cols, ones_diff_rows), 0)), _if_then_else(False, _if_then_else(False, _if_then_else(False, _if_then_else(True, ones_diff_cols, ones_diff_rows), 0), 0), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_cols)), _if_then_else(False, compare_blocks_rows, 0)), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_cols))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(False, and_(True, le(compare_blocks_cols, 1)))
and_(True, ge(_if_then_else(True, ones_diff_cols, 3), _if_then_else(True, 1, ones_diff_rows)))
ge(_if_then_else(and_(False, True), _if_then_else(False, _if_then_else(False, 0, zeros_diff_cols), ones_diff_rows), 0), _if_then_else(False, _if_then_else(False, 0, 0), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(False, compare_blocks_rows, 0)), 4)
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(True, and_(True, le(compare_blocks_cols, zeros_diff_cols)))
and_(or_(and_(False, ge(1, zeros_diff_cols)), ge(_if_then_else(True, 3, ones_diff_rows), ones_diff_cols)), ge(_if_then_else(True, ones_diff_cols, _if_then_else(True, max_col_clue, 4)), _if_then_else(True, _if_then_else(or_(ge(_if_then_else(False, ones_diff_rows, 3), _if_then_else(False, zeros_diff_rows, 1)), ge(_if_then_else(True, zeros_diff_rows, compare_blocks_cols), _if_then_else(False, compare_blocks_rows, ones_diff_cols))), _if_then_else(ge(_if_then_else(True, ones_diff_rows, max_col_clue), _if_then_else(True, max_row_clue, ones_diff_rows)), _if_then_else(or_(False, False), _if_then_else(True, ones_diff_rows, zeros_diff_rows), _if_then_else(True, ones_diff_cols, 3)), _if_then_else(le(1, ones_diff_cols), _if_then_else(False, 4, 2), _if_then_else(False, 3, 0))), _if_then_else(ge(_if_then_else(False, 0, ones_diff_rows), _if_then_else(False, 4, 0)), _if_then_else(ge(compare_blocks_cols, compare_blocks_rows), _if_then_else(False, max_col_clue, zeros_diff_cols), _if_then_else(True, 2, ones_diff_cols)), _if_then_else(or_(False, True), _if_then_else(False, 2, compare_blocks_cols), _if_then_else(False, max_row_clue, ones_diff_rows)))), ones_diff_rows)))
ge(_if_then_else(and_(False, True), _if_then_else(False, _if_then_else(False, 0, _if_then_else(or_(le(_if_then_else(and_(True, False), _if_then_else(False, compare_blocks_cols, ones_diff_rows), _if_then_else(True, 4, 4)), _if_then_else(and_(True, False), _if_then_else(True, 4, 1), _if_then_else(False, max_row_clue, compare_blocks_rows))), or_(ge(_if_then_else(True, zeros_diff_cols, compare_blocks_cols), _if_then_else(False, ones_diff_rows, ones_diff_cols)), or_(le(4, 1), or_(False, True)))), _if_then_else(ge(_if_then_else(and_(False, False), _if_then_else(False, 0, compare_blocks_rows), _if_then_else(True, compare_blocks_rows, compare_blocks_rows)), _if_then_else(le(compare_blocks_rows, 0), _if_then_else(False, max_row_clue, 0), _if_then_else(True, 3, compare_blocks_cols))), _if_then_else(le(_if_then_else(False, 4, 3), _if_then_else(False, max_row_clue, zeros_diff_rows)), _if_then_else(and_(True, True), _if_then_else(False, compare_blocks_rows, zeros_diff_cols), _if_then_else(True, zeros_diff_rows, compare_blocks_rows)), _if_then_else(or_(True, False), _if_then_else(True, 2, max_row_clue), _if_then_else(True, compare_blocks_rows, max_row_clue))), _if_then_else(ge(_if_then_else(False, compare_blocks_cols, 1), _if_then_else(True, 1, 3)), _if_then_else(and_(True, False), _if_then_else(False, zeros_diff_cols, 2), _if_then_else(False, 2, ones_diff_rows)), _if_then_else(or_(False, True), _if_then_else(False, max_row_clue, 1), _if_then_else(False, compare_blocks_rows, zeros_diff_cols)))), _if_then_else(or_(le(_if_then_else(True, 4, 4), _if_then_else(True, compare_blocks_cols, compare_blocks_rows)), le(_if_then_else(False, 0, 0), _if_then_else(False, max_col_clue, max_row_clue))), _if_then_else(ge(_if_then_else(False, 4, max_row_clue), _if_then_else(False, ones_diff_rows, 1)), _if_then_else(and_(False, False), _if_then_else(True, max_col_clue, 1), _if_then_else(True, 0, compare_blocks_rows)), _if_then_else(or_(True, True), _if_then_else(False, compare_blocks_rows, max_col_clue), _if_then_else(True, compare_blocks_cols, compare_blocks_cols))), _if_then_else(le(_if_then_else(False, ones_diff_cols, max_col_clue), _if_then_else(True, 2, 1)), _if_then_else(and_(True, False), _if_then_else(True, zeros_diff_rows, max_row_clue), _if_then_else(False, 2, 1)), _if_then_else(ge(compare_blocks_cols, 4), _if_then_else(True, max_row_clue, ones_diff_rows), _if_then_else(False, max_col_clue, 0)))))), ones_diff_rows), _if_then_else(False, 1, 0)), _if_then_else(False, _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(ge(1, _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), 2, zeros_diff_cols), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, _if_then_else(ge(1, _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), compare_blocks_cols, compare_blocks_rows)), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, _if_then_else(True, 0, 4)), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)), _if_then_else(True, _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_cols))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(True, compare_blocks_rows, 2), _if_then_else(True, 2, 3)), le(_if_then_else(ge(_if_then_else(False, 0, 3), _if_then_else(True, 0, max_row_clue)), _if_then_else(or_(False, True), _if_then_else(True, compare_blocks_cols, 2), _if_then_else(True, ones_diff_cols, 1)), _if_then_else(and_(True, True), _if_then_else(True, max_row_clue, 3), _if_then_else(True, 0, max_col_clue))), _if_then_else(and_(or_(True, False), and_(True, False)), _if_then_else(ge(2, max_row_clue), _if_then_else(True, 3, max_col_clue), _if_then_else(False, max_col_clue, compare_blocks_cols)), _if_then_else(ge(0, max_col_clue), _if_then_else(False, max_col_clue, 3), _if_then_else(True, 1, 2)))))
and_(or_(and_(False, ge(1, zeros_diff_cols)), le(_if_then_else(ge(_if_then_else(or_(True, False), _if_then_else(False, 1, ones_diff_cols), _if_then_else(False, 3, compare_blocks_rows)), _if_then_else(and_(True, True), _if_then_else(True, 3, compare_blocks_rows), _if_then_else(True, 4, max_row_clue))), _if_then_else(ge(_if_then_else(True, compare_blocks_rows, compare_blocks_rows), _if_then_else(False, zeros_diff_rows, 1)), _if_then_else(or_(False, True), _if_then_else(True, ones_diff_rows, ones_diff_rows), _if_then_else(True, max_row_clue, max_row_clue)), _if_then_else(le(2, max_row_clue), _if_then_else(False, zeros_diff_rows, zeros_diff_cols), _if_then_else(True, 0, 4))), _if_then_else(or_(ge(2, ones_diff_cols), le(1, max_row_clue)), _if_then_else(or_(False, False), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_cols, zeros_diff_rows)), _if_then_else(ge(ones_diff_cols, zeros_diff_rows), _if_then_else(False, max_col_clue, 3), _if_then_else(True, 4, compare_blocks_rows)))), _if_then_else(ge(_if_then_else(le(4, 3), _if_then_else(False, 2, 3), _if_then_else(False, compare_blocks_cols, max_row_clue)), _if_then_else(ge(ones_diff_rows, ones_diff_cols), _if_then_else(True, 4, 4), _if_then_else(True, max_row_clue, 0))), _if_then_else(ge(_if_then_else(False, max_row_clue, zeros_diff_rows), _if_then_else(True, 0, 1)), _if_then_else(and_(False, True), _if_then_else(True, ones_diff_cols, zeros_diff_rows), _if_then_else(True, zeros_diff_rows, ones_diff_rows)), _if_then_else(or_(False, False), _if_then_else(True, compare_blocks_rows, compare_blocks_cols), _if_then_else(False, compare_blocks_rows, 4))), _if_then_else(or_(or_(False, False), le(compare_blocks_cols, ones_diff_rows)), _if_then_else(or_(True, True), _if_then_else(True, 1, 4), _if_then_else(True, 1, 3)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, ones_diff_cols), _if_then_else(False, ones_diff_rows, max_row_clue)))))), ge(_if_then_else(True, ones_diff_cols, _if_then_else(True, max_col_clue, 4)), _if_then_else(True, 1, ones_diff_rows)))
ge(_if_then_else(and_(False, True), _if_then_else(True, _if_then_else(False, 0, zeros_diff_cols), _if_then_else(and_(and_(True, False), ge(ones_diff_cols, 0)), _if_then_else(or_(True, False), _if_then_else(True, max_row_clue, 0), _if_then_else(False, ones_diff_cols, 2)), _if_then_else(le(zeros_diff_rows, max_row_clue), _if_then_else(True, ones_diff_rows, 4), _if_then_else(False, compare_blocks_rows, 3)))), _if_then_else(False, _if_then_else(True, ones_diff_cols, ones_diff_rows), 0)), _if_then_else(False, _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
or_(or_(le(_if_then_else(False, zeros_diff_cols, ones_diff_cols), 1), le(2, _if_then_else(True, 1, 4))), and_(ge(zeros_diff_cols, 2), le(zeros_diff_cols, 4)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)), _if_then_else(False, _if_then_else(or_(ge(_if_then_else(False, compare_blocks_cols, max_row_clue), _if_then_else(True, 4, max_row_clue)), ge(_if_then_else(False, max_row_clue, max_col_clue), _if_then_else(False, ones_diff_cols, ones_diff_cols))), max_row_clue, zeros_diff_cols), compare_blocks_cols))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(True, compare_blocks_rows, 2), _if_then_else(True, 2, 3)), and_(True, le(_if_then_else(and_(True, False), 2, max_col_clue), 1)))
and_(or_(and_(False, ge(1, zeros_diff_cols)), ge(_if_then_else(True, 1, compare_blocks_cols), ones_diff_cols)), ge(_if_then_else(True, ones_diff_cols, compare_blocks_cols), _if_then_else(True, 1, ones_diff_rows)))
ge(_if_then_else(False, _if_then_else(True, _if_then_else(False, 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, _if_then_else(True, ones_diff_cols, ones_diff_rows), 0)), _if_then_else(False, _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)), _if_then_else(False, _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_cols))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(False, zeros_diff_rows, zeros_diff_cols), compare_blocks_cols), and_(and_(True, False), le(compare_blocks_cols, 1)))
and_(le(zeros_diff_rows, _if_then_else(True, max_col_clue, 4)), True)
ge(_if_then_else(and_(False, True), _if_then_else(False, _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, _if_then_else(True, ones_diff_cols, ones_diff_rows), 0)), _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, 1), 1, _if_then_else(True, 1, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(False, compare_blocks_rows, 2)), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), _if_then_else(False, 0, 2)))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, mul(add(add(add(zeros_diff_cols, ones_diff_cols), add(ones_diff_rows, zeros_diff_cols)), add(add(compare_blocks_cols, compare_blocks_cols), add(zeros_diff_rows, ones_diff_cols))), add(mul(mul(compare_blocks_cols, zeros_diff_cols), mul(compare_blocks_cols, zeros_diff_rows)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(zeros_diff_cols, zeros_diff_cols))))), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, add(add(mul(mul(add(ones_diff_cols, compare_blocks_cols), add(compare_blocks_rows, ones_diff_rows)), mul(mul(zeros_diff_cols, zeros_diff_rows), add(ones_diff_rows, ones_diff_cols))), add(mul(add(zeros_diff_rows, ones_diff_cols), add(compare_blocks_cols, compare_blocks_cols)), add(add(compare_blocks_rows, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))), add(mul(add(mul(compare_blocks_rows, ones_diff_rows), mul(ones_diff_cols, zeros_diff_cols)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, compare_blocks_rows))), mul(mul(add(ones_diff_cols, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_cols), add(zeros_diff_rows, zeros_diff_cols))))))))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(add(mul(add(ones_diff_rows, ones_diff_rows), mul(mul(ones_diff_rows, mul(compare_blocks_rows, compare_blocks_rows)), compare_blocks_cols)), add(add(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_rows, compare_blocks_cols))), ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(mul(mul(mul(add(add(mul(ones_diff_cols, compare_blocks_rows), add(compare_blocks_cols, ones_diff_cols)), add(mul(compare_blocks_rows, compare_blocks_rows), mul(compare_blocks_cols, ones_diff_cols))), add(add(add(zeros_diff_rows, ones_diff_cols), add(zeros_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_cols), add(compare_blocks_rows, compare_blocks_rows)))), mul(mul(mul(add(compare_blocks_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(ones_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, ones_diff_rows))), mul(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, ones_diff_rows)), add(add(compare_blocks_rows, zeros_diff_cols), add(ones_diff_rows, zeros_diff_cols))))), mul(add(compare_blocks_rows, compare_blocks_cols), mul(ones_diff_rows, compare_blocks_cols))), compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(mul(mul(mul(add(mul(zeros_diff_cols, ones_diff_rows), add(zeros_diff_rows, zeros_diff_cols)), mul(add(compare_blocks_rows, zeros_diff_rows), mul(compare_blocks_rows, zeros_diff_cols))), mul(mul(mul(zeros_diff_rows, ones_diff_rows), add(zeros_diff_rows, compare_blocks_rows)), add(add(compare_blocks_rows, zeros_diff_cols), mul(ones_diff_cols, compare_blocks_rows)))), add(add(mul(add(ones_diff_rows, ones_diff_rows), mul(zeros_diff_cols, zeros_diff_cols)), add(mul(ones_diff_rows, ones_diff_rows), add(zeros_diff_rows, compare_blocks_rows))), add(add(add(ones_diff_cols, zeros_diff_rows), add(zeros_diff_cols, ones_diff_cols)), mul(add(compare_blocks_cols, compare_blocks_rows), add(zeros_diff_cols, compare_blocks_cols))))), zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(False, and_(and_(and_(True, False), le(compare_blocks_cols, 1)), le(compare_blocks_cols, 1)))
and_(or_(and_(False, False), ge(_if_then_else(True, 1, compare_blocks_cols), 1)), ge(_if_then_else(True, ones_diff_cols, 3), _if_then_else(True, 1, ones_diff_rows)))
ge(_if_then_else(and_(False, True), _if_then_else(True, _if_then_else(False, 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, _if_then_else(True, ones_diff_cols, ones_diff_rows), 0)), _if_then_else(False, _if_then_else(False, 0, 0), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, _if_then_else(False, zeros_diff_cols, compare_blocks_rows))), _if_then_else(ge(_if_then_else(ge(1, _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols)), _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(False, compare_blocks_rows, 0)), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_cols))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(add(add(add(ones_diff_cols, ones_diff_rows), add(ones_diff_cols, ones_diff_rows)), mul(mul(compare_blocks_cols, compare_blocks_rows), mul(compare_blocks_rows, zeros_diff_rows))), ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(mul(add(ones_diff_rows, compare_blocks_cols), add(zeros_diff_rows, ones_diff_rows)), mul(add(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_rows))), add(compare_blocks_cols, compare_blocks_cols))))
mul(add(mul(add(add(compare_blocks_rows, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows)), add(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_rows, ones_diff_rows))), mul(add(add(compare_blocks_cols, compare_blocks_cols), add(ones_diff_rows, ones_diff_cols)), add(add(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_rows, compare_blocks_rows)))), add(add(mul(add(compare_blocks_rows, zeros_diff_rows), mul(zeros_diff_cols, compare_blocks_cols)), add(add(ones_diff_rows, compare_blocks_rows), add(compare_blocks_cols, zeros_diff_rows))), mul(mul(mul(zeros_diff_rows, compare_blocks_cols), mul(ones_diff_rows, zeros_diff_cols)), mul(mul(compare_blocks_cols, ones_diff_rows), add(ones_diff_cols, ones_diff_rows)))))
COND TREES:
or_(ge(_if_then_else(False, zeros_diff_rows, zeros_diff_cols), _if_then_else(and_(True, False), 2, 2)), True)
and_(le(zeros_diff_rows, compare_blocks_cols), True)
ge(_if_then_else(False, _if_then_else(False, _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, _if_then_else(True, ones_diff_cols, ones_diff_rows), 0)), _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), _if_then_else(False, 0, ones_diff_cols), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(False, _if_then_else(False, ones_diff_rows, 4), compare_blocks_rows), _if_then_else(ge(1, 1), 1, _if_then_else(True, 1, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(True, ones_diff_cols, 4)), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), _if_then_else(False, 0, 2)))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(and_(and_(True, False), le(compare_blocks_cols, 1)), False)
and_(True, True)
ge(ones_diff_rows, _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, _if_then_else(False, _if_then_else(False, _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, _if_then_else(True, 0, ones_diff_rows), 0)), max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, 1), 1, _if_then_else(True, 1, zeros_diff_cols)))
le(_if_then_else(or_(False, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(True, compare_blocks_rows, 2)), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), _if_then_else(False, 0, 2)))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(mul(mul(mul(compare_blocks_rows, zeros_diff_rows), mul(zeros_diff_rows, ones_diff_cols)), mul(add(compare_blocks_rows, compare_blocks_cols), mul(ones_diff_rows, compare_blocks_cols))), compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(False, zeros_diff_rows, zeros_diff_cols), _if_then_else(and_(True, False), 2, max_col_clue)), ge(_if_then_else(False, zeros_diff_rows, zeros_diff_cols), _if_then_else(and_(True, False), 2, max_col_clue)))
and_(False, le(zeros_diff_rows, zeros_diff_cols))
ge(2, _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, 1), 1, _if_then_else(True, 1, _if_then_else(False, ones_diff_rows, zeros_diff_cols))))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(True, compare_blocks_rows, 2)), _if_then_else(ge(zeros_diff_cols, ones_diff_cols), _if_then_else(True, max_row_clue, zeros_diff_cols), _if_then_else(False, 0, 2)))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(False, zeros_diff_rows, zeros_diff_cols), _if_then_else(and_(True, False), 2, max_col_clue)), and_(and_(True, False), le(compare_blocks_cols, 1)))
and_(le(zeros_diff_rows, compare_blocks_cols), True)
ge(_if_then_else(False, _if_then_else(False, _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, _if_then_else(True, ones_diff_cols, ones_diff_rows), 0)), _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, 1), 1, _if_then_else(True, 1, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(False, compare_blocks_rows, 2)), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), _if_then_else(False, 0, 2)))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(False, and_(True, le(compare_blocks_cols, 1)))
and_(or_(and_(False, ge(1, zeros_diff_cols)), ge(_if_then_else(True, 1, compare_blocks_cols), 1)), ge(_if_then_else(True, ones_diff_cols, 3), _if_then_else(True, 1, ones_diff_rows)))
ge(_if_then_else(and_(False, True), _if_then_else(False, _if_then_else(False, 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, _if_then_else(True, ones_diff_cols, ones_diff_rows), 0)), _if_then_else(False, _if_then_else(False, 0, 0), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(False, compare_blocks_rows, 0)), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_cols))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(False, zeros_diff_rows, zeros_diff_cols), compare_blocks_cols), and_(True, ge(_if_then_else(False, zeros_diff_rows, zeros_diff_rows), _if_then_else(False, zeros_diff_rows, zeros_diff_cols))))
and_(or_(and_(False, ge(1, zeros_diff_cols)), ge(_if_then_else(True, 3, ones_diff_rows), ones_diff_cols)), ge(_if_then_else(True, ones_diff_cols, _if_then_else(True, max_col_clue, 4)), _if_then_else(True, 1, ones_diff_rows)))
ge(_if_then_else(and_(False, True), _if_then_else(False, _if_then_else(False, 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, 1, 0)), _if_then_else(False, _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(True, 2, zeros_diff_cols), _if_then_else(le(4, zeros_diff_rows), zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, _if_then_else(ge(1, _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), compare_blocks_cols, compare_blocks_rows)), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, _if_then_else(True, 0, 4)), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)), _if_then_else(True, _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_cols))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(le(compare_blocks_cols, zeros_diff_cols), or_(or_(and_(and_(False, False), or_(False, True)), or_(le(zeros_diff_rows, zeros_diff_cols), ge(4, compare_blocks_rows))), le(_if_then_else(le(max_row_clue, compare_blocks_cols), _if_then_else(True, compare_blocks_rows, 0), _if_then_else(True, 0, 0)), _if_then_else(le(1, compare_blocks_rows), _if_then_else(True, ones_diff_cols, max_col_clue), _if_then_else(False, 2, zeros_diff_cols)))))
and_(or_(and_(False, ge(1, zeros_diff_cols)), ge(_if_then_else(True, 1, ones_diff_rows), ones_diff_cols)), ge(_if_then_else(True, ones_diff_cols, _if_then_else(True, 1, ones_diff_rows)), _if_then_else(True, 1, ones_diff_rows)))
ge(_if_then_else(and_(False, True), _if_then_else(and_(le(ones_diff_cols, ones_diff_cols), or_(False, True)), _if_then_else(and_(False, True), _if_then_else(True, max_row_clue, 4), _if_then_else(True, 2, compare_blocks_rows)), _if_then_else(and_(True, True), _if_then_else(True, 1, compare_blocks_rows), _if_then_else(True, ones_diff_rows, max_row_clue))), _if_then_else(False, 1, 0)), _if_then_else(False, _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(False, _if_then_else(True, 2, zeros_diff_cols), _if_then_else(le(_if_then_else(False, 0, zeros_diff_rows), _if_then_else(and_(True, False), ones_diff_rows, ones_diff_rows)), _if_then_else(ge(max_row_clue, 2), _if_then_else(True, 1, 4), _if_then_else(ge(2, 3), 2, 0)), _if_then_else(and_(False, or_(False, True)), _if_then_else(False, _if_then_else(True, 4, 3), zeros_diff_cols), _if_then_else(True, ones_diff_cols, compare_blocks_cols)))), _if_then_else(ge(1, _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols)))
le(_if_then_else(True, _if_then_else(True, max_row_clue, zeros_diff_cols), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)), _if_then_else(True, _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_cols))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(False, zeros_diff_rows, zeros_diff_cols), compare_blocks_cols), and_(True, le(compare_blocks_cols, zeros_diff_cols)))
and_(or_(and_(False, ge(1, zeros_diff_cols)), ge(_if_then_else(True, 3, ones_diff_rows), ones_diff_cols)), ge(_if_then_else(True, ones_diff_cols, _if_then_else(True, max_col_clue, 4)), _if_then_else(True, 1, ones_diff_rows)))
ge(_if_then_else(False, _if_then_else(False, _if_then_else(False, 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, 1, 0)), _if_then_else(False, _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(True, 2, zeros_diff_cols), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, _if_then_else(ge(1, _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), compare_blocks_cols, compare_blocks_rows)), _if_then_else(False, zeros_diff_rows, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, _if_then_else(True, 0, 4)), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)), _if_then_else(True, _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_cols))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(False, zeros_diff_rows, zeros_diff_rows), compare_blocks_rows), and_(True, le(compare_blocks_cols, zeros_diff_cols)))
and_(or_(and_(False, ge(1, zeros_diff_cols)), ge(_if_then_else(True, 1, ones_diff_rows), ones_diff_cols)), ge(_if_then_else(True, ones_diff_cols, _if_then_else(True, 1, ones_diff_rows)), _if_then_else(True, 1, ones_diff_rows)))
ge(_if_then_else(and_(and_(False, True), True), _if_then_else(False, _if_then_else(False, 0, zeros_diff_cols), 2), _if_then_else(False, 1, 0)), _if_then_else(False, _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(True, 2, zeros_diff_cols), _if_then_else(le(4, compare_blocks_cols), zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols)))
le(_if_then_else(True, _if_then_else(True, ones_diff_cols, 4), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)), _if_then_else(True, _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_cols))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(False, zeros_diff_rows, zeros_diff_cols), compare_blocks_rows), and_(True, le(compare_blocks_cols, zeros_diff_cols)))
and_(or_(and_(False, ge(1, zeros_diff_cols)), ge(_if_then_else(True, 1, ones_diff_rows), ones_diff_cols)), ge(_if_then_else(True, ones_diff_cols, _if_then_else(True, max_col_clue, 4)), _if_then_else(True, 1, ones_diff_rows)))
ge(_if_then_else(and_(False, True), _if_then_else(False, _if_then_else(False, 0, zeros_diff_cols), 2), _if_then_else(False, 1, 0)), _if_then_else(False, _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(True, 2, zeros_diff_cols), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)), _if_then_else(True, _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_cols))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(ge(_if_then_else(True, compare_blocks_rows, ones_diff_rows), _if_then_else(True, _if_then_else(True, max_col_clue, zeros_diff_rows), 2)), _if_then_else(le(_if_then_else(True, zeros_diff_rows, 0), zeros_diff_rows), _if_then_else(False, _if_then_else(False, 1, max_row_clue), zeros_diff_cols), _if_then_else(True, 2, _if_then_else(False, compare_blocks_rows, compare_blocks_cols))), _if_then_else(or_(or_(True, False), False), _if_then_else(True, max_col_clue, max_row_clue), _if_then_else(True, _if_then_else(True, max_col_clue, compare_blocks_cols), zeros_diff_rows))), _if_then_else(and_(True, False), 2, max_col_clue)), and_(and_(True, False), le(compare_blocks_cols, 1)))
and_(le(zeros_diff_rows, compare_blocks_cols), or_(or_(and_(False, True), ge(max_col_clue, ones_diff_cols)), ge(_if_then_else(False, 1, zeros_diff_rows), _if_then_else(True, 0, zeros_diff_rows))))
ge(_if_then_else(False, _if_then_else(False, _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, _if_then_else(True, ones_diff_cols, ones_diff_rows), 0)), _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(_if_then_else(le(_if_then_else(and_(True, True), _if_then_else(True, 0, ones_diff_rows), _if_then_else(True, max_col_clue, ones_diff_rows)), _if_then_else(le(2, 2), _if_then_else(False, 3, compare_blocks_cols), _if_then_else(True, compare_blocks_rows, compare_blocks_rows))), _if_then_else(le(_if_then_else(True, ones_diff_cols, compare_blocks_rows), _if_then_else(False, ones_diff_cols, zeros_diff_rows)), _if_then_else(le(3, zeros_diff_rows), _if_then_else(True, ones_diff_cols, zeros_diff_cols), _if_then_else(False, 2, 3)), _if_then_else(le(3, zeros_diff_rows), _if_then_else(False, 3, 0), _if_then_else(True, zeros_diff_cols, 3))), _if_then_else(ge(_if_then_else(True, 2, zeros_diff_rows), _if_then_else(True, 1, 0)), _if_then_else(le(max_col_clue, 4), _if_then_else(True, ones_diff_rows, 2), _if_then_else(True, compare_blocks_rows, zeros_diff_rows)), _if_then_else(ge(zeros_diff_cols, max_row_clue), _if_then_else(True, 2, 0), _if_then_else(False, 1, zeros_diff_cols)))), _if_then_else(le(_if_then_else(or_(False, True), _if_then_else(False, 1, zeros_diff_cols), _if_then_else(True, 3, max_row_clue)), _if_then_else(or_(False, False), _if_then_else(True, zeros_diff_cols, ones_diff_rows), _if_then_else(False, zeros_diff_rows, zeros_diff_rows))), _if_then_else(le(_if_then_else(True, 3, 0), _if_then_else(True, zeros_diff_rows, zeros_diff_cols)), _if_then_else(ge(ones_diff_cols, compare_blocks_cols), _if_then_else(True, compare_blocks_cols, max_row_clue), _if_then_else(False, 2, ones_diff_cols)), _if_then_else(ge(0, compare_blocks_cols), _if_then_else(False, 3, ones_diff_rows), _if_then_else(False, 4, 4))), _if_then_else(or_(le(zeros_diff_rows, 1), and_(False, False)), _if_then_else(or_(False, True), _if_then_else(True, ones_diff_cols, zeros_diff_rows), _if_then_else(True, 2, zeros_diff_cols)), _if_then_else(or_(False, False), _if_then_else(True, 0, compare_blocks_rows), _if_then_else(True, 1, compare_blocks_cols))))), 1, _if_then_else(True, 1, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(False, compare_blocks_rows, 2)), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), _if_then_else(False, 0, 2)))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(False, zeros_diff_rows, zeros_diff_cols), compare_blocks_rows), and_(and_(and_(ge(_if_then_else(False, zeros_diff_rows, zeros_diff_cols), compare_blocks_rows), False), le(max_row_clue, ones_diff_cols)), le(compare_blocks_cols, 1)))
and_(or_(and_(False, ge(_if_then_else(True, 4, zeros_diff_rows), zeros_diff_cols)), ge(_if_then_else(True, 1, compare_blocks_cols), ones_diff_cols)), ge(_if_then_else(True, ones_diff_cols, _if_then_else(True, max_col_clue, 4)), _if_then_else(True, 1, ones_diff_rows)))
ge(_if_then_else(and_(False, True), _if_then_else(False, _if_then_else(False, 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, 3, 0)), _if_then_else(False, _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols)))
le(_if_then_else(or_(True, ge(1, max_row_clue)), _if_then_else(True, ones_diff_cols, 4), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_cols))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(mul(add(zeros_diff_cols, compare_blocks_rows), add(compare_blocks_rows, ones_diff_rows)), add(mul(ones_diff_rows, compare_blocks_cols), mul(ones_diff_rows, zeros_diff_cols))), add(add(mul(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_rows, ones_diff_cols)), mul(mul(zeros_diff_rows, compare_blocks_cols), add(compare_blocks_rows, ones_diff_rows)))))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, add(mul(add(add(ones_diff_cols, ones_diff_cols), zeros_diff_cols), mul(ones_diff_rows, zeros_diff_cols)), mul(mul(zeros_diff_rows, compare_blocks_cols), mul(compare_blocks_cols, compare_blocks_cols)))), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(4, compare_blocks_rows), True)
and_(or_(and_(False, ge(1, zeros_diff_cols)), True), ge(_if_then_else(True, ones_diff_cols, _if_then_else(True, max_col_clue, 4)), _if_then_else(le(max_row_clue, _if_then_else(False, 1, zeros_diff_cols)), 1, ones_diff_rows)))
ge(_if_then_else(and_(False, True), _if_then_else(False, _if_then_else(False, 0, zeros_diff_cols), 2), _if_then_else(False, 1, 0)), _if_then_else(False, _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(True, 2, zeros_diff_cols), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, _if_then_else(False, compare_blocks_cols, 3)), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, _if_then_else(False, 2, 2)), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)), _if_then_else(True, _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_cols))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(True, and_(True, le(compare_blocks_rows, zeros_diff_cols)))
and_(or_(True, ge(_if_then_else(True, ones_diff_cols, _if_then_else(True, max_col_clue, 4)), _if_then_else(True, 1, ones_diff_rows))), ge(_if_then_else(True, 1, ones_diff_rows), ones_diff_cols))
ge(zeros_diff_rows, _if_then_else(False, _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(4, _if_then_else(ge(1, _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(False, 4, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(False, _if_then_else(False, compare_blocks_rows, compare_blocks_cols), compare_blocks_cols)), _if_then_else(True, _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_cols))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(False, zeros_diff_rows, zeros_diff_cols), compare_blocks_cols), and_(True, le(compare_blocks_cols, zeros_diff_cols)))
and_(or_(and_(False, ge(1, zeros_diff_cols)), ge(_if_then_else(True, ones_diff_cols, _if_then_else(True, max_col_clue, 4)), _if_then_else(True, 1, ones_diff_rows))), ge(_if_then_else(True, ones_diff_cols, _if_then_else(True, max_col_clue, 4)), _if_then_else(True, 1, ones_diff_rows)))
ge(_if_then_else(and_(False, True), _if_then_else(False, _if_then_else(False, 0, zeros_diff_cols), 2), _if_then_else(False, 1, 0)), _if_then_else(False, _if_then_else(False, 0, _if_then_else(and_(False, True), _if_then_else(False, _if_then_else(False, 0, _if_then_else(True, ones_diff_cols, ones_diff_rows)), 2), _if_then_else(False, 1, 0))), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(True, 2, zeros_diff_cols), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, 4), compare_blocks_rows), _if_then_else(True, _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_cols))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(False, zeros_diff_rows, zeros_diff_cols), compare_blocks_cols), and_(True, le(0, 1)))
and_(or_(and_(False, True), ge(_if_then_else(True, 1, compare_blocks_cols), ones_diff_cols)), ge(_if_then_else(True, ones_diff_cols, _if_then_else(True, max_col_clue, 4)), _if_then_else(True, 1, ones_diff_rows)))
ge(_if_then_else(and_(False, True), _if_then_else(False, _if_then_else(False, 0, zeros_diff_cols), _if_then_else(False, _if_then_else(True, ones_diff_cols, ones_diff_rows), 0)), _if_then_else(False, 1, 0)), _if_then_else(False, _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(True, 2, zeros_diff_rows), _if_then_else(le(4, zeros_diff_rows), zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols)))
le(compare_blocks_rows, _if_then_else(True, _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_cols))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(False, zeros_diff_cols, zeros_diff_cols), compare_blocks_rows), and_(and_(True, le(compare_blocks_cols, _if_then_else(ge(2, max_row_clue), ones_diff_rows, compare_blocks_cols))), le(compare_blocks_cols, zeros_diff_cols)))
and_(or_(and_(False, ge(1, zeros_diff_cols)), ge(_if_then_else(True, ones_diff_cols, ones_diff_rows), ones_diff_cols)), ge(_if_then_else(ge(1, zeros_diff_cols), ones_diff_cols, _if_then_else(True, max_col_clue, 4)), _if_then_else(True, 1, ones_diff_rows)))
ge(_if_then_else(and_(False, True), _if_then_else(and_(False, True), _if_then_else(False, 0, zeros_diff_cols), 2), _if_then_else(False, 1, 0)), _if_then_else(False, _if_then_else(False, _if_then_else(and_(ge(_if_then_else(and_(True, True), _if_then_else(False, 2, 4), _if_then_else(True, zeros_diff_cols, zeros_diff_cols)), _if_then_else(and_(True, False), _if_then_else(False, 0, 4), _if_then_else(True, 0, 0))), le(_if_then_else(le(1, compare_blocks_rows), _if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(False, compare_blocks_rows, 0)), _if_then_else(ge(4, max_row_clue), _if_then_else(True, 1, max_col_clue), _if_then_else(True, 2, compare_blocks_rows)))), _if_then_else(ge(_if_then_else(or_(False, True), _if_then_else(False, max_row_clue, max_col_clue), _if_then_else(True, ones_diff_cols, compare_blocks_cols)), _if_then_else(le(0, zeros_diff_rows), _if_then_else(False, compare_blocks_rows, 3), _if_then_else(True, zeros_diff_rows, compare_blocks_rows))), _if_then_else(or_(le(zeros_diff_rows, ones_diff_cols), or_(False, False)), _if_then_else(or_(True, True), _if_then_else(True, zeros_diff_cols, zeros_diff_rows), _if_then_else(True, compare_blocks_rows, zeros_diff_rows)), _if_then_else(ge(3, 4), _if_then_else(True, compare_blocks_rows, 3), _if_then_else(False, max_row_clue, 0))), _if_then_else(or_(and_(True, True), ge(compare_blocks_cols, max_col_clue)), _if_then_else(le(3, zeros_diff_rows), _if_then_else(True, 0, 1), _if_then_else(False, compare_blocks_cols, 3)), _if_then_else(ge(compare_blocks_rows, zeros_diff_rows), _if_then_else(False, zeros_diff_rows, 1), _if_then_else(False, zeros_diff_rows, zeros_diff_cols)))), _if_then_else(le(_if_then_else(or_(False, False), _if_then_else(False, 3, 4), _if_then_else(True, 2, zeros_diff_rows)), _if_then_else(or_(False, True), _if_then_else(False, zeros_diff_cols, 4), _if_then_else(False, ones_diff_rows, 2))), _if_then_else(ge(_if_then_else(True, ones_diff_cols, ones_diff_cols), _if_then_else(False, max_col_clue, ones_diff_cols)), _if_then_else(le(0, 4), _if_then_else(True, max_row_clue, compare_blocks_cols), _if_then_else(False, 3, 0)), _if_then_else(ge(ones_diff_rows, max_col_clue), _if_then_else(True, compare_blocks_rows, compare_blocks_cols), _if_then_else(True, max_row_clue, zeros_diff_rows))), _if_then_else(or_(ge(2, ones_diff_rows), and_(False, False)), _if_then_else(le(1, zeros_diff_cols), _if_then_else(False, 3, ones_diff_rows), _if_then_else(False, zeros_diff_cols, 0)), _if_then_else(le(1, 4), _if_then_else(False, max_row_clue, 4), _if_then_else(False, 0, 2))))), zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(True, 2, zeros_diff_cols), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(or_(ge(_if_then_else(False, ones_diff_rows, max_row_clue), _if_then_else(False, ones_diff_rows, compare_blocks_cols)), and_(and_(True, True), ge(compare_blocks_rows, zeros_diff_rows))), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(False, 2, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(ge(zeros_diff_cols, _if_then_else(and_(and_(or_(le(ones_diff_rows, 0), False), le(1, 3)), le(_if_then_else(False, 1, zeros_diff_cols), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_cols))), _if_then_else(or_(True, or_(le(4, 4), True)), _if_then_else(True, _if_then_else(True, ones_diff_cols, 1), zeros_diff_cols), _if_then_else(True, _if_then_else(True, _if_then_else(False, zeros_diff_cols, 1), 2), 3)), _if_then_else(and_(False, or_(ge(max_col_clue, 3), True)), _if_then_else(False, max_col_clue, _if_then_else(ge(compare_blocks_rows, max_row_clue), max_row_clue, zeros_diff_cols)), _if_then_else(False, 3, 2)))), compare_blocks_rows, compare_blocks_cols)), _if_then_else(True, _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_cols))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(False, zeros_diff_rows, zeros_diff_cols), _if_then_else(and_(True, False), zeros_diff_cols, max_col_clue)), and_(and_(True, False), le(compare_blocks_cols, 1)))
and_(le(compare_blocks_cols, compare_blocks_cols), True)
ge(_if_then_else(False, _if_then_else(False, _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, _if_then_else(and_(False, True), ones_diff_cols, ones_diff_rows), 0)), _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), _if_then_else(False, 0, _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), 0, zeros_diff_cols)), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(True, _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, 1), 1, _if_then_else(True, 1, zeros_diff_cols)))
le(_if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_cols), _if_then_else(False, _if_then_else(True, max_row_clue, zeros_diff_cols), _if_then_else(False, 0, 2)))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(False, zeros_diff_rows, zeros_diff_cols), _if_then_else(and_(True, False), 2, max_col_clue)), and_(and_(True, False), le(compare_blocks_cols, 1)))
and_(False, True)
ge(_if_then_else(False, _if_then_else(False, zeros_diff_rows, ones_diff_rows), _if_then_else(False, _if_then_else(True, 0, ones_diff_rows), 0)), _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, 1), 1, _if_then_else(le(4, zeros_diff_rows), 1, _if_then_else(False, ones_diff_rows, zeros_diff_cols))))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(ge(zeros_diff_cols, 4), compare_blocks_rows, 2)), _if_then_else(ge(zeros_diff_cols, ones_diff_cols), _if_then_else(True, max_row_clue, zeros_diff_cols), _if_then_else(False, 0, 2)))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(False, and_(True, le(compare_blocks_cols, 1)))
and_(or_(and_(False, ge(1, zeros_diff_cols)), ge(zeros_diff_rows, 1)), ge(_if_then_else(True, ones_diff_cols, 3), _if_then_else(True, 1, ones_diff_rows)))
ge(_if_then_else(False, _if_then_else(False, _if_then_else(False, 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, _if_then_else(True, ones_diff_cols, ones_diff_rows), 0)), _if_then_else(False, _if_then_else(False, 0, 0), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(0, 4), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols)))
le(_if_then_else(True, ones_diff_cols, max_row_clue), _if_then_else(ge(_if_then_else(or_(or_(ge(compare_blocks_rows, zeros_diff_cols), le(3, 2)), ge(_if_then_else(True, 4, 3), _if_then_else(False, max_row_clue, max_col_clue))), _if_then_else(and_(ge(1, ones_diff_rows), and_(True, False)), _if_then_else(or_(True, True), _if_then_else(False, ones_diff_rows, ones_diff_rows), _if_then_else(False, 0, 0)), _if_then_else(or_(False, False), _if_then_else(False, 4, 3), _if_then_else(True, 1, 0))), _if_then_else(or_(or_(True, True), ge(1, ones_diff_cols)), _if_then_else(le(compare_blocks_rows, ones_diff_cols), _if_then_else(True, max_row_clue, ones_diff_cols), _if_then_else(False, 1, 3)), _if_then_else(le(max_col_clue, compare_blocks_cols), _if_then_else(True, 2, zeros_diff_rows), _if_then_else(True, compare_blocks_rows, max_col_clue)))), _if_then_else(or_(and_(ge(zeros_diff_cols, 1), or_(True, True)), or_(or_(False, True), ge(0, zeros_diff_cols))), _if_then_else(and_(ge(ones_diff_rows, ones_diff_rows), ge(max_row_clue, 2)), _if_then_else(le(max_row_clue, 3), _if_then_else(False, zeros_diff_cols, compare_blocks_rows), _if_then_else(False, compare_blocks_cols, 2)), _if_then_else(ge(2, 4), _if_then_else(True, 3, max_col_clue), _if_then_else(False, compare_blocks_rows, compare_blocks_rows))), _if_then_else(le(_if_then_else(True, 0, 3), _if_then_else(False, 3, zeros_diff_cols)), _if_then_else(and_(True, False), _if_then_else(False, max_col_clue, 4), _if_then_else(True, compare_blocks_cols, ones_diff_cols)), _if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, max_row_clue), _if_then_else(False, 0, 1))))), _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_cols))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
le(_if_then_else(and_(and_(and_(True, True), or_(True, True)), le(_if_then_else(True, 1, max_row_clue), _if_then_else(True, ones_diff_rows, compare_blocks_cols))), _if_then_else(and_(and_(True, False), and_(False, True)), _if_then_else(and_(False, False), _if_then_else(True, max_col_clue, 2), _if_then_else(True, ones_diff_cols, 4)), _if_then_else(or_(True, True), _if_then_else(False, zeros_diff_cols, 2), max_row_clue)), _if_then_else(le(_if_then_else(True, zeros_diff_cols, zeros_diff_rows), _if_then_else(False, max_col_clue, 1)), _if_then_else(and_(True, True), _if_then_else(True, 3, 2), _if_then_else(True, 1, max_row_clue)), _if_then_else(and_(True, True), _if_then_else(False, zeros_diff_cols, compare_blocks_cols), _if_then_else(True, compare_blocks_cols, ones_diff_rows)))), _if_then_else(le(_if_then_else(le(2, max_col_clue), _if_then_else(True, max_row_clue, 4), _if_then_else(True, 2, compare_blocks_rows)), _if_then_else(le(max_row_clue, 3), _if_then_else(True, 4, 1), _if_then_else(False, compare_blocks_cols, 2))), _if_then_else(and_(ge(max_row_clue, 4), le(1, zeros_diff_cols)), _if_then_else(ge(max_col_clue, 4), _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 0, ones_diff_cols)), _if_then_else(ge(3, compare_blocks_rows), _if_then_else(True, ones_diff_rows, 0), _if_then_else(False, 3, max_row_clue))), _if_then_else(ge(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(True, max_row_clue, 4)), _if_then_else(and_(True, False), _if_then_else(True, 0, 3), _if_then_else(False, 4, compare_blocks_rows)), _if_then_else(or_(True, True), _if_then_else(False, 4, 3), _if_then_else(False, 4, 4)))))
or_(and_(or_(True, True), ge(max_row_clue, _if_then_else(True, 1, compare_blocks_cols))), ge(_if_then_else(False, 0, _if_then_else(True, max_col_clue, 3)), _if_then_else(True, 3, _if_then_else(False, 2, ones_diff_cols))))
ge(_if_then_else(ge(_if_then_else(le(1, zeros_diff_cols), _if_then_else(False, 0, 2), _if_then_else(True, max_row_clue, zeros_diff_rows)), _if_then_else(le(0, compare_blocks_rows), _if_then_else(False, 2, ones_diff_rows), _if_then_else(True, zeros_diff_rows, compare_blocks_cols))), _if_then_else(or_(ge(2, max_col_clue), ge(1, 1)), _if_then_else(and_(False, True), _if_then_else(True, 4, 2), _if_then_else(True, max_col_clue, max_col_clue)), _if_then_else(ge(compare_blocks_rows, max_col_clue), _if_then_else(False, 0, 1), _if_then_else(False, compare_blocks_cols, zeros_diff_rows))), _if_then_else(and_(le(0, compare_blocks_rows), le(0, compare_blocks_rows)), _if_then_else(ge(ones_diff_rows, ones_diff_rows), _if_then_else(True, compare_blocks_rows, 3), _if_then_else(False, zeros_diff_cols, 1)), _if_then_else(le(1, compare_blocks_cols), _if_then_else(False, 1, 1), _if_then_else(False, ones_diff_cols, 1)))), _if_then_else(ge(_if_then_else(and_(False, True), _if_then_else(False, 4, zeros_diff_cols), _if_then_else(False, ones_diff_rows, 4)), _if_then_else(and_(True, False), _if_then_else(and_(False, True), 0, max_row_clue), _if_then_else(False, 2, ones_diff_rows))), _if_then_else(or_(le(zeros_diff_rows, zeros_diff_cols), ge(2, 3)), _if_then_else(and_(True, False), _if_then_else(False, 0, max_row_clue), _if_then_else(False, 3, compare_blocks_rows)), _if_then_else(or_(True, False), _if_then_else(False, zeros_diff_rows, 1), _if_then_else(True, compare_blocks_rows, 0))), _if_then_else(and_(and_(True, False), ge(3, max_row_clue)), _if_then_else(le(ones_diff_cols, zeros_diff_cols), _if_then_else(False, compare_blocks_cols, max_col_clue), _if_then_else(False, compare_blocks_rows, zeros_diff_cols)), _if_then_else(and_(False, False), _if_then_else(False, ones_diff_cols, compare_blocks_cols), _if_then_else(True, 1, 3)))))
or_(and_(le(4, zeros_diff_rows), and_(False, False)), ge(_if_then_else(False, 0, 0), _if_then_else(True, compare_blocks_rows, zeros_diff_rows)))
le(_if_then_else(le(zeros_diff_cols, 1), _if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(False, compare_blocks_rows, 0)), _if_then_else(True, 3, 4)), _if_then_else(le(max_row_clue, 0), _if_then_else(and_(le(compare_blocks_rows, 3), or_(True, True)), 3, compare_blocks_cols), _if_then_else(False, 2, compare_blocks_rows)))
VAL TREES:
mul(add(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_rows, ones_diff_rows)), add(add(ones_diff_rows, compare_blocks_rows), add(compare_blocks_rows, zeros_diff_rows)))
mul(add(mul(zeros_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, zeros_diff_rows)), mul(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, zeros_diff_cols)))
add(mul(add(compare_blocks_rows, zeros_diff_cols), mul(ones_diff_cols, compare_blocks_rows)), mul(add(ones_diff_cols, zeros_diff_cols), add(ones_diff_cols, compare_blocks_rows)))
add(add(add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, compare_blocks_cols)), mul(add(ones_diff_rows, compare_blocks_rows), mul(compare_blocks_rows, zeros_diff_cols))), add(add(add(compare_blocks_cols, compare_blocks_cols), mul(zeros_diff_cols, compare_blocks_rows)), add(mul(zeros_diff_cols, ones_diff_cols), add(zeros_diff_cols, compare_blocks_rows))))
add(mul(mul(add(ones_diff_rows, zeros_diff_cols), add(ones_diff_rows, compare_blocks_cols)), add(add(ones_diff_rows, compare_blocks_rows), add(zeros_diff_rows, compare_blocks_rows))), add(mul(add(zeros_diff_cols, ones_diff_cols), add(ones_diff_rows, zeros_diff_cols)), add(add(zeros_diff_rows, ones_diff_cols), add(zeros_diff_rows, compare_blocks_cols))))
mul(mul(mul(add(compare_blocks_rows, zeros_diff_rows), mul(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_cols))), add(add(add(zeros_diff_cols, zeros_diff_cols), mul(ones_diff_cols, zeros_diff_rows)), mul(add(compare_blocks_cols, ones_diff_cols), mul(zeros_diff_cols, compare_blocks_rows))))
COND TREES:
or_(ge(_if_then_else(False, compare_blocks_rows, 2), _if_then_else(or_(False, False), 2, 3)), and_(True, le(compare_blocks_cols, 1)))
and_(or_(and_(False, ge(_if_then_else(True, 1, ones_diff_rows), zeros_diff_cols)), ge(_if_then_else(True, 1, compare_blocks_cols), ones_diff_cols)), le(zeros_diff_cols, 2))
ge(_if_then_else(and_(False, False), ones_diff_cols, _if_then_else(False, _if_then_else(False, ones_diff_cols, ones_diff_rows), 0)), _if_then_else(False, _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(True, _if_then_else(le(4, zeros_diff_rows), compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)), _if_then_else(False, _if_then_else(True, max_row_clue, zeros_diff_cols), max_row_clue))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(True, and_(True, le(compare_blocks_cols, 1)))
and_(or_(and_(False, ge(1, zeros_diff_cols)), ge(_if_then_else(True, 1, compare_blocks_cols), 1)), ge(_if_then_else(True, ones_diff_cols, 3), 1))
ge(_if_then_else(and_(False, True), _if_then_else(False, _if_then_else(False, 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, _if_then_else(True, _if_then_else(True, _if_then_else(False, 0, zeros_diff_cols), ones_diff_rows), ones_diff_rows), 0)), _if_then_else(False, _if_then_else(False, 0, 0), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(ge(compare_blocks_cols, compare_blocks_cols), ones_diff_cols, 4), _if_then_else(False, compare_blocks_rows, 0)), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_cols))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, add(add(add(add(zeros_diff_rows, ones_diff_cols), add(zeros_diff_cols, ones_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), add(zeros_diff_cols, ones_diff_rows))), add(add(add(ones_diff_rows, compare_blocks_cols), add(zeros_diff_cols, compare_blocks_cols)), add(add(ones_diff_rows, zeros_diff_rows), add(ones_diff_rows, ones_diff_rows))))), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), add(add(add(add(compare_blocks_rows, compare_blocks_rows), mul(compare_blocks_cols, zeros_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_rows))), mul(mul(add(ones_diff_rows, compare_blocks_cols), add(ones_diff_rows, zeros_diff_rows)), mul(add(compare_blocks_cols, compare_blocks_rows), mul(compare_blocks_rows, zeros_diff_cols))))))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(mul(mul(add(zeros_diff_rows, zeros_diff_cols), add(ones_diff_cols, compare_blocks_rows)), mul(add(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_rows, ones_diff_cols))), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(mul(mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, zeros_diff_rows)), mul(mul(zeros_diff_cols, compare_blocks_rows), mul(zeros_diff_rows, ones_diff_cols))), mul(add(mul(ones_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows)), mul(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_cols, compare_blocks_cols)))), add(mul(mul(mul(ones_diff_rows, ones_diff_rows), mul(compare_blocks_rows, ones_diff_cols)), add(mul(zeros_diff_rows, zeros_diff_cols), add(ones_diff_cols, zeros_diff_cols))), mul(mul(add(compare_blocks_cols, compare_blocks_rows), add(zeros_diff_rows, ones_diff_rows)), add(add(zeros_diff_cols, ones_diff_rows), add(zeros_diff_rows, compare_blocks_cols))))), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), mul(mul(mul(compare_blocks_cols, compare_blocks_cols), add(zeros_diff_cols, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_rows)))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, mul(mul(add(zeros_diff_rows, zeros_diff_cols), add(ones_diff_rows, zeros_diff_rows)), add(mul(ones_diff_rows, ones_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)))), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(True, compare_blocks_rows, 2), _if_then_else(True, 2, 3)), and_(and_(and_(ge(_if_then_else(False, zeros_diff_rows, zeros_diff_cols), compare_blocks_rows), False), le(max_row_clue, ones_diff_cols)), le(compare_blocks_cols, 1)))
and_(or_(and_(False, ge(_if_then_else(True, 4, zeros_diff_rows), zeros_diff_cols)), ge(_if_then_else(True, 1, compare_blocks_cols), ones_diff_cols)), ge(3, _if_then_else(True, 1, ones_diff_rows)))
ge(_if_then_else(and_(False, True), _if_then_else(False, _if_then_else(False, 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, 3, 0)), _if_then_else(False, _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 2, _if_then_else(False, zeros_diff_cols, compare_blocks_rows))))
le(_if_then_else(True, _if_then_else(True, ones_diff_cols, 4), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_cols))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(mul(add(zeros_diff_cols, compare_blocks_rows), add(compare_blocks_rows, ones_diff_rows)), add(mul(ones_diff_rows, compare_blocks_cols), mul(ones_diff_rows, zeros_diff_cols))), add(add(mul(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_rows, ones_diff_cols)), mul(mul(zeros_diff_rows, compare_blocks_cols), add(compare_blocks_rows, ones_diff_rows)))))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, add(mul(add(add(ones_diff_cols, ones_diff_cols), zeros_diff_cols), mul(ones_diff_rows, zeros_diff_cols)), mul(mul(zeros_diff_rows, compare_blocks_cols), mul(compare_blocks_cols, compare_blocks_cols)))), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(False, _if_then_else(and_(and_(or_(and_(True, True), and_(False, False)), ge(_if_then_else(True, max_col_clue, 1), _if_then_else(False, ones_diff_rows, compare_blocks_cols))), le(_if_then_else(and_(False, True), _if_then_else(False, max_col_clue, compare_blocks_rows), _if_then_else(True, 1, 2)), _if_then_else(and_(True, True), _if_then_else(True, 2, zeros_diff_cols), _if_then_else(True, ones_diff_rows, 2)))), _if_then_else(le(_if_then_else(ge(0, compare_blocks_rows), _if_then_else(True, 3, zeros_diff_cols), _if_then_else(True, 3, 1)), _if_then_else(le(0, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, compare_blocks_cols, 0))), _if_then_else(ge(_if_then_else(False, compare_blocks_cols, zeros_diff_cols), _if_then_else(False, 4, ones_diff_cols)), _if_then_else(and_(True, False), _if_then_else(True, 3, 0), _if_then_else(True, max_col_clue, ones_diff_cols)), _if_then_else(ge(max_row_clue, max_col_clue), _if_then_else(True, zeros_diff_cols, 2), _if_then_else(True, 1, 0))), _if_then_else(le(_if_then_else(False, ones_diff_rows, 2), _if_then_else(False, zeros_diff_cols, ones_diff_cols)), _if_then_else(and_(True, True), _if_then_else(True, zeros_diff_cols, max_col_clue), _if_then_else(False, zeros_diff_rows, 3)), _if_then_else(and_(False, False), _if_then_else(True, max_col_clue, max_col_clue), _if_then_else(False, ones_diff_rows, 1)))), _if_then_else(ge(_if_then_else(ge(0, max_row_clue), _if_then_else(True, 2, zeros_diff_rows), _if_then_else(True, 1, compare_blocks_cols)), _if_then_else(ge(ones_diff_cols, 4), _if_then_else(False, 2, compare_blocks_rows), _if_then_else(True, 0, 4))), _if_then_else(ge(_if_then_else(True, ones_diff_rows, 3), _if_then_else(False, zeros_diff_rows, ones_diff_cols)), _if_then_else(or_(False, True), _if_then_else(True, 2, 3), _if_then_else(False, max_col_clue, 4)), _if_then_else(ge(max_row_clue, ones_diff_rows), _if_then_else(False, 0, compare_blocks_rows), _if_then_else(True, compare_blocks_cols, zeros_diff_rows))), _if_then_else(le(_if_then_else(False, zeros_diff_cols, zeros_diff_rows), _if_then_else(True, 2, ones_diff_cols)), _if_then_else(or_(True, True), _if_then_else(True, 1, zeros_diff_cols), _if_then_else(False, max_col_clue, max_col_clue)), _if_then_else(le(zeros_diff_rows, zeros_diff_cols), _if_then_else(True, ones_diff_cols, 1), _if_then_else(True, zeros_diff_rows, ones_diff_rows))))), zeros_diff_cols), compare_blocks_rows), False)
and_(or_(and_(False, ge(1, zeros_diff_cols)), ge(_if_then_else(True, 1, compare_blocks_cols), ones_diff_cols)), ge(_if_then_else(True, ones_diff_cols, _if_then_else(ge(_if_then_else(True, ones_diff_cols, _if_then_else(True, ones_diff_cols, _if_then_else(True, max_col_clue, 4))), _if_then_else(True, 1, ones_diff_rows)), max_col_clue, 4)), _if_then_else(True, 1, ones_diff_rows)))
ge(_if_then_else(and_(False, True), 2, _if_then_else(False, _if_then_else(False, ones_diff_cols, ones_diff_rows), 0)), _if_then_else(False, _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(1, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), zeros_diff_cols), _if_then_else(ge(1, _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(le(4, zeros_diff_rows), compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(or_(True, ge(1, max_row_clue)), ones_diff_cols, 4), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)), 0)
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(False, zeros_diff_rows, zeros_diff_cols), _if_then_else(and_(True, False), 2, max_col_clue)), and_(and_(True, False), le(compare_blocks_cols, 1)))
and_(le(zeros_diff_rows, compare_blocks_cols), True)
ge(_if_then_else(False, _if_then_else(False, _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, _if_then_else(True, ones_diff_cols, ones_diff_rows), 0)), _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, 1), 1, _if_then_else(True, 1, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(False, ones_diff_cols, 4), _if_then_else(False, compare_blocks_rows, 2)), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), _if_then_else(False, 0, 2)))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(mul(mul(mul(compare_blocks_rows, zeros_diff_rows), mul(zeros_diff_rows, ones_diff_cols)), mul(add(compare_blocks_rows, compare_blocks_cols), mul(ones_diff_rows, compare_blocks_cols))), compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(False, zeros_diff_rows, zeros_diff_cols), _if_then_else(and_(True, False), zeros_diff_cols, max_col_clue)), and_(and_(True, False), le(compare_blocks_cols, 1)))
and_(le(compare_blocks_cols, compare_blocks_cols), True)
ge(_if_then_else(False, _if_then_else(False, _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, _if_then_else(and_(False, True), ones_diff_cols, ones_diff_rows), 0)), _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, 1), 1, _if_then_else(True, 1, zeros_diff_cols)))
le(_if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_cols), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), _if_then_else(True, 0, 2)))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(False, and_(True, le(compare_blocks_cols, 1)))
and_(or_(and_(False, False), ge(_if_then_else(True, 1, compare_blocks_cols), 1)), ge(_if_then_else(True, ones_diff_cols, 3), _if_then_else(True, 1, ones_diff_rows)))
ge(_if_then_else(and_(False, True), _if_then_else(True, _if_then_else(False, 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, _if_then_else(True, ones_diff_cols, ones_diff_rows), 0)), _if_then_else(False, _if_then_else(False, 0, 0), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(_if_then_else(ge(1, _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols)), _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(False, compare_blocks_rows, 0)), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_cols))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(False, zeros_diff_rows, zeros_diff_cols), compare_blocks_rows), and_(True, le(0, 1)))
and_(or_(and_(False, ge(ones_diff_cols, zeros_diff_cols)), ge(_if_then_else(True, 1, compare_blocks_cols), ones_diff_cols)), ge(_if_then_else(True, ones_diff_cols, _if_then_else(True, max_col_clue, 4)), _if_then_else(True, 1, ones_diff_rows)))
ge(_if_then_else(and_(False, True), _if_then_else(False, _if_then_else(False, 0, zeros_diff_cols), 0), _if_then_else(False, 1, 0)), _if_then_else(False, _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(True, 2, zeros_diff_rows), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols)))
le(compare_blocks_rows, _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_cols))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(False, zeros_diff_rows, zeros_diff_cols), _if_then_else(and_(True, False), zeros_diff_cols, max_col_clue)), and_(and_(True, False), le(compare_blocks_cols, 1)))
and_(le(compare_blocks_cols, compare_blocks_cols), True)
ge(_if_then_else(False, _if_then_else(False, _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, _if_then_else(and_(False, True), ones_diff_cols, ones_diff_rows), 0)), _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), _if_then_else(False, 0, zeros_diff_rows), _if_then_else(False, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, 1), 1, _if_then_else(True, 1, 2)))
le(_if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_cols), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), _if_then_else(False, 0, 2)))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(False, zeros_diff_rows, zeros_diff_cols), compare_blocks_cols), and_(True, le(compare_blocks_cols, zeros_diff_cols)))
and_(or_(and_(False, ge(1, zeros_diff_cols)), ge(_if_then_else(True, 3, ones_diff_rows), ones_diff_cols)), ge(_if_then_else(True, ones_diff_cols, _if_then_else(True, max_col_clue, 4)), _if_then_else(True, 1, ones_diff_rows)))
ge(_if_then_else(and_(True, True), _if_then_else(False, _if_then_else(False, 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, 1, 0)), _if_then_else(False, _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(True, zeros_diff_cols, zeros_diff_cols), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, _if_then_else(ge(1, _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), compare_blocks_cols, compare_blocks_rows)), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, _if_then_else(True, 0, 4)), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)), _if_then_else(True, _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_cols))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(False, compare_blocks_cols, zeros_diff_cols), _if_then_else(and_(True, False), compare_blocks_cols, max_col_clue)), and_(and_(True, False), le(compare_blocks_cols, 1)))
and_(le(1, compare_blocks_cols), True)
ge(_if_then_else(False, _if_then_else(False, _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, _if_then_else(True, _if_then_else(False, 0, 0), ones_diff_rows), 0)), _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, 1), 1, _if_then_else(True, 1, _if_then_else(False, ones_diff_rows, 4))))
le(_if_then_else(True, _if_then_else(True, ones_diff_cols, 4), _if_then_else(False, compare_blocks_rows, 2)), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, _if_then_else(True, max_row_clue, zeros_diff_cols)), _if_then_else(False, 0, 2)))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(False, and_(True, le(2, 1)))
and_(or_(and_(False, ge(1, zeros_diff_cols)), ge(_if_then_else(True, 1, compare_blocks_cols), 1)), ge(_if_then_else(True, ones_diff_cols, 3), _if_then_else(True, 1, ones_diff_rows)))
ge(_if_then_else(and_(False, True), _if_then_else(False, _if_then_else(False, 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, _if_then_else(True, ones_diff_cols, ones_diff_rows), 0)), _if_then_else(False, ones_diff_cols, _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(or_(True, True), ones_diff_cols, 4), _if_then_else(False, compare_blocks_rows, 0)), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), compare_blocks_cols))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(False, and_(and_(True, False), le(compare_blocks_cols, 1)))
and_(le(compare_blocks_cols, compare_blocks_cols), True)
ge(_if_then_else(False, _if_then_else(False, _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, _if_then_else(and_(False, True), ones_diff_cols, ones_diff_rows), 0)), _if_then_else(ge(_if_then_else(False, _if_then_else(True, 0, ones_diff_rows), 0), _if_then_else(False, compare_blocks_cols, 3)), _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, 1), 1, _if_then_else(True, _if_then_else(le(4, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), zeros_diff_cols)))
le(_if_then_else(ge(zeros_diff_cols, 4), _if_then_else(False, max_row_clue, zeros_diff_cols), compare_blocks_cols), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), _if_then_else(False, 0, 2)))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(ge(_if_then_else(False, zeros_diff_rows, zeros_diff_cols), _if_then_else(and_(True, False), zeros_diff_cols, max_col_clue)), zeros_diff_rows, zeros_diff_cols), _if_then_else(and_(True, False), 2, max_col_clue)), and_(and_(le(_if_then_else(or_(ge(_if_then_else(True, zeros_diff_rows, zeros_diff_cols), _if_then_else(True, max_col_clue, ones_diff_cols)), or_(ge(max_col_clue, 0), and_(False, True))), _if_then_else(and_(le(max_row_clue, ones_diff_rows), or_(True, True)), _if_then_else(or_(False, False), _if_then_else(True, 0, 2), _if_then_else(True, 4, max_col_clue)), _if_then_else(ge(compare_blocks_rows, max_col_clue), _if_then_else(False, ones_diff_rows, 2), _if_then_else(False, 1, 0))), _if_then_else(le(_if_then_else(False, 4, max_col_clue), _if_then_else(False, 2, ones_diff_rows)), _if_then_else(le(zeros_diff_cols, zeros_diff_rows), _if_then_else(True, max_row_clue, 1), _if_then_else(False, ones_diff_cols, 1)), _if_then_else(le(ones_diff_rows, max_row_clue), _if_then_else(True, ones_diff_cols, 0), _if_then_else(True, compare_blocks_rows, ones_diff_rows)))), _if_then_else(ge(_if_then_else(le(max_row_clue, compare_blocks_rows), _if_then_else(True, 2, zeros_diff_cols), _if_then_else(True, ones_diff_rows, max_col_clue)), _if_then_else(le(zeros_diff_rows, 4), _if_then_else(True, compare_blocks_cols, compare_blocks_rows), _if_then_else(True, max_row_clue, max_row_clue))), _if_then_else(le(_if_then_else(False, compare_blocks_rows, 4), _if_then_else(True, max_col_clue, zeros_diff_cols)), _if_then_else(or_(False, True), _if_then_else(False, max_col_clue, 1), _if_then_else(True, compare_blocks_cols, 4)), _if_then_else(ge(4, max_row_clue), _if_then_else(True, 3, 1), _if_then_else(True, max_row_clue, max_col_clue))), _if_then_else(or_(or_(True, False), ge(3, 1)), _if_then_else(and_(False, True), _if_then_else(True, 2, zeros_diff_cols), _if_then_else(True, 4, 0)), _if_then_else(le(zeros_diff_cols, 4), _if_then_else(True, compare_blocks_rows, 3), _if_then_else(True, ones_diff_cols, 0))))), False), le(compare_blocks_cols, 1)))
and_(False, True)
ge(_if_then_else(False, _if_then_else(False, _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), 0, zeros_diff_cols), ones_diff_rows), zeros_diff_rows), _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(1, _if_then_else(ge(1, 1), 1, _if_then_else(True, 1, _if_then_else(False, ones_diff_rows, zeros_diff_cols))))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(True, compare_blocks_rows, 2)), _if_then_else(ge(zeros_diff_cols, ones_diff_cols), _if_then_else(True, max_row_clue, zeros_diff_cols), _if_then_else(False, 0, 2)))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(False, zeros_diff_rows, zeros_diff_cols), _if_then_else(and_(True, False), 2, max_col_clue)), and_(and_(True, False), le(compare_blocks_cols, 1)))
and_(le(zeros_diff_rows, compare_blocks_cols), True)
ge(_if_then_else(False, _if_then_else(False, _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), 0, zeros_diff_cols), ones_diff_rows), _if_then_else(False, _if_then_else(True, ones_diff_cols, ones_diff_rows), 0)), _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(ge(1, 1), 1, _if_then_else(True, 1, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(False, compare_blocks_rows, 2)), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), _if_then_else(False, 0, 3)))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(ge(2, max_row_clue), zeros_diff_rows, zeros_diff_cols), _if_then_else(and_(True, False), 2, 3)), and_(and_(True, False), le(compare_blocks_cols, 1)))
and_(or_(and_(False, ge(1, zeros_diff_cols)), ge(_if_then_else(True, 1, compare_blocks_cols), ones_diff_cols)), ge(_if_then_else(True, ones_diff_cols, _if_then_else(True, max_col_clue, 4)), _if_then_else(False, compare_blocks_cols, compare_blocks_cols)))
ge(_if_then_else(and_(False, True), _if_then_else(False, _if_then_else(ge(zeros_diff_rows, _if_then_else(False, ones_diff_cols, 3)), 0, zeros_diff_cols), ones_diff_rows), _if_then_else(le(4, compare_blocks_rows), _if_then_else(True, ones_diff_cols, ones_diff_rows), 0)), _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(4, _if_then_else(False, 1, _if_then_else(or_(False, True), 2, zeros_diff_cols)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(False, compare_blocks_rows, 2)), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), _if_then_else(ge(compare_blocks_cols, compare_blocks_cols), 0, 2)))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))
COND TREES:
le(_if_then_else(and_(and_(and_(True, True), or_(True, True)), le(_if_then_else(True, 1, max_row_clue), _if_then_else(True, ones_diff_rows, compare_blocks_cols))), _if_then_else(and_(and_(True, False), and_(False, True)), _if_then_else(and_(False, False), _if_then_else(True, max_col_clue, 2), _if_then_else(True, ones_diff_cols, 4)), _if_then_else(or_(True, True), _if_then_else(False, zeros_diff_cols, 2), max_row_clue)), _if_then_else(le(_if_then_else(True, zeros_diff_cols, zeros_diff_rows), _if_then_else(False, max_col_clue, 1)), _if_then_else(and_(True, True), _if_then_else(True, 3, 2), _if_then_else(True, 1, max_row_clue)), _if_then_else(and_(True, True), _if_then_else(False, zeros_diff_cols, compare_blocks_cols), _if_then_else(True, compare_blocks_cols, ones_diff_rows)))), _if_then_else(le(_if_then_else(le(2, max_col_clue), _if_then_else(True, max_row_clue, 4), _if_then_else(True, 2, compare_blocks_rows)), _if_then_else(le(max_row_clue, 3), _if_then_else(True, 4, 1), _if_then_else(False, compare_blocks_cols, 2))), _if_then_else(and_(ge(max_row_clue, 4), le(1, zeros_diff_cols)), _if_then_else(ge(max_col_clue, 4), _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 0, ones_diff_cols)), _if_then_else(ge(3, compare_blocks_rows), _if_then_else(True, ones_diff_rows, 0), _if_then_else(False, 3, max_row_clue))), _if_then_else(ge(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(True, max_row_clue, 4)), _if_then_else(and_(True, False), _if_then_else(True, 0, 3), _if_then_else(False, 4, compare_blocks_rows)), _if_then_else(or_(True, True), _if_then_else(False, 4, 3), _if_then_else(False, 4, 4)))))
or_(and_(True, True), ge(_if_then_else(False, 0, _if_then_else(True, max_col_clue, 3)), _if_then_else(True, 3, _if_then_else(False, 2, ones_diff_cols))))
ge(_if_then_else(ge(_if_then_else(le(1, zeros_diff_cols), _if_then_else(False, 0, 2), _if_then_else(True, max_row_clue, zeros_diff_rows)), _if_then_else(le(0, compare_blocks_rows), _if_then_else(False, 2, ones_diff_rows), _if_then_else(True, zeros_diff_rows, compare_blocks_cols))), _if_then_else(or_(ge(2, max_col_clue), ge(1, 1)), _if_then_else(and_(False, True), _if_then_else(True, 4, 2), _if_then_else(True, max_col_clue, max_col_clue)), _if_then_else(ge(compare_blocks_rows, max_col_clue), _if_then_else(False, 0, 1), _if_then_else(False, compare_blocks_cols, zeros_diff_rows))), _if_then_else(and_(le(0, compare_blocks_rows), le(0, compare_blocks_rows)), _if_then_else(ge(ones_diff_rows, ones_diff_rows), _if_then_else(True, compare_blocks_rows, 3), _if_then_else(False, zeros_diff_cols, 1)), _if_then_else(le(1, compare_blocks_cols), _if_then_else(False, 1, 1), _if_then_else(False, ones_diff_cols, 1)))), _if_then_else(ge(_if_then_else(and_(False, True), _if_then_else(False, 4, zeros_diff_cols), _if_then_else(False, ones_diff_rows, 4)), _if_then_else(and_(True, False), _if_then_else(False, 0, max_row_clue), _if_then_else(False, 2, ones_diff_rows))), _if_then_else(or_(le(zeros_diff_rows, zeros_diff_cols), ge(2, 3)), _if_then_else(and_(False, False), _if_then_else(False, 0, max_row_clue), _if_then_else(False, 3, compare_blocks_rows)), _if_then_else(or_(True, False), _if_then_else(False, zeros_diff_rows, 1), _if_then_else(True, compare_blocks_rows, 0))), _if_then_else(and_(and_(True, False), ge(3, max_row_clue)), _if_then_else(le(ones_diff_cols, zeros_diff_cols), _if_then_else(False, compare_blocks_cols, max_col_clue), _if_then_else(False, compare_blocks_rows, zeros_diff_cols)), _if_then_else(and_(False, False), _if_then_else(False, ones_diff_cols, compare_blocks_cols), _if_then_else(True, 1, 3)))))
or_(and_(le(0, 4), and_(False, False)), ge(compare_blocks_rows, _if_then_else(or_(False, True), 2, zeros_diff_cols)))
le(_if_then_else(le(zeros_diff_cols, 1), _if_then_else(True, ones_diff_cols, max_row_clue), _if_then_else(True, 3, 4)), _if_then_else(le(max_row_clue, 0), _if_then_else(and_(le(compare_blocks_rows, 3), or_(True, True)), 3, compare_blocks_cols), _if_then_else(False, 2, compare_blocks_rows)))
VAL TREES:
mul(add(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_rows, ones_diff_rows)), add(add(ones_diff_rows, compare_blocks_rows), add(compare_blocks_rows, zeros_diff_rows)))
mul(add(mul(zeros_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, zeros_diff_rows)), mul(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, zeros_diff_cols)))
add(mul(add(compare_blocks_rows, zeros_diff_cols), mul(ones_diff_cols, compare_blocks_rows)), mul(add(ones_diff_cols, zeros_diff_cols), add(ones_diff_cols, compare_blocks_rows)))
add(add(add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, compare_blocks_cols)), mul(add(ones_diff_rows, compare_blocks_rows), mul(compare_blocks_rows, zeros_diff_cols))), add(add(add(compare_blocks_cols, compare_blocks_cols), mul(zeros_diff_cols, compare_blocks_rows)), add(mul(zeros_diff_cols, ones_diff_cols), add(zeros_diff_cols, compare_blocks_rows))))
add(mul(mul(add(ones_diff_rows, zeros_diff_cols), add(ones_diff_rows, compare_blocks_cols)), add(add(ones_diff_rows, compare_blocks_rows), add(zeros_diff_rows, compare_blocks_rows))), add(mul(add(zeros_diff_cols, ones_diff_cols), add(ones_diff_rows, zeros_diff_cols)), add(add(zeros_diff_rows, ones_diff_cols), add(zeros_diff_rows, compare_blocks_cols))))
mul(mul(mul(add(compare_blocks_rows, zeros_diff_rows), mul(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_cols))), add(add(add(zeros_diff_cols, zeros_diff_cols), mul(ones_diff_cols, zeros_diff_rows)), mul(add(compare_blocks_cols, ones_diff_cols), mul(zeros_diff_cols, compare_blocks_rows))))
COND TREES:
or_(ge(_if_then_else(ge(2, max_row_clue), zeros_diff_rows, zeros_diff_cols), _if_then_else(and_(True, False), 2, 3)), and_(and_(True, False), le(compare_blocks_cols, 1)))
and_(or_(and_(False, ge(1, zeros_diff_cols)), ge(_if_then_else(True, 1, compare_blocks_cols), ones_diff_cols)), ge(_if_then_else(True, ones_diff_cols, _if_then_else(ge(max_row_clue, zeros_diff_rows), max_col_clue, 4)), _if_then_else(False, compare_blocks_cols, compare_blocks_cols)))
ge(_if_then_else(and_(False, True), _if_then_else(False, _if_then_else(ge(zeros_diff_rows, _if_then_else(False, ones_diff_cols, 3)), 0, zeros_diff_cols), ones_diff_rows), _if_then_else(le(4, compare_blocks_rows), _if_then_else(True, ones_diff_cols, ones_diff_rows), 0)), _if_then_else(ge(zeros_diff_rows, _if_then_else(False, compare_blocks_cols, 3)), _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 2, max_col_clue)))
ge(_if_then_else(le(4, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows)), _if_then_else(False, 1, _if_then_else(True, compare_blocks_rows, zeros_diff_rows)))
le(_if_then_else(or_(True, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(False, compare_blocks_rows, 3)), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(True, max_row_clue, zeros_diff_cols), _if_then_else(ge(compare_blocks_cols, compare_blocks_cols), 0, 2)))
VAL TREES:
add(mul(mul(mul(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols))), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows))))
mul(add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows)))
add(add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows)))
add(mul(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
mul(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))


INFO:root:hof: COND TREES:
le(_if_then_else(le(_if_then_else(and_(True, False), _if_then_else(False, max_col_clue, max_col_clue), _if_then_else(True, compare_blocks_rows, ones_diff_rows)), _if_then_else(le(max_row_clue, max_row_clue), _if_then_else(False, compare_blocks_cols, max_col_clue), _if_then_else(False, 2, 0))), _if_then_else(and_(le(zeros_diff_rows, 3), or_(False, True)), _if_then_else(and_(True, False), _if_then_else(True, 0, 2), _if_then_else(False, 0, zeros_diff_rows)), _if_then_else(and_(False, True), _if_then_else(False, 4, ones_diff_rows), _if_then_else(True, 4, ones_diff_rows))), _if_then_else(or_(le(ones_diff_rows, ones_diff_cols), and_(True, False)), _if_then_else(and_(True, True), _if_then_else(False, max_col_clue, 1), _if_then_else(False, zeros_diff_cols, ones_diff_cols)), _if_then_else(and_(False, False), _if_then_else(False, compare_blocks_rows, ones_diff_cols), _if_then_else(True, zeros_diff_cols, ones_diff_rows)))), _if_then_else(and_(and_(ge(compare_blocks_rows, 0), and_(True, False)), or_(ge(2, ones_diff_cols), le(3, max_col_clue))), _if_then_else(and_(ge(max_row_clue, compare_blocks_rows), and_(False, False)), _if_then_else(ge(4, 4), _if_then_else(False, 3, 4), _if_then_else(False, 3, 3)), _if_then_else(and_(True, False), _if_then_else(False, max_col_clue, 3), _if_then_else(False, 4, compare_blocks_cols))), _if_then_else(or_(or_(False, True), or_(False, False)), _if_then_else(le(ones_diff_rows, zeros_diff_rows), _if_then_else(True, max_row_clue, 2), _if_then_else(True, max_col_clue, compare_blocks_rows)), _if_then_else(or_(False, False), _if_then_else(False, max_row_clue, 0), _if_then_else(False, 1, zeros_diff_rows)))))
and_(le(_if_then_else(True, 0, compare_blocks_rows), _if_then_else(True, zeros_diff_cols, compare_blocks_cols)), and_(ge(compare_blocks_cols, 4), and_(False, False)))
le(_if_then_else(or_(False, False), _if_then_else(True, 4, compare_blocks_rows), _if_then_else(False, 1, 1)), _if_then_else(or_(True, True), _if_then_else(False, 3, max_col_clue), _if_then_else(False, zeros_diff_cols, zeros_diff_cols)))
and_(le(_if_then_else(False, 0, compare_blocks_cols), _if_then_else(True, ones_diff_rows, ones_diff_cols)), and_(ge(2, max_col_clue), or_(True, False)))
le(_if_then_else(le(3, zeros_diff_cols), _if_then_else(True, 1, 3), _if_then_else(True, 1, max_col_clue)), _if_then_else(or_(False, True), _if_then_else(True, ones_diff_rows, compare_blocks_cols), _if_then_else(True, zeros_diff_rows, ones_diff_rows)))
VAL TREES:
add(mul(mul(compare_blocks_rows, ones_diff_cols), add(add(compare_blocks_rows, compare_blocks_rows), mul(zeros_diff_rows, compare_blocks_cols))), add(mul(add(ones_diff_rows, compare_blocks_rows), zeros_diff_cols), mul(mul(compare_blocks_rows, ones_diff_cols), compare_blocks_cols)))
add(mul(mul(add(ones_diff_rows, ones_diff_rows), ones_diff_rows), mul(zeros_diff_cols, mul(mul(compare_blocks_cols, ones_diff_rows), compare_blocks_rows))), add(add(zeros_diff_rows, compare_blocks_rows), add(ones_diff_rows, zeros_diff_cols)))
add(add(add(mul(ones_diff_cols, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)), mul(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_rows, zeros_diff_cols))), add(add(mul(compare_blocks_rows, ones_diff_rows), add(compare_blocks_cols, compare_blocks_cols)), add(add(compare_blocks_cols, compare_blocks_rows), add(zeros_diff_cols, ones_diff_cols))))
mul(mul(mul(compare_blocks_cols, compare_blocks_rows), mul(compare_blocks_rows, zeros_diff_cols)), mul(mul(add(ones_diff_cols, ones_diff_cols), ones_diff_rows), add(zeros_diff_cols, compare_blocks_cols)))
mul(add(add(compare_blocks_rows, compare_blocks_rows), mul(ones_diff_rows, compare_blocks_rows)), add(mul(ones_diff_rows, zeros_diff_rows), add(ones_diff_cols, zeros_diff_cols)))
mul(mul(add(zeros_diff_cols, zeros_diff_cols), mul(zeros_diff_rows, mul(add(compare_blocks_rows, ones_diff_rows), add(compare_blocks_rows, zeros_diff_cols)))), add(mul(ones_diff_rows, add(compare_blocks_cols, add(ones_diff_cols, ones_diff_cols))), add(add(compare_blocks_cols, zeros_diff_rows), ones_diff_cols)))


INFO:root:stats: {'fitness': <deap.tools.support.Statistics object at 0x000001FBB3CF5B00>, 'size': <deap.tools.support.Statistics object at 0x000001FBB3CF5A90>}

