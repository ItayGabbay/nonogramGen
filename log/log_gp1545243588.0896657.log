INFO:root:

*******STARTING!!!******


INFO:root:

*******Configuration******


INFO:root:# NUM_ROWS = 20


INFO:root:NUM_ROWS = 5


INFO:root:# NUM_COLS = 20


INFO:root:NUM_COLS = 5


INFO:root:empty_in_split = '\xa0'


INFO:root:


INFO:root:pickle_unsolved_file_path = 'data/%dx%d_nonograms.pkl' % (NUM_ROWS, NUM_COLS)


INFO:root:pickle_solved_file_path = 'data/%dx%d_nonograms_solved.pkl' % (NUM_ROWS, NUM_COLS)


INFO:root:should_run_in_parallel = True


INFO:root:


INFO:root:NUM_COND_TREES = 5


INFO:root:NUM_VAL_TREES = NUM_COND_TREES + 1


INFO:root:prob_crossover_global = 0.6  # global probability for cx


INFO:root:prob_crossover_individual_cond = 0.8  # probability to cx a specific cond tree in an individual


INFO:root:prob_crossover_individual_val = 0.8  # probability to cx a specific cond tree in an individual


INFO:root:prob_mutate_global = 0.4


INFO:root:prob_mutate_individual_cond = 0.5


INFO:root:prob_mutate_individual_val = 0.5


INFO:root:


INFO:root:points_correct_box = 5


INFO:root:points_incorrect_box = 0


INFO:root:# points_incorrect_box = -2


INFO:root:pop_size = 100


INFO:root:hof_size = 1


INFO:root:# num_gen = 40


INFO:root:num_gen = 10


INFO:root:train_size = 3


INFO:root:

*******DONE!!!******


INFO:root:run time: 86 sec

INFO:root:max possible fitness for the nonograms ran: 73

INFO:root:log:    	      	              fitness              	              size              
   	      	-----------------------------------	--------------------------------
gen	nevals	avg    	max    	min    	std        	avg 	max	min	std     
0  	100   	48.3333	48.3333	48.3333	1.42109e-14	7.41	8  	6  	0.549454
1  	78    	47.95  	60     	35     	5.01584    	7.56	9  	6  	0.668132
2  	71    	49.85  	66.6667	40     	5.41138    	7.31	9  	6  	0.643351
3  	64    	52.4667	66.6667	40     	7.28957    	7.15	8  	6  	0.606218
4  	75    	54.2   	66.6667	35     	8.49667    	6.96	8  	6  	0.564269
5  	80    	54.8833	66.6667	35     	8.84827    	6.89	8  	6  	0.614736
6  	75    	57.1333	66.6667	35     	8.55076    	6.8 	8  	6  	0.6     
7  	78    	56.1   	66.6667	41.6667	8.66096    	6.65	8  	6  	0.572276
8  	74    	54.6167	66.6667	33.3333	8.695      	6.58	8  	5  	0.602993
9  	79    	54.8   	66.6667	33.3333	8.66436    	6.57	8  	5  	0.552359
10 	84    	56.6333	66.6667	41.6667	7.83858    	6.51	8  	6  	0.538424

INFO:root:pop: COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(True, 2, 1), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), 2))
le(compare_blocks_rows, _if_then_else(or_(False, True), _if_then_else(True, 4, ones_diff_cols), _if_then_else(True, 3, compare_blocks_rows)))
or_(and_(ge(_if_then_else(True, 2, zeros_diff_rows), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), or_(le(2, zeros_diff_cols), or_(False, True))), and_(and_(and_(True, False), ge(1, zeros_diff_rows)), or_(False, and_(False, True))))
ge(_if_then_else(True, _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(compare_blocks_rows, _if_then_else(True, zeros_diff_cols, zeros_diff_rows)), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(le(_if_then_else(False, 2, zeros_diff_cols), _if_then_else(False, zeros_diff_rows, 2)), 4, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(ge(_if_then_else(True, 4, zeros_diff_rows), _if_then_else(le(1, compare_blocks_cols), ones_diff_rows, compare_blocks_cols)), ones_diff_cols, compare_blocks_rows), _if_then_else(and_(False, False), 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), zeros_diff_rows)), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_rows))))
compare_blocks_cols
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(add(compare_blocks_cols, compare_blocks_cols), mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(False, 0, ones_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, 0)))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, compare_blocks_rows)), _if_then_else(or_(False, ge(0, compare_blocks_rows)), _if_then_else(True, 4, ones_diff_cols), _if_then_else(False, 0, max_row_clue)))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(True, zeros_diff_cols, compare_blocks_cols)), False), and_(and_(and_(True, False), ge(max_col_clue, zeros_diff_rows)), or_(le(ones_diff_rows, ones_diff_cols), and_(False, True))))
ge(_if_then_else(or_(and_(False, True), False), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(max_row_clue, _if_then_else(and_(False, True), 2, _if_then_else(False, 4, max_row_clue))), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(True, 4, zeros_diff_rows), _if_then_else(le(1, compare_blocks_cols), ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(True, ones_diff_cols, compare_blocks_rows), _if_then_else(True, 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))))
compare_blocks_cols
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(zeros_diff_cols, mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(False, 0, ones_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, zeros_diff_rows, ones_diff_cols)))
le(0, _if_then_else(True, 4, ones_diff_cols))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(ge(max_col_clue, zeros_diff_rows), zeros_diff_cols, compare_blocks_cols)), False), and_(and_(and_(True, False), ge(max_col_clue, zeros_diff_rows)), or_(le(ones_diff_rows, ones_diff_rows), and_(and_(and_(True, and_(True, False)), ge(max_col_clue, zeros_diff_rows)), or_(le(ones_diff_rows, ones_diff_cols), and_(False, True))))))
ge(_if_then_else(or_(True, False), _if_then_else(le(compare_blocks_rows, _if_then_else(True, 2, zeros_diff_rows)), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(max_row_clue, max_row_clue), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(True, 4, zeros_diff_rows), compare_blocks_cols), True)
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))))
compare_blocks_cols
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(zeros_diff_cols, mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, add(ones_diff_rows, compare_blocks_rows))))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(False, 0, ones_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(True, _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, 0)))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, compare_blocks_rows)), _if_then_else(or_(False, ge(0, compare_blocks_rows)), _if_then_else(False, 3, compare_blocks_rows), _if_then_else(False, 0, max_row_clue)))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(True, zeros_diff_cols, compare_blocks_cols)), False), and_(False, True))
ge(_if_then_else(or_(and_(False, True), False), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(max_row_clue, _if_then_else(and_(False, le(compare_blocks_rows, _if_then_else(True, 2, zeros_diff_rows))), 2, _if_then_else(False, 4, max_row_clue))), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(True, 4, zeros_diff_rows), _if_then_else(le(1, compare_blocks_cols), ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(False, ones_diff_cols, compare_blocks_rows), _if_then_else(True, 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_cols, zeros_diff_cols))), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))))
add(mul(ones_diff_rows, zeros_diff_cols), add(compare_blocks_rows, ones_diff_rows))
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(ones_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(zeros_diff_cols, mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(False, 0, ones_diff_cols), _if_then_else(True, _if_then_else(True, compare_blocks_rows, 0), _if_then_else(True, ones_diff_rows, ones_diff_rows))), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, 0)))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), 3), _if_then_else(False, 3, ones_diff_cols))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(ge(max_col_clue, zeros_diff_rows), zeros_diff_cols, compare_blocks_cols)), False), and_(and_(and_(True, False), ge(max_col_clue, zeros_diff_rows)), or_(and_(or_(False, False), and_(False, True)), or_(False, True))))
ge(_if_then_else(or_(and_(False, True), False), 2, _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(max_row_clue, _if_then_else(True, 2, _if_then_else(False, 4, max_row_clue))), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(True, 4, zeros_diff_rows), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), True)
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))))
compare_blocks_cols
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(zeros_diff_cols, mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, add(ones_diff_rows, compare_blocks_rows))))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(False, 0, ones_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), ones_diff_rows))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, compare_blocks_rows)), _if_then_else(False, _if_then_else(False, ones_diff_rows, compare_blocks_rows), compare_blocks_rows))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(ge(max_col_clue, zeros_diff_rows), zeros_diff_cols, compare_blocks_cols)), False), and_(and_(and_(True, False), ge(max_col_clue, zeros_diff_rows)), or_(le(ones_diff_rows, ones_diff_cols), and_(False, True))))
ge(_if_then_else(or_(and_(False, True), False), _if_then_else(le(compare_blocks_rows, _if_then_else(True, _if_then_else(le(compare_blocks_rows, _if_then_else(True, 2, zeros_diff_rows)), _if_then_else(True, 2, _if_then_else(True, 4, 1)), _if_then_else(True, compare_blocks_cols, 4)), zeros_diff_rows)), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(max_row_clue, _if_then_else(True, 2, _if_then_else(False, 4, max_row_clue))), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(True, 4, zeros_diff_rows), _if_then_else(le(1, compare_blocks_cols), ones_diff_rows, compare_blocks_cols)), True)
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))))
compare_blocks_cols
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(zeros_diff_cols, mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, add(ones_diff_rows, compare_blocks_rows))))
COND TREES:
le(_if_then_else(ge(3, max_col_clue), _if_then_else(False, 0, ones_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, 0)))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, compare_blocks_rows)), _if_then_else(and_(False, True), _if_then_else(True, 4, ones_diff_cols), _if_then_else(False, 0, max_row_clue)))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(True, zeros_diff_cols, compare_blocks_cols)), False), and_(and_(and_(True, False), ge(max_col_clue, zeros_diff_rows)), False))
ge(_if_then_else(or_(True, False), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(max_row_clue, _if_then_else(and_(False, False), _if_then_else(True, 2, 1), _if_then_else(False, 4, 4))), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(True, 4, zeros_diff_rows), _if_then_else(le(1, compare_blocks_cols), ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(ge(_if_then_else(ge(_if_then_else(True, ones_diff_cols, compare_blocks_rows), _if_then_else(True, 1, max_col_clue)), 4, 3), _if_then_else(le(1, compare_blocks_cols), ones_diff_rows, compare_blocks_cols)), 1, max_col_clue), _if_then_else(True, 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))))
compare_blocks_cols
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(zeros_diff_cols, mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(True, _if_then_else(ge(zeros_diff_cols, compare_blocks_cols), _if_then_else(False, 2, 3), _if_then_else(True, ones_diff_cols, 0)), 1), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, 0)))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, compare_blocks_rows)), 3)
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(True, zeros_diff_cols, 2)), or_(ge(_if_then_else(True, 2, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), or_(False, True))), and_(and_(and_(True, False), ge(compare_blocks_rows, zeros_diff_rows)), or_(le(ones_diff_rows, ones_diff_cols), and_(False, True))))
ge(_if_then_else(or_(and_(False, True), False), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(max_row_clue, _if_then_else(and_(False, True), _if_then_else(and_(False, False), _if_then_else(True, ones_diff_cols, ones_diff_cols), _if_then_else(True, max_row_clue, 2)), zeros_diff_rows)), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(False, le(_if_then_else(False, ones_diff_cols, 1), _if_then_else(True, 2, 4)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_rows))))
mul(mul(add(compare_blocks_rows, compare_blocks_rows), add(ones_diff_rows, compare_blocks_rows)), mul(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_rows, zeros_diff_rows)))
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(add(compare_blocks_cols, compare_blocks_cols), mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(ge(3, max_col_clue), _if_then_else(True, ones_diff_rows, 1), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, zeros_diff_rows, ones_diff_cols)))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), zeros_diff_rows), _if_then_else(or_(False, True), _if_then_else(True, 4, ones_diff_cols), _if_then_else(False, 3, _if_then_else(or_(False, True), _if_then_else(True, 3, compare_blocks_rows), _if_then_else(True, 3, compare_blocks_rows)))))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(ge(max_col_clue, zeros_diff_rows), zeros_diff_cols, compare_blocks_cols)), or_(le(compare_blocks_cols, zeros_diff_cols), or_(False, True))), and_(True, False))
ge(_if_then_else(True, _if_then_else(True, 2, 3), _if_then_else(False, 4, 1)), _if_then_else(le(compare_blocks_rows, _if_then_else(True, 2, zeros_diff_rows)), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(True, False)
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_rows))))
mul(mul(add(compare_blocks_rows, compare_blocks_rows), add(ones_diff_rows, compare_blocks_rows)), mul(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_rows, zeros_diff_rows)))
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(add(compare_blocks_cols, compare_blocks_cols), mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(True, 2, 1), _if_then_else(True, compare_blocks_rows, ones_diff_rows)), _if_then_else(and_(True, True), _if_then_else(True, zeros_diff_rows, ones_diff_cols), 2))
le(compare_blocks_rows, _if_then_else(or_(False, True), _if_then_else(True, 4, ones_diff_cols), _if_then_else(True, 4, ones_diff_cols)))
or_(and_(ge(_if_then_else(True, 2, zeros_diff_rows), _if_then_else(True, 2, 3)), or_(le(2, zeros_diff_cols), or_(and_(False, True), le(ones_diff_cols, max_col_clue)))), and_(and_(and_(and_(and_(True, False), ge(max_col_clue, zeros_diff_rows)), or_(False, and_(False, True))), ge(1, zeros_diff_rows)), or_(False, and_(False, True))))
ge(_if_then_else(True, _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(compare_blocks_rows, _if_then_else(True, zeros_diff_cols, max_row_clue)), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(True, compare_blocks_cols, _if_then_else(True, max_row_clue, 2))))
or_(ge(_if_then_else(ge(_if_then_else(True, ones_diff_cols, compare_blocks_rows), _if_then_else(True, 1, max_col_clue)), 4, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(ge(_if_then_else(True, 4, zeros_diff_rows), _if_then_else(le(1, compare_blocks_cols), ones_diff_rows, compare_blocks_cols)), ones_diff_cols, compare_blocks_rows), _if_then_else(and_(False, False), 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), zeros_diff_rows)), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_rows))))
compare_blocks_cols
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(add(compare_blocks_cols, compare_blocks_cols), mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_rows, compare_blocks_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(True, 2, 1), _if_then_else(True, 3, ones_diff_rows)), _if_then_else(True, _if_then_else(True, zeros_diff_rows, ones_diff_cols), 2))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(or_(False, True), _if_then_else(True, 4, ones_diff_cols), _if_then_else(True, 3, compare_blocks_rows)))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), or_(le(2, zeros_diff_cols), or_(False, True))), and_(and_(and_(True, False), and_(True, False)), or_(False, and_(False, True))))
ge(_if_then_else(True, _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 2), _if_then_else(True, zeros_diff_cols, max_row_clue), 1)), _if_then_else(le(compare_blocks_rows, _if_then_else(True, 2, zeros_diff_rows)), _if_then_else(True, 2, 3), zeros_diff_rows))
or_(ge(_if_then_else(le(_if_then_else(False, 2, zeros_diff_cols), _if_then_else(False, zeros_diff_rows, max_col_clue)), 4, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(True, ones_diff_cols, compare_blocks_rows), _if_then_else(and_(False, False), 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_rows))))
mul(mul(add(compare_blocks_rows, compare_blocks_rows), add(ones_diff_rows, compare_blocks_rows)), mul(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_rows, zeros_diff_rows)))
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(add(compare_blocks_cols, compare_blocks_cols), mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(ge(3, max_col_clue), _if_then_else(True, 2, 1), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(True, ones_diff_rows, 2))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(or_(False, True), _if_then_else(True, 4, ones_diff_cols), _if_then_else(True, 3, compare_blocks_rows)))
or_(and_(ge(_if_then_else(True, 2, 2), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), or_(le(2, zeros_diff_cols), or_(False, True))), and_(and_(ge(1, zeros_diff_rows), ge(1, zeros_diff_rows)), or_(False, and_(False, ge(_if_then_else(True, ones_diff_cols, zeros_diff_cols), _if_then_else(True, max_col_clue, 0))))))
ge(_if_then_else(le(_if_then_else(False, zeros_diff_rows, compare_blocks_cols), _if_then_else(True, 2, max_row_clue)), 4, _if_then_else(True, compare_blocks_cols, 4)), _if_then_else(le(compare_blocks_rows, _if_then_else(True, 2, zeros_diff_rows)), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(le(_if_then_else(False, 2, zeros_diff_cols), _if_then_else(False, zeros_diff_rows, 2)), 4, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(True, ones_diff_cols, _if_then_else(False, 3, 2)), _if_then_else(True, 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_rows))))
mul(mul(add(compare_blocks_rows, compare_blocks_rows), add(ones_diff_rows, compare_blocks_rows)), mul(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_rows, zeros_diff_rows)))
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(add(compare_blocks_cols, compare_blocks_cols), mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(True, 2, 0), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, ones_diff_rows)))
le(_if_then_else(and_(False, True), 0, _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(False, 3, _if_then_else(True, 4, ones_diff_cols)))
or_(False, ge(_if_then_else(True, 2, 3), compare_blocks_rows))
ge(_if_then_else(and_(False, False), _if_then_else(True, 2, 1), _if_then_else(False, 4, 4)), _if_then_else(and_(False, True), _if_then_else(True, ones_diff_rows, 3), _if_then_else(True, compare_blocks_cols, max_row_clue)))
or_(ge(_if_then_else(le(1, compare_blocks_cols), 4, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(le(0, max_row_clue), _if_then_else(True, 1, 1), _if_then_else(True, ones_diff_rows, ones_diff_cols)), _if_then_else(ge(_if_then_else(True, 4, 3), _if_then_else(le(1, compare_blocks_cols), ones_diff_rows, compare_blocks_cols)), 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_rows))))
mul(mul(add(compare_blocks_rows, compare_blocks_rows), add(ones_diff_rows, compare_blocks_rows)), mul(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_rows, zeros_diff_rows)))
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_rows, ones_diff_rows)), compare_blocks_cols)))
mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows))
add(add(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(ones_diff_rows, ones_diff_rows)), mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(False, 0, ones_diff_cols), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, ones_diff_rows)))
le(_if_then_else(or_(True, False), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, compare_blocks_rows)), _if_then_else(or_(False, or_(False, False)), compare_blocks_rows, _if_then_else(False, 3, compare_blocks_rows)))
or_(and_(ge(zeros_diff_rows, _if_then_else(True, ones_diff_rows, compare_blocks_cols)), or_(le(2, zeros_diff_cols), or_(False, True))), and_(and_(and_(and_(True, False), ge(max_col_clue, zeros_diff_rows)), or_(le(ones_diff_rows, ones_diff_cols), and_(False, True))), or_(False, and_(False, True))))
ge(_if_then_else(True, _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(compare_blocks_rows, _if_then_else(True, 2, zeros_diff_rows)), _if_then_else(True, 2, 3), _if_then_else(True, _if_then_else(False, zeros_diff_cols, ones_diff_rows), 4)))
or_(ge(ones_diff_rows, _if_then_else(True, ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(True, _if_then_else(False, 0, 4), compare_blocks_rows), _if_then_else(True, 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_rows))))
mul(mul(add(compare_blocks_rows, compare_blocks_rows), add(ones_diff_rows, compare_blocks_rows)), mul(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_rows, zeros_diff_rows)))
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(add(compare_blocks_cols, compare_blocks_cols), mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(True, ones_diff_rows, 1), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, 0)))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), zeros_diff_rows), _if_then_else(or_(False, True), _if_then_else(True, 4, ones_diff_cols), _if_then_else(False, 3, _if_then_else(or_(False, True), _if_then_else(False, _if_then_else(True, zeros_diff_rows, _if_then_else(True, compare_blocks_cols, 0)), _if_then_else(False, ones_diff_rows, compare_blocks_rows)), _if_then_else(True, 3, compare_blocks_rows)))))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(True, max_row_clue, compare_blocks_cols)), or_(le(_if_then_else(True, zeros_diff_cols, 2), zeros_diff_cols), or_(False, True))), and_(and_(and_(True, False), ge(max_col_clue, zeros_diff_rows)), or_(False, and_(False, True))))
ge(_if_then_else(True, _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(False, 4, 1)), _if_then_else(le(compare_blocks_rows, _if_then_else(True, 2, zeros_diff_rows)), _if_then_else(True, 2, 3), _if_then_else(True, zeros_diff_cols, max_row_clue)))
or_(ge(_if_then_else(le(_if_then_else(False, 2, zeros_diff_cols), _if_then_else(False, zeros_diff_rows, 2)), 4, 3), _if_then_else(True, ones_diff_rows, _if_then_else(True, zeros_diff_rows, zeros_diff_cols))), False)
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_rows))))
mul(mul(add(compare_blocks_rows, compare_blocks_rows), add(ones_diff_rows, compare_blocks_rows)), mul(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_rows, zeros_diff_rows)))
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(add(compare_blocks_cols, compare_blocks_cols), mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(True, 2, 1), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), 2))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(or_(or_(False, False), True), _if_then_else(True, 4, ones_diff_cols), _if_then_else(True, 3, compare_blocks_rows)))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), or_(le(2, zeros_diff_cols), or_(False, True))), and_(and_(and_(True, False), ge(1, zeros_diff_rows)), or_(False, and_(False, True))))
ge(_if_then_else(True, _if_then_else(True, compare_blocks_cols, 4), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(compare_blocks_rows, _if_then_else(True, 2, zeros_diff_rows)), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(True, 4, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(True, ones_diff_cols, compare_blocks_rows), _if_then_else(and_(False, False), 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_rows))))
mul(mul(add(compare_blocks_rows, compare_blocks_rows), add(ones_diff_rows, compare_blocks_rows)), mul(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_rows, zeros_diff_rows)))
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(add(compare_blocks_cols, compare_blocks_cols), mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(ge(3, max_col_clue), _if_then_else(False, 0, ones_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(and_(True, True), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, 0)))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, compare_blocks_rows)), _if_then_else(and_(False, True), _if_then_else(True, 4, ones_diff_cols), _if_then_else(False, 0, max_row_clue)))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(True, zeros_diff_cols, compare_blocks_cols)), False), and_(and_(and_(True, False), ge(max_col_clue, zeros_diff_rows)), ge(_if_then_else(True, 2, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols))))
ge(_if_then_else(or_(and_(False, True), False), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(max_row_clue, _if_then_else(and_(False, False), _if_then_else(True, 2, 1), _if_then_else(False, 4, 4))), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(True, 4, zeros_diff_rows), _if_then_else(le(1, compare_blocks_cols), ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(ge(_if_then_else(True, 4, 3), _if_then_else(True, 4, zeros_diff_rows)), 1, max_col_clue), _if_then_else(True, 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))))
compare_blocks_cols
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(zeros_diff_cols, mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(ge(3, max_col_clue), _if_then_else(False, 0, ones_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(True, _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, 0)))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, compare_blocks_rows)), _if_then_else(or_(False, ge(0, compare_blocks_rows)), _if_then_else(True, 4, ones_diff_cols), _if_then_else(False, 0, max_row_clue)))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(True, zeros_diff_cols, compare_blocks_cols)), False), and_(and_(and_(True, and_(True, False)), ge(max_col_clue, zeros_diff_rows)), or_(le(ones_diff_rows, ones_diff_cols), and_(False, True))))
ge(_if_then_else(or_(and_(False, True), False), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(max_row_clue, _if_then_else(True, 2, _if_then_else(False, 4, max_row_clue))), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(le(1, compare_blocks_cols), ones_diff_rows, compare_blocks_cols), _if_then_else(le(1, compare_blocks_cols), ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(False, ones_diff_cols, compare_blocks_rows), _if_then_else(True, 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))))
add(add(ones_diff_rows, ones_diff_rows), mul(zeros_diff_cols, compare_blocks_rows))
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(zeros_diff_cols, mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, compare_blocks_rows), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(False, 0, ones_diff_cols), _if_then_else(and_(True, True), _if_then_else(True, 2, 1), _if_then_else(True, compare_blocks_rows, ones_diff_rows))), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, 0)))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, compare_blocks_rows)), _if_then_else(or_(False, ge(0, compare_blocks_rows)), _if_then_else(True, 4, ones_diff_cols), _if_then_else(or_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, compare_blocks_rows))))
or_(and_(ge(compare_blocks_cols, _if_then_else(True, zeros_diff_cols, compare_blocks_cols)), False), and_(and_(and_(True, False), ge(max_col_clue, zeros_diff_rows)), or_(le(ones_diff_rows, ones_diff_cols), and_(False, True))))
ge(_if_then_else(or_(and_(False, True), False), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(max_row_clue, _if_then_else(True, 2, _if_then_else(False, 4, max_row_clue))), _if_then_else(True, 2, 3), _if_then_else(or_(le(max_col_clue, 2), False), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 2), 4, 1))))
or_(ge(_if_then_else(True, 4, zeros_diff_rows), _if_then_else(ge(_if_then_else(True, 4, zeros_diff_rows), _if_then_else(le(1, compare_blocks_cols), ones_diff_rows, compare_blocks_cols)), ones_diff_cols, compare_blocks_rows)), ge(_if_then_else(True, ones_diff_cols, compare_blocks_rows), _if_then_else(True, 1, max_col_clue)))
VAL TREES:
mul(mul(mul(compare_blocks_rows, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))))
compare_blocks_cols
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(ones_diff_cols, mul(zeros_diff_cols, zeros_diff_rows)))
add(add(zeros_diff_cols, mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, add(add(ones_diff_cols, compare_blocks_rows), mul(zeros_diff_rows, zeros_diff_cols)))))
COND TREES:
le(_if_then_else(and_(True, True), ones_diff_rows, ones_diff_rows), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), 2))
le(compare_blocks_rows, _if_then_else(and_(False, True), _if_then_else(True, 4, ones_diff_cols), _if_then_else(True, 3, compare_blocks_rows)))
or_(and_(ge(_if_then_else(True, 2, zeros_diff_rows), _if_then_else(True, 2, 3)), or_(le(2, zeros_diff_cols), or_(and_(False, True), le(ones_diff_cols, max_col_clue)))), and_(and_(and_(True, False), ge(1, zeros_diff_rows)), or_(False, and_(False, True))))
ge(_if_then_else(True, _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(and_(False, True), 4, 1)), _if_then_else(le(compare_blocks_rows, _if_then_else(True, zeros_diff_cols, max_row_clue)), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, _if_then_else(True, max_row_clue, 2))))
or_(ge(_if_then_else(ge(_if_then_else(True, ones_diff_cols, compare_blocks_rows), _if_then_else(True, 1, max_col_clue)), 4, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(le(1, compare_blocks_cols), ones_diff_rows, compare_blocks_cols), _if_then_else(and_(False, False), 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), zeros_diff_rows)), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_rows))))
compare_blocks_cols
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(add(compare_blocks_cols, compare_blocks_cols), mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(ge(3, max_col_clue), _if_then_else(ge(3, max_col_clue), 0, ones_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, 0)))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, compare_blocks_rows)), _if_then_else(and_(False, True), _if_then_else(True, 4, ones_diff_cols), _if_then_else(or_(True, False), 0, max_row_clue)))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(True, zeros_diff_cols, compare_blocks_cols)), False), and_(and_(and_(True, False), ge(max_col_clue, zeros_diff_rows)), ge(_if_then_else(True, 2, 3), _if_then_else(True, 2, 2))))
ge(_if_then_else(or_(and_(False, True), False), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(max_row_clue, _if_then_else(and_(False, False), _if_then_else(True, 2, 1), _if_then_else(True, zeros_diff_cols, max_row_clue))), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(True, 4, zeros_diff_rows), _if_then_else(le(1, compare_blocks_cols), ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(ge(1, _if_then_else(le(1, compare_blocks_cols), ones_diff_rows, compare_blocks_cols)), 1, max_col_clue), _if_then_else(True, 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))))
compare_blocks_cols
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(zeros_diff_cols, mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(False, 0, ones_diff_cols), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, ones_diff_rows)))
le(_if_then_else(False, _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, compare_blocks_rows)), _if_then_else(or_(False, True), _if_then_else(True, 4, ones_diff_cols), _if_then_else(False, 3, compare_blocks_rows)))
or_(and_(ge(_if_then_else(True, 3, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), or_(le(2, zeros_diff_cols), or_(False, True))), and_(and_(and_(and_(True, False), ge(max_col_clue, zeros_diff_rows)), or_(le(ones_diff_rows, ones_diff_cols), and_(False, True))), or_(False, and_(False, True))))
ge(_if_then_else(True, _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(compare_blocks_rows, _if_then_else(True, 2, zeros_diff_rows)), _if_then_else(True, 2, 3), _if_then_else(True, _if_then_else(True, zeros_diff_cols, ones_diff_rows), 4)))
or_(ge(_if_then_else(le(_if_then_else(True, 4, 3), compare_blocks_cols), 4, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(True, _if_then_else(False, 0, 4), compare_blocks_rows), _if_then_else(True, 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_rows))))
mul(mul(add(compare_blocks_rows, compare_blocks_rows), add(ones_diff_rows, compare_blocks_rows)), mul(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_rows, zeros_diff_rows)))
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(add(compare_blocks_cols, compare_blocks_cols), mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(False, 0, ones_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, 0)))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, compare_blocks_rows)), _if_then_else(False, 3, compare_blocks_rows))
or_(and_(ge(_if_then_else(True, 2, 3), max_col_clue), False), and_(and_(and_(True, False), ge(max_col_clue, zeros_diff_rows)), or_(ge(_if_then_else(True, 2, 3), _if_then_else(True, zeros_diff_cols, compare_blocks_cols)), and_(False, True))))
ge(_if_then_else(or_(and_(False, True), False), max_row_clue, _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(True, 2, 3))
or_(ge(_if_then_else(True, _if_then_else(le(_if_then_else(False, 2, zeros_diff_cols), _if_then_else(le(1, compare_blocks_cols), zeros_diff_rows, 2)), 4, 3), zeros_diff_rows), _if_then_else(le(1, compare_blocks_cols), ones_diff_rows, compare_blocks_cols)), True)
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))))
compare_blocks_cols
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(zeros_diff_cols, mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, add(ones_diff_rows, compare_blocks_rows))))
COND TREES:
le(_if_then_else(ge(3, max_col_clue), _if_then_else(False, 0, ones_diff_cols), _if_then_else(True, ones_diff_rows, _if_then_else(ge(3, max_col_clue), _if_then_else(True, 2, 1), _if_then_else(True, ones_diff_rows, ones_diff_rows)))), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, 0)))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, compare_blocks_rows)), _if_then_else(and_(False, True), _if_then_else(True, 4, ones_diff_cols), _if_then_else(False, 0, max_row_clue)))
or_(and_(le(ones_diff_rows, ones_diff_cols), False), and_(and_(and_(True, False), ge(max_col_clue, zeros_diff_rows)), ge(_if_then_else(True, 2, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols))))
ge(_if_then_else(or_(and_(False, True), False), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(max_row_clue, _if_then_else(and_(False, False), _if_then_else(True, 2, 1), _if_then_else(False, 4, 4))), _if_then_else(le(max_row_clue, _if_then_else(True, 2, _if_then_else(False, 4, max_row_clue))), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(True, 4, zeros_diff_rows), _if_then_else(le(1, compare_blocks_cols), ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(ge(_if_then_else(True, 4, 3), _if_then_else(False, ones_diff_rows, compare_blocks_cols)), 1, max_col_clue), _if_then_else(True, 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))))
compare_blocks_cols
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(zeros_diff_cols, mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(False, 0, ones_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(True, _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, 0)))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 3), _if_then_else(False, ones_diff_rows, compare_blocks_rows)), _if_then_else(or_(False, ge(0, compare_blocks_rows)), _if_then_else(True, 4, ones_diff_cols), _if_then_else(False, 0, max_row_clue)))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(True, zeros_diff_cols, compare_blocks_cols)), False), and_(and_(and_(True, and_(True, False)), ge(max_col_clue, zeros_diff_rows)), or_(le(ones_diff_rows, zeros_diff_rows), and_(False, True))))
ge(_if_then_else(or_(and_(False, True), False), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(max_row_clue, _if_then_else(True, 2, _if_then_else(False, 4, max_row_clue))), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(ge(_if_then_else(True, 4, 3), _if_then_else(le(1, compare_blocks_cols), ones_diff_rows, compare_blocks_cols)), 4, zeros_diff_rows), _if_then_else(le(1, compare_blocks_cols), ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(False, ones_diff_cols, compare_blocks_rows), _if_then_else(True, 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))))
compare_blocks_cols
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(zeros_diff_cols, mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(True, 2, 0), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, ones_diff_rows)))
le(_if_then_else(and_(False, True), 0, _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(False, 4, compare_blocks_rows))
or_(False, ge(ones_diff_cols, compare_blocks_rows))
ge(_if_then_else(and_(False, False), _if_then_else(True, 2, 1), _if_then_else(False, 4, 4)), _if_then_else(and_(False, True), _if_then_else(True, ones_diff_rows, 3), _if_then_else(True, compare_blocks_cols, max_row_clue)))
or_(ge(ones_diff_rows, _if_then_else(True, ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(le(0, max_row_clue), _if_then_else(True, 1, 1), _if_then_else(True, ones_diff_rows, ones_diff_cols)), _if_then_else(True, 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_rows))))
mul(mul(add(compare_blocks_rows, compare_blocks_rows), add(ones_diff_rows, compare_blocks_rows)), mul(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_rows, zeros_diff_rows)))
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_rows, ones_diff_rows)), compare_blocks_cols)))
mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows))
add(add(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(ones_diff_rows, ones_diff_rows)), mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(True, 2, 0), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(and_(True, True), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, ones_diff_rows)))
le(_if_then_else(and_(False, True), 0, _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(False, 3, compare_blocks_rows))
or_(False, and_(False, True))
ge(_if_then_else(and_(False, False), _if_then_else(True, 2, 1), _if_then_else(False, 4, 4)), _if_then_else(and_(False, True), _if_then_else(True, ones_diff_rows, 3), _if_then_else(True, compare_blocks_cols, 2)))
or_(ge(ones_diff_rows, _if_then_else(True, ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(le(0, max_row_clue), _if_then_else(True, 1, 1), _if_then_else(True, ones_diff_rows, ones_diff_cols)), _if_then_else(ge(_if_then_else(True, ones_diff_cols, compare_blocks_rows), _if_then_else(True, 1, max_col_clue)), 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_rows))))
mul(mul(add(compare_blocks_rows, compare_blocks_rows), add(ones_diff_rows, compare_blocks_rows)), mul(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_rows, zeros_diff_rows)))
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_rows, ones_diff_rows)), compare_blocks_cols)))
mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_rows))
add(add(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(ones_diff_rows, ones_diff_rows)), mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(ge(3, max_col_clue), _if_then_else(True, 2, 1), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, 0)))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, compare_blocks_rows)), 3)
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(True, zeros_diff_cols, 2)), or_(False, or_(False, True))), and_(and_(and_(True, False), ge(compare_blocks_rows, zeros_diff_rows)), or_(le(ones_diff_rows, ones_diff_cols), ge(zeros_diff_rows, compare_blocks_rows))))
ge(_if_then_else(or_(and_(False, True), False), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(max_row_clue, _if_then_else(True, max_row_clue, zeros_diff_rows)), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(False, ge(_if_then_else(True, 4, 3), _if_then_else(le(1, compare_blocks_cols), ones_diff_rows, compare_blocks_cols)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_rows))))
mul(mul(add(compare_blocks_rows, compare_blocks_rows), add(ones_diff_rows, compare_blocks_rows)), mul(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_rows, zeros_diff_rows)))
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(add(compare_blocks_cols, compare_blocks_cols), mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(True, 0, ones_diff_cols), _if_then_else(and_(False, True), _if_then_else(False, compare_blocks_cols, 3), _if_then_else(True, max_col_clue, 4))), _if_then_else(ge(3, max_col_clue), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, zeros_diff_rows, ones_diff_cols)), _if_then_else(True, compare_blocks_rows, 0)))
le(_if_then_else(True, _if_then_else(True, zeros_diff_rows, 4), _if_then_else(True, 4, ones_diff_cols)), _if_then_else(or_(False, and_(False, True)), _if_then_else(True, _if_then_else(False, 2, 1), ones_diff_cols), _if_then_else(False, 0, max_row_clue)))
or_(and_(ge(_if_then_else(False, ones_diff_cols, 3), zeros_diff_rows), False), ge(4, 1))
ge(_if_then_else(or_(and_(False, True), False), compare_blocks_cols, _if_then_else(True, 4, 1)), _if_then_else(le(max_row_clue, _if_then_else(True, 2, _if_then_else(False, 4, max_row_clue))), _if_then_else(le(_if_then_else(and_(False, False), _if_then_else(True, zeros_diff_cols, 0), _if_then_else(True, compare_blocks_cols, max_col_clue)), _if_then_else(True, 2, _if_then_else(False, 4, max_row_clue))), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(True, 4, zeros_diff_rows), _if_then_else(le(max_col_clue, _if_then_else(True, _if_then_else(and_(True, True), _if_then_else(False, max_col_clue, 1), _if_then_else(True, zeros_diff_cols, 0)), zeros_diff_rows)), ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(True, ones_diff_cols, compare_blocks_rows), _if_then_else(le(_if_then_else(False, 2, zeros_diff_cols), zeros_diff_rows), 4, 3)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))))
compare_blocks_cols
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(zeros_diff_cols, mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(True, ones_diff_rows, 1), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(True, zeros_diff_rows, ones_diff_cols))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), zeros_diff_rows), _if_then_else(or_(False, True), _if_then_else(False, ones_diff_rows, compare_blocks_rows), _if_then_else(False, 3, _if_then_else(or_(False, True), _if_then_else(True, 4, ones_diff_cols), _if_then_else(True, 3, compare_blocks_rows)))))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(ge(max_col_clue, zeros_diff_rows), zeros_diff_cols, compare_blocks_cols)), or_(le(compare_blocks_cols, zeros_diff_cols), or_(False, True))), and_(and_(and_(True, False), ge(_if_then_else(True, zeros_diff_cols, 3), _if_then_else(True, zeros_diff_cols, 3))), or_(False, and_(False, True))))
ge(_if_then_else(True, _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(False, 4, 1)), _if_then_else(le(compare_blocks_rows, _if_then_else(True, 2, zeros_diff_rows)), _if_then_else(True, 2, 3), _if_then_else(True, _if_then_else(True, zeros_diff_cols, max_row_clue), 4)))
or_(True, False)
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_rows))))
mul(mul(add(compare_blocks_rows, compare_blocks_rows), add(ones_diff_rows, compare_blocks_rows)), mul(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_rows, zeros_diff_rows)))
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(add(compare_blocks_cols, compare_blocks_cols), mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(False, 0, _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(True, _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, 0)))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), 3), _if_then_else(or_(False, ge(0, compare_blocks_rows)), _if_then_else(True, 4, ones_diff_cols), _if_then_else(False, 0, max_row_clue)))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(True, zeros_diff_cols, compare_blocks_cols)), False), and_(and_(and_(True, and_(True, False)), ge(max_col_clue, zeros_diff_rows)), or_(le(ones_diff_rows, ones_diff_cols), and_(False, True))))
ge(_if_then_else(or_(and_(False, True), False), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(max_row_clue, _if_then_else(True, 2, _if_then_else(False, 4, max_row_clue))), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(True, ones_diff_cols, compare_blocks_rows), _if_then_else(ge(_if_then_else(True, 4, 3), _if_then_else(False, 2, zeros_diff_cols)), 1, max_col_clue)), ge(_if_then_else(False, ones_diff_cols, compare_blocks_rows), _if_then_else(True, 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))))
add(add(ones_diff_rows, ones_diff_rows), mul(zeros_diff_cols, compare_blocks_rows))
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(zeros_diff_cols, mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, compare_blocks_rows), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(True, 2, 0), ones_diff_cols), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, ones_diff_rows)))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(False, _if_then_else(False, ones_diff_rows, compare_blocks_rows), compare_blocks_rows))
or_(False, True)
ge(_if_then_else(le(compare_blocks_rows, _if_then_else(True, 2, zeros_diff_rows)), _if_then_else(True, 2, 1), _if_then_else(False, 4, 4)), _if_then_else(and_(False, True), _if_then_else(True, ones_diff_rows, 3), _if_then_else(True, compare_blocks_cols, max_row_clue)))
or_(ge(ones_diff_rows, _if_then_else(True, ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(True, 4, zeros_diff_rows), _if_then_else(le(1, compare_blocks_cols), ones_diff_rows, compare_blocks_cols)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(compare_blocks_cols, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_rows))))
mul(mul(add(compare_blocks_rows, compare_blocks_rows), mul(ones_diff_cols, compare_blocks_rows)), mul(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_rows, zeros_diff_rows)))
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_rows, ones_diff_rows)), compare_blocks_cols)))
mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_cols))
add(add(compare_blocks_rows, mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(True, 2, 1), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(True, _if_then_else(True, zeros_diff_rows, ones_diff_cols), 2))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(False, _if_then_else(True, 4, ones_diff_cols), _if_then_else(True, 3, compare_blocks_rows)))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), or_(le(2, zeros_diff_cols), or_(False, True))), and_(and_(False, ge(1, zeros_diff_rows)), or_(False, and_(False, True))))
ge(_if_then_else(True, _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(compare_blocks_rows, _if_then_else(True, _if_then_else(True, 2, zeros_diff_rows), zeros_diff_rows)), _if_then_else(True, 2, 3), zeros_diff_rows))
or_(ge(_if_then_else(le(_if_then_else(False, 2, zeros_diff_cols), _if_then_else(False, zeros_diff_rows, max_col_clue)), 4, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(True, ones_diff_cols, compare_blocks_rows), _if_then_else(and_(False, False), 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_rows))))
mul(mul(add(compare_blocks_rows, compare_blocks_rows), add(ones_diff_rows, compare_blocks_rows)), mul(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_rows, zeros_diff_rows)))
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(add(compare_blocks_cols, compare_blocks_cols), mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(True, 2, 0), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, ones_diff_rows)))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(or_(False, True), ones_diff_rows, zeros_diff_rows)), _if_then_else(False, 3, compare_blocks_rows))
or_(and_(True, False), True)
ge(_if_then_else(le(compare_blocks_rows, 2), _if_then_else(True, 2, 1), _if_then_else(False, 4, 4)), _if_then_else(and_(False, True), _if_then_else(True, ones_diff_rows, 3), _if_then_else(True, compare_blocks_cols, max_row_clue)))
or_(ge(ones_diff_rows, _if_then_else(True, ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(True, ones_diff_cols, compare_blocks_rows), _if_then_else(ge(_if_then_else(True, 4, 3), _if_then_else(False, 2, zeros_diff_cols)), 1, max_col_clue)))
VAL TREES:
mul(mul(add(zeros_diff_cols, zeros_diff_cols), mul(zeros_diff_rows, compare_blocks_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_rows))))
mul(mul(add(compare_blocks_rows, compare_blocks_rows), mul(ones_diff_cols, compare_blocks_rows)), mul(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_rows, ones_diff_cols)))
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(mul(ones_diff_cols, zeros_diff_cols), compare_blocks_cols)))
mul(mul(compare_blocks_rows, zeros_diff_rows), add(mul(zeros_diff_rows, ones_diff_rows), add(compare_blocks_cols, zeros_diff_cols)))
add(add(compare_blocks_rows, mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(False, 0, ones_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(True, _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, 0)))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, compare_blocks_rows)), _if_then_else(or_(False, ge(0, compare_blocks_rows)), _if_then_else(True, 4, ones_diff_cols), _if_then_else(and_(False, True), _if_then_else(False, 3, max_col_clue), _if_then_else(False, 0, zeros_diff_rows))))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(True, zeros_diff_cols, compare_blocks_cols)), False), and_(and_(and_(True, and_(True, False)), ge(max_col_clue, zeros_diff_rows)), or_(le(ones_diff_rows, ones_diff_cols), and_(True, False))))
ge(_if_then_else(or_(and_(False, True), False), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(max_row_clue, _if_then_else(True, 2, _if_then_else(False, 4, max_row_clue))), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(True, 4, zeros_diff_rows), _if_then_else(le(1, compare_blocks_cols), ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(False, ones_diff_cols, compare_blocks_rows), _if_then_else(True, 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))))
compare_blocks_cols
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(zeros_diff_cols, mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(False, 0, ones_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, 0)))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, compare_blocks_rows)), _if_then_else(or_(False, ge(0, compare_blocks_rows)), _if_then_else(True, 4, ones_diff_cols), _if_then_else(False, 0, max_row_clue)))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(True, zeros_diff_cols, compare_blocks_cols)), False), and_(and_(and_(True, False), ge(max_col_clue, zeros_diff_rows)), or_(le(ones_diff_rows, ones_diff_cols), and_(False, True))))
ge(_if_then_else(or_(and_(False, True), False), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(max_row_clue, _if_then_else(and_(False, True), 2, _if_then_else(False, 4, max_row_clue))), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(True, 4, zeros_diff_rows), _if_then_else(le(1, compare_blocks_cols), ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(True, ones_diff_cols, compare_blocks_rows), _if_then_else(True, 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))))
compare_blocks_cols
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(zeros_diff_cols, mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(False, 0, ones_diff_cols), _if_then_else(ge(3, max_col_clue), ones_diff_rows, ones_diff_rows)), _if_then_else(True, _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, 0)))
le(_if_then_else(False, ones_diff_rows, compare_blocks_rows), _if_then_else(or_(False, ge(0, compare_blocks_rows)), _if_then_else(True, 4, ones_diff_cols), _if_then_else(False, 0, max_row_clue)))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(True, zeros_diff_cols, compare_blocks_cols)), False), and_(and_(and_(and_(True, False), ge(max_col_clue, zeros_diff_rows)), ge(max_col_clue, zeros_diff_rows)), or_(le(ones_diff_rows, ones_diff_cols), and_(False, True))))
ge(_if_then_else(or_(and_(False, True), False), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(max_row_clue, _if_then_else(True, 2, _if_then_else(False, _if_then_else(True, compare_blocks_cols, 4), max_row_clue))), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, _if_then_else(True, 2, _if_then_else(False, 4, max_row_clue)))))
or_(ge(_if_then_else(True, 4, zeros_diff_rows), _if_then_else(le(1, compare_blocks_cols), ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(False, ones_diff_cols, compare_blocks_rows), _if_then_else(True, 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))))
compare_blocks_cols
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(zeros_diff_cols, mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(False, 0, ones_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, 0)))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(True, _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, compare_blocks_rows))), _if_then_else(False, 3, compare_blocks_rows))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(ge(max_col_clue, zeros_diff_rows), zeros_diff_cols, compare_blocks_cols)), False), and_(and_(and_(True, False), ge(max_col_clue, zeros_diff_rows)), or_(le(ones_diff_rows, ones_diff_cols), and_(False, True))))
ge(_if_then_else(or_(and_(False, True), False), _if_then_else(le(compare_blocks_rows, _if_then_else(True, 2, zeros_diff_rows)), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(max_row_clue, 4), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(True, 4, zeros_diff_rows), _if_then_else(le(1, compare_blocks_cols), ones_diff_rows, compare_blocks_cols)), True)
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))))
compare_blocks_cols
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(zeros_diff_cols, mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, add(ones_diff_rows, compare_blocks_rows))))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(True, 2, 0), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, ones_diff_rows)))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(True, _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, compare_blocks_rows)))
or_(False, True)
ge(_if_then_else(le(compare_blocks_rows, _if_then_else(True, 2, zeros_diff_rows)), _if_then_else(True, 2, 1), _if_then_else(False, 4, 4)), _if_then_else(and_(False, True), _if_then_else(True, ones_diff_rows, 3), _if_then_else(True, compare_blocks_cols, max_row_clue)))
or_(ge(ones_diff_rows, _if_then_else(True, ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(True, ones_diff_cols, compare_blocks_rows), _if_then_else(ge(_if_then_else(True, 4, 3), _if_then_else(False, 2, zeros_diff_cols)), 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(compare_blocks_cols, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_rows))))
mul(mul(add(compare_blocks_rows, compare_blocks_rows), mul(ones_diff_cols, compare_blocks_rows)), mul(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_rows, zeros_diff_rows)))
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_rows, ones_diff_rows)), compare_blocks_cols)))
mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_cols))
add(add(compare_blocks_rows, mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(False, 0, ones_diff_cols), _if_then_else(le(max_row_clue, compare_blocks_rows), _if_then_else(False, 4, 0), _if_then_else(False, ones_diff_rows, ones_diff_rows))), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, 0)))
le(_if_then_else(False, 3, compare_blocks_rows), _if_then_else(False, 3, compare_blocks_rows))
or_(True, and_(and_(and_(True, False), ge(max_col_clue, zeros_diff_rows)), or_(le(ones_diff_rows, ones_diff_rows), and_(False, True))))
ge(_if_then_else(or_(and_(False, True), False), _if_then_else(le(compare_blocks_rows, _if_then_else(True, 2, zeros_diff_rows)), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(max_row_clue, max_row_clue), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(True, 4, zeros_diff_rows), compare_blocks_cols), ge(_if_then_else(True, 4, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))))
compare_blocks_cols
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(zeros_diff_cols, mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, add(ones_diff_rows, compare_blocks_rows))))
COND TREES:
le(_if_then_else(ge(3, max_col_clue), _if_then_else(False, _if_then_else(True, zeros_diff_rows, ones_diff_cols), ones_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, 0)))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, compare_blocks_rows)), _if_then_else(and_(False, True), _if_then_else(True, 4, zeros_diff_rows), _if_then_else(False, 0, max_row_clue)))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(True, zeros_diff_cols, compare_blocks_cols)), False), and_(and_(and_(True, False), ge(max_col_clue, zeros_diff_rows)), ge(_if_then_else(True, 2, 3), _if_then_else(and_(False, True), ones_diff_rows, compare_blocks_cols))))
ge(_if_then_else(or_(and_(False, True), False), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(max_row_clue, _if_then_else(and_(False, False), _if_then_else(True, 2, 1), _if_then_else(False, 4, 4))), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(True, 4, zeros_diff_rows), _if_then_else(le(1, compare_blocks_cols), ones_diff_rows, compare_blocks_cols)), True)
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))))
ones_diff_rows
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_cols, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(zeros_diff_cols, mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(ge(3, max_col_clue), and_(True, False)), _if_then_else(True, 2, 1), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(ge(3, max_col_clue), 0, _if_then_else(True, compare_blocks_rows, 0)))
le(_if_then_else(and_(False, True), _if_then_else(True, ones_diff_cols, 4), _if_then_else(False, ones_diff_rows, compare_blocks_rows)), 3)
or_(and_(or_(le(compare_blocks_cols, zeros_diff_cols), or_(False, True)), or_(False, or_(False, True))), and_(and_(and_(True, False), ge(compare_blocks_rows, zeros_diff_rows)), or_(le(ones_diff_rows, ones_diff_cols), True)))
ge(_if_then_else(or_(and_(False, True), False), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(True, compare_blocks_cols, 4)), _if_then_else(le(max_row_clue, _if_then_else(True, 2, zeros_diff_rows)), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(False, ge(_if_then_else(ge(_if_then_else(ge(_if_then_else(True, 4, 3), _if_then_else(le(1, compare_blocks_cols), ones_diff_rows, compare_blocks_cols)), 1, max_col_clue), _if_then_else(True, 1, max_col_clue)), 4, 3), _if_then_else(False, ones_diff_rows, compare_blocks_cols)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_rows))))
mul(mul(add(compare_blocks_rows, compare_blocks_rows), add(ones_diff_rows, compare_blocks_rows)), mul(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_rows, zeros_diff_rows)))
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(add(compare_blocks_cols, compare_blocks_cols), mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(True, 2, 1), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(and_(True, True), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, ones_diff_rows)))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(or_(False, True), _if_then_else(True, 4, ones_diff_cols), _if_then_else(False, 3, compare_blocks_rows)))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), or_(le(compare_blocks_cols, zeros_diff_cols), or_(False, True))), and_(and_(and_(True, False), ge(max_col_clue, zeros_diff_rows)), ge(_if_then_else(True, 2, 3), _if_then_else(ge(max_col_clue, zeros_diff_rows), zeros_diff_cols, compare_blocks_cols))))
ge(_if_then_else(True, _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(and_(False, le(compare_blocks_rows, _if_then_else(True, 2, zeros_diff_rows))), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(le(_if_then_else(False, 2, zeros_diff_cols), _if_then_else(False, zeros_diff_rows, 2)), 4, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(True, 4, zeros_diff_rows), compare_blocks_cols))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_rows))))
mul(mul(add(compare_blocks_rows, compare_blocks_rows), add(ones_diff_rows, compare_blocks_rows)), mul(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_rows, zeros_diff_rows)))
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(add(compare_blocks_cols, compare_blocks_cols), mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(ge(3, max_col_clue), _if_then_else(False, 0, ones_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, zeros_diff_rows, ones_diff_cols)))
le(0, _if_then_else(False, _if_then_else(or_(False, ge(0, compare_blocks_rows)), _if_then_else(True, 4, ones_diff_cols), _if_then_else(False, 0, max_row_clue)), compare_blocks_rows))
or_(and_(or_(False, and_(False, True)), False), and_(and_(and_(True, False), ge(max_col_clue, zeros_diff_rows)), or_(le(ones_diff_rows, ones_diff_rows), and_(False, True))))
ge(_if_then_else(or_(le(compare_blocks_rows, _if_then_else(True, 2, zeros_diff_rows)), False), _if_then_else(le(compare_blocks_rows, _if_then_else(True, 2, zeros_diff_rows)), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(max_row_clue, max_row_clue), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(True, ones_diff_cols, compare_blocks_rows), _if_then_else(True, 1, max_col_clue)), True)
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))))
compare_blocks_cols
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(zeros_diff_cols, mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, add(ones_diff_rows, compare_blocks_rows))))
COND TREES:
le(_if_then_else(ge(3, max_col_clue), _if_then_else(False, 0, ones_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, 0)))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, compare_blocks_rows)), _if_then_else(and_(False, True), _if_then_else(True, 4, ones_diff_cols), _if_then_else(False, 0, max_row_clue)))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(True, zeros_diff_cols, compare_blocks_cols)), False), and_(and_(and_(True, False), ge(max_col_clue, zeros_diff_rows)), ge(_if_then_else(True, 2, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols))))
ge(_if_then_else(or_(and_(False, True), False), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(max_row_clue, _if_then_else(and_(False, False), _if_then_else(True, 2, 1), _if_then_else(False, 4, 4))), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(True, 4, zeros_diff_rows), _if_then_else(le(1, compare_blocks_cols), ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(ge(_if_then_else(True, 4, 3), _if_then_else(le(1, compare_blocks_cols), ones_diff_rows, compare_blocks_cols)), 1, max_col_clue), _if_then_else(True, 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))))
compare_blocks_cols
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(zeros_diff_cols, mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(False, 0, _if_then_else(and_(False, False), _if_then_else(True, max_col_clue, 2), _if_then_else(True, compare_blocks_cols, 4))), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, zeros_diff_rows, ones_diff_cols)))
le(_if_then_else(True, _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, compare_blocks_rows)), _if_then_else(False, 3, compare_blocks_rows))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(ge(max_col_clue, zeros_diff_rows), zeros_diff_cols, compare_blocks_cols)), False), and_(and_(and_(True, False), ge(max_col_clue, zeros_diff_rows)), or_(le(ones_diff_rows, ones_diff_rows), and_(False, True))))
ge(_if_then_else(or_(and_(False, True), False), _if_then_else(le(compare_blocks_rows, _if_then_else(True, 2, zeros_diff_rows)), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(max_row_clue, max_row_clue), _if_then_else(True, 2, 3), _if_then_else(le(_if_then_else(False, max_col_clue, max_row_clue), _if_then_else(False, compare_blocks_rows, zeros_diff_cols)), compare_blocks_cols, 4)))
or_(ge(_if_then_else(True, 4, zeros_diff_rows), compare_blocks_cols), True)
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))))
compare_blocks_cols
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(zeros_diff_cols, mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, add(ones_diff_rows, compare_blocks_rows))))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(False, 0, ones_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(True, _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, 0)))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, compare_blocks_rows)), _if_then_else(or_(False, ge(0, compare_blocks_rows)), _if_then_else(True, 4, ones_diff_cols), _if_then_else(False, 0, max_row_clue)))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(True, zeros_diff_cols, compare_blocks_cols)), False), and_(and_(and_(True, and_(True, False)), ge(max_col_clue, zeros_diff_rows)), or_(le(ones_diff_rows, ones_diff_cols), and_(False, True))))
ge(_if_then_else(True, compare_blocks_cols, 4), _if_then_else(le(max_row_clue, _if_then_else(True, 2, _if_then_else(False, 4, max_row_clue))), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(True, 4, zeros_diff_rows), ones_diff_cols), ge(_if_then_else(False, ones_diff_cols, compare_blocks_rows), _if_then_else(True, 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))))
compare_blocks_cols
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(zeros_diff_cols, mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(ge(3, max_col_clue), _if_then_else(True, 2, 1), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(True, 3, 2))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(or_(False, True), _if_then_else(True, 4, ones_diff_cols), _if_then_else(True, 3, compare_blocks_rows)))
or_(and_(ge(_if_then_else(True, 2, 2), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), or_(le(2, zeros_diff_cols), or_(False, True))), and_(and_(and_(True, False), ge(1, zeros_diff_rows)), or_(False, and_(False, ge(_if_then_else(True, ones_diff_cols, zeros_diff_cols), _if_then_else(True, max_col_clue, 0))))))
ge(_if_then_else(le(_if_then_else(False, zeros_diff_rows, compare_blocks_cols), _if_then_else(True, 2, max_row_clue)), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(True, compare_blocks_cols, 4)), _if_then_else(le(compare_blocks_rows, _if_then_else(True, 2, zeros_diff_rows)), _if_then_else(True, 2, 3), _if_then_else(or_(and_(False, True), False), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 2), 4, 1))))
or_(ge(_if_then_else(le(_if_then_else(False, 2, zeros_diff_cols), _if_then_else(False, zeros_diff_rows, 2)), 4, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(True, _if_then_else(le(1, compare_blocks_cols), ones_diff_rows, compare_blocks_cols), _if_then_else(False, 3, 2)), _if_then_else(True, 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_rows))))
mul(mul(add(compare_blocks_rows, compare_blocks_rows), add(ones_diff_rows, compare_blocks_rows)), mul(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_rows, zeros_diff_rows)))
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(add(compare_blocks_cols, compare_blocks_cols), mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(ge(3, max_col_clue), _if_then_else(False, 0, ones_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, 0)))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, compare_blocks_rows)), _if_then_else(False, 3, compare_blocks_rows))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(True, zeros_diff_cols, compare_blocks_cols)), False), and_(and_(and_(True, False), ge(max_col_clue, zeros_diff_rows)), ge(_if_then_else(True, 2, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols))))
ge(_if_then_else(or_(or_(and_(False, le(compare_blocks_rows, _if_then_else(True, 2, zeros_diff_rows))), False), False), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(max_row_clue, _if_then_else(and_(False, False), _if_then_else(True, 2, 1), _if_then_else(False, 4, 4))), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(False, 1, 2), _if_then_else(le(1, compare_blocks_cols), ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(ge(_if_then_else(True, 4, 3), _if_then_else(le(1, compare_blocks_cols), ones_diff_rows, compare_blocks_cols)), 1, max_col_clue), _if_then_else(True, 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))))
ones_diff_rows
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_cols, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(zeros_diff_cols, mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(False, 0, ones_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, zeros_diff_rows, ones_diff_cols)))
le(0, _if_then_else(and_(False, True), _if_then_else(True, 4, ones_diff_cols), _if_then_else(False, 0, max_row_clue)))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(ge(max_col_clue, zeros_diff_rows), zeros_diff_cols, compare_blocks_cols)), False), and_(and_(and_(True, False), ge(max_col_clue, zeros_diff_rows)), or_(le(ones_diff_rows, ones_diff_rows), and_(False, True))))
ge(_if_then_else(and_(False, True), _if_then_else(le(compare_blocks_rows, _if_then_else(True, 2, zeros_diff_rows)), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(max_row_clue, max_row_clue), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(True, 4, zeros_diff_rows), compare_blocks_cols), True)
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))))
compare_blocks_cols
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(zeros_diff_cols, mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, add(ones_diff_rows, compare_blocks_rows))))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(True, 2, 1), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(ge(3, max_col_clue), 2, 2))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(or_(False, True), _if_then_else(True, 4, ones_diff_cols), _if_then_else(True, 3, compare_blocks_rows)))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), or_(le(2, zeros_diff_cols), or_(False, True))), and_(and_(and_(True, False), True), or_(False, and_(False, True))))
ge(_if_then_else(True, _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(compare_blocks_rows, _if_then_else(True, 2, zeros_diff_rows)), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(le(_if_then_else(False, 2, zeros_diff_cols), _if_then_else(False, zeros_diff_rows, 2)), 4, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(True, ones_diff_cols, compare_blocks_rows), _if_then_else(and_(False, False), 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_rows))))
mul(mul(add(compare_blocks_rows, compare_blocks_rows), add(ones_diff_rows, compare_blocks_rows)), mul(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_rows, zeros_diff_rows)))
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, add(zeros_diff_cols, ones_diff_rows)), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(add(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols)))), mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(True, _if_then_else(True, zeros_diff_rows, ones_diff_cols), 0), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, ones_diff_rows)))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(False, 3, compare_blocks_rows))
or_(False, ge(1, zeros_diff_rows))
ge(_if_then_else(le(compare_blocks_rows, _if_then_else(True, 2, zeros_diff_rows)), _if_then_else(True, 2, 1), _if_then_else(False, 4, 4)), _if_then_else(and_(False, True), _if_then_else(True, ones_diff_rows, 3), _if_then_else(True, compare_blocks_cols, max_row_clue)))
or_(ge(ones_diff_rows, _if_then_else(True, ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(True, ones_diff_cols, compare_blocks_rows), _if_then_else(ge(_if_then_else(True, 4, 3), _if_then_else(False, 2, zeros_diff_cols)), 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(compare_blocks_cols, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_rows))))
mul(mul(add(compare_blocks_rows, compare_blocks_rows), mul(ones_diff_cols, compare_blocks_rows)), mul(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_rows, zeros_diff_rows)))
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_rows, ones_diff_rows)), compare_blocks_cols)))
mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_cols))
add(add(compare_blocks_rows, mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(ones_diff_rows, _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, ones_diff_cols)))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(True, ones_diff_rows, zeros_diff_rows)), _if_then_else(or_(False, True), _if_then_else(True, 4, ones_diff_cols), _if_then_else(False, 3, compare_blocks_rows)))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), and_(False, True)), and_(and_(and_(True, False), ge(_if_then_else(ge(max_col_clue, zeros_diff_rows), zeros_diff_cols, compare_blocks_cols), zeros_diff_rows)), or_(False, and_(False, True))))
ge(_if_then_else(True, _if_then_else(True, zeros_diff_cols, _if_then_else(le(compare_blocks_rows, _if_then_else(True, 2, zeros_diff_rows)), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4))), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(compare_blocks_rows, _if_then_else(True, 2, zeros_diff_rows)), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(4, _if_then_else(True, ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(True, ones_diff_cols, compare_blocks_rows), _if_then_else(True, 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), add(add(ones_diff_cols, compare_blocks_rows), mul(compare_blocks_rows, ones_diff_rows))))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_rows))))
mul(mul(add(compare_blocks_rows, compare_blocks_rows), mul(mul(ones_diff_cols, ones_diff_rows), add(ones_diff_rows, compare_blocks_cols))), mul(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_rows, zeros_diff_rows)))
add(add(mul(add(compare_blocks_rows, ones_diff_cols), mul(compare_blocks_cols, zeros_diff_rows)), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(add(compare_blocks_cols, mul(add(zeros_diff_rows, compare_blocks_cols), add(compare_blocks_rows, compare_blocks_rows))), mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(ge(3, max_col_clue), True), _if_then_else(True, 2, 1), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_rows), _if_then_else(True, compare_blocks_rows, ones_diff_rows)))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(or_(False, False), _if_then_else(True, 4, ones_diff_cols), _if_then_else(False, 3, compare_blocks_rows)))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), or_(le(3, zeros_diff_cols), or_(False, True))), and_(and_(and_(True, False), ge(max_col_clue, zeros_diff_rows)), or_(False, or_(le(ones_diff_rows, ones_diff_cols), and_(False, True)))))
ge(_if_then_else(True, _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(compare_blocks_rows, _if_then_else(True, 2, zeros_diff_rows)), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(le(_if_then_else(False, 2, zeros_diff_cols), _if_then_else(False, zeros_diff_rows, 2)), 4, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(True, ones_diff_cols, compare_blocks_rows), _if_then_else(True, 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_rows))))
mul(mul(add(compare_blocks_rows, compare_blocks_rows), add(ones_diff_rows, compare_blocks_rows)), mul(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_rows, zeros_diff_rows)))
add(mul(zeros_diff_cols, ones_diff_cols), mul(ones_diff_cols, ones_diff_cols))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(add(compare_blocks_cols, compare_blocks_cols), mul(ones_diff_cols, add(ones_diff_rows, zeros_diff_cols))), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(True, 2, 1), _if_then_else(True, 2, 1)), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(or_(False, False), compare_blocks_rows, ones_diff_rows)))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(or_(False, True), _if_then_else(True, 4, ones_diff_cols), _if_then_else(False, 3, compare_blocks_rows)))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(True, zeros_diff_cols, 2)), or_(False, or_(False, True))), and_(and_(and_(True, False), ge(max_col_clue, zeros_diff_rows)), or_(False, ge(2, _if_then_else(True, max_col_clue, max_row_clue)))))
ge(_if_then_else(True, _if_then_else(or_(le(compare_blocks_rows, _if_then_else(or_(and_(False, True), False), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 2), 4, 1))), False), zeros_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(compare_blocks_rows, _if_then_else(True, 2, zeros_diff_rows)), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(le(1, compare_blocks_cols), 4, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(True, ones_diff_cols, compare_blocks_rows), _if_then_else(True, 1, _if_then_else(ge(ones_diff_cols, compare_blocks_rows), _if_then_else(True, ones_diff_rows, zeros_diff_cols), _if_then_else(False, ones_diff_rows, 0)))))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_rows))))
mul(mul(add(compare_blocks_rows, compare_blocks_rows), add(ones_diff_rows, compare_blocks_rows)), mul(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_rows, zeros_diff_rows)))
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(add(compare_blocks_cols, compare_blocks_cols), mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(True, 2, 1), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(True, _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, 0)))
le(_if_then_else(and_(False, True), _if_then_else(and_(False, True), zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, compare_blocks_rows)), 3)
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), or_(le(2, zeros_diff_cols), or_(False, True))), and_(and_(True, and_(True, False)), or_(le(ones_diff_rows, ones_diff_cols), and_(False, True))))
ge(_if_then_else(True, 2, zeros_diff_rows), _if_then_else(True, _if_then_else(True, 2, 3), 4))
or_(ge(_if_then_else(True, 4, 3), _if_then_else(le(_if_then_else(False, 2, zeros_diff_cols), _if_then_else(True, compare_blocks_cols, 1)), ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(True, ones_diff_cols, compare_blocks_rows), _if_then_else(True, 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_rows))))
mul(mul(add(compare_blocks_rows, compare_blocks_rows), add(ones_diff_rows, compare_blocks_rows)), mul(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_rows, zeros_diff_rows)))
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(add(compare_blocks_cols, compare_blocks_cols), mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(False, 0, ones_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(True, _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, 0)))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, compare_blocks_rows)), _if_then_else(or_(False, ge(0, compare_blocks_rows)), _if_then_else(True, 4, ones_diff_cols), _if_then_else(False, 0, max_row_clue)))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(True, zeros_diff_cols, compare_blocks_cols)), False), and_(and_(and_(True, and_(True, False)), ge(max_col_clue, zeros_diff_rows)), or_(le(ones_diff_rows, ones_diff_cols), and_(False, True))))
ge(_if_then_else(or_(and_(False, True), False), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(max_row_clue, _if_then_else(True, 2, _if_then_else(False, 4, max_row_clue))), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(True, 4, zeros_diff_rows), _if_then_else(le(1, compare_blocks_cols), ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(False, ones_diff_cols, compare_blocks_rows), _if_then_else(True, 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))))
compare_blocks_cols
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(zeros_diff_cols, mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(ge(3, max_col_clue), True), _if_then_else(True, 2, 1), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, ones_diff_rows)))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(False, ones_diff_cols, zeros_diff_rows))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), or_(le(3, zeros_diff_cols), or_(False, True))), and_(and_(and_(True, False), ge(max_col_clue, zeros_diff_rows)), or_(False, and_(False, True))))
ge(_if_then_else(True, _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(compare_blocks_rows, _if_then_else(True, 2, zeros_diff_rows)), _if_then_else(True, 2, 3), _if_then_else(True, _if_then_else(True, 3, zeros_diff_cols), 4)))
or_(ge(_if_then_else(le(_if_then_else(False, 2, zeros_diff_cols), _if_then_else(False, zeros_diff_rows, 2)), 4, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(True, ones_diff_cols, compare_blocks_rows), _if_then_else(True, 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_rows))))
mul(mul(add(compare_blocks_rows, compare_blocks_rows), add(ones_diff_rows, compare_blocks_rows)), mul(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_rows, zeros_diff_rows)))
add(mul(zeros_diff_cols, ones_diff_cols), mul(ones_diff_cols, ones_diff_cols))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(add(compare_blocks_cols, compare_blocks_cols), mul(ones_diff_cols, add(ones_diff_rows, zeros_diff_cols))), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(False, 0, ones_diff_cols), _if_then_else(False, 1, compare_blocks_rows)), _if_then_else(True, _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, 0)))
le(_if_then_else(True, _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, compare_blocks_rows)), _if_then_else(or_(False, and_(False, True)), _if_then_else(True, 4, ones_diff_cols), _if_then_else(False, 0, max_row_clue)))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(True, zeros_diff_cols, compare_blocks_cols)), False), and_(ge(_if_then_else(and_(and_(True, False), or_(False, True)), 2, 3), _if_then_else(True, max_row_clue, compare_blocks_cols)), ge(_if_then_else(True, 2, 3), _if_then_else(True, zeros_diff_cols, 2))))
ge(_if_then_else(or_(and_(False, True), False), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(le(zeros_diff_cols, 2), 4, 1)), _if_then_else(le(max_row_clue, _if_then_else(True, 2, _if_then_else(False, 4, max_row_clue))), _if_then_else(False, 4, 1), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(True, 4, zeros_diff_rows), _if_then_else(ge(_if_then_else(True, ones_diff_cols, compare_blocks_rows), _if_then_else(True, 1, max_col_clue)), ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(False, ones_diff_cols, compare_blocks_rows), _if_then_else(True, 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))))
compare_blocks_cols
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(zeros_diff_cols, mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(True, ones_diff_rows, 1), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(True, _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, 0)))
le(_if_then_else(ge(0, compare_blocks_rows), _if_then_else(True, zeros_diff_rows, 4), zeros_diff_rows), _if_then_else(or_(False, True), _if_then_else(True, 4, ones_diff_cols), _if_then_else(False, 3, _if_then_else(or_(False, True), _if_then_else(True, 4, ones_diff_cols), _if_then_else(True, 3, compare_blocks_rows)))))
or_(and_(and_(and_(True, and_(True, False)), ge(max_col_clue, zeros_diff_rows)), or_(le(ones_diff_rows, ones_diff_cols), and_(False, True))), and_(and_(and_(True, False), ge(max_col_clue, zeros_diff_rows)), or_(False, and_(False, True))))
ge(_if_then_else(True, _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(True, 2, 3)), _if_then_else(le(compare_blocks_rows, _if_then_else(True, 2, zeros_diff_rows)), _if_then_else(True, 2, 3), _if_then_else(le(max_col_clue, 2), 4, 1)))
or_(le(1, compare_blocks_cols), False)
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_rows))))
mul(mul(add(compare_blocks_rows, compare_blocks_rows), add(ones_diff_rows, compare_blocks_rows)), mul(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_rows, zeros_diff_rows)))
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(add(compare_blocks_cols, compare_blocks_cols), mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(False, 0, ones_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(True, _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, 0)))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, compare_blocks_rows)), _if_then_else(False, ones_diff_rows, compare_blocks_rows))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(True, zeros_diff_cols, compare_blocks_cols)), False), and_(and_(and_(True, and_(True, False)), ge(max_col_clue, zeros_diff_rows)), or_(le(ones_diff_rows, ones_diff_cols), and_(False, True))))
ge(_if_then_else(or_(and_(False, True), False), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(max_col_clue, 2), 4, 1))
or_(ge(_if_then_else(True, ones_diff_cols, compare_blocks_rows), _if_then_else(True, 1, max_col_clue)), ge(_if_then_else(False, ones_diff_cols, compare_blocks_rows), _if_then_else(True, 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))))
add(add(ones_diff_rows, ones_diff_rows), mul(zeros_diff_cols, compare_blocks_rows))
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(zeros_diff_cols, mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, compare_blocks_rows), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(True, 2, 1), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, 0)))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(or_(False, ge(0, compare_blocks_rows)), _if_then_else(True, 4, ones_diff_cols), _if_then_else(False, 0, max_row_clue))), 3)
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(True, zeros_diff_cols, 2)), or_(False, or_(False, True))), and_(and_(and_(True, False), ge(compare_blocks_rows, zeros_diff_rows)), or_(le(ones_diff_rows, ones_diff_cols), and_(False, True))))
ge(_if_then_else(or_(and_(False, True), False), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(le(max_row_clue, _if_then_else(True, 2, _if_then_else(False, 4, max_row_clue))), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4))), _if_then_else(le(max_row_clue, _if_then_else(True, 2, zeros_diff_rows)), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(False, ge(_if_then_else(True, 4, zeros_diff_rows), _if_then_else(le(1, compare_blocks_cols), ones_diff_rows, compare_blocks_cols)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_rows))))
mul(mul(add(compare_blocks_rows, compare_blocks_rows), add(ones_diff_rows, compare_blocks_rows)), mul(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_rows, zeros_diff_rows)))
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(add(compare_blocks_cols, compare_blocks_cols), mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(False, 0, ones_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(ge(3, compare_blocks_rows), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, 0)))
le(_if_then_else(True, _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, compare_blocks_rows)), _if_then_else(False, 3, ones_diff_rows))
or_(and_(ge(_if_then_else(True, 2, 3), zeros_diff_rows), False), and_(and_(and_(True, False), ge(max_col_clue, zeros_diff_rows)), or_(le(ones_diff_rows, ones_diff_rows), and_(False, True))))
ge(_if_then_else(or_(and_(False, True), False), _if_then_else(le(max_col_clue, 2), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(max_row_clue, max_row_clue), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(True, 4, zeros_diff_rows), compare_blocks_cols), ge(_if_then_else(True, 4, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))))
compare_blocks_cols
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(zeros_diff_cols, mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, add(ones_diff_rows, compare_blocks_rows))))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(True, 2, 1), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, max_col_clue, ones_diff_rows)))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, compare_blocks_rows, zeros_diff_rows)), _if_then_else(or_(False, True), _if_then_else(True, 4, ones_diff_cols), _if_then_else(False, _if_then_else(or_(False, ge(0, compare_blocks_rows)), _if_then_else(True, 4, ones_diff_cols), zeros_diff_cols), compare_blocks_rows)))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(True, max_col_clue, compare_blocks_cols)), or_(le(compare_blocks_cols, zeros_diff_cols), or_(False, True))), and_(and_(and_(True, False), ge(max_col_clue, _if_then_else(True, max_row_clue, compare_blocks_cols))), or_(False, and_(False, True))))
ge(_if_then_else(True, _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(le(compare_blocks_rows, _if_then_else(True, 2, zeros_diff_rows)), 4, 1)), _if_then_else(le(compare_blocks_rows, _if_then_else(True, 2, zeros_diff_rows)), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(le(_if_then_else(False, 2, zeros_diff_cols), _if_then_else(False, zeros_diff_rows, 2)), 4, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(True, ones_diff_cols, compare_blocks_rows), _if_then_else(True, 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(compare_blocks_rows, compare_blocks_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(add(ones_diff_cols, ones_diff_rows), add(compare_blocks_cols, zeros_diff_rows)))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_rows))))
mul(mul(add(compare_blocks_rows, compare_blocks_rows), add(ones_diff_rows, compare_blocks_rows)), mul(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_rows, zeros_diff_rows)))
add(mul(ones_diff_rows, zeros_diff_cols), mul(ones_diff_cols, zeros_diff_rows))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), mul(zeros_diff_cols, zeros_diff_rows))
add(add(add(compare_blocks_cols, compare_blocks_cols), mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(ge(3, max_col_clue), True), _if_then_else(True, 2, 1), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, ones_diff_rows)))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(or_(False, True), _if_then_else(True, 4, ones_diff_cols), _if_then_else(False, 3, compare_blocks_rows)))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), or_(le(3, zeros_diff_cols), or_(False, True))), and_(and_(and_(True, False), ge(max_col_clue, zeros_diff_rows)), or_(False, and_(False, True))))
ge(_if_then_else(True, _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(compare_blocks_rows, _if_then_else(True, 2, zeros_diff_rows)), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(le(_if_then_else(False, 2, zeros_diff_cols), _if_then_else(False, zeros_diff_rows, 2)), 4, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(True, ones_diff_cols, compare_blocks_rows), _if_then_else(True, 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_rows))))
mul(mul(add(compare_blocks_rows, compare_blocks_rows), add(ones_diff_rows, compare_blocks_rows)), mul(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_rows, zeros_diff_rows)))
add(mul(zeros_diff_cols, ones_diff_cols), mul(ones_diff_cols, ones_diff_cols))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(add(compare_blocks_cols, compare_blocks_cols), mul(ones_diff_cols, add(ones_diff_rows, zeros_diff_cols))), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(False, 0, ones_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, 0)))
le(_if_then_else(True, _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, compare_blocks_rows)), _if_then_else(False, 3, compare_blocks_rows))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(True, max_row_clue, compare_blocks_cols)), False), and_(and_(and_(True, False), ge(max_col_clue, zeros_diff_rows)), or_(le(ones_diff_rows, ones_diff_rows), and_(False, True))))
ge(_if_then_else(or_(and_(False, True), False), _if_then_else(le(compare_blocks_rows, _if_then_else(True, 2, zeros_diff_rows)), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(max_row_clue, max_row_clue), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(True, 4, zeros_diff_rows), compare_blocks_cols), ge(_if_then_else(True, 4, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))))
compare_blocks_cols
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(zeros_diff_cols, mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, add(ones_diff_rows, compare_blocks_rows))))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(le(compare_blocks_cols, compare_blocks_rows), 0, ones_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(True, _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, 0)))
le(_if_then_else(and_(False, True), 0, _if_then_else(False, ones_diff_rows, compare_blocks_rows)), _if_then_else(or_(False, ge(0, compare_blocks_rows)), _if_then_else(True, 4, ones_diff_cols), _if_then_else(False, 0, max_row_clue)))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(True, zeros_diff_cols, compare_blocks_cols)), False), True)
ge(_if_then_else(or_(True, False), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(max_row_clue, _if_then_else(True, 2, _if_then_else(False, 4, max_row_clue))), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(True, 4, zeros_diff_rows), _if_then_else(le(1, compare_blocks_cols), ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(True, ones_diff_cols, compare_blocks_rows), _if_then_else(True, 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))))
compare_blocks_cols
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(zeros_diff_cols, mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(ge(3, max_col_clue), True), _if_then_else(True, 2, 1), _if_then_else(True, _if_then_else(and_(True, False), _if_then_else(True, 3, 0), _if_then_else(False, compare_blocks_cols, compare_blocks_cols)), ones_diff_rows)), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, 0)))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, compare_blocks_rows)), 3)
or_(and_(or_(le(_if_then_else(or_(True, False), _if_then_else(True, ones_diff_rows, 4), _if_then_else(False, ones_diff_rows, max_col_clue)), zeros_diff_cols), or_(False, True)), or_(False, or_(False, True))), and_(and_(and_(True, False), ge(compare_blocks_rows, zeros_diff_rows)), or_(le(ones_diff_rows, ones_diff_cols), and_(False, True))))
ge(_if_then_else(or_(and_(False, True), False), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(True, compare_blocks_cols, 4)), _if_then_else(le(max_row_clue, _if_then_else(True, 2, zeros_diff_rows)), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
False
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_rows))))
mul(mul(add(compare_blocks_rows, compare_blocks_rows), add(ones_diff_rows, compare_blocks_rows)), mul(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_rows, zeros_diff_rows)))
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(add(compare_blocks_cols, compare_blocks_cols), mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(True, ones_diff_rows, _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, 0))), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(True, _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, 0)))
le(_if_then_else(or_(True, False), _if_then_else(False, 2, 1), _if_then_else(False, ones_diff_rows, zeros_diff_cols)), _if_then_else(or_(False, True), _if_then_else(True, 4, ones_diff_cols), _if_then_else(False, 3, _if_then_else(or_(False, True), _if_then_else(True, 4, ones_diff_cols), _if_then_else(True, 3, compare_blocks_rows)))))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(True, max_row_clue, compare_blocks_cols)), ge(max_row_clue, _if_then_else(True, zeros_diff_cols, 2))), and_(and_(and_(True, False), ge(max_col_clue, zeros_diff_rows)), or_(False, and_(False, True))))
ge(_if_then_else(True, _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(False, 4, 1)), _if_then_else(le(compare_blocks_rows, _if_then_else(True, 2, zeros_diff_rows)), _if_then_else(True, 2, 3), _if_then_else(le(max_col_clue, 2), 4, 1)))
or_(False, False)
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(add(mul(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_rows, ones_diff_rows)), compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_rows))))
mul(mul(add(compare_blocks_rows, compare_blocks_rows), add(ones_diff_rows, compare_blocks_rows)), mul(mul(mul(mul(zeros_diff_rows, ones_diff_cols), add(compare_blocks_cols, compare_blocks_rows)), ones_diff_cols), mul(compare_blocks_rows, zeros_diff_rows)))
add(add(zeros_diff_rows, add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(add(compare_blocks_rows, zeros_diff_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(add(compare_blocks_cols, compare_blocks_cols), mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(True, 2, 1), _if_then_else(True, ones_diff_rows, ones_diff_rows)), 1)
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(or_(False, True), _if_then_else(True, _if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), zeros_diff_rows), ones_diff_cols), _if_then_else(False, 3, compare_blocks_rows)))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(True, _if_then_else(True, 2, 3), compare_blocks_cols)), or_(False, or_(False, True))), and_(and_(and_(True, False), ge(max_col_clue, zeros_diff_rows)), or_(False, and_(False, True))))
ge(_if_then_else(True, _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(False, 4, 1)), _if_then_else(le(max_col_clue, 2), _if_then_else(False, 1, compare_blocks_cols), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(max_col_clue, zeros_diff_rows), ge(_if_then_else(True, ones_diff_cols, compare_blocks_rows), _if_then_else(True, 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_rows))))
mul(mul(add(compare_blocks_rows, compare_blocks_rows), add(ones_diff_rows, compare_blocks_rows)), mul(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_rows, zeros_diff_rows)))
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(add(compare_blocks_cols, compare_blocks_cols), mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(False, 0, ones_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, 0)))
le(_if_then_else(True, _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, compare_blocks_rows)), _if_then_else(False, 3, compare_blocks_rows))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(True, max_row_clue, compare_blocks_cols)), False), and_(and_(and_(True, False), ge(max_col_clue, zeros_diff_rows)), or_(le(ones_diff_rows, ones_diff_rows), and_(False, True))))
ge(_if_then_else(or_(and_(False, True), False), _if_then_else(le(compare_blocks_rows, _if_then_else(True, 2, zeros_diff_rows)), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(max_row_clue, max_row_clue), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(True, 4, zeros_diff_rows), compare_blocks_cols), ge(_if_then_else(True, 4, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))))
compare_blocks_cols
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(zeros_diff_cols, mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, add(ones_diff_rows, compare_blocks_rows))))
COND TREES:
le(_if_then_else(False, 0, ones_diff_cols), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, ones_diff_rows)))
le(_if_then_else(or_(True, False), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, compare_blocks_rows)), _if_then_else(or_(False, True), _if_then_else(True, 4, ones_diff_cols), _if_then_else(False, 3, compare_blocks_rows)))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), or_(le(2, zeros_diff_cols), or_(False, True))), and_(and_(and_(and_(True, False), ge(max_col_clue, zeros_diff_rows)), or_(le(ones_diff_rows, ones_diff_cols), and_(False, True))), or_(False, and_(False, True))))
ge(_if_then_else(True, _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(compare_blocks_rows, _if_then_else(True, 2, zeros_diff_rows)), _if_then_else(True, 2, 3), _if_then_else(True, _if_then_else(True, zeros_diff_cols, ones_diff_rows), 4)))
or_(ge(_if_then_else(le(1, compare_blocks_cols), 4, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(True, _if_then_else(False, 0, 4), compare_blocks_rows), _if_then_else(True, 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_rows))))
mul(mul(add(compare_blocks_rows, compare_blocks_rows), add(ones_diff_rows, compare_blocks_rows)), mul(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_rows, zeros_diff_rows)))
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(add(compare_blocks_cols, compare_blocks_cols), mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(False, 0, ones_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(True, _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, 0)))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, compare_blocks_rows)), _if_then_else(or_(False, ge(0, compare_blocks_rows)), _if_then_else(True, 4, ones_diff_cols), _if_then_else(False, 0, max_row_clue)))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(True, zeros_diff_cols, compare_blocks_cols)), False), and_(and_(and_(True, and_(True, False)), ge(max_col_clue, zeros_diff_rows)), or_(le(ones_diff_rows, ones_diff_cols), and_(False, True))))
ge(_if_then_else(or_(and_(False, True), False), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(max_row_clue, _if_then_else(True, 2, _if_then_else(False, 4, max_row_clue))), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(True, 4, zeros_diff_rows), _if_then_else(le(1, compare_blocks_cols), ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(False, ones_diff_cols, compare_blocks_rows), _if_then_else(True, 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(mul(ones_diff_cols, zeros_diff_cols), compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))))
add(add(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, compare_blocks_cols))
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(zeros_diff_cols, mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(ge(3, max_col_clue), True), _if_then_else(True, 2, 1), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, 0)))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, compare_blocks_rows)), 3)
or_(and_(or_(le(compare_blocks_cols, zeros_diff_cols), or_(False, True)), or_(False, or_(False, True))), and_(and_(and_(True, False), ge(compare_blocks_rows, zeros_diff_rows)), or_(le(ones_diff_rows, ones_diff_cols), and_(False, True))))
ge(_if_then_else(or_(and_(False, True), False), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(True, compare_blocks_cols, 4)), _if_then_else(le(max_row_clue, _if_then_else(True, 2, zeros_diff_rows)), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(False, ge(_if_then_else(True, 4, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_rows))))
mul(mul(add(compare_blocks_rows, compare_blocks_rows), add(ones_diff_rows, compare_blocks_rows)), mul(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_rows, zeros_diff_rows)))
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(add(compare_blocks_cols, compare_blocks_cols), mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(ge(3, max_col_clue), _if_then_else(False, 0, ones_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(ge(_if_then_else(True, compare_blocks_rows, 0), max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, 0)))
le(_if_then_else(True, _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, compare_blocks_rows)), _if_then_else(and_(False, True), _if_then_else(True, 4, ones_diff_cols), _if_then_else(False, 0, max_row_clue)))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(True, zeros_diff_cols, compare_blocks_cols)), False), and_(and_(and_(True, False), ge(max_col_clue, zeros_diff_rows)), ge(_if_then_else(True, 2, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols))))
ge(_if_then_else(or_(and_(False, True), False), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(or_(and_(False, True), False), 4, 1)), _if_then_else(le(max_row_clue, _if_then_else(and_(False, False), _if_then_else(True, 2, 1), _if_then_else(False, 4, 4))), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(True, 4, zeros_diff_rows), _if_then_else(le(1, compare_blocks_cols), ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(ge(_if_then_else(True, 4, 3), _if_then_else(le(1, compare_blocks_cols), ones_diff_rows, compare_blocks_cols)), 1, max_col_clue), compare_blocks_cols))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))))
mul(zeros_diff_cols, compare_blocks_rows)
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(compare_blocks_rows, mul(zeros_diff_cols, zeros_diff_rows)))
add(add(zeros_diff_cols, mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(False, 0, ones_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(True, _if_then_else(True, zeros_diff_rows, ones_diff_cols), 3))
le(_if_then_else(and_(False, True), _if_then_else(and_(False, True), zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, compare_blocks_rows)), _if_then_else(or_(False, ge(0, compare_blocks_rows)), _if_then_else(True, 4, ones_diff_cols), _if_then_else(False, 0, max_row_clue)))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(True, zeros_diff_cols, compare_blocks_cols)), False), and_(and_(and_(True, and_(True, False)), ge(max_col_clue, zeros_diff_rows)), or_(le(ones_diff_rows, ones_diff_cols), and_(False, True))))
ge(_if_then_else(le(max_col_clue, 2), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(max_row_clue, _if_then_else(True, 2, _if_then_else(False, 4, max_row_clue))), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(True, 4, zeros_diff_rows), _if_then_else(le(1, compare_blocks_cols), ones_diff_rows, _if_then_else(True, 1, max_col_clue))), ge(_if_then_else(False, ones_diff_cols, compare_blocks_rows), _if_then_else(True, 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))))
compare_blocks_cols
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(zeros_diff_cols, mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(or_(or_(False, False), False), True), _if_then_else(True, 2, 1), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, ones_diff_rows)))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(or_(False, True), _if_then_else(True, 4, ones_diff_cols), _if_then_else(ge(0, compare_blocks_rows), 3, compare_blocks_rows)))
or_(and_(ge(_if_then_else(True, _if_then_else(True, zeros_diff_cols, compare_blocks_cols), 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), False), and_(and_(and_(True, False), ge(max_col_clue, zeros_diff_rows)), or_(False, and_(False, True))))
ge(_if_then_else(True, _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 2), 4, max_col_clue)), _if_then_else(le(compare_blocks_rows, _if_then_else(True, 2, zeros_diff_rows)), _if_then_else(True, 2, 3), _if_then_else(True, 2, 4)))
or_(ge(_if_then_else(le(_if_then_else(False, 2, zeros_diff_cols), _if_then_else(False, 1, 2)), 4, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(True, ones_diff_cols, compare_blocks_rows), _if_then_else(True, 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_rows))))
mul(mul(add(compare_blocks_rows, compare_blocks_rows), add(ones_diff_rows, compare_blocks_rows)), mul(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_rows, zeros_diff_rows)))
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(add(compare_blocks_cols, compare_blocks_cols), mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(False, 0, ones_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(True, _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, 0)))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, compare_blocks_rows)), _if_then_else(or_(False, False), _if_then_else(True, 4, ones_diff_cols), _if_then_else(False, 0, max_row_clue)))
or_(and_(ge(_if_then_else(True, 2, 3), 2), False), and_(and_(and_(True, and_(True, False)), ge(max_col_clue, zeros_diff_rows)), or_(le(ones_diff_rows, ones_diff_cols), and_(False, True))))
ge(_if_then_else(or_(and_(False, True), False), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(max_row_clue, _if_then_else(True, compare_blocks_cols, _if_then_else(False, 4, max_row_clue))), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(True, 4, zeros_diff_rows), _if_then_else(le(zeros_diff_rows, compare_blocks_cols), ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(False, ones_diff_cols, compare_blocks_rows), _if_then_else(True, 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, ones_diff_rows)), mul(add(compare_blocks_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))))
compare_blocks_cols
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(mul(compare_blocks_rows, zeros_diff_rows), compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(zeros_diff_cols, mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(False, 0, ones_diff_cols), _if_then_else(True, 3, ones_diff_rows)), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, zeros_diff_rows, ones_diff_cols)))
le(_if_then_else(True, _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, compare_blocks_rows)), _if_then_else(or_(False, True), _if_then_else(True, 4, ones_diff_cols), _if_then_else(True, 3, compare_blocks_rows)))
or_(and_(True, False), and_(and_(and_(True, False), ge(max_col_clue, zeros_diff_rows)), or_(le(ones_diff_rows, ones_diff_rows), and_(False, True))))
ge(_if_then_else(or_(and_(False, True), False), _if_then_else(le(compare_blocks_rows, _if_then_else(True, 2, zeros_diff_rows)), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(max_row_clue, max_row_clue), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(False, 4, zeros_diff_rows), compare_blocks_cols), True)
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))))
add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(compare_blocks_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(ones_diff_cols, mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, add(ones_diff_rows, compare_blocks_rows))))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(True, 2, 1), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(ge(ones_diff_rows, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), 2))
le(compare_blocks_rows, _if_then_else(False, 3, compare_blocks_rows))
or_(and_(ge(_if_then_else(True, 2, zeros_diff_rows), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), or_(le(2, zeros_diff_cols), or_(False, True))), and_(and_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(ge(max_col_clue, zeros_diff_rows), zeros_diff_cols, compare_blocks_cols)), False), ge(1, zeros_diff_rows)), or_(False, and_(False, True))))
ge(_if_then_else(True, _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(compare_blocks_rows, _if_then_else(True, zeros_diff_cols, zeros_diff_rows)), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(le(_if_then_else(False, 2, zeros_diff_cols), _if_then_else(True, zeros_diff_rows, 2)), 4, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(ge(_if_then_else(True, 4, zeros_diff_rows), _if_then_else(le(1, compare_blocks_cols), ones_diff_rows, compare_blocks_cols)), ones_diff_cols, compare_blocks_rows), _if_then_else(and_(False, False), 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), zeros_diff_rows)), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_rows))))
compare_blocks_cols
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(add(compare_blocks_cols, compare_blocks_cols), mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(False, 0, ones_diff_cols), _if_then_else(and_(True, True), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, ones_diff_rows)))
le(_if_then_else(or_(True, False), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, compare_blocks_rows)), _if_then_else(False, 3, compare_blocks_rows))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), or_(le(_if_then_else(True, max_row_clue, compare_blocks_cols), zeros_diff_cols), or_(False, True))), and_(and_(and_(and_(True, False), ge(max_col_clue, zeros_diff_rows)), or_(le(ones_diff_rows, ones_diff_cols), and_(False, True))), or_(False, and_(False, True))))
ge(_if_then_else(True, _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(le(compare_blocks_rows, _if_then_else(True, 2, zeros_diff_rows)), 4, 1)), _if_then_else(le(compare_blocks_rows, _if_then_else(True, 2, zeros_diff_rows)), _if_then_else(True, 2, 3), _if_then_else(True, _if_then_else(True, zeros_diff_cols, ones_diff_rows), 4)))
or_(ge(_if_then_else(True, 4, zeros_diff_rows), compare_blocks_cols), ge(_if_then_else(True, _if_then_else(False, 0, 4), compare_blocks_rows), _if_then_else(True, 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_rows))))
mul(mul(add(compare_blocks_rows, compare_blocks_rows), add(ones_diff_rows, compare_blocks_rows)), mul(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_rows, zeros_diff_rows)))
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(add(compare_blocks_cols, compare_blocks_cols), mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(ge(3, max_col_clue), _if_then_else(False, 0, ones_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, 0)))
le(_if_then_else(True, _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, compare_blocks_rows)), _if_then_else(or_(False, True), _if_then_else(True, 4, ones_diff_cols), _if_then_else(False, 3, compare_blocks_rows)))
or_(and_(ge(_if_then_else(True, 2, 3), 2), False), and_(and_(and_(True, False), ge(max_col_clue, zeros_diff_rows)), or_(le(ones_diff_rows, ones_diff_rows), and_(False, True))))
ge(_if_then_else(or_(and_(False, True), False), _if_then_else(le(max_col_clue, 2), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(max_row_clue, max_row_clue), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(le(1, compare_blocks_cols), 4, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(True, 4, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(zeros_diff_rows, mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))))
ones_diff_rows
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(zeros_diff_cols, mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, add(ones_diff_rows, compare_blocks_rows))))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(True, 2, 1), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, 0))))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(or_(False, True), _if_then_else(True, 4, ones_diff_cols), _if_then_else(False, _if_then_else(or_(False, ge(0, compare_blocks_rows)), _if_then_else(True, 4, ones_diff_cols), _if_then_else(False, 0, max_row_clue)), compare_blocks_rows)))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), or_(le(compare_blocks_cols, zeros_diff_cols), or_(False, True))), and_(and_(and_(True, False), ge(max_col_clue, zeros_diff_rows)), or_(False, True)))
ge(_if_then_else(True, _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(True, _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(le(_if_then_else(False, 2, zeros_diff_cols), max_col_clue), 4, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(True, ones_diff_cols, compare_blocks_rows), _if_then_else(True, 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_rows))))
mul(mul(add(compare_blocks_rows, compare_blocks_rows), add(ones_diff_rows, compare_blocks_rows)), mul(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_rows, zeros_diff_rows)))
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(add(compare_blocks_cols, compare_blocks_cols), mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(True, 2, 1), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(True, compare_blocks_rows, ones_diff_rows))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, compare_blocks_rows)), 3)
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(True, zeros_diff_cols, 2)), or_(False, or_(False, and_(False, True)))), and_(and_(and_(True, False), ge(compare_blocks_rows, zeros_diff_rows)), or_(le(ones_diff_rows, ones_diff_cols), and_(False, True))))
ge(_if_then_else(or_(and_(False, True), False), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(max_row_clue, _if_then_else(True, 2, zeros_diff_rows)), _if_then_else(True, 2, 3), _if_then_else(le(compare_blocks_rows, _if_then_else(True, 2, zeros_diff_rows)), compare_blocks_cols, 4)))
or_(False, ge(_if_then_else(True, ones_diff_cols, compare_blocks_rows), _if_then_else(True, 1, _if_then_else(False, zeros_diff_rows, 2))))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_rows))))
mul(mul(add(compare_blocks_rows, compare_blocks_rows), add(ones_diff_rows, compare_blocks_rows)), mul(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_rows, zeros_diff_rows)))
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(add(compare_blocks_cols, compare_blocks_cols), mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(False, 0, ones_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(True, _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, 0)))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, compare_blocks_rows)), _if_then_else(or_(False, True), _if_then_else(True, 4, ones_diff_cols), _if_then_else(False, 0, max_row_clue)))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(ge(max_col_clue, zeros_diff_rows), zeros_diff_cols, compare_blocks_cols)), False), and_(and_(and_(True, and_(True, False)), ge(max_col_clue, zeros_diff_rows)), or_(le(ones_diff_rows, ones_diff_cols), and_(False, True))))
ge(_if_then_else(True, 2, zeros_diff_rows), _if_then_else(le(max_row_clue, _if_then_else(True, 2, _if_then_else(False, 4, max_row_clue))), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(True, 4, zeros_diff_rows), _if_then_else(le(1, compare_blocks_cols), ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(False, ones_diff_cols, compare_blocks_rows), _if_then_else(True, 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(add(ones_diff_cols, zeros_diff_rows), ones_diff_cols), add(ones_diff_cols, ones_diff_rows))))
add(mul(compare_blocks_cols, ones_diff_cols), mul(zeros_diff_rows, compare_blocks_rows))
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(zeros_diff_cols, mul(ones_diff_cols, zeros_diff_rows)), mul(mul(add(mul(ones_diff_rows, zeros_diff_rows), mul(ones_diff_rows, zeros_diff_rows)), zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(True, ones_diff_rows, 1), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(ge(zeros_diff_cols, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, zeros_diff_rows, ones_diff_cols)))
le(_if_then_else(and_(False, False), _if_then_else(True, zeros_diff_rows, 4), zeros_diff_rows), _if_then_else(or_(False, True), _if_then_else(True, 4, ones_diff_cols), _if_then_else(False, 3, _if_then_else(or_(False, ge(0, compare_blocks_rows)), _if_then_else(True, 4, ones_diff_cols), _if_then_else(True, 3, compare_blocks_rows)))))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(True, zeros_diff_cols, compare_blocks_cols)), or_(le(compare_blocks_cols, ones_diff_rows), or_(False, True))), and_(and_(and_(True, False), ge(max_col_clue, zeros_diff_rows)), or_(False, and_(False, True))))
ge(_if_then_else(True, _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(False, 4, 1)), _if_then_else(le(compare_blocks_rows, _if_then_else(or_(and_(False, True), False), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 2), 4, 1))), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(and_(le(2, compare_blocks_cols), and_(True, True)), False)
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_rows))))
mul(mul(add(compare_blocks_rows, compare_blocks_rows), add(ones_diff_rows, compare_blocks_rows)), mul(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_rows, zeros_diff_rows)))
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(add(compare_blocks_cols, compare_blocks_cols), mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(True, 2, 1), _if_then_else(True, compare_blocks_rows, ones_diff_rows)), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), 2))
le(compare_blocks_rows, _if_then_else(or_(False, True), _if_then_else(True, 4, ones_diff_cols), _if_then_else(True, 3, compare_blocks_rows)))
or_(and_(ge(_if_then_else(True, 2, zeros_diff_rows), _if_then_else(True, 2, 3)), or_(le(2, zeros_diff_cols), or_(and_(False, True), le(ones_diff_cols, max_col_clue)))), and_(and_(and_(True, False), ge(1, zeros_diff_rows)), or_(False, and_(False, True))))
ge(_if_then_else(True, _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(compare_blocks_rows, _if_then_else(True, zeros_diff_cols, max_row_clue)), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, _if_then_else(True, max_row_clue, 2))))
or_(ge(_if_then_else(ge(_if_then_else(True, ones_diff_cols, compare_blocks_rows), _if_then_else(True, 1, max_col_clue)), 4, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(ge(_if_then_else(True, 4, zeros_diff_rows), _if_then_else(le(1, compare_blocks_cols), ones_diff_rows, compare_blocks_cols)), ones_diff_cols, compare_blocks_rows), _if_then_else(and_(False, False), 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), zeros_diff_rows)), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_rows))))
ones_diff_cols
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), zeros_diff_rows))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(add(compare_blocks_cols, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(False, 0, ones_diff_cols), _if_then_else(True, ones_diff_rows, _if_then_else(True, max_row_clue, 3))), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, 0)))
le(_if_then_else(ge(0, compare_blocks_rows), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, compare_blocks_rows)), _if_then_else(or_(False, ge(0, compare_blocks_rows)), _if_then_else(True, _if_then_else(False, 2, 1), ones_diff_cols), _if_then_else(False, 0, max_row_clue)))
or_(and_(ge(_if_then_else(True, zeros_diff_cols, compare_blocks_cols), _if_then_else(True, zeros_diff_cols, compare_blocks_cols)), False), and_(and_(and_(True, False), ge(max_col_clue, zeros_diff_rows)), or_(le(ones_diff_rows, ones_diff_cols), and_(False, True))))
ge(_if_then_else(and_(True, False), _if_then_else(True, 4, ones_diff_rows), _if_then_else(False, ones_diff_rows, 4)), _if_then_else(True, 2, 3))
or_(ge(compare_blocks_cols, _if_then_else(le(max_col_clue, compare_blocks_cols), ones_diff_rows, ones_diff_rows)), ge(_if_then_else(True, ones_diff_cols, compare_blocks_rows), _if_then_else(True, 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(mul(mul(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_cols, ones_diff_rows)), zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))))
ones_diff_rows
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, add(zeros_diff_rows, zeros_diff_cols))), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(zeros_diff_cols, mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(True, 2, 1), _if_then_else(and_(True, True), 2, 1)), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, ones_diff_rows)))
le(_if_then_else(or_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(or_(False, True), _if_then_else(False, 4, ones_diff_cols), _if_then_else(False, 3, compare_blocks_rows)))
or_(and_(ge(_if_then_else(True, _if_then_else(True, ones_diff_rows, compare_blocks_cols), 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), or_(le(2, zeros_diff_cols), and_(ge(_if_then_else(True, 2, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), or_(le(2, zeros_diff_cols), or_(True, False))))), and_(and_(and_(True, False), ge(max_col_clue, zeros_diff_rows)), or_(False, ge(2, _if_then_else(True, max_col_clue, max_row_clue)))))
ge(_if_then_else(True, _if_then_else(or_(le(compare_blocks_rows, _if_then_else(True, 2, zeros_diff_rows)), False), zeros_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(compare_blocks_rows, _if_then_else(True, 2, zeros_diff_rows)), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(le(_if_then_else(False, 2, zeros_diff_cols), _if_then_else(False, 1, max_col_clue)), 4, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(True, ones_diff_cols, compare_blocks_rows), _if_then_else(True, 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_rows))))
mul(mul(add(compare_blocks_rows, compare_blocks_rows), add(ones_diff_rows, compare_blocks_rows)), mul(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_rows, zeros_diff_rows)))
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(add(compare_blocks_cols, compare_blocks_cols), mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(True, 2, 1), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, ones_diff_rows)))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(or_(False, True), _if_then_else(True, 4, ones_diff_cols), _if_then_else(False, _if_then_else(or_(False, ge(0, compare_blocks_rows)), _if_then_else(True, 4, ones_diff_cols), _if_then_else(True, 0, max_row_clue)), compare_blocks_rows)))
or_(and_(ge(_if_then_else(True, 2, 3), 2), or_(le(compare_blocks_cols, zeros_diff_cols), or_(False, True))), and_(and_(and_(True, False), ge(max_col_clue, zeros_diff_rows)), or_(False, and_(False, True))))
ge(_if_then_else(True, _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(compare_blocks_rows, _if_then_else(True, 2, zeros_diff_rows)), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(le(_if_then_else(False, 2, zeros_diff_cols), _if_then_else(True, zeros_diff_rows, 2)), 4, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(True, ones_diff_cols, compare_blocks_rows), _if_then_else(True, 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_rows))))
mul(mul(add(compare_blocks_rows, compare_blocks_rows), add(ones_diff_rows, compare_blocks_rows)), mul(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_rows, zeros_diff_rows)))
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(add(compare_blocks_cols, compare_blocks_cols), mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(ge(3, max_col_clue), _if_then_else(False, 0, ones_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, 0)))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, compare_blocks_rows)), _if_then_else(and_(False, True), _if_then_else(True, 4, ones_diff_cols), _if_then_else(False, 0, max_row_clue)))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(True, zeros_diff_cols, compare_blocks_cols)), False), and_(and_(and_(True, False), ge(max_col_clue, zeros_diff_rows)), ge(_if_then_else(True, 2, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols))))
ge(_if_then_else(or_(and_(False, True), False), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(max_row_clue, _if_then_else(and_(False, False), _if_then_else(True, 2, 1), _if_then_else(False, 4, 4))), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(True, 4, zeros_diff_rows), _if_then_else(le(1, compare_blocks_cols), ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(ge(_if_then_else(True, 4, 3), _if_then_else(le(1, compare_blocks_cols), ones_diff_rows, compare_blocks_cols)), 1, max_col_clue), _if_then_else(True, 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))))
compare_blocks_cols
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(zeros_diff_cols, mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(True, 2, 1), _if_then_else(True, 2, 1)), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, ones_diff_rows)))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(or_(False, True), _if_then_else(True, 4, ones_diff_cols), _if_then_else(False, 3, compare_blocks_rows)))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), or_(le(2, zeros_diff_cols), or_(False, True))), and_(and_(and_(True, False), ge(max_col_clue, zeros_diff_rows)), or_(False, ge(2, _if_then_else(True, max_col_clue, max_row_clue)))))
ge(_if_then_else(True, _if_then_else(or_(le(compare_blocks_rows, _if_then_else(True, 2, zeros_diff_rows)), False), zeros_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(compare_blocks_rows, _if_then_else(True, 2, zeros_diff_rows)), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(le(_if_then_else(False, 2, zeros_diff_cols), _if_then_else(True, compare_blocks_cols, 1)), 4, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(True, ones_diff_cols, compare_blocks_rows), _if_then_else(True, 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_rows))))
mul(mul(add(compare_blocks_rows, compare_blocks_rows), add(ones_diff_rows, compare_blocks_rows)), mul(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_rows, zeros_diff_rows)))
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(add(compare_blocks_cols, compare_blocks_cols), mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(True, 2, 1), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, ones_diff_rows)))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(or_(False, True), _if_then_else(True, 4, ones_diff_cols), _if_then_else(False, 3, compare_blocks_rows)))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), or_(le(2, zeros_diff_cols), or_(False, True))), and_(and_(and_(True, False), ge(max_col_clue, zeros_diff_rows)), or_(False, and_(False, True))))
ge(_if_then_else(True, _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(compare_blocks_rows, _if_then_else(True, 2, zeros_diff_rows)), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(le(_if_then_else(False, 2, zeros_diff_cols), _if_then_else(False, zeros_diff_rows, 2)), 4, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(True, ones_diff_cols, compare_blocks_rows), _if_then_else(True, 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_rows))))
mul(mul(add(compare_blocks_rows, compare_blocks_rows), add(ones_diff_rows, compare_blocks_rows)), mul(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_rows, zeros_diff_rows)))
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(add(compare_blocks_cols, compare_blocks_cols), mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(False, 0, ones_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, 0)))
le(_if_then_else(True, _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, compare_blocks_rows)), _if_then_else(False, 3, compare_blocks_rows))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(True, max_row_clue, compare_blocks_cols)), False), and_(and_(and_(True, False), ge(max_col_clue, zeros_diff_rows)), or_(le(ones_diff_rows, ones_diff_rows), and_(False, True))))
ge(_if_then_else(or_(and_(False, True), False), _if_then_else(le(compare_blocks_rows, _if_then_else(True, 2, zeros_diff_rows)), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(max_row_clue, max_row_clue), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(True, 4, zeros_diff_rows), compare_blocks_cols), ge(_if_then_else(True, 4, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))))
compare_blocks_cols
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(zeros_diff_cols, mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, add(ones_diff_rows, compare_blocks_rows))))
COND TREES:
le(_if_then_else(False, 0, ones_diff_cols), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, ones_diff_rows)))
le(_if_then_else(or_(True, False), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, compare_blocks_rows)), _if_then_else(or_(False, True), _if_then_else(True, 4, ones_diff_cols), _if_then_else(False, 3, compare_blocks_rows)))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), or_(le(2, zeros_diff_cols), or_(False, True))), and_(and_(and_(and_(True, False), ge(max_col_clue, zeros_diff_rows)), or_(le(ones_diff_rows, ones_diff_cols), and_(False, True))), or_(False, and_(False, True))))
ge(_if_then_else(True, _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(compare_blocks_rows, _if_then_else(True, 2, zeros_diff_rows)), _if_then_else(True, 2, 3), _if_then_else(True, _if_then_else(True, zeros_diff_cols, ones_diff_rows), 4)))
or_(ge(_if_then_else(le(1, compare_blocks_cols), 4, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(True, _if_then_else(False, 0, 4), compare_blocks_rows), _if_then_else(True, 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_rows))))
mul(mul(add(compare_blocks_rows, compare_blocks_rows), add(ones_diff_rows, compare_blocks_rows)), mul(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_rows, zeros_diff_rows)))
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(add(compare_blocks_cols, compare_blocks_cols), mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(False, 0, ones_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(True, _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, 0)))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, compare_blocks_rows)), _if_then_else(or_(False, ge(0, compare_blocks_rows)), _if_then_else(True, 4, ones_diff_cols), _if_then_else(False, 0, max_row_clue)))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(True, zeros_diff_cols, compare_blocks_cols)), False), and_(and_(and_(True, and_(True, False)), ge(max_col_clue, zeros_diff_rows)), or_(le(ones_diff_rows, ones_diff_cols), and_(False, True))))
ge(_if_then_else(or_(and_(False, True), False), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(max_row_clue, _if_then_else(True, 2, _if_then_else(False, 4, max_row_clue))), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(True, 4, zeros_diff_rows), _if_then_else(le(1, compare_blocks_cols), ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(False, ones_diff_cols, compare_blocks_rows), _if_then_else(True, 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))))
compare_blocks_cols
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(zeros_diff_cols, mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(True, 2, 1), _if_then_else(True, _if_then_else(True, zeros_diff_rows, ones_diff_cols), ones_diff_rows)), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), 2))
le(compare_blocks_rows, _if_then_else(or_(False, True), _if_then_else(True, 4, ones_diff_cols), _if_then_else(True, 3, ones_diff_rows)))
or_(and_(ge(_if_then_else(True, 2, zeros_diff_rows), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), or_(le(2, zeros_diff_cols), or_(False, True))), and_(and_(ge(0, 2), ge(1, zeros_diff_rows)), or_(False, and_(False, True))))
ge(_if_then_else(True, _if_then_else(le(max_col_clue, 2), zeros_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(compare_blocks_rows, _if_then_else(True, zeros_diff_cols, zeros_diff_rows)), _if_then_else(True, 2, _if_then_else(True, zeros_diff_cols, 0)), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(le(_if_then_else(False, 2, zeros_diff_cols), _if_then_else(False, zeros_diff_rows, 2)), 4, 3), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(ge(_if_then_else(True, 4, zeros_diff_rows), _if_then_else(True, ones_diff_rows, compare_blocks_cols)), ones_diff_cols, compare_blocks_rows), _if_then_else(and_(False, False), 1, max_col_clue)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), zeros_diff_rows)), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_rows))))
compare_blocks_cols
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(add(compare_blocks_cols, compare_blocks_cols), mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(False, 0, ones_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), ones_diff_rows))
le(_if_then_else(True, _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, compare_blocks_rows, compare_blocks_rows)), _if_then_else(False, 3, compare_blocks_rows))
or_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(ge(max_col_clue, zeros_diff_rows), zeros_diff_cols, compare_blocks_cols)), False), and_(and_(and_(True, False), ge(max_col_clue, zeros_diff_rows)), or_(le(ones_diff_rows, ones_diff_rows), and_(False, True))))
ge(_if_then_else(or_(and_(False, True), False), _if_then_else(le(compare_blocks_rows, _if_then_else(True, 2, zeros_diff_rows)), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)), _if_then_else(True, 4, 1)), _if_then_else(le(max_row_clue, max_row_clue), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(le(1, compare_blocks_cols), 4, zeros_diff_rows), compare_blocks_cols), True)
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))))
compare_blocks_cols
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(zeros_diff_cols, mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, add(ones_diff_rows, compare_blocks_rows))))
COND TREES:
le(_if_then_else(and_(True, True), _if_then_else(False, 0, ones_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_rows)), _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, _if_then_else(and_(True, True), ones_diff_cols, _if_then_else(True, ones_diff_rows, ones_diff_rows)))))
le(_if_then_else(True, _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, compare_blocks_rows)), _if_then_else(False, 3, compare_blocks_rows))
or_(and_(and_(ge(_if_then_else(True, 2, 3), _if_then_else(ge(max_col_clue, zeros_diff_rows), zeros_diff_cols, compare_blocks_cols)), False), False), and_(and_(and_(True, False), ge(max_col_clue, zeros_diff_rows)), or_(le(ones_diff_rows, ones_diff_rows), and_(False, True))))
ge(_if_then_else(or_(and_(False, True), False), _if_then_else(le(compare_blocks_rows, _if_then_else(True, 2, zeros_diff_rows)), _if_then_else(True, 2, 3), _if_then_else(and_(False, True), compare_blocks_cols, 4)), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(le(max_row_clue, max_row_clue), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(True, 4, zeros_diff_rows), compare_blocks_cols), ge(_if_then_else(True, 4, 4), _if_then_else(True, ones_diff_rows, compare_blocks_cols)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))))
mul(ones_diff_cols, zeros_diff_rows)
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, ones_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
mul(mul(mul(zeros_diff_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(zeros_diff_cols, mul(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, add(ones_diff_rows, compare_blocks_rows))))
COND TREES:
le(0, _if_then_else(ge(3, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_rows, 0)))
le(_if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, compare_blocks_rows)), _if_then_else(True, zeros_diff_rows, 4))
or_(ge(_if_then_else(True, 2, 3), _if_then_else(True, max_row_clue, compare_blocks_cols)), and_(True, or_(le(ones_diff_rows, ones_diff_cols), and_(False, True))))
ge(_if_then_else(or_(True, False), _if_then_else(le(compare_blocks_rows, _if_then_else(True, 2, zeros_diff_rows)), _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)), _if_then_else(le(max_col_clue, 2), 4, 1)), _if_then_else(False, _if_then_else(True, 2, 3), _if_then_else(True, compare_blocks_cols, 4)))
or_(ge(_if_then_else(True, 3, zeros_diff_rows), _if_then_else(le(1, compare_blocks_cols), ones_diff_rows, compare_blocks_cols)), True)
VAL TREES:
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, add(ones_diff_rows, ones_diff_rows)), mul(zeros_diff_rows, ones_diff_cols)))
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_rows)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))))
add(zeros_diff_cols, compare_blocks_rows)
add(add(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), add(add(zeros_diff_rows, ones_diff_rows), compare_blocks_cols))
mul(mul(mul(compare_blocks_cols, compare_blocks_cols), add(ones_diff_cols, zeros_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)))
add(add(compare_blocks_rows, ones_diff_cols), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, add(ones_diff_rows, compare_blocks_rows))))


INFO:root:hof: COND TREES:
ge(_if_then_else(ge(_if_then_else(and_(True, True), _if_then_else(False, ones_diff_cols, compare_blocks_rows), _if_then_else(True, compare_blocks_cols, 3)), _if_then_else(ge(max_row_clue, zeros_diff_cols), _if_then_else(False, 2, zeros_diff_cols), _if_then_else(False, max_row_clue, 4))), _if_then_else(or_(and_(False, True), le(3, zeros_diff_rows)), _if_then_else(and_(False, False), _if_then_else(False, max_col_clue, 4), _if_then_else(True, 3, 2)), _if_then_else(and_(True, False), _if_then_else(False, compare_blocks_rows, compare_blocks_rows), _if_then_else(False, max_row_clue, 1))), _if_then_else(or_(and_(True, True), le(0, 4)), _if_then_else(or_(True, False), _if_then_else(True, ones_diff_cols, zeros_diff_cols), _if_then_else(False, zeros_diff_cols, max_col_clue)), _if_then_else(le(ones_diff_cols, max_row_clue), _if_then_else(True, ones_diff_cols, 3), _if_then_else(False, ones_diff_cols, compare_blocks_rows)))), _if_then_else(le(_if_then_else(and_(False, False), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, ones_diff_rows, 1)), _if_then_else(le(4, ones_diff_rows), _if_then_else(False, zeros_diff_cols, compare_blocks_rows), _if_then_else(True, zeros_diff_cols, compare_blocks_rows))), _if_then_else(ge(_if_then_else(True, compare_blocks_cols, zeros_diff_rows), _if_then_else(True, 0, compare_blocks_rows)), _if_then_else(or_(False, True), _if_then_else(False, 1, max_col_clue), _if_then_else(True, 2, 0)), _if_then_else(and_(True, True), _if_then_else(True, 1, max_row_clue), _if_then_else(True, 4, max_row_clue))), _if_then_else(or_(or_(False, True), ge(1, 3)), _if_then_else(ge(ones_diff_rows, compare_blocks_rows), _if_then_else(False, 4, 4), _if_then_else(True, 4, compare_blocks_rows)), _if_then_else(or_(True, False), _if_then_else(False, ones_diff_rows, ones_diff_cols), _if_then_else(False, 1, 1)))))
or_(and_(or_(False, False), le(zeros_diff_cols, ones_diff_cols)), le(_if_then_else(False, max_row_clue, max_col_clue), _if_then_else(False, 2, max_col_clue)))
and_(and_(and_(True, False), le(4, 1)), ge(_if_then_else(True, max_col_clue, zeros_diff_rows), _if_then_else(True, max_row_clue, ones_diff_cols)))
or_(ge(_if_then_else(True, ones_diff_rows, ones_diff_cols), _if_then_else(False, 4, 4)), ge(_if_then_else(True, zeros_diff_rows, 1), _if_then_else(True, max_row_clue, 0)))
le(_if_then_else(le(ones_diff_rows, zeros_diff_rows), _if_then_else(or_(True, False), 2, 0), _if_then_else(False, _if_then_else(True, 4, ones_diff_rows), _if_then_else(False, 0, 0))), _if_then_else(le(zeros_diff_cols, compare_blocks_rows), _if_then_else(False, max_col_clue, _if_then_else(False, 4, compare_blocks_cols)), _if_then_else(le(3, compare_blocks_cols), _if_then_else(True, 1, ones_diff_cols), 3)))
VAL TREES:
add(mul(mul(mul(ones_diff_cols, compare_blocks_rows), add(compare_blocks_rows, ones_diff_cols)), mul(add(compare_blocks_rows, compare_blocks_cols), mul(ones_diff_rows, compare_blocks_rows))), mul(mul(mul(zeros_diff_cols, zeros_diff_rows), add(compare_blocks_rows, ones_diff_cols)), add(mul(compare_blocks_cols, ones_diff_rows), add(compare_blocks_rows, compare_blocks_rows))))
add(mul(add(zeros_diff_rows, compare_blocks_rows), add(ones_diff_cols, compare_blocks_cols)), add(add(ones_diff_rows, compare_blocks_rows), add(zeros_diff_rows, ones_diff_rows)))
add(mul(mul(zeros_diff_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(mul(zeros_diff_rows, compare_blocks_rows), add(ones_diff_cols, zeros_diff_rows)))
mul(add(mul(mul(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_rows)), mul(add(compare_blocks_cols, ones_diff_rows), add(zeros_diff_cols, zeros_diff_cols))), add(mul(add(ones_diff_cols, compare_blocks_rows), add(zeros_diff_cols, ones_diff_cols)), add(add(ones_diff_cols, compare_blocks_rows), add(ones_diff_rows, ones_diff_cols)))), mul(mul(add(mul(compare_blocks_rows, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_rows)), mul(mul(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_cols, compare_blocks_cols))), add(mul(mul(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_rows, zeros_diff_rows)), mul(add(compare_blocks_cols, ones_diff_rows), add(compare_blocks_rows, compare_blocks_rows)))))
mul(add(mul(add(add(zeros_diff_rows, zeros_diff_cols), mul(compare_blocks_cols, compare_blocks_rows)), add(mul(ones_diff_rows, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols))), mul(mul(add(zeros_diff_rows, compare_blocks_rows), mul(compare_blocks_rows, compare_blocks_cols)), add(add(ones_diff_rows, compare_blocks_cols), add(compare_blocks_rows, compare_blocks_cols)))), mul(add(add(add(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, compare_blocks_rows)), mul(mul(compare_blocks_cols, compare_blocks_cols), mul(compare_blocks_cols, compare_blocks_rows))), add(mul(mul(compare_blocks_rows, compare_blocks_rows), mul(compare_blocks_rows, zeros_diff_rows)), mul(add(zeros_diff_rows, ones_diff_cols), add(compare_blocks_rows, ones_diff_cols)))))
add(add(add(mul(compare_blocks_cols, compare_blocks_rows), add(ones_diff_cols, compare_blocks_rows)), add(mul(compare_blocks_rows, ones_diff_cols), add(ones_diff_rows, compare_blocks_rows))), add(add(add(compare_blocks_rows, compare_blocks_cols), mul(compare_blocks_cols, compare_blocks_rows)), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_cols, ones_diff_rows))))


INFO:root:stats: {'fitness': <deap.tools.support.Statistics object at 0x0000024671107A20>, 'size': <deap.tools.support.Statistics object at 0x0000024671107A58>}

