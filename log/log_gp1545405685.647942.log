INFO:root:

*******STARTING!!!******


INFO:root:

*******Configuration******


INFO:root:# NUM_ROWS = 20


INFO:root:NUM_ROWS = 5


INFO:root:# NUM_COLS = 20


INFO:root:NUM_COLS = 5


INFO:root:empty_in_split = '\xa0'


INFO:root:


INFO:root:pickle_unsolved_file_path = 'data/%dx%d_nonograms.pkl' % (NUM_ROWS, NUM_COLS)


INFO:root:pickle_solved_file_path = 'data/%dx%d_nonograms_solved.pkl' % (NUM_ROWS, NUM_COLS)


INFO:root:pickle_row_options_path = 'data/%dx%d_row_options.pkl' % (NUM_ROWS, NUM_ROWS)


INFO:root:should_run_in_parallel = False


INFO:root:


INFO:root:NUM_COND_TREES = 5


INFO:root:NUM_VAL_TREES = NUM_COND_TREES + 1


INFO:root:prob_crossover_global = 0.7  # global probability for cx


INFO:root:prob_crossover_individual_cond = 0.8  # probability to cx a specific cond tree in an individual


INFO:root:prob_crossover_individual_val = 0.8  # probability to cx a specific cond tree in an individual


INFO:root:prob_mutate_global = 0.3


INFO:root:prob_mutate_individual_cond = 0.7


INFO:root:prob_mutate_individual_val = 0.7


INFO:root:


INFO:root:points_correct_box = 5


INFO:root:points_incorrect_box = 0


INFO:root:# points_incorrect_box = -2


INFO:root:pop_size = 10


INFO:root:hof_size = 1


INFO:root:# num_gen = 40


INFO:root:num_gen = 10


INFO:root:train_size = 3


INFO:root:

*******DONE!!!******


INFO:root:run time: 28 sec

INFO:root:max possible fitness for the nonograms ran: %d

INFO:root:log:    	      	                             fitness                              	                  size                  
   	      	------------------------------------------------------------------	----------------------------------------
gen	nevals	avg     	max     	min     	size	std       	avg	max	min	size	std     
0  	10    	0.693333	0.693333	0.693333	10  	0         	7.6	8  	7  	10  	0.489898
1  	8     	0.697333	0.706667	0.693333	10  	0.0061101 	8.2	10 	7  	10  	0.87178 
2  	7     	0.704   	0.706667	0.693333	10  	0.00533333	7.4	8  	6  	10  	0.663325
3  	6     	0.702667	0.706667	0.693333	10  	0.0061101 	7  	8  	6  	10  	0.632456
4  	8     	0.702667	0.706667	0.693333	10  	0.0061101 	7.8	10 	6  	10  	1.16619 
5  	7     	0.704   	0.706667	0.693333	10  	0.00533333	7.9	10 	6  	10  	1.3     
6  	9     	0.704   	0.706667	0.693333	10  	0.00533333	7.6	10 	7  	10  	0.916515
7  	8     	0.704   	0.706667	0.693333	10  	0.00533333	8.5	11 	6  	10  	1.62788 
8  	10    	0.702667	0.706667	0.693333	10  	0.0061101 	8.4	10 	7  	10  	1.2     
9  	8     	0.704   	0.706667	0.693333	10  	0.00533333	8.7	11 	6  	10  	1.55242 
10 	10    	0.701333	0.706667	0.693333	10  	0.00653197	9.9	14 	7  	10  	2.02237 

INFO:root:pop: COND TREES:
ge(_if_then_else(and_(False, False), _if_then_else(True, max_col_clue, max_col_clue), _if_then_else(True, ones_diff_cols, _if_then_else(or_(and_(True, True), and_(False, False)), _if_then_else(or_(ge(max_row_clue, max_col_clue), False), _if_then_else(True, 0, compare_blocks_cols), _if_then_else(or_(False, False), compare_blocks_rows, _if_then_else(False, 1, ones_diff_rows))), _if_then_else(le(compare_blocks_rows, zeros_diff_cols), _if_then_else(le(0, 2), _if_then_else(False, 4, zeros_diff_cols), 2), _if_then_else(le(1, 2), zeros_diff_rows, zeros_diff_cols))))), _if_then_else(and_(False, True), _if_then_else(and_(False, True), ones_diff_rows, max_row_clue), _if_then_else(False, ones_diff_rows, 2)))
or_(and_(le(compare_blocks_rows, ones_diff_rows), ge(3, _if_then_else(ge(_if_then_else(le(max_col_clue, max_row_clue), 1, _if_then_else(False, _if_then_else(True, zeros_diff_cols, ones_diff_rows), _if_then_else(False, compare_blocks_rows, max_row_clue))), _if_then_else(True, compare_blocks_cols, 1)), _if_then_else(le(_if_then_else(ge(3, compare_blocks_cols), 2, _if_then_else(True, zeros_diff_cols, ones_diff_rows)), compare_blocks_rows), _if_then_else(True, _if_then_else(False, 2, ones_diff_cols), 3), _if_then_else(True, 3, zeros_diff_cols)), _if_then_else(and_(False, le(compare_blocks_cols, _if_then_else(False, 2, 2))), _if_then_else(False, compare_blocks_rows, ones_diff_cols), _if_then_else(True, compare_blocks_cols, zeros_diff_rows))))), le(3, ones_diff_rows))
ge(_if_then_else(or_(False, True), _if_then_else(or_(False, True), 3, _if_then_else(True, 3, _if_then_else(le(_if_then_else(or_(True, False), _if_then_else(False, 4, ones_diff_rows), _if_then_else(False, compare_blocks_cols, 0)), _if_then_else(le(ones_diff_rows, ones_diff_rows), _if_then_else(False, max_row_clue, ones_diff_rows), _if_then_else(False, max_row_clue, ones_diff_rows))), _if_then_else(le(_if_then_else(False, compare_blocks_cols, 3), _if_then_else(False, 1, ones_diff_rows)), _if_then_else(le(zeros_diff_cols, 0), _if_then_else(False, 1, zeros_diff_rows), _if_then_else(True, max_col_clue, ones_diff_cols)), _if_then_else(ge(1, 3), _if_then_else(True, ones_diff_rows, 2), _if_then_else(True, 2, ones_diff_cols))), _if_then_else(or_(ge(ones_diff_cols, ones_diff_rows), and_(True, False)), _if_then_else(ge(compare_blocks_cols, zeros_diff_rows), _if_then_else(True, max_col_clue, 0), _if_then_else(False, zeros_diff_cols, 4)), _if_then_else(le(compare_blocks_rows, ones_diff_cols), _if_then_else(False, 4, compare_blocks_cols), _if_then_else(False, 1, max_col_clue)))))), _if_then_else(True, 3, 3)), 1)
le(_if_then_else(and_(True, le(4, zeros_diff_rows)), _if_then_else(True, _if_then_else(False, 4, max_row_clue), _if_then_else(True, max_col_clue, zeros_diff_rows)), _if_then_else(le(_if_then_else(True, ones_diff_rows, _if_then_else(False, compare_blocks_rows, zeros_diff_cols)), _if_then_else(False, _if_then_else(True, ones_diff_rows, 4), _if_then_else(False, 2, 4))), _if_then_else(le(max_col_clue, zeros_diff_rows), _if_then_else(True, ones_diff_rows, max_row_clue), _if_then_else(le(ones_diff_rows, 2), 4, zeros_diff_cols)), _if_then_else(le(2, compare_blocks_cols), _if_then_else(False, 0, max_row_clue), _if_then_else(False, 0, 2)))), _if_then_else(or_(ge(zeros_diff_rows, 0), le(compare_blocks_cols, 2)), _if_then_else(or_(True, False), _if_then_else(False, ones_diff_cols, ones_diff_cols), _if_then_else(False, 0, 4)), zeros_diff_rows))
and_(ge(zeros_diff_cols, max_col_clue), ge(_if_then_else(ge(_if_then_else(True, _if_then_else(True, ones_diff_cols, max_col_clue), _if_then_else(True, _if_then_else(le(_if_then_else(False, zeros_diff_rows, ones_diff_rows), _if_then_else(True, 3, 3)), _if_then_else(ge(ones_diff_cols, compare_blocks_rows), _if_then_else(False, 0, 2), _if_then_else(False, 3, ones_diff_cols)), _if_then_else(or_(False, True), _if_then_else(False, max_row_clue, 4), _if_then_else(False, max_row_clue, 2))), zeros_diff_cols)), _if_then_else(True, ones_diff_cols, max_col_clue)), 1, zeros_diff_cols), _if_then_else(True, ones_diff_cols, max_col_clue)))
VAL TREES:
mul(mul(add(ones_diff_cols, ones_diff_cols), mul(mul(add(zeros_diff_cols, compare_blocks_cols), zeros_diff_rows), compare_blocks_rows)), mul(add(ones_diff_rows, ones_diff_cols), mul(zeros_diff_cols, add(mul(compare_blocks_rows, ones_diff_cols), ones_diff_rows))))
add(mul(add(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, compare_blocks_cols)), add(mul(compare_blocks_cols, ones_diff_cols), add(compare_blocks_rows, ones_diff_rows))), add(mul(add(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, compare_blocks_cols)), mul(add(compare_blocks_cols, compare_blocks_cols), mul(mul(add(add(add(compare_blocks_cols, compare_blocks_rows), add(ones_diff_cols, ones_diff_cols)), add(mul(ones_diff_rows, ones_diff_cols), mul(zeros_diff_cols, zeros_diff_rows))), mul(add(mul(ones_diff_cols, ones_diff_rows), mul(ones_diff_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_rows, zeros_diff_rows)))), ones_diff_cols)))), mul(mul(mul(mul(zeros_diff_cols, ones_diff_cols), mul(ones_diff_rows, compare_blocks_rows)), mul(mul(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_cols))), mul(mul(add(ones_diff_cols, ones_diff_rows), add(compare_blocks_cols, zeros_diff_cols)), mul(mul(ones_diff_cols, zeros_diff_rows), add(ones_diff_cols, ones_diff_rows)))))
mul(add(add(ones_diff_cols, compare_blocks_cols), mul(mul(mul(add(ones_diff_rows, compare_blocks_rows), mul(compare_blocks_cols, ones_diff_cols)), add(zeros_diff_cols, ones_diff_cols)), add(mul(compare_blocks_rows, zeros_diff_cols), mul(compare_blocks_rows, compare_blocks_cols)))), mul(mul(ones_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_rows)))
mul(add(mul(add(add(mul(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_cols, add(zeros_diff_cols, zeros_diff_cols))), mul(add(compare_blocks_rows, add(zeros_diff_rows, ones_diff_cols)), mul(zeros_diff_cols, add(zeros_diff_rows, zeros_diff_cols)))), ones_diff_cols), mul(compare_blocks_cols, zeros_diff_cols)), add(mul(ones_diff_cols, ones_diff_cols), mul(zeros_diff_cols, zeros_diff_cols)))
add(mul(mul(ones_diff_rows, zeros_diff_cols), mul(zeros_diff_rows, mul(mul(mul(add(compare_blocks_rows, compare_blocks_rows), ones_diff_rows), mul(compare_blocks_rows, mul(ones_diff_cols, compare_blocks_rows))), add(add(compare_blocks_cols, zeros_diff_rows), mul(compare_blocks_rows, zeros_diff_rows))))), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_rows)))
add(mul(mul(ones_diff_rows, zeros_diff_rows), add(ones_diff_rows, mul(add(mul(zeros_diff_cols, compare_blocks_rows), mul(mul(compare_blocks_rows, ones_diff_cols), compare_blocks_rows)), mul(add(ones_diff_cols, ones_diff_cols), add(ones_diff_rows, zeros_diff_rows))))), mul(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, zeros_diff_rows)))
COND TREES:
ge(_if_then_else(and_(False, False), _if_then_else(True, max_col_clue, max_col_clue), _if_then_else(True, ones_diff_cols, _if_then_else(or_(and_(True, True), and_(False, False)), _if_then_else(or_(ge(max_row_clue, max_col_clue), False), _if_then_else(True, 0, compare_blocks_cols), _if_then_else(or_(False, False), compare_blocks_rows, _if_then_else(False, 1, ones_diff_rows))), _if_then_else(le(compare_blocks_rows, zeros_diff_cols), _if_then_else(le(0, 2), _if_then_else(False, 4, zeros_diff_cols), 2), _if_then_else(le(1, 2), zeros_diff_rows, zeros_diff_cols))))), _if_then_else(and_(False, True), _if_then_else(and_(False, True), max_col_clue, max_row_clue), _if_then_else(False, max_col_clue, 2)))
or_(and_(le(compare_blocks_rows, ones_diff_rows), ge(3, _if_then_else(ge(_if_then_else(le(max_col_clue, max_row_clue), 1, _if_then_else(False, ones_diff_rows, _if_then_else(False, compare_blocks_rows, max_row_clue))), _if_then_else(True, compare_blocks_cols, 1)), _if_then_else(le(_if_then_else(ge(3, compare_blocks_cols), 2, ones_diff_rows), compare_blocks_rows), _if_then_else(True, _if_then_else(False, 2, ones_diff_cols), 3), _if_then_else(True, 3, zeros_diff_cols)), _if_then_else(and_(False, le(compare_blocks_cols, _if_then_else(False, 2, 2))), _if_then_else(False, compare_blocks_rows, ones_diff_cols), _if_then_else(True, compare_blocks_cols, zeros_diff_rows))))), le(3, ones_diff_rows))
ge(_if_then_else(or_(False, True), _if_then_else(or_(False, True), 3, _if_then_else(True, 3, _if_then_else(le(_if_then_else(or_(True, False), _if_then_else(False, 4, ones_diff_rows), _if_then_else(False, compare_blocks_cols, 0)), _if_then_else(le(ones_diff_rows, ones_diff_rows), _if_then_else(False, max_row_clue, ones_diff_rows), _if_then_else(False, max_row_clue, ones_diff_rows))), _if_then_else(le(_if_then_else(False, compare_blocks_cols, 3), _if_then_else(False, 1, ones_diff_rows)), _if_then_else(le(zeros_diff_cols, 0), _if_then_else(False, 1, zeros_diff_rows), _if_then_else(True, max_col_clue, ones_diff_cols)), _if_then_else(ge(1, 3), _if_then_else(True, ones_diff_rows, 2), _if_then_else(True, 2, ones_diff_cols))), _if_then_else(or_(ge(ones_diff_cols, ones_diff_rows), and_(True, False)), _if_then_else(ge(compare_blocks_cols, zeros_diff_rows), _if_then_else(True, max_col_clue, 0), _if_then_else(False, zeros_diff_cols, 4)), _if_then_else(le(compare_blocks_rows, ones_diff_cols), _if_then_else(False, 4, compare_blocks_cols), _if_then_else(False, 1, max_col_clue)))))), _if_then_else(True, 3, 3)), 1)
le(_if_then_else(and_(True, le(4, zeros_diff_rows)), _if_then_else(True, _if_then_else(False, 4, max_row_clue), _if_then_else(True, max_col_clue, zeros_diff_rows)), _if_then_else(le(_if_then_else(True, ones_diff_rows, _if_then_else(False, compare_blocks_rows, zeros_diff_cols)), _if_then_else(False, _if_then_else(True, ones_diff_rows, 4), _if_then_else(False, 2, 4))), _if_then_else(le(max_col_clue, zeros_diff_rows), _if_then_else(True, ones_diff_rows, max_row_clue), _if_then_else(le(ones_diff_rows, 2), 4, zeros_diff_cols)), _if_then_else(le(2, compare_blocks_cols), _if_then_else(False, 0, max_row_clue), _if_then_else(False, 0, 2)))), _if_then_else(or_(ge(_if_then_else(False, ones_diff_cols, 4), 0), le(compare_blocks_cols, 2)), _if_then_else(or_(True, False), _if_then_else(False, ones_diff_cols, ones_diff_cols), _if_then_else(False, 0, 4)), _if_then_else(False, ones_diff_cols, 4)))
and_(ge(zeros_diff_cols, max_col_clue), ge(_if_then_else(ge(_if_then_else(True, _if_then_else(True, ones_diff_cols, max_col_clue), _if_then_else(True, _if_then_else(le(_if_then_else(False, zeros_diff_rows, ones_diff_rows), _if_then_else(True, 3, 3)), _if_then_else(ge(ones_diff_cols, compare_blocks_rows), _if_then_else(False, 0, 2), _if_then_else(False, 3, ones_diff_cols)), _if_then_else(or_(False, True), _if_then_else(False, max_row_clue, 4), _if_then_else(False, max_row_clue, 2))), zeros_diff_cols)), _if_then_else(True, ones_diff_cols, max_col_clue)), 1, zeros_diff_cols), _if_then_else(True, ones_diff_cols, max_col_clue)))
VAL TREES:
mul(mul(add(ones_diff_cols, ones_diff_cols), mul(mul(add(zeros_diff_cols, compare_blocks_cols), zeros_diff_rows), compare_blocks_rows)), mul(add(ones_diff_rows, ones_diff_cols), mul(zeros_diff_cols, add(mul(compare_blocks_rows, ones_diff_cols), ones_diff_rows))))
add(mul(add(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, compare_blocks_cols)), add(mul(compare_blocks_cols, ones_diff_cols), add(compare_blocks_rows, ones_diff_rows))), add(mul(add(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, compare_blocks_cols)), mul(add(compare_blocks_cols, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols)))), mul(mul(mul(mul(zeros_diff_cols, ones_diff_cols), mul(ones_diff_rows, compare_blocks_rows)), mul(mul(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_cols))), mul(mul(add(ones_diff_cols, ones_diff_rows), add(compare_blocks_cols, zeros_diff_cols)), mul(mul(ones_diff_cols, zeros_diff_rows), add(ones_diff_cols, ones_diff_rows)))))
mul(add(add(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_rows)))
mul(add(mul(ones_diff_cols, ones_diff_cols), mul(compare_blocks_cols, zeros_diff_cols)), add(mul(ones_diff_cols, ones_diff_cols), mul(zeros_diff_cols, zeros_diff_cols)))
add(mul(mul(ones_diff_rows, zeros_diff_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_rows)))
add(mul(mul(ones_diff_rows, zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, zeros_diff_rows)))
COND TREES:
ge(_if_then_else(and_(False, False), _if_then_else(True, max_col_clue, max_col_clue), _if_then_else(and_(False, True), _if_then_else(False, compare_blocks_cols, max_row_clue), _if_then_else(False, ones_diff_rows, 2))), _if_then_else(and_(False, True), _if_then_else(ge(_if_then_else(True, compare_blocks_cols, 3), _if_then_else(False, zeros_diff_rows, max_col_clue)), _if_then_else(le(_if_then_else(False, ones_diff_rows, 2), ones_diff_cols), _if_then_else(True, compare_blocks_cols, _if_then_else(True, 2, ones_diff_cols)), _if_then_else(True, max_col_clue, _if_then_else(True, ones_diff_cols, compare_blocks_cols))), _if_then_else(and_(True, False), _if_then_else(False, 4, ones_diff_rows), _if_then_else(True, zeros_diff_rows, max_col_clue))), _if_then_else(False, ones_diff_rows, max_col_clue)))
or_(le(max_row_clue, zeros_diff_cols), or_(and_(or_(True, True), or_(or_(and_(or_(True, True), False), or_(and_(or_(True, True), False), le(2, ones_diff_rows))), le(2, ones_diff_rows))), and_(le(compare_blocks_rows, ones_diff_rows), True)))
ge(ones_diff_cols, 1)
le(_if_then_else(and_(ge(ones_diff_rows, zeros_diff_rows), le(4, zeros_diff_rows)), _if_then_else(False, 1, zeros_diff_cols), _if_then_else(ge(zeros_diff_rows, 3), _if_then_else(False, 1, zeros_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_cols))), _if_then_else(or_(ge(zeros_diff_rows, _if_then_else(le(_if_then_else(le(zeros_diff_cols, ones_diff_cols), 1, zeros_diff_cols), _if_then_else(False, _if_then_else(False, 2, zeros_diff_rows), max_col_clue)), _if_then_else(and_(False, True), _if_then_else(or_(ge(zeros_diff_rows, 0), le(compare_blocks_cols, 2)), _if_then_else(False, zeros_diff_rows, max_col_clue), compare_blocks_cols), _if_then_else(True, max_row_clue, compare_blocks_rows)), _if_then_else(or_(False, True), _if_then_else(False, zeros_diff_rows, 0), _if_then_else(ge(zeros_diff_rows, 3), _if_then_else(False, 2, compare_blocks_cols), ones_diff_rows)))), le(compare_blocks_cols, zeros_diff_rows)), _if_then_else(or_(True, False), _if_then_else(False, ones_diff_cols, ones_diff_cols), _if_then_else(False, 0, 4)), _if_then_else(False, ones_diff_cols, 4)))
and_(le(_if_then_else(ge(_if_then_else(True, _if_then_else(False, ones_diff_rows, 1), zeros_diff_cols), _if_then_else(True, ones_diff_cols, max_col_clue)), ones_diff_rows, 1), _if_then_else(False, zeros_diff_rows, compare_blocks_cols)), ge(_if_then_else(False, 4, max_col_clue), _if_then_else(ge(max_row_clue, max_row_clue), 2, 0)))
VAL TREES:
mul(mul(add(ones_diff_cols, ones_diff_cols), mul(mul(add(zeros_diff_cols, compare_blocks_cols), zeros_diff_rows), compare_blocks_rows)), mul(add(ones_diff_rows, ones_diff_cols), mul(zeros_diff_cols, add(mul(compare_blocks_rows, ones_diff_cols), ones_diff_rows))))
add(mul(add(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, compare_blocks_cols)), add(mul(compare_blocks_cols, ones_diff_cols), add(compare_blocks_rows, ones_diff_rows))), add(mul(add(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, compare_blocks_cols)), mul(add(compare_blocks_cols, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols)))), mul(mul(mul(mul(zeros_diff_cols, ones_diff_cols), mul(ones_diff_rows, compare_blocks_rows)), mul(mul(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_cols))), mul(mul(add(ones_diff_cols, ones_diff_rows), add(compare_blocks_cols, zeros_diff_cols)), mul(mul(ones_diff_cols, zeros_diff_rows), add(ones_diff_cols, ones_diff_rows)))))
mul(add(add(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_rows)))
mul(add(mul(ones_diff_cols, ones_diff_cols), mul(compare_blocks_cols, zeros_diff_cols)), add(mul(ones_diff_cols, ones_diff_cols), mul(zeros_diff_cols, zeros_diff_cols)))
add(mul(mul(ones_diff_rows, zeros_diff_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_rows)))
add(mul(mul(ones_diff_rows, zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, zeros_diff_rows)))
COND TREES:
ge(_if_then_else(and_(False, False), _if_then_else(True, max_col_clue, max_col_clue), _if_then_else(and_(False, True), _if_then_else(False, compare_blocks_cols, max_row_clue), _if_then_else(False, ones_diff_rows, 2))), _if_then_else(and_(False, True), _if_then_else(ge(_if_then_else(True, compare_blocks_cols, 3), _if_then_else(False, zeros_diff_rows, _if_then_else(True, zeros_diff_cols, compare_blocks_rows))), _if_then_else(le(zeros_diff_rows, ones_diff_cols), _if_then_else(ge(_if_then_else(le(max_row_clue, 1), _if_then_else(True, 3, 2), _if_then_else(False, zeros_diff_cols, zeros_diff_rows)), _if_then_else(le(ones_diff_rows, ones_diff_rows), _if_then_else(False, 1, zeros_diff_cols), _if_then_else(False, compare_blocks_rows, compare_blocks_cols))), compare_blocks_cols, _if_then_else(True, 2, ones_diff_cols)), _if_then_else(True, max_col_clue, _if_then_else(True, zeros_diff_rows, compare_blocks_cols))), _if_then_else(and_(True, False), _if_then_else(False, 4, ones_diff_rows), _if_then_else(True, zeros_diff_rows, _if_then_else(True, zeros_diff_cols, compare_blocks_rows)))), _if_then_else(False, ones_diff_rows, max_col_clue)))
or_(le(max_row_clue, zeros_diff_cols), or_(and_(or_(ge(3, 3), True), or_(or_(and_(or_(True, True), False), or_(and_(or_(or_(True, True), True), le(_if_then_else(le(_if_then_else(True, compare_blocks_rows, zeros_diff_cols), _if_then_else(False, max_col_clue, zeros_diff_rows)), _if_then_else(le(max_col_clue, ones_diff_rows), _if_then_else(False, 2, 1), _if_then_else(False, ones_diff_rows, 2)), _if_then_else(ge(max_row_clue, 4), _if_then_else(True, 2, ones_diff_rows), _if_then_else(False, ones_diff_cols, ones_diff_cols))), _if_then_else(ge(_if_then_else(True, 2, 0), _if_then_else(True, 2, ones_diff_cols)), _if_then_else(or_(True, True), _if_then_else(False, compare_blocks_cols, max_col_clue), _if_then_else(False, compare_blocks_cols, 3)), _if_then_else(ge(3, max_row_clue), _if_then_else(True, 1, 0), _if_then_else(False, ones_diff_rows, 0))))), le(2, ones_diff_rows))), le(2, ones_diff_rows))), le(2, ones_diff_rows)))
ge(_if_then_else(or_(ge(2, ones_diff_rows), or_(True, and_(True, True))), _if_then_else(or_(le(zeros_diff_cols, 4), False), _if_then_else(True, 0, 1), _if_then_else(True, _if_then_else(False, ones_diff_rows, 4), max_row_clue)), _if_then_else(and_(and_(True, False), True), _if_then_else(True, _if_then_else(False, 0, _if_then_else(True, compare_blocks_rows, 4)), ones_diff_cols), _if_then_else(False, 3, _if_then_else(le(2, 1), 0, max_row_clue)))), 1)
le(_if_then_else(and_(ge(ones_diff_rows, zeros_diff_rows), le(4, zeros_diff_rows)), _if_then_else(False, 1, zeros_diff_cols), _if_then_else(ge(zeros_diff_rows, 3), _if_then_else(False, 1, zeros_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_cols))), _if_then_else(or_(ge(zeros_diff_rows, _if_then_else(le(_if_then_else(le(zeros_diff_cols, ones_diff_cols), 1, zeros_diff_cols), _if_then_else(False, _if_then_else(False, 2, zeros_diff_rows), max_col_clue)), _if_then_else(and_(False, True), _if_then_else(le(_if_then_else(le(_if_then_else(le(zeros_diff_cols, ones_diff_cols), 1, zeros_diff_cols), _if_then_else(and_(le(_if_then_else(le(1, ones_diff_rows), _if_then_else(True, 4, ones_diff_cols), _if_then_else(True, zeros_diff_rows, compare_blocks_rows)), _if_then_else(ge(1, max_col_clue), _if_then_else(False, 3, 0), _if_then_else(True, max_row_clue, 0))), ge(_if_then_else(and_(False, True), _if_then_else(True, compare_blocks_cols, zeros_diff_cols), _if_then_else(True, max_row_clue, compare_blocks_cols)), _if_then_else(or_(True, True), _if_then_else(True, compare_blocks_rows, ones_diff_cols), _if_then_else(True, 4, 4)))), _if_then_else(and_(or_(ge(compare_blocks_cols, max_row_clue), ge(ones_diff_cols, 1)), or_(ge(ones_diff_cols, 2), ge(zeros_diff_rows, 2))), _if_then_else(or_(and_(True, False), or_(True, False)), _if_then_else(or_(False, True), _if_then_else(True, max_row_clue, zeros_diff_cols), _if_then_else(True, zeros_diff_cols, zeros_diff_cols)), _if_then_else(and_(False, True), _if_then_else(False, 3, compare_blocks_rows), _if_then_else(True, 4, 1))), _if_then_else(or_(ge(compare_blocks_cols, 1), and_(False, False)), _if_then_else(le(compare_blocks_rows, max_col_clue), _if_then_else(True, ones_diff_cols, zeros_diff_cols), _if_then_else(True, max_col_clue, ones_diff_cols)), _if_then_else(or_(False, True), _if_then_else(False, max_col_clue, max_row_clue), _if_then_else(False, max_row_clue, zeros_diff_cols)))), _if_then_else(and_(or_(or_(True, False), or_(True, True)), le(_if_then_else(True, 4, 0), _if_then_else(True, max_col_clue, zeros_diff_cols))), _if_then_else(or_(ge(max_row_clue, 3), le(4, zeros_diff_rows)), _if_then_else(or_(False, True), _if_then_else(True, max_row_clue, zeros_diff_rows), _if_then_else(False, zeros_diff_cols, 1)), _if_then_else(le(ones_diff_rows, 3), _if_then_else(True, zeros_diff_cols, compare_blocks_rows), _if_then_else(False, max_row_clue, 0))), _if_then_else(or_(or_(False, True), and_(False, False)), _if_then_else(or_(True, False), _if_then_else(False, 3, 2), _if_then_else(True, zeros_diff_rows, ones_diff_cols)), _if_then_else(le(4, ones_diff_cols), _if_then_else(True, ones_diff_rows, 4), _if_then_else(True, compare_blocks_rows, ones_diff_cols)))))), _if_then_else(and_(False, True), _if_then_else(le(zeros_diff_cols, ones_diff_cols), _if_then_else(True, zeros_diff_rows, max_col_clue), compare_blocks_cols), _if_then_else(True, max_row_clue, compare_blocks_rows)), _if_then_else(or_(False, True), _if_then_else(False, zeros_diff_rows, 0), _if_then_else(ge(zeros_diff_rows, 3), _if_then_else(ge(zeros_diff_rows, 3), 2, compare_blocks_cols), ones_diff_rows))), ones_diff_cols), _if_then_else(False, zeros_diff_rows, max_col_clue), compare_blocks_cols), _if_then_else(True, max_row_clue, compare_blocks_rows)), _if_then_else(or_(False, True), _if_then_else(False, zeros_diff_rows, 0), _if_then_else(ge(zeros_diff_rows, 3), _if_then_else(False, 2, compare_blocks_cols), ones_diff_rows)))), le(compare_blocks_cols, zeros_diff_rows)), _if_then_else(or_(True, False), _if_then_else(False, ones_diff_cols, ones_diff_cols), _if_then_else(False, 0, 4)), _if_then_else(False, ones_diff_cols, 4)))
and_(le(_if_then_else(True, ones_diff_rows, 1), _if_then_else(False, zeros_diff_rows, compare_blocks_cols)), ge(_if_then_else(True, 4, max_col_clue), _if_then_else(ge(max_row_clue, max_row_clue), 2, 0)))
VAL TREES:
mul(mul(add(ones_diff_cols, ones_diff_cols), mul(mul(add(zeros_diff_cols, compare_blocks_cols), zeros_diff_rows), compare_blocks_rows)), mul(add(ones_diff_rows, ones_diff_cols), mul(zeros_diff_cols, add(mul(compare_blocks_rows, ones_diff_cols), ones_diff_rows))))
add(mul(add(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, compare_blocks_cols)), add(mul(compare_blocks_cols, ones_diff_cols), add(compare_blocks_rows, ones_diff_rows))), add(mul(add(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, compare_blocks_cols)), mul(add(compare_blocks_cols, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols)))), mul(mul(mul(mul(zeros_diff_cols, ones_diff_cols), mul(ones_diff_rows, compare_blocks_rows)), mul(mul(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_cols))), mul(mul(add(ones_diff_cols, ones_diff_rows), add(compare_blocks_cols, zeros_diff_cols)), mul(mul(ones_diff_cols, zeros_diff_rows), add(ones_diff_cols, ones_diff_rows)))))
mul(add(add(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_rows)))
mul(add(mul(ones_diff_cols, ones_diff_cols), mul(compare_blocks_cols, zeros_diff_cols)), add(mul(ones_diff_cols, ones_diff_cols), mul(zeros_diff_cols, zeros_diff_cols)))
add(mul(mul(ones_diff_rows, zeros_diff_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_rows)))
add(mul(mul(ones_diff_rows, zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, zeros_diff_rows)))
COND TREES:
ge(_if_then_else(and_(False, False), _if_then_else(True, max_col_clue, max_col_clue), _if_then_else(True, ones_diff_cols, compare_blocks_cols)), _if_then_else(and_(False, True), _if_then_else(ge(_if_then_else(True, compare_blocks_cols, 3), _if_then_else(and_(False, True), zeros_diff_rows, _if_then_else(True, zeros_diff_cols, compare_blocks_rows))), _if_then_else(le(zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_cols, _if_then_else(ge(_if_then_else(True, compare_blocks_cols, 3), _if_then_else(False, zeros_diff_rows, _if_then_else(True, zeros_diff_cols, compare_blocks_rows))), 2, ones_diff_cols)), _if_then_else(True, max_col_clue, _if_then_else(True, ones_diff_cols, compare_blocks_cols))), _if_then_else(and_(True, False), _if_then_else(False, 4, ones_diff_rows), _if_then_else(True, zeros_diff_rows, max_col_clue))), _if_then_else(False, ones_diff_rows, max_col_clue)))
or_(le(max_row_clue, ones_diff_rows), ge(3, 3))
ge(_if_then_else(or_(False, True), 3, _if_then_else(True, 3, 3)), 1)
le(_if_then_else(and_(ge(ones_diff_rows, zeros_diff_rows), le(4, zeros_diff_rows)), _if_then_else(False, 1, zeros_diff_cols), _if_then_else(ge(zeros_diff_rows, 3), _if_then_else(False, 1, zeros_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_cols))), _if_then_else(or_(ge(zeros_diff_rows, _if_then_else(le(_if_then_else(le(zeros_diff_cols, ones_diff_cols), 1, zeros_diff_cols), _if_then_else(False, _if_then_else(False, 2, zeros_diff_rows), max_col_clue)), _if_then_else(and_(False, True), _if_then_else(le(zeros_diff_cols, ones_diff_cols), _if_then_else(True, zeros_diff_rows, max_col_clue), compare_blocks_cols), _if_then_else(True, max_row_clue, compare_blocks_rows)), _if_then_else(or_(False, True), _if_then_else(False, zeros_diff_rows, 0), _if_then_else(ge(zeros_diff_rows, 3), _if_then_else(ge(zeros_diff_rows, 3), 2, compare_blocks_cols), ones_diff_rows)))), le(compare_blocks_cols, zeros_diff_rows)), _if_then_else(or_(True, False), _if_then_else(False, ones_diff_cols, ones_diff_cols), _if_then_else(False, 0, 4)), _if_then_else(False, ones_diff_cols, 4)))
and_(le(_if_then_else(False, ones_diff_rows, 1), _if_then_else(False, zeros_diff_rows, compare_blocks_cols)), ge(_if_then_else(ge(_if_then_else(ge(_if_then_else(True, _if_then_else(True, ones_diff_cols, max_col_clue), _if_then_else(True, _if_then_else(True, ones_diff_cols, max_col_clue), zeros_diff_cols)), _if_then_else(True, ones_diff_cols, max_col_clue)), 1, zeros_diff_cols), _if_then_else(ge(max_row_clue, max_row_clue), 2, 0)), 4, max_col_clue), _if_then_else(ge(max_row_clue, max_row_clue), 2, 0)))
VAL TREES:
mul(mul(add(ones_diff_cols, ones_diff_cols), mul(mul(add(zeros_diff_cols, compare_blocks_cols), zeros_diff_rows), compare_blocks_rows)), mul(add(ones_diff_rows, ones_diff_cols), mul(zeros_diff_cols, add(mul(compare_blocks_rows, ones_diff_cols), ones_diff_rows))))
add(mul(add(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, compare_blocks_cols)), add(mul(compare_blocks_cols, ones_diff_cols), add(compare_blocks_rows, ones_diff_rows))), add(mul(add(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, compare_blocks_cols)), mul(add(compare_blocks_cols, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols)))), mul(mul(mul(mul(zeros_diff_cols, ones_diff_cols), mul(ones_diff_rows, compare_blocks_rows)), mul(mul(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_cols))), mul(mul(add(ones_diff_cols, ones_diff_rows), add(compare_blocks_cols, zeros_diff_cols)), mul(mul(ones_diff_cols, zeros_diff_rows), add(ones_diff_cols, ones_diff_rows)))))
mul(add(add(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_rows)))
mul(add(mul(ones_diff_cols, ones_diff_cols), mul(compare_blocks_cols, zeros_diff_cols)), add(mul(ones_diff_cols, ones_diff_cols), mul(zeros_diff_cols, zeros_diff_cols)))
add(mul(mul(ones_diff_rows, zeros_diff_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_rows)))
add(mul(mul(ones_diff_rows, zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, zeros_diff_rows)))
COND TREES:
ge(_if_then_else(and_(False, False), _if_then_else(True, max_col_clue, max_col_clue), _if_then_else(True, ones_diff_cols, compare_blocks_cols)), _if_then_else(False, _if_then_else(and_(False, True), compare_blocks_cols, max_row_clue), _if_then_else(False, ones_diff_rows, 2)))
or_(and_(le(compare_blocks_rows, ones_diff_rows), or_(and_(or_(True, True), False), le(2, ones_diff_rows))), le(2, ones_diff_rows))
ge(_if_then_else(or_(False, True), _if_then_else(False, ones_diff_cols, 0), _if_then_else(True, 3, 3)), 1)
le(_if_then_else(and_(True, le(4, zeros_diff_rows)), _if_then_else(True, _if_then_else(False, 4, max_row_clue), _if_then_else(True, max_col_clue, zeros_diff_rows)), _if_then_else(ge(zeros_diff_rows, 3), _if_then_else(False, 1, zeros_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_cols))), _if_then_else(or_(ge(zeros_diff_rows, 0), le(compare_blocks_cols, 2)), _if_then_else(or_(True, False), _if_then_else(False, ones_diff_cols, ones_diff_cols), _if_then_else(False, 0, 4)), _if_then_else(False, ones_diff_cols, 4)))
and_(ge(zeros_diff_cols, _if_then_else(True, ones_diff_cols, max_col_clue)), ge(_if_then_else(and_(False, True), 4, max_col_clue), _if_then_else(True, ones_diff_cols, max_col_clue)))
VAL TREES:
mul(mul(add(ones_diff_cols, ones_diff_cols), mul(mul(add(zeros_diff_cols, compare_blocks_cols), zeros_diff_rows), compare_blocks_rows)), mul(add(ones_diff_rows, ones_diff_cols), mul(zeros_diff_cols, add(mul(compare_blocks_rows, ones_diff_cols), ones_diff_rows))))
add(mul(add(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, compare_blocks_cols)), add(mul(compare_blocks_cols, ones_diff_cols), add(compare_blocks_rows, ones_diff_rows))), add(mul(add(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, compare_blocks_cols)), mul(add(compare_blocks_cols, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols)))), mul(mul(mul(mul(zeros_diff_cols, ones_diff_cols), mul(ones_diff_rows, compare_blocks_rows)), mul(mul(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_cols))), mul(mul(add(ones_diff_cols, ones_diff_rows), add(compare_blocks_cols, zeros_diff_cols)), mul(mul(ones_diff_cols, zeros_diff_rows), add(ones_diff_cols, ones_diff_rows)))))
mul(add(add(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_rows)))
mul(add(mul(ones_diff_cols, ones_diff_cols), mul(compare_blocks_cols, zeros_diff_cols)), add(mul(ones_diff_cols, ones_diff_cols), mul(zeros_diff_cols, zeros_diff_cols)))
add(mul(mul(ones_diff_rows, zeros_diff_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_rows)))
add(mul(mul(ones_diff_rows, zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, zeros_diff_rows)))
COND TREES:
ge(_if_then_else(and_(False, False), _if_then_else(True, max_col_clue, max_col_clue), _if_then_else(True, ones_diff_cols, compare_blocks_cols)), _if_then_else(and_(False, True), _if_then_else(and_(False, True), compare_blocks_cols, max_row_clue), _if_then_else(False, ones_diff_rows, 2)))
or_(and_(le(compare_blocks_rows, ones_diff_rows), ge(2, 3)), le(2, ones_diff_rows))
ge(_if_then_else(or_(False, True), 3, _if_then_else(True, 3, 3)), 1)
le(_if_then_else(and_(True, le(4, zeros_diff_rows)), _if_then_else(True, _if_then_else(False, 4, max_row_clue), _if_then_else(True, 0, zeros_diff_rows)), _if_then_else(ge(zeros_diff_rows, 3), _if_then_else(False, 1, zeros_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_cols))), _if_then_else(or_(ge(zeros_diff_rows, 0), le(compare_blocks_cols, 2)), _if_then_else(or_(True, False), _if_then_else(False, ones_diff_cols, ones_diff_cols), _if_then_else(False, 0, 4)), _if_then_else(False, ones_diff_cols, 4)))
and_(ge(zeros_diff_cols, _if_then_else(True, ones_diff_cols, max_col_clue)), ge(_if_then_else(ge(_if_then_else(True, _if_then_else(True, ones_diff_cols, max_col_clue), _if_then_else(True, _if_then_else(True, ones_diff_cols, max_col_clue), zeros_diff_cols)), _if_then_else(True, ones_diff_cols, max_col_clue)), 1, zeros_diff_cols), _if_then_else(True, ones_diff_cols, max_col_clue)))
VAL TREES:
mul(mul(add(ones_diff_cols, ones_diff_cols), mul(mul(add(zeros_diff_cols, compare_blocks_cols), zeros_diff_rows), compare_blocks_rows)), mul(add(ones_diff_rows, ones_diff_cols), mul(zeros_diff_cols, add(mul(compare_blocks_rows, ones_diff_cols), ones_diff_rows))))
add(mul(add(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, compare_blocks_cols)), add(mul(compare_blocks_cols, ones_diff_cols), add(compare_blocks_rows, ones_diff_rows))), add(mul(add(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, compare_blocks_cols)), mul(add(compare_blocks_cols, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols)))), mul(mul(mul(mul(zeros_diff_cols, ones_diff_cols), mul(ones_diff_rows, compare_blocks_rows)), mul(mul(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_cols))), mul(mul(add(ones_diff_cols, ones_diff_rows), add(compare_blocks_cols, zeros_diff_cols)), mul(mul(ones_diff_cols, zeros_diff_rows), add(ones_diff_cols, ones_diff_rows)))))
mul(add(add(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_rows)))
mul(add(mul(ones_diff_cols, ones_diff_cols), mul(compare_blocks_cols, zeros_diff_cols)), add(mul(ones_diff_cols, ones_diff_cols), mul(zeros_diff_cols, zeros_diff_cols)))
add(mul(mul(ones_diff_rows, zeros_diff_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_rows)))
add(mul(mul(ones_diff_rows, zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, zeros_diff_rows)))
COND TREES:
ge(_if_then_else(and_(False, False), _if_then_else(True, compare_blocks_cols, max_col_clue), _if_then_else(True, ones_diff_cols, compare_blocks_cols)), _if_then_else(and_(False, True), _if_then_else(and_(False, True), compare_blocks_cols, max_row_clue), _if_then_else(False, ones_diff_rows, 2)))
or_(and_(le(compare_blocks_rows, ones_diff_rows), ge(3, 3)), le(2, ones_diff_rows))
ge(3, 1)
le(_if_then_else(and_(True, le(4, zeros_diff_rows)), _if_then_else(True, _if_then_else(False, 4, max_row_clue), _if_then_else(True, max_col_clue, zeros_diff_rows)), _if_then_else(ge(zeros_diff_rows, 3), _if_then_else(False, 1, zeros_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_cols))), _if_then_else(or_(ge(zeros_diff_rows, max_col_clue), le(compare_blocks_cols, 2)), _if_then_else(or_(True, False), _if_then_else(False, ones_diff_cols, ones_diff_cols), _if_then_else(False, 0, 4)), _if_then_else(False, ones_diff_cols, 4)))
and_(ge(zeros_diff_cols, _if_then_else(True, ones_diff_cols, _if_then_else(True, ones_diff_cols, max_col_clue))), ge(_if_then_else(ge(_if_then_else(True, _if_then_else(True, ones_diff_cols, max_col_clue), _if_then_else(True, _if_then_else(True, ones_diff_cols, max_col_clue), zeros_diff_cols)), _if_then_else(True, ones_diff_cols, max_col_clue)), 1, zeros_diff_cols), _if_then_else(True, ones_diff_cols, max_col_clue)))
VAL TREES:
mul(mul(add(ones_diff_cols, ones_diff_cols), mul(mul(add(zeros_diff_cols, add(add(add(compare_blocks_cols, compare_blocks_rows), mul(compare_blocks_cols, ones_diff_rows)), mul(add(compare_blocks_rows, mul(compare_blocks_cols, compare_blocks_cols)), mul(zeros_diff_cols, mul(ones_diff_rows, zeros_diff_rows))))), zeros_diff_rows), compare_blocks_rows)), mul(add(ones_diff_rows, ones_diff_cols), mul(zeros_diff_cols, add(mul(compare_blocks_rows, ones_diff_cols), ones_diff_rows))))
add(mul(add(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, compare_blocks_cols)), add(mul(compare_blocks_cols, ones_diff_cols), add(compare_blocks_rows, mul(add(mul(zeros_diff_cols, zeros_diff_rows), mul(zeros_diff_rows, mul(mul(zeros_diff_rows, zeros_diff_cols), add(ones_diff_rows, compare_blocks_cols)))), add(add(compare_blocks_cols, zeros_diff_cols), mul(compare_blocks_cols, compare_blocks_rows)))))), add(mul(add(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, compare_blocks_cols)), mul(add(compare_blocks_cols, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols)))), mul(mul(mul(mul(zeros_diff_cols, ones_diff_cols), mul(ones_diff_rows, compare_blocks_rows)), mul(mul(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_cols))), mul(mul(add(ones_diff_cols, ones_diff_rows), add(compare_blocks_cols, zeros_diff_cols)), mul(mul(ones_diff_cols, zeros_diff_rows), add(ones_diff_cols, ones_diff_rows)))))
mul(add(add(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, ones_diff_rows)), add(add(add(ones_diff_rows, zeros_diff_rows), mul(ones_diff_rows, zeros_diff_rows)), add(mul(zeros_diff_rows, compare_blocks_cols), mul(compare_blocks_rows, ones_diff_rows))))
mul(add(mul(ones_diff_cols, ones_diff_cols), mul(compare_blocks_cols, zeros_diff_cols)), add(mul(ones_diff_cols, ones_diff_cols), mul(add(mul(add(zeros_diff_cols, compare_blocks_rows), mul(zeros_diff_rows, compare_blocks_rows)), mul(mul(compare_blocks_cols, ones_diff_rows), add(zeros_diff_rows, zeros_diff_rows))), zeros_diff_cols)))
add(mul(mul(ones_diff_rows, zeros_diff_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_rows)))
add(mul(mul(ones_diff_rows, mul(mul(mul(add(ones_diff_cols, zeros_diff_cols), mul(ones_diff_cols, ones_diff_rows)), add(mul(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_rows, zeros_diff_cols))), mul(add(add(ones_diff_rows, ones_diff_rows), add(zeros_diff_rows, ones_diff_rows)), add(mul(compare_blocks_cols, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows))))), add(ones_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, zeros_diff_rows)))
COND TREES:
ge(_if_then_else(and_(False, False), _if_then_else(True, max_col_clue, max_col_clue), _if_then_else(and_(False, True), _if_then_else(False, compare_blocks_cols, max_row_clue), _if_then_else(False, ones_diff_rows, 2))), _if_then_else(and_(False, True), _if_then_else(ge(_if_then_else(True, compare_blocks_cols, 3), _if_then_else(False, zeros_diff_rows, _if_then_else(True, zeros_diff_cols, compare_blocks_rows))), _if_then_else(le(zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_cols, _if_then_else(True, 2, ones_diff_cols)), _if_then_else(True, max_col_clue, _if_then_else(True, ones_diff_cols, compare_blocks_cols))), _if_then_else(and_(True, True), _if_then_else(False, 4, ones_diff_rows), _if_then_else(True, zeros_diff_rows, max_col_clue))), _if_then_else(False, ones_diff_rows, max_col_clue)))
or_(le(max_row_clue, ones_diff_rows), or_(and_(or_(True, True), False), le(2, ones_diff_rows)))
ge(_if_then_else(or_(False, True), _if_then_else(False, ones_diff_cols, 1), _if_then_else(True, 3, 3)), 1)
le(_if_then_else(and_(ge(ones_diff_rows, zeros_diff_rows), le(4, zeros_diff_rows)), _if_then_else(False, 1, zeros_diff_cols), _if_then_else(ge(zeros_diff_rows, 3), _if_then_else(False, 1, zeros_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_cols))), _if_then_else(or_(ge(zeros_diff_rows, _if_then_else(le(_if_then_else(le(zeros_diff_cols, ones_diff_cols), 1, zeros_diff_cols), _if_then_else(False, _if_then_else(False, 2, zeros_diff_rows), max_col_clue)), _if_then_else(and_(False, True), _if_then_else(le(zeros_diff_cols, ones_diff_cols), _if_then_else(False, zeros_diff_rows, 1), compare_blocks_cols), _if_then_else(True, max_row_clue, compare_blocks_rows)), _if_then_else(or_(False, True), _if_then_else(False, zeros_diff_rows, 0), _if_then_else(ge(zeros_diff_rows, 3), _if_then_else(False, 2, compare_blocks_cols), ones_diff_rows)))), le(compare_blocks_cols, zeros_diff_rows)), _if_then_else(or_(True, False), _if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(False, 0, 4)), _if_then_else(False, ones_diff_cols, 4)))
and_(le(_if_then_else(False, ones_diff_rows, 1), _if_then_else(False, zeros_diff_rows, compare_blocks_cols)), ge(_if_then_else(True, 0, max_col_clue), zeros_diff_rows))
VAL TREES:
mul(mul(add(add(mul(add(add(zeros_diff_cols, ones_diff_rows), mul(zeros_diff_cols, compare_blocks_cols)), add(mul(compare_blocks_cols, compare_blocks_rows), mul(zeros_diff_rows, compare_blocks_cols))), mul(mul(add(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, ones_diff_cols)), add(add(ones_diff_rows, zeros_diff_cols), mul(zeros_diff_rows, compare_blocks_cols)))), mul(add(add(add(compare_blocks_rows, zeros_diff_cols), mul(compare_blocks_cols, compare_blocks_rows)), mul(mul(zeros_diff_rows, ones_diff_cols), add(compare_blocks_cols, compare_blocks_cols))), add(add(add(zeros_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, ones_diff_cols)), mul(add(zeros_diff_rows, ones_diff_cols), add(compare_blocks_cols, compare_blocks_rows))))), mul(mul(add(zeros_diff_cols, compare_blocks_cols), zeros_diff_rows), compare_blocks_rows)), mul(add(ones_diff_rows, ones_diff_cols), mul(zeros_diff_cols, add(mul(compare_blocks_rows, ones_diff_cols), ones_diff_rows))))
add(mul(add(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, compare_blocks_cols)), add(mul(compare_blocks_cols, ones_diff_cols), add(mul(add(add(mul(ones_diff_cols, zeros_diff_cols), zeros_diff_rows), mul(ones_diff_rows, compare_blocks_cols)), mul(mul(zeros_diff_rows, mul(ones_diff_rows, zeros_diff_cols)), mul(zeros_diff_cols, mul(zeros_diff_cols, ones_diff_rows)))), ones_diff_rows))), add(mul(add(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, compare_blocks_cols)), mul(add(compare_blocks_cols, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols)))), mul(mul(mul(mul(zeros_diff_cols, ones_diff_cols), mul(ones_diff_rows, compare_blocks_rows)), mul(mul(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_cols))), mul(mul(add(ones_diff_cols, ones_diff_rows), add(compare_blocks_cols, zeros_diff_cols)), mul(mul(ones_diff_cols, zeros_diff_rows), add(ones_diff_cols, ones_diff_rows)))))
mul(add(add(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_rows)))
mul(add(mul(mul(add(add(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols)), mul(add(ones_diff_rows, zeros_diff_cols), mul(ones_diff_cols, zeros_diff_cols))), ones_diff_cols), mul(compare_blocks_cols, zeros_diff_cols)), add(mul(ones_diff_cols, ones_diff_cols), mul(zeros_diff_cols, zeros_diff_cols)))
add(mul(mul(ones_diff_rows, zeros_diff_cols), mul(zeros_diff_rows, mul(mul(mul(compare_blocks_cols, zeros_diff_rows), add(ones_diff_cols, zeros_diff_rows)), add(mul(zeros_diff_cols, mul(ones_diff_cols, compare_blocks_cols)), add(ones_diff_rows, ones_diff_cols))))), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_rows)))
add(mul(mul(ones_diff_rows, zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), mul(mul(mul(add(compare_blocks_rows, compare_blocks_rows), add(compare_blocks_cols, zeros_diff_rows)), mul(add(ones_diff_cols, compare_blocks_rows), mul(compare_blocks_cols, ones_diff_cols))), add(zeros_diff_cols, zeros_diff_rows)))
COND TREES:
ge(_if_then_else(and_(False, False), _if_then_else(True, max_col_clue, max_col_clue), _if_then_else(True, ones_diff_cols, compare_blocks_cols)), _if_then_else(and_(False, True), _if_then_else(ge(_if_then_else(True, compare_blocks_cols, 3), _if_then_else(False, zeros_diff_rows, _if_then_else(True, zeros_diff_cols, compare_blocks_rows))), _if_then_else(le(zeros_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_cols, _if_then_else(ge(_if_then_else(False, compare_blocks_cols, 3), _if_then_else(False, zeros_diff_rows, _if_then_else(True, zeros_diff_cols, compare_blocks_rows))), 2, ones_diff_cols)), _if_then_else(True, max_col_clue, _if_then_else(True, ones_diff_cols, compare_blocks_cols))), _if_then_else(and_(True, False), _if_then_else(False, 4, ones_diff_rows), _if_then_else(True, zeros_diff_rows, max_col_clue))), _if_then_else(False, ones_diff_rows, max_col_clue)))
or_(le(max_row_clue, zeros_diff_cols), or_(and_(or_(True, True), False), le(2, ones_diff_rows)))
ge(_if_then_else(or_(False, True), _if_then_else(False, ones_diff_cols, 0), _if_then_else(True, 3, 3)), 1)
le(_if_then_else(and_(ge(ones_diff_rows, zeros_diff_rows), le(4, zeros_diff_rows)), _if_then_else(False, 1, zeros_diff_cols), _if_then_else(ge(zeros_diff_rows, 3), _if_then_else(False, 1, zeros_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_cols))), _if_then_else(or_(ge(zeros_diff_rows, _if_then_else(le(_if_then_else(le(zeros_diff_cols, ones_diff_cols), max_col_clue, zeros_diff_cols), _if_then_else(False, _if_then_else(False, 2, zeros_diff_rows), max_col_clue)), _if_then_else(and_(False, True), _if_then_else(le(zeros_diff_cols, ones_diff_cols), _if_then_else(True, zeros_diff_rows, max_col_clue), compare_blocks_cols), _if_then_else(True, max_row_clue, compare_blocks_rows)), _if_then_else(or_(False, True), _if_then_else(False, zeros_diff_rows, 0), _if_then_else(ge(zeros_diff_rows, 3), _if_then_else(ge(zeros_diff_rows, 3), 2, compare_blocks_cols), ones_diff_rows)))), le(compare_blocks_cols, zeros_diff_rows)), _if_then_else(or_(True, False), _if_then_else(False, ones_diff_cols, ones_diff_cols), _if_then_else(False, 0, 4)), _if_then_else(False, ones_diff_cols, 4)))
and_(le(_if_then_else(False, ones_diff_rows, 1), _if_then_else(False, zeros_diff_rows, compare_blocks_cols)), ge(_if_then_else(ge(_if_then_else(and_(False, True), 4, max_col_clue), _if_then_else(ge(max_row_clue, max_row_clue), 2, 4)), 4, max_col_clue), _if_then_else(ge(max_row_clue, max_row_clue), 2, 0)))
VAL TREES:
mul(mul(add(ones_diff_cols, ones_diff_cols), mul(mul(add(zeros_diff_cols, compare_blocks_cols), zeros_diff_rows), compare_blocks_rows)), mul(add(ones_diff_rows, ones_diff_cols), mul(zeros_diff_cols, add(mul(compare_blocks_rows, ones_diff_cols), ones_diff_rows))))
add(mul(add(mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, compare_blocks_cols)), add(mul(compare_blocks_cols, ones_diff_cols), add(compare_blocks_rows, ones_diff_rows))), add(mul(add(compare_blocks_rows, ones_diff_cols), add(compare_blocks_rows, compare_blocks_cols)), mul(add(compare_blocks_cols, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols)))), mul(mul(mul(mul(zeros_diff_cols, ones_diff_cols), mul(ones_diff_rows, compare_blocks_rows)), mul(mul(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_cols))), mul(mul(add(ones_diff_cols, ones_diff_rows), add(compare_blocks_cols, zeros_diff_cols)), mul(mul(ones_diff_cols, zeros_diff_rows), add(ones_diff_cols, ones_diff_rows)))))
mul(add(add(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_rows)))
mul(add(mul(ones_diff_cols, ones_diff_cols), mul(compare_blocks_cols, zeros_diff_cols)), add(mul(ones_diff_cols, ones_diff_cols), mul(zeros_diff_cols, zeros_diff_cols)))
add(mul(mul(ones_diff_rows, zeros_diff_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_rows)))
add(mul(mul(ones_diff_rows, zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, zeros_diff_rows)))


INFO:root:hof: COND TREES:
and_(and_(or_(and_(True, False), False), ge(3, _if_then_else(False, zeros_diff_cols, compare_blocks_cols))), le(_if_then_else(True, 4, zeros_diff_cols), _if_then_else(ge(3, max_row_clue), compare_blocks_rows, _if_then_else(True, 0, max_col_clue))))
ge(_if_then_else(ge(_if_then_else(True, zeros_diff_rows, ones_diff_rows), _if_then_else(True, zeros_diff_cols, max_row_clue)), _if_then_else(le(zeros_diff_rows, 1), _if_then_else(False, 4, compare_blocks_rows), _if_then_else(False, 3, 3)), _if_then_else(ge(compare_blocks_rows, ones_diff_cols), _if_then_else(False, 0, ones_diff_rows), _if_then_else(True, 3, zeros_diff_rows))), _if_then_else(or_(le(0, 2), ge(zeros_diff_rows, compare_blocks_cols)), _if_then_else(and_(False, True), _if_then_else(False, 0, 2), _if_then_else(False, max_col_clue, compare_blocks_cols)), _if_then_else(or_(False, True), _if_then_else(False, zeros_diff_rows, compare_blocks_rows), _if_then_else(False, max_col_clue, 0))))
or_(or_(and_(True, True), le(4, 1)), or_(ge(compare_blocks_cols, ones_diff_rows), or_(False, True)))
or_(or_(le(compare_blocks_rows, 2), ge(0, compare_blocks_cols)), or_(le(1, compare_blocks_rows), or_(False, False)))
or_(and_(and_(ge(zeros_diff_rows, zeros_diff_cols), and_(True, True)), or_(ge(max_col_clue, max_col_clue), or_(True, True))), ge(_if_then_else(ge(ones_diff_rows, zeros_diff_rows), _if_then_else(True, 2, compare_blocks_rows), _if_then_else(False, max_col_clue, compare_blocks_rows)), _if_then_else(and_(False, True), _if_then_else(False, max_row_clue, compare_blocks_cols), _if_then_else(False, 3, compare_blocks_cols))))
VAL TREES:
add(add(mul(add(compare_blocks_cols, ones_diff_cols), add(zeros_diff_rows, zeros_diff_cols)), mul(add(compare_blocks_cols, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))), add(mul(mul(compare_blocks_rows, compare_blocks_rows), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(compare_blocks_cols, compare_blocks_cols), mul(zeros_diff_rows, ones_diff_rows))))
mul(add(mul(add(compare_blocks_cols, ones_diff_rows), mul(compare_blocks_rows, zeros_diff_rows)), add(mul(zeros_diff_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_cols))), add(mul(mul(ones_diff_cols, compare_blocks_rows), mul(compare_blocks_cols, ones_diff_rows)), add(mul(ones_diff_rows, compare_blocks_cols), mul(ones_diff_rows, ones_diff_rows))))
mul(add(add(ones_diff_rows, zeros_diff_cols), mul(compare_blocks_cols, zeros_diff_rows)), add(mul(ones_diff_cols, zeros_diff_cols), mul(compare_blocks_rows, ones_diff_rows)))
mul(mul(mul(ones_diff_cols, compare_blocks_cols), add(zeros_diff_cols, ones_diff_cols)), add(add(zeros_diff_rows, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_cols)))
add(add(mul(add(compare_blocks_cols, ones_diff_rows), ones_diff_cols), mul(add(zeros_diff_rows, compare_blocks_cols), ones_diff_rows)), add(add(compare_blocks_cols, mul(compare_blocks_cols, ones_diff_cols)), mul(zeros_diff_cols, compare_blocks_rows)))
add(add(mul(mul(ones_diff_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_cols, zeros_diff_rows))), mul(mul(add(ones_diff_rows, compare_blocks_rows), add(compare_blocks_rows, compare_blocks_rows)), add(mul(compare_blocks_cols, compare_blocks_rows), add(ones_diff_cols, ones_diff_rows))))


INFO:root:stats: {'fitness': <deap.tools.support.Statistics object at 0x000001CDF1FFB278>, 'size': <deap.tools.support.Statistics object at 0x000001CDF1FFB2B0>}

