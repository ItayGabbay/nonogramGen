INFO:root:

*******STARTING!!!******


INFO:root:

*******Configuration******


INFO:root:# NUM_ROWS = 20


INFO:root:NUM_ROWS = 5


INFO:root:# NUM_COLS = 20


INFO:root:NUM_COLS = 5


INFO:root:empty_in_split = '\xa0'


INFO:root:


INFO:root:pickle_unsolved_file_path = 'data/%dx%d_nonograms.pkl' % (NUM_ROWS, NUM_COLS)


INFO:root:pickle_solved_file_path = 'data/%dx%d_nonograms_solved.pkl' % (NUM_ROWS, NUM_COLS)


INFO:root:


INFO:root:NUM_COND_TREES = 5


INFO:root:NUM_VAL_TREES = NUM_COND_TREES + 1


INFO:root:prob_crossover_global = 0.4  # global probability for cx


INFO:root:prob_crossover_individual_cond = 1  # probability to cx a specific cond tree in an individual


INFO:root:prob_crossover_individual_val = 1  # probability to cx a specific cond tree in an individual


INFO:root:prob_mutate_global = 0.1


INFO:root:prob_mutate_individual_cond = 1


INFO:root:prob_mutate_individual_val = 1


INFO:root:


INFO:root:points_correct_box = 5


INFO:root:points_incorrect_box = -2


INFO:root:pop_size = 40


INFO:root:hof_size = 1


INFO:root:# num_gen = 40


INFO:root:num_gen = 10


INFO:root:train_size = 1


INFO:root:

*******DONE!!!******


INFO:root:run time: 23 sec

INFO:root:log:    	      	            fitness            	            size           
   	      	-------------------------------	---------------------------
gen	nevals	avg    	max    	min    	std    	avg	max	min	std
0  	40    	38.35  	46.3333	30.6667	4.35807	2  	2  	2  	0  
1  	18    	40.9708	46.3333	30.6667	4.00744	2  	2  	2  	0  
2  	15    	43.5583	46.3333	33.3333	3.7438 	2  	2  	2  	0  
3  	21    	44.5167	46.3333	30.6667	3.55645	2  	2  	2  	0  
4  	19    	45.3625	46.3333	33.3333	2.79878	2  	2  	2  	0  
5  	17    	44.625 	46.3333	33.3333	3.62069	2  	2  	2  	0  
6  	26    	45.0375	46.3333	33.3333	3.36475	2  	2  	2  	0  
7  	18    	44.625 	46.3333	33.3333	3.62069	2  	2  	2  	0  
8  	16    	45.4958	46.3333	33.3333	2.71352	2  	2  	2  	0  
9  	28    	44.4333	46.3333	33.3333	3.99145	2  	2  	2  	0  
10 	19    	45.1917	46.3333	33.3333	3.4614 	2  	2  	2  	0  

INFO:root:pop: COND TREES:
le(if_then_else(le(1, 4), if_then_else(False, -3, compare_blocks_cols), if_then_else(or_(False, False), if_then_else(True, -4, ones_diff_rows), if_then_else(False, 1, 4))), if_then_else(or_(False, False), 4, if_then_else(True, 1, 4)))
or_(and_(le(0, 4), ge(zeros_diff_rows, zeros_diff_cols)), and_(ge(zeros_diff_rows, if_then_else(ge(zeros_diff_rows, zeros_diff_cols), -1, -4)), le(if_then_else(True, compare_blocks_rows, ones_diff_rows), ones_diff_cols)))
or_(le(if_then_else(or_(False, True), if_then_else(True, -4, 0), if_then_else(True, -2, 2)), if_then_else(or_(False, True), if_then_else(True, -1, -4), if_then_else(True, -2, if_then_else(True, -2, 2)))), le(if_then_else(le(zeros_diff_cols, ones_diff_rows), if_then_else(True, -4, 0), if_then_else(False, -3, -3)), if_then_else(ge(0, ones_diff_rows), if_then_else(True, compare_blocks_rows, zeros_diff_cols), if_then_else(True, 0, -1))))
le(if_then_else(ge(-4, -4), if_then_else(True, if_then_else(and_(False, False), if_then_else(False, -3, 3), 1), if_then_else(True, if_then_else(True, 3, 3), -5)), if_then_else(True, if_then_else(True, compare_blocks_rows, if_then_else(False, ones_diff_cols, -2)), -5)), if_then_else(and_(False, and_(le(-4, 4), ge(0, -4))), if_then_else(True, 0, -3), if_then_else(False, 0, -2)))
ge(if_then_else(False, -1, 0), if_then_else(and_(False, False), if_then_else(True, ones_diff_cols, compare_blocks_cols), if_then_else(False, -1, 0)))
VAL TREES:
add(add(mul(compare_blocks_rows, ones_diff_cols), add(ones_diff_rows, ones_diff_cols)), add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, compare_blocks_cols)))
add(add(add(zeros_diff_cols, ones_diff_cols), mul(ones_diff_cols, mul(zeros_diff_rows, zeros_diff_cols))), mul(add(ones_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, zeros_diff_cols)))
add(add(add(compare_blocks_cols, zeros_diff_rows), add(add(ones_diff_rows, zeros_diff_cols), ones_diff_rows)), mul(add(mul(compare_blocks_rows, mul(compare_blocks_rows, compare_blocks_rows)), zeros_diff_rows), add(zeros_diff_rows, ones_diff_rows)))
mul(mul(mul(add(compare_blocks_rows, zeros_diff_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(add(ones_diff_rows, zeros_diff_rows), add(ones_diff_rows, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, zeros_diff_cols), add(compare_blocks_rows, compare_blocks_cols)), mul(add(ones_diff_rows, zeros_diff_rows), add(ones_diff_rows, zeros_diff_cols))))
mul(mul(mul(mul(compare_blocks_cols, ones_diff_cols), mul(ones_diff_rows, zeros_diff_rows)), mul(zeros_diff_cols, add(zeros_diff_cols, ones_diff_rows))), add(mul(add(ones_diff_rows, compare_blocks_cols), mul(compare_blocks_cols, zeros_diff_cols)), mul(add(ones_diff_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_cols))))
mul(mul(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, ones_diff_rows)), add(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_cols, compare_blocks_cols)))
COND TREES:
le(if_then_else(le(1, 4), if_then_else(False, -3, compare_blocks_cols), if_then_else(le(if_then_else(ge(4, zeros_diff_rows), if_then_else(True, zeros_diff_rows, ones_diff_rows), if_then_else(False, compare_blocks_cols, ones_diff_rows)), if_then_else(and_(True, False), if_then_else(False, compare_blocks_cols, -4), if_then_else(False, 4, 3))), if_then_else(ge(if_then_else(True, 3, ones_diff_rows), if_then_else(True, 3, 1)), if_then_else(or_(True, True), if_then_else(False, zeros_diff_cols, 3), if_then_else(True, zeros_diff_cols, -5)), if_then_else(or_(True, False), if_then_else(False, zeros_diff_cols, zeros_diff_cols), if_then_else(True, -2, zeros_diff_rows))), if_then_else(le(if_then_else(True, 4, -3), if_then_else(True, -2, zeros_diff_rows)), if_then_else(and_(True, True), if_then_else(False, 4, compare_blocks_cols), if_then_else(True, compare_blocks_rows, 1)), if_then_else(or_(True, True), if_then_else(False, ones_diff_cols, ones_diff_rows), if_then_else(False, 1, -1))))), 1)
or_(and_(le(0, 4), ge(if_then_else(ge(if_then_else(True, -2, -3), if_then_else(True, ones_diff_rows, 0)), if_then_else(or_(True, False), if_then_else(True, zeros_diff_cols, compare_blocks_cols), if_then_else(False, -4, -3)), if_then_else(le(-2, ones_diff_rows), if_then_else(True, -2, ones_diff_rows), if_then_else(False, 3, -4))), -2)), and_(False, le(if_then_else(True, zeros_diff_cols, ones_diff_rows), 0)))
or_(ge(0, ones_diff_rows), le(if_then_else(or_(and_(le(ones_diff_rows, zeros_diff_cols), ge(2, zeros_diff_cols)), and_(ge(if_then_else(False, 3, -2), if_then_else(False, if_then_else(False, 4, -5), if_then_else(False, 3, compare_blocks_rows))), or_(False, or_(False, False)))), if_then_else(True, -4, 0), if_then_else(False, -3, -3)), if_then_else(ge(0, ones_diff_rows), if_then_else(True, compare_blocks_rows, zeros_diff_cols), if_then_else(True, 0, -1))))
le(if_then_else(ge(-4, -4), if_then_else(True, 3, if_then_else(or_(le(if_then_else(True, compare_blocks_rows, compare_blocks_cols), if_then_else(True, 4, -3)), or_(ge(1, 0), or_(False, False))), if_then_else(True, 3, 3), -5)), if_then_else(True, if_then_else(True, compare_blocks_rows, if_then_else(False, ones_diff_cols, -3)), -5)), if_then_else(and_(False, and_(le(-4, 4), ge(0, -4))), if_then_else(True, 0, -3), if_then_else(False, 0, -2)))
ge(if_then_else(False, if_then_else(False, compare_blocks_cols, zeros_diff_cols), if_then_else(or_(or_(True, True), ge(2, 2)), if_then_else(or_(True, False), if_then_else(False, 3, if_then_else(and_(True, True), 3, if_then_else(False, zeros_diff_cols, 4))), if_then_else(ge(-4, if_then_else(False, zeros_diff_cols, -1)), compare_blocks_rows, if_then_else(ge(2, zeros_diff_cols), if_then_else(False, compare_blocks_rows, -1), -3))), if_then_else(ge(-2, -3), if_then_else(False, 2, 2), if_then_else(True, 0, 2)))), if_then_else(and_(False, False), zeros_diff_rows, if_then_else(False, -1, 0)))
VAL TREES:
add(add(mul(compare_blocks_rows, ones_diff_cols), add(ones_diff_rows, zeros_diff_rows)), compare_blocks_rows)
add(add(add(zeros_diff_cols, mul(add(ones_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, add(ones_diff_rows, zeros_diff_rows)))), mul(mul(zeros_diff_rows, zeros_diff_cols), zeros_diff_rows)), mul(add(ones_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, zeros_diff_cols)))
add(add(add(compare_blocks_cols, compare_blocks_rows), add(add(ones_diff_rows, mul(zeros_diff_cols, mul(ones_diff_cols, compare_blocks_rows))), ones_diff_rows)), mul(add(mul(compare_blocks_rows, compare_blocks_rows), zeros_diff_rows), add(zeros_diff_rows, ones_diff_rows)))
mul(mul(mul(add(compare_blocks_rows, zeros_diff_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(add(ones_diff_rows, zeros_diff_rows), add(ones_diff_rows, zeros_diff_cols))), compare_blocks_cols)
mul(mul(mul(mul(compare_blocks_cols, ones_diff_cols), mul(ones_diff_rows, zeros_diff_rows)), mul(ones_diff_cols, add(zeros_diff_cols, ones_diff_rows))), add(mul(add(ones_diff_rows, compare_blocks_cols), mul(compare_blocks_cols, zeros_diff_cols)), mul(add(zeros_diff_cols, ones_diff_cols), add(ones_diff_cols, ones_diff_cols))))
mul(mul(mul(add(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_rows, zeros_diff_rows)), add(compare_blocks_cols, ones_diff_rows)), add(add(ones_diff_rows, add(compare_blocks_cols, ones_diff_rows)), add(ones_diff_cols, compare_blocks_cols)))
COND TREES:
or_(or_(and_(False, False), and_(True, False)), le(if_then_else(False, if_then_else(and_(ge(if_then_else(or_(True, True), if_then_else(False, 2, zeros_diff_cols), if_then_else(True, -5, 2)), if_then_else(ge(2, -2), if_then_else(False, ones_diff_rows, ones_diff_cols), if_then_else(True, zeros_diff_rows, 1))), and_(le(if_then_else(False, -3, 0), if_then_else(False, compare_blocks_cols, ones_diff_rows)), or_(ge(zeros_diff_cols, -2), le(-3, 3)))), if_then_else(ge(if_then_else(and_(True, False), if_then_else(False, 0, -3), if_then_else(False, 3, -4)), if_then_else(or_(True, True), if_then_else(False, 0, -3), if_then_else(True, -1, 4))), if_then_else(ge(if_then_else(True, 0, -3), if_then_else(True, compare_blocks_cols, -3)), if_then_else(ge(-1, 4), if_then_else(False, -1, 0), if_then_else(False, 2, 0)), if_then_else(or_(False, False), if_then_else(True, 4, zeros_diff_cols), if_then_else(True, zeros_diff_rows, ones_diff_rows))), if_then_else(and_(and_(True, True), ge(4, ones_diff_cols)), if_then_else(ge(ones_diff_cols, 4), if_then_else(True, -1, -1), if_then_else(True, 2, 2)), if_then_else(ge(zeros_diff_cols, ones_diff_rows), if_then_else(True, zeros_diff_cols, 3), if_then_else(True, ones_diff_cols, -3)))), if_then_else(and_(le(if_then_else(False, ones_diff_rows, 1), if_then_else(True, -5, -1)), ge(if_then_else(False, ones_diff_rows, -4), if_then_else(True, compare_blocks_cols, 4))), if_then_else(ge(if_then_else(False, compare_blocks_cols, zeros_diff_rows), if_then_else(False, 0, -2)), if_then_else(le(-2, compare_blocks_cols), if_then_else(False, zeros_diff_rows, compare_blocks_rows), if_then_else(True, 3, ones_diff_rows)), if_then_else(or_(False, True), if_then_else(False, zeros_diff_rows, -3), if_then_else(False, 2, zeros_diff_cols))), if_then_else(ge(if_then_else(False, -3, ones_diff_rows), if_then_else(False, -2, ones_diff_rows)), if_then_else(le(3, ones_diff_cols), if_then_else(True, 4, 3), if_then_else(True, 0, -5)), if_then_else(le(1, ones_diff_rows), if_then_else(False, -3, 2), if_then_else(False, ones_diff_rows, -4))))), 3), if_then_else(True, zeros_diff_cols, compare_blocks_cols)))
le(if_then_else(or_(True, or_(False, False)), if_then_else(False, -2, -3), if_then_else(True, compare_blocks_rows, if_then_else(True, zeros_diff_rows, 0))), if_then_else(le(-3, if_then_else(True, 3, -5)), if_then_else(True, zeros_diff_rows, -1), if_then_else(or_(False, True), 0, if_then_else(ge(if_then_else(False, 1, -1), if_then_else(and_(True, True), 3, 2)), if_then_else(le(2, zeros_diff_cols), if_then_else(and_(True, False), zeros_diff_rows, if_then_else(True, 0, -2)), if_then_else(True, compare_blocks_cols, -3)), if_then_else(and_(False, ge(zeros_diff_rows, ones_diff_rows)), if_then_else(True, -3, ones_diff_rows), if_then_else(True, -4, 2))))))
le(if_then_else(ge(if_then_else(False, if_then_else(True, 0, -3), 2), zeros_diff_cols), if_then_else(False, if_then_else(True, ones_diff_cols, 0), -5), if_then_else(and_(False, or_(True, ge(if_then_else(and_(ge(compare_blocks_cols, 1), False), if_then_else(False, zeros_diff_cols, if_then_else(True, 3, 4)), if_then_else(True, zeros_diff_cols, -4)), if_then_else(or_(True, ge(0, -5)), if_then_else(and_(False, True), 4, 1), if_then_else(False, if_then_else(False, ones_diff_cols, -5), compare_blocks_cols))))), 1, if_then_else(ge(2, zeros_diff_cols), ones_diff_cols, if_then_else(True, -3, compare_blocks_cols)))), if_then_else(or_(ge(compare_blocks_cols, -5), le(-3, zeros_diff_cols)), if_then_else(True, 0, 2), if_then_else(False, if_then_else(False, 2, if_then_else(False, -4, 3)), if_then_else(le(-3, -2), if_then_else(False, 1, 4), 4))))
and_(ge(if_then_else(True, if_then_else(ge(if_then_else(True, 0, ones_diff_cols), if_then_else(False, zeros_diff_cols, -2)), if_then_else(ge(compare_blocks_cols, zeros_diff_cols), if_then_else(False, 1, ones_diff_rows), if_then_else(True, zeros_diff_rows, -3)), if_then_else(ge(-2, compare_blocks_rows), if_then_else(True, -2, zeros_diff_cols), if_then_else(True, -4, 0))), ones_diff_rows), if_then_else(True, ones_diff_cols, compare_blocks_cols)), le(if_then_else(or_(ge(ones_diff_rows, -3), False), -3, 1), if_then_else(False, -4, if_then_else(True, -1, if_then_else(True, zeros_diff_cols, -1)))))
and_(ge(if_then_else(False, zeros_diff_rows, ones_diff_cols), if_then_else(False, if_then_else(False, zeros_diff_cols, 1), if_then_else(and_(or_(True, True), and_(False, False)), if_then_else(le(ones_diff_cols, if_then_else(True, compare_blocks_cols, ones_diff_cols)), if_then_else(le(-1, 3), if_then_else(False, ones_diff_cols, ones_diff_cols), -2), if_then_else(True, -3, if_then_else(False, zeros_diff_cols, 3))), if_then_else(and_(False, True), if_then_else(False, compare_blocks_cols, zeros_diff_rows), if_then_else(False, -2, compare_blocks_cols))))), or_(and_(and_(True, True), False), or_(False, False)))
VAL TREES:
add(add(add(ones_diff_cols, zeros_diff_cols), add(zeros_diff_rows, ones_diff_cols)), add(add(ones_diff_rows, add(mul(add(add(compare_blocks_rows, ones_diff_rows), mul(zeros_diff_cols, zeros_diff_cols)), compare_blocks_cols), add(compare_blocks_cols, compare_blocks_cols))), add(compare_blocks_cols, mul(add(compare_blocks_cols, compare_blocks_cols), mul(compare_blocks_cols, compare_blocks_cols)))))
add(mul(mul(zeros_diff_cols, mul(compare_blocks_cols, zeros_diff_rows)), mul(zeros_diff_rows, compare_blocks_cols)), mul(compare_blocks_cols, zeros_diff_cols))
mul(compare_blocks_rows, compare_blocks_cols)
add(add(add(mul(mul(add(compare_blocks_rows, zeros_diff_cols), add(zeros_diff_rows, mul(add(ones_diff_rows, zeros_diff_rows), add(ones_diff_rows, zeros_diff_cols)))), mul(add(ones_diff_rows, zeros_diff_rows), add(ones_diff_rows, zeros_diff_cols))), compare_blocks_cols), add(compare_blocks_rows, compare_blocks_rows)), add(add(zeros_diff_cols, ones_diff_cols), mul(mul(add(compare_blocks_rows, zeros_diff_cols), add(zeros_diff_rows, zeros_diff_rows)), zeros_diff_cols)))
add(mul(compare_blocks_rows, add(ones_diff_cols, ones_diff_cols)), add(mul(add(compare_blocks_rows, zeros_diff_rows), add(zeros_diff_cols, ones_diff_rows)), add(add(add(compare_blocks_cols, compare_blocks_cols), ones_diff_rows), ones_diff_cols)))
mul(compare_blocks_cols, zeros_diff_rows)
COND TREES:
or_(or_(and_(False, False), and_(True, False)), le(if_then_else(False, if_then_else(and_(ge(if_then_else(or_(True, True), if_then_else(False, 2, zeros_diff_cols), if_then_else(True, -5, 2)), if_then_else(ge(2, -2), if_then_else(False, ones_diff_rows, ones_diff_cols), if_then_else(True, zeros_diff_rows, 1))), and_(le(if_then_else(False, -3, 0), if_then_else(False, compare_blocks_cols, ones_diff_rows)), or_(ge(zeros_diff_cols, -2), le(-3, 3)))), if_then_else(ge(if_then_else(and_(True, False), if_then_else(False, 0, 3), if_then_else(False, 3, -4)), if_then_else(or_(True, True), if_then_else(False, 0, -3), if_then_else(True, -1, 4))), if_then_else(ge(if_then_else(True, 0, -3), if_then_else(True, compare_blocks_cols, -3)), if_then_else(ge(-1, 4), if_then_else(False, -1, 0), if_then_else(False, 2, 0)), if_then_else(or_(False, False), if_then_else(True, 4, zeros_diff_cols), if_then_else(True, zeros_diff_rows, ones_diff_rows))), if_then_else(and_(and_(True, True), ge(4, ones_diff_cols)), if_then_else(ge(ones_diff_cols, 4), if_then_else(True, -1, -1), if_then_else(True, 2, 2)), if_then_else(ge(zeros_diff_cols, ones_diff_rows), if_then_else(True, zeros_diff_cols, 3), if_then_else(True, ones_diff_cols, -3)))), if_then_else(and_(le(if_then_else(False, ones_diff_rows, 1), if_then_else(True, -5, -1)), ge(if_then_else(False, ones_diff_rows, -4), if_then_else(True, compare_blocks_cols, 4))), if_then_else(ge(if_then_else(False, compare_blocks_cols, zeros_diff_rows), if_then_else(False, 0, -2)), if_then_else(le(-2, compare_blocks_cols), if_then_else(False, zeros_diff_rows, compare_blocks_rows), if_then_else(True, 3, ones_diff_rows)), if_then_else(or_(False, True), if_then_else(False, zeros_diff_rows, -3), if_then_else(False, 2, zeros_diff_cols))), if_then_else(ge(if_then_else(False, -3, ones_diff_rows), if_then_else(False, -2, ones_diff_rows)), if_then_else(le(3, ones_diff_cols), if_then_else(True, 4, 3), if_then_else(True, 0, -5)), if_then_else(le(1, ones_diff_rows), if_then_else(False, -3, 2), if_then_else(False, ones_diff_rows, -4))))), 3), if_then_else(True, zeros_diff_cols, compare_blocks_cols)))
le(-1, if_then_else(le(-3, if_then_else(True, 3, -5)), if_then_else(True, zeros_diff_rows, -1), if_then_else(or_(False, True), 0, if_then_else(ge(if_then_else(False, 1, -1), if_then_else(and_(True, True), 3, 2)), if_then_else(le(2, zeros_diff_cols), if_then_else(and_(True, False), zeros_diff_rows, if_then_else(True, 0, -2)), if_then_else(True, compare_blocks_cols, -3)), if_then_else(and_(False, ge(zeros_diff_rows, ones_diff_rows)), if_then_else(True, -3, ones_diff_rows), if_then_else(True, -4, 2))))))
le(if_then_else(ge(if_then_else(False, if_then_else(True, 0, -3), 2), zeros_diff_cols), if_then_else(False, if_then_else(True, ones_diff_cols, 0), -5), if_then_else(and_(False, or_(True, ge(if_then_else(and_(ge(compare_blocks_cols, 1), False), if_then_else(False, zeros_diff_cols, if_then_else(True, 3, 4)), if_then_else(True, zeros_diff_cols, -4)), if_then_else(or_(True, ge(0, -5)), if_then_else(and_(False, True), 4, 1), if_then_else(False, if_then_else(False, ones_diff_cols, -5), compare_blocks_cols))))), 1, if_then_else(ge(2, zeros_diff_cols), ones_diff_cols, if_then_else(True, -3, compare_blocks_cols)))), if_then_else(or_(ge(compare_blocks_cols, -5), le(-3, zeros_diff_cols)), if_then_else(False, 0, 2), if_then_else(False, if_then_else(False, 2, if_then_else(False, -4, 3)), if_then_else(le(-3, -2), if_then_else(False, 1, 4), 4))))
and_(ge(if_then_else(True, if_then_else(ge(if_then_else(True, 0, ones_diff_cols), if_then_else(False, zeros_diff_cols, -2)), if_then_else(ge(compare_blocks_cols, zeros_diff_cols), if_then_else(False, 1, ones_diff_rows), if_then_else(True, zeros_diff_rows, -3)), if_then_else(ge(-2, compare_blocks_rows), if_then_else(True, -2, zeros_diff_cols), if_then_else(True, -4, 0))), ones_diff_rows), if_then_else(True, ones_diff_cols, compare_blocks_cols)), le(if_then_else(or_(True, False), -3, 1), if_then_else(False, -4, if_then_else(True, -1, if_then_else(True, zeros_diff_cols, -1)))))
and_(ge(if_then_else(False, zeros_diff_rows, ones_diff_cols), if_then_else(False, if_then_else(False, zeros_diff_cols, 1), if_then_else(and_(or_(True, True), and_(False, False)), if_then_else(le(ones_diff_cols, if_then_else(True, compare_blocks_cols, ones_diff_cols)), if_then_else(le(-1, 3), if_then_else(False, ones_diff_cols, zeros_diff_rows), -2), if_then_else(True, -3, if_then_else(False, zeros_diff_cols, 3))), if_then_else(and_(False, True), if_then_else(False, compare_blocks_cols, zeros_diff_rows), if_then_else(False, -2, compare_blocks_cols))))), or_(and_(and_(True, True), False), or_(False, False)))
VAL TREES:
add(add(add(ones_diff_cols, zeros_diff_cols), add(ones_diff_cols, ones_diff_cols)), add(add(ones_diff_rows, add(mul(add(add(compare_blocks_rows, ones_diff_rows), mul(zeros_diff_cols, zeros_diff_cols)), mul(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, zeros_diff_rows))), add(compare_blocks_cols, compare_blocks_cols))), add(compare_blocks_cols, mul(add(compare_blocks_cols, compare_blocks_cols), compare_blocks_cols))))
add(mul(mul(zeros_diff_cols, mul(compare_blocks_cols, add(zeros_diff_cols, ones_diff_cols))), mul(zeros_diff_rows, compare_blocks_cols)), zeros_diff_cols)
mul(compare_blocks_rows, add(zeros_diff_rows, mul(zeros_diff_rows, zeros_diff_rows)))
add(add(add(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_rows, compare_blocks_rows)), add(add(zeros_diff_cols, ones_diff_cols), mul(mul(add(compare_blocks_rows, zeros_diff_cols), add(zeros_diff_rows, zeros_diff_rows)), zeros_diff_cols)))
add(mul(compare_blocks_rows, add(ones_diff_cols, ones_diff_cols)), add(mul(mul(ones_diff_rows, compare_blocks_rows), add(zeros_diff_cols, ones_diff_rows)), add(add(add(compare_blocks_cols, compare_blocks_cols), ones_diff_rows), ones_diff_rows)))
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(compare_blocks_cols, mul(ones_diff_rows, zeros_diff_rows))), ones_diff_cols)
COND TREES:
le(if_then_else(le(1, 4), if_then_else(False, -3, compare_blocks_cols), 1), if_then_else(or_(False, False), 1, if_then_else(True, 1, 4)))
or_(and_(le(zeros_diff_rows, 4), ge(if_then_else(False, -1, -4), zeros_diff_cols)), True)
or_(le(if_then_else(or_(False, True), if_then_else(True, -4, 0), if_then_else(True, -2, 2)), if_then_else(le(-4, -1), if_then_else(True, -1, -4), if_then_else(True, -2, -3))), le(-3, if_then_else(ge(0, ones_diff_rows), if_then_else(True, compare_blocks_rows, 2), if_then_else(True, 0, -2))))
le(if_then_else(True, if_then_else(True, if_then_else(and_(False, False), if_then_else(False, -3, 3), 1), if_then_else(True, if_then_else(True, 3, 3), -5)), if_then_else(True, if_then_else(True, compare_blocks_rows, if_then_else(False, ones_diff_cols, -2)), -5)), if_then_else(and_(False, and_(le(-4, 4), ge(0, if_then_else(False, 0, -2)))), if_then_else(True, 0, -3), if_then_else(False, 0, -2)))
ge(if_then_else(False, if_then_else(False, compare_blocks_cols, zeros_diff_cols), if_then_else(False, zeros_diff_rows, ones_diff_cols)), if_then_else(and_(False, False), if_then_else(True, ones_diff_cols, compare_blocks_cols), if_then_else(and_(False, False), -1, 0)))
VAL TREES:
add(add(mul(compare_blocks_rows, ones_diff_cols), add(ones_diff_rows, zeros_diff_rows)), add(mul(add(add(compare_blocks_rows, ones_diff_rows), mul(zeros_diff_cols, zeros_diff_cols)), mul(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, zeros_diff_rows))), add(compare_blocks_cols, compare_blocks_cols)))
add(add(add(zeros_diff_cols, ones_diff_cols), mul(mul(zeros_diff_rows, zeros_diff_cols), zeros_diff_rows)), mul(add(ones_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, zeros_diff_cols)))
add(add(add(compare_blocks_cols, zeros_diff_rows), add(add(ones_diff_rows, mul(zeros_diff_cols, mul(ones_diff_cols, compare_blocks_rows))), ones_diff_rows)), mul(add(mul(compare_blocks_rows, compare_blocks_rows), zeros_diff_rows), add(zeros_diff_rows, ones_diff_rows)))
mul(mul(mul(add(compare_blocks_rows, zeros_diff_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(add(ones_diff_rows, zeros_diff_rows), add(ones_diff_rows, zeros_diff_cols))), mul(add(mul(add(mul(compare_blocks_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_cols)), zeros_diff_cols), add(compare_blocks_rows, compare_blocks_cols)), mul(mul(compare_blocks_cols, ones_diff_cols), add(compare_blocks_cols, zeros_diff_rows))))
mul(mul(mul(mul(compare_blocks_cols, ones_diff_cols), mul(ones_diff_rows, zeros_diff_rows)), mul(ones_diff_cols, add(zeros_diff_cols, ones_diff_rows))), add(mul(add(ones_diff_rows, compare_blocks_cols), mul(compare_blocks_cols, zeros_diff_cols)), mul(add(ones_diff_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_cols))))
mul(mul(mul(add(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_rows, zeros_diff_rows)), add(compare_blocks_cols, ones_diff_rows)), add(add(ones_diff_rows, zeros_diff_cols), add(ones_diff_cols, compare_blocks_cols)))
COND TREES:
or_(or_(False, and_(True, False)), le(if_then_else(False, 2, 3), if_then_else(True, zeros_diff_cols, if_then_else(False, 2, 3))))
le(if_then_else(or_(True, or_(False, False)), if_then_else(False, -2, -3), if_then_else(True, compare_blocks_rows, if_then_else(True, zeros_diff_rows, 0))), if_then_else(le(4, if_then_else(True, compare_blocks_rows, if_then_else(True, zeros_diff_rows, 0))), if_then_else(True, zeros_diff_rows, -1), if_then_else(or_(False, True), 0, if_then_else(True, -4, 2))))
le(if_then_else(ge(if_then_else(False, if_then_else(True, 0, -3), 2), zeros_diff_cols), if_then_else(False, if_then_else(True, ones_diff_cols, 2), -5), if_then_else(and_(False, or_(True, False)), 1, if_then_else(ge(2, zeros_diff_cols), ones_diff_cols, if_then_else(True, -3, compare_blocks_cols)))), if_then_else(or_(True, False), if_then_else(True, 0, 2), if_then_else(False, if_then_else(False, 2, if_then_else(False, -4, 3)), if_then_else(le(-3, -2), if_then_else(False, 1, 4), 4))))
and_(ge(if_then_else(True, 0, ones_diff_rows), if_then_else(True, ones_diff_cols, compare_blocks_cols)), le(if_then_else(or_(True, False), -3, 1), if_then_else(True, -4, if_then_else(True, -1, if_then_else(True, zeros_diff_cols, -1)))))
and_(ge(if_then_else(False, zeros_diff_rows, ones_diff_cols), if_then_else(ge(-1, 4), zeros_diff_rows, -4)), or_(and_(and_(True, True), False), or_(False, False)))
VAL TREES:
add(add(mul(ones_diff_rows, zeros_diff_cols), add(ones_diff_cols, ones_diff_cols)), add(add(ones_diff_rows, ones_diff_rows), add(compare_blocks_cols, mul(add(compare_blocks_cols, compare_blocks_cols), mul(compare_blocks_cols, compare_blocks_cols)))))
add(mul(mul(zeros_diff_cols, zeros_diff_rows), mul(zeros_diff_rows, compare_blocks_cols)), add(zeros_diff_cols, zeros_diff_rows))
mul(mul(zeros_diff_rows, mul(ones_diff_rows, compare_blocks_cols)), add(zeros_diff_rows, mul(ones_diff_rows, zeros_diff_rows)))
add(add(add(ones_diff_rows, compare_blocks_cols), add(compare_blocks_rows, compare_blocks_rows)), add(add(zeros_diff_rows, ones_diff_cols), mul(zeros_diff_cols, zeros_diff_cols)))
add(mul(compare_blocks_rows, add(ones_diff_cols, ones_diff_cols)), add(mul(compare_blocks_rows, ones_diff_cols), add(add(zeros_diff_cols, ones_diff_rows), ones_diff_rows)))
mul(add(add(ones_diff_rows, zeros_diff_rows), mul(zeros_diff_rows, compare_blocks_rows)), compare_blocks_rows)
COND TREES:
le(if_then_else(le(1, 4), if_then_else(and_(le(if_then_else(and_(and_(False, True), le(1, compare_blocks_rows)), if_then_else(or_(False, True), if_then_else(True, 2, -2), if_then_else(True, 2, 3)), if_then_else(ge(zeros_diff_rows, compare_blocks_cols), if_then_else(True, zeros_diff_rows, -5), if_then_else(False, 0, 1))), if_then_else(and_(or_(True, False), or_(False, True)), if_then_else(or_(True, True), if_then_else(True, -2, compare_blocks_rows), if_then_else(True, compare_blocks_cols, 0)), if_then_else(and_(True, False), if_then_else(True, zeros_diff_rows, 2), if_then_else(True, 1, zeros_diff_cols)))), le(if_then_else(and_(le(-4, -2), or_(False, False)), if_then_else(le(3, -3), if_then_else(False, ones_diff_rows, zeros_diff_cols), if_then_else(True, -2, ones_diff_rows)), if_then_else(or_(False, False), if_then_else(True, zeros_diff_rows, 0), if_then_else(True, 1, compare_blocks_rows))), if_then_else(and_(and_(False, False), or_(False, False)), if_then_else(or_(True, False), if_then_else(True, 4, ones_diff_cols), if_then_else(False, 1, -2)), if_then_else(or_(False, False), if_then_else(False, -3, -1), if_then_else(False, compare_blocks_cols, 1))))), -3, compare_blocks_cols), if_then_else(True, ones_diff_cols, 2)), if_then_else(or_(False, False), if_then_else(True, -4, ones_diff_rows), if_then_else(True, 1, 4)))
or_(and_(le(0, 4), ge(zeros_diff_rows, zeros_diff_cols)), and_(ge(zeros_diff_rows, if_then_else(False, -1, -4)), le(if_then_else(le(if_then_else(True, ones_diff_cols, if_then_else(False, 4, zeros_diff_rows)), if_then_else(True, zeros_diff_cols, ones_diff_rows)), if_then_else(ge(0, zeros_diff_cols), if_then_else(False, if_then_else(True, compare_blocks_rows, 3), 1), if_then_else(False, -2, 1)), if_then_else(le(0, -2), if_then_else(True, 1, if_then_else(False, ones_diff_rows, zeros_diff_cols)), if_then_else(False, 4, 1))), 0)))
or_(le(if_then_else(or_(False, True), if_then_else(True, -4, 0), if_then_else(True, -2, if_then_else(and_(and_(and_(True, False), True), and_(False, or_(le(zeros_diff_cols, -3), ge(zeros_diff_rows, ones_diff_cols)))), if_then_else(and_(False, or_(False, and_(False, True))), if_then_else(True, -1, -3), if_then_else(False, 0, if_then_else(ge(0, ones_diff_cols), if_then_else(False, -5, compare_blocks_cols), if_then_else(False, zeros_diff_rows, compare_blocks_rows)))), if_then_else(ge(-1, -1), if_then_else(False, -4, if_then_else(False, 3, compare_blocks_rows)), if_then_else(False, zeros_diff_rows, zeros_diff_rows))))), if_then_else(le(-4, -1), if_then_else(True, -1, -4), if_then_else(True, -2, -3))), le(if_then_else(le(zeros_diff_cols, ones_diff_rows), if_then_else(True, -4, 0), if_then_else(False, -3, -3)), if_then_else(ge(0, ones_diff_rows), if_then_else(True, compare_blocks_rows, zeros_diff_cols), if_then_else(True, 0, -1))))
le(if_then_else(ge(-4, -4), if_then_else(True, if_then_else(and_(False, False), if_then_else(False, if_then_else(ge(if_then_else(True, ones_diff_rows, -2), if_then_else(False, zeros_diff_rows, ones_diff_cols)), if_then_else(le(ones_diff_rows, -4), if_then_else(True, 3, compare_blocks_cols), if_then_else(True, zeros_diff_cols, -3)), if_then_else(and_(True, True), if_then_else(False, -5, zeros_diff_cols), if_then_else(False, 4, 3))), 3), 1), if_then_else(True, if_then_else(True, 3, 3), -5)), if_then_else(True, if_then_else(True, compare_blocks_rows, if_then_else(False, ones_diff_cols, -2)), -5)), if_then_else(and_(False, and_(le(-4, 4), ge(0, -4))), if_then_else(True, 0, -3), if_then_else(False, 0, -2)))
ge(if_then_else(and_(False, False), if_then_else(False, compare_blocks_cols, zeros_diff_cols), if_then_else(False, if_then_else(and_(le(zeros_diff_cols, 1), or_(True, and_(True, True))), if_then_else(and_(or_(True, True), True), if_then_else(False, zeros_diff_cols, if_then_else(False, 1, -4)), if_then_else(False, compare_blocks_cols, 0)), if_then_else(or_(False, False), if_then_else(True, 3, ones_diff_cols), if_then_else(True, if_then_else(False, compare_blocks_cols, -3), compare_blocks_cols))), ones_diff_cols)), if_then_else(and_(False, False), if_then_else(True, ones_diff_cols, compare_blocks_cols), if_then_else(False, -1, 0)))
VAL TREES:
add(add(mul(compare_blocks_rows, zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), add(mul(add(add(compare_blocks_rows, ones_diff_rows), mul(zeros_diff_cols, zeros_diff_cols)), mul(mul(zeros_diff_rows, mul(zeros_diff_cols, zeros_diff_cols)), add(ones_diff_rows, zeros_diff_rows))), add(compare_blocks_cols, compare_blocks_cols)))
add(add(add(zeros_diff_cols, ones_diff_cols), mul(zeros_diff_rows, zeros_diff_rows)), mul(add(ones_diff_rows, mul(add(ones_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, zeros_diff_cols))), mul(compare_blocks_cols, zeros_diff_cols)))
add(add(add(compare_blocks_cols, zeros_diff_rows), add(add(ones_diff_rows, mul(zeros_diff_cols, mul(ones_diff_cols, compare_blocks_rows))), ones_diff_rows)), mul(add(compare_blocks_rows, zeros_diff_rows), add(zeros_diff_rows, ones_diff_rows)))
mul(mul(mul(add(compare_blocks_rows, zeros_diff_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(compare_blocks_cols, ones_diff_cols), add(compare_blocks_cols, zeros_diff_rows))), mul(add(mul(add(mul(compare_blocks_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_cols)), zeros_diff_cols), add(mul(compare_blocks_cols, ones_diff_cols), compare_blocks_cols)), mul(mul(compare_blocks_cols, ones_diff_cols), add(compare_blocks_cols, zeros_diff_rows))))
mul(mul(mul(mul(compare_blocks_cols, mul(compare_blocks_cols, ones_diff_cols)), mul(ones_diff_rows, zeros_diff_rows)), mul(ones_diff_cols, add(zeros_diff_cols, ones_diff_rows))), add(mul(add(ones_diff_rows, compare_blocks_cols), mul(compare_blocks_cols, mul(compare_blocks_rows, compare_blocks_rows))), mul(add(ones_diff_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_cols))))
mul(mul(mul(mul(ones_diff_rows, zeros_diff_rows), mul(ones_diff_rows, zeros_diff_rows)), add(compare_blocks_cols, ones_diff_rows)), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
COND TREES:
le(if_then_else(le(1, 4), if_then_else(and_(le(if_then_else(and_(and_(False, True), le(1, compare_blocks_rows)), if_then_else(or_(False, True), if_then_else(True, 2, -2), if_then_else(True, 2, 3)), if_then_else(ge(zeros_diff_rows, compare_blocks_cols), if_then_else(True, zeros_diff_rows, -5), if_then_else(False, 0, 1))), if_then_else(and_(or_(True, False), or_(False, True)), if_then_else(or_(True, True), if_then_else(True, -2, compare_blocks_rows), if_then_else(True, compare_blocks_cols, 0)), if_then_else(and_(True, False), if_then_else(True, zeros_diff_rows, 2), if_then_else(True, 1, zeros_diff_cols)))), le(if_then_else(and_(le(-4, -2), or_(False, False)), if_then_else(le(3, -3), if_then_else(False, ones_diff_rows, zeros_diff_cols), if_then_else(True, -2, ones_diff_rows)), if_then_else(or_(False, False), if_then_else(True, zeros_diff_rows, 0), if_then_else(True, 1, compare_blocks_rows))), if_then_else(and_(and_(False, False), or_(False, False)), if_then_else(or_(True, False), if_then_else(True, 4, ones_diff_cols), if_then_else(False, 1, -2)), if_then_else(or_(False, False), if_then_else(False, -3, -1), if_then_else(False, compare_blocks_cols, 1))))), -3, compare_blocks_cols), if_then_else(True, ones_diff_cols, 2)), if_then_else(or_(False, False), if_then_else(True, -4, ones_diff_rows), if_then_else(True, 1, 4)))
or_(and_(le(0, 4), ge(zeros_diff_rows, zeros_diff_cols)), and_(ge(zeros_diff_rows, if_then_else(False, -1, -4)), le(if_then_else(le(if_then_else(True, ones_diff_cols, if_then_else(False, 4, zeros_diff_rows)), if_then_else(True, zeros_diff_cols, ones_diff_rows)), if_then_else(ge(0, zeros_diff_cols), if_then_else(False, if_then_else(True, compare_blocks_rows, 3), 1), if_then_else(False, -2, 1)), if_then_else(le(0, -2), if_then_else(True, 1, if_then_else(False, ones_diff_rows, zeros_diff_cols)), if_then_else(False, 4, 1))), 0)))
or_(le(if_then_else(or_(False, True), if_then_else(True, -4, 0), if_then_else(True, -2, if_then_else(and_(and_(and_(True, False), True), and_(False, or_(le(zeros_diff_cols, -3), ge(zeros_diff_rows, ones_diff_cols)))), if_then_else(and_(False, or_(False, and_(False, True))), if_then_else(True, -1, -3), if_then_else(False, 0, if_then_else(ge(0, ones_diff_cols), if_then_else(False, -5, compare_blocks_cols), if_then_else(False, zeros_diff_rows, compare_blocks_rows)))), if_then_else(ge(-1, -1), if_then_else(False, -4, if_then_else(False, 3, compare_blocks_rows)), if_then_else(False, zeros_diff_rows, zeros_diff_rows))))), if_then_else(le(-4, -1), if_then_else(True, -1, -4), if_then_else(True, -2, -3))), le(if_then_else(le(zeros_diff_cols, ones_diff_rows), if_then_else(True, -4, 0), if_then_else(False, -3, -3)), if_then_else(ge(0, ones_diff_rows), if_then_else(True, compare_blocks_rows, zeros_diff_cols), if_then_else(True, 0, -1))))
le(if_then_else(ge(-4, -4), if_then_else(True, if_then_else(and_(False, False), if_then_else(False, if_then_else(ge(if_then_else(True, ones_diff_rows, -2), if_then_else(False, zeros_diff_rows, ones_diff_cols)), if_then_else(le(ones_diff_rows, -4), if_then_else(True, 3, compare_blocks_cols), if_then_else(True, zeros_diff_cols, -3)), if_then_else(and_(True, True), if_then_else(False, -5, zeros_diff_cols), if_then_else(False, 4, 3))), 3), 1), if_then_else(True, if_then_else(True, 3, 3), -5)), if_then_else(True, if_then_else(True, compare_blocks_rows, if_then_else(False, ones_diff_cols, -2)), -5)), if_then_else(and_(False, and_(le(-4, 4), ge(0, -4))), if_then_else(True, 0, -3), if_then_else(False, 0, -2)))
ge(if_then_else(and_(False, False), if_then_else(False, compare_blocks_cols, zeros_diff_cols), if_then_else(False, if_then_else(and_(le(zeros_diff_cols, 1), or_(True, and_(True, True))), if_then_else(and_(or_(True, True), True), if_then_else(False, zeros_diff_cols, if_then_else(False, 1, -4)), if_then_else(False, compare_blocks_cols, 0)), if_then_else(or_(False, False), if_then_else(True, 3, ones_diff_cols), if_then_else(True, if_then_else(False, compare_blocks_cols, -3), compare_blocks_cols))), ones_diff_cols)), if_then_else(and_(False, False), if_then_else(True, ones_diff_cols, compare_blocks_cols), if_then_else(False, -1, 0)))
VAL TREES:
add(add(mul(compare_blocks_rows, zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), add(mul(add(add(compare_blocks_rows, ones_diff_rows), mul(zeros_diff_cols, zeros_diff_cols)), mul(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, zeros_diff_rows))), add(compare_blocks_cols, compare_blocks_cols)))
add(add(add(zeros_diff_cols, ones_diff_cols), mul(zeros_diff_rows, zeros_diff_rows)), mul(add(ones_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, zeros_diff_cols)))
add(add(add(compare_blocks_cols, zeros_diff_rows), add(add(ones_diff_rows, mul(zeros_diff_cols, mul(ones_diff_cols, compare_blocks_rows))), ones_diff_rows)), mul(add(compare_blocks_rows, zeros_diff_rows), add(zeros_diff_rows, ones_diff_rows)))
mul(mul(mul(add(compare_blocks_rows, zeros_diff_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(compare_blocks_cols, ones_diff_cols), add(compare_blocks_cols, zeros_diff_rows))), mul(add(mul(add(mul(compare_blocks_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_cols)), zeros_diff_cols), add(compare_blocks_rows, compare_blocks_cols)), mul(mul(compare_blocks_cols, ones_diff_cols), add(compare_blocks_cols, zeros_diff_rows))))
mul(mul(mul(mul(compare_blocks_cols, ones_diff_cols), mul(ones_diff_rows, zeros_diff_rows)), mul(ones_diff_cols, add(zeros_diff_cols, ones_diff_rows))), add(mul(add(ones_diff_rows, compare_blocks_cols), mul(compare_blocks_cols, mul(compare_blocks_rows, compare_blocks_rows))), mul(add(ones_diff_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_cols))))
mul(mul(mul(add(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_rows, zeros_diff_rows)), add(compare_blocks_cols, ones_diff_rows)), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
COND TREES:
le(if_then_else(le(1, 4), if_then_else(False, -3, compare_blocks_cols), if_then_else(True, ones_diff_cols, 2)), if_then_else(or_(False, False), if_then_else(True, -4, ones_diff_rows), if_then_else(True, 1, 4)))
or_(and_(le(0, 4), ge(zeros_diff_rows, zeros_diff_cols)), and_(ge(zeros_diff_rows, if_then_else(False, -1, -4)), le(if_then_else(True, compare_blocks_rows, ones_diff_rows), 0)))
or_(le(if_then_else(or_(False, True), if_then_else(True, -4, 0), if_then_else(True, -2, 2)), if_then_else(le(-4, -1), if_then_else(True, -1, -4), if_then_else(True, -2, -3))), le(if_then_else(le(zeros_diff_cols, ones_diff_rows), if_then_else(True, -4, 0), if_then_else(False, -3, -3)), if_then_else(ge(0, ones_diff_rows), if_then_else(True, compare_blocks_rows, zeros_diff_cols), if_then_else(True, 0, -1))))
le(if_then_else(ge(-4, -4), if_then_else(True, if_then_else(and_(False, False), if_then_else(False, -3, 3), 1), if_then_else(True, if_then_else(True, 3, 3), -5)), if_then_else(True, if_then_else(True, compare_blocks_rows, if_then_else(False, ones_diff_cols, -2)), -5)), if_then_else(and_(False, and_(le(-4, 4), ge(0, -4))), if_then_else(True, 0, -3), if_then_else(False, 0, -2)))
ge(if_then_else(and_(False, False), if_then_else(False, compare_blocks_cols, zeros_diff_cols), if_then_else(False, zeros_diff_rows, ones_diff_cols)), if_then_else(and_(False, False), if_then_else(True, ones_diff_cols, compare_blocks_cols), if_then_else(False, -1, 0)))
VAL TREES:
add(add(mul(compare_blocks_rows, ones_diff_cols), add(ones_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, compare_blocks_cols)))
add(add(add(zeros_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_rows)), mul(add(ones_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, zeros_diff_cols)))
add(add(add(compare_blocks_cols, zeros_diff_rows), add(add(ones_diff_rows, zeros_diff_cols), ones_diff_rows)), mul(add(mul(compare_blocks_rows, compare_blocks_rows), zeros_diff_rows), add(zeros_diff_rows, ones_diff_rows)))
mul(mul(mul(add(compare_blocks_rows, zeros_diff_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(add(ones_diff_rows, zeros_diff_rows), add(ones_diff_rows, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, zeros_diff_cols), add(compare_blocks_rows, compare_blocks_cols)), mul(mul(compare_blocks_cols, ones_diff_cols), add(compare_blocks_cols, zeros_diff_rows))))
mul(mul(mul(mul(compare_blocks_cols, ones_diff_cols), mul(ones_diff_rows, zeros_diff_rows)), mul(mul(compare_blocks_rows, compare_blocks_rows), add(zeros_diff_cols, ones_diff_rows))), add(mul(add(ones_diff_rows, compare_blocks_cols), mul(compare_blocks_cols, zeros_diff_cols)), mul(add(ones_diff_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_cols))))
mul(mul(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, ones_diff_rows)), add(add(ones_diff_rows, zeros_diff_cols), add(ones_diff_cols, compare_blocks_cols)))
COND TREES:
or_(or_(and_(False, False), and_(True, False)), le(if_then_else(False, if_then_else(and_(ge(if_then_else(or_(True, True), if_then_else(False, 2, zeros_diff_cols), if_then_else(True, -5, 2)), if_then_else(ge(2, -2), if_then_else(False, ones_diff_rows, ones_diff_cols), if_then_else(True, zeros_diff_rows, 1))), and_(le(if_then_else(False, -3, 0), if_then_else(False, compare_blocks_cols, ones_diff_rows)), or_(ge(zeros_diff_cols, -2), ge(if_then_else(and_(True, False), if_then_else(False, -4, 1), if_then_else(False, -1, 0)), if_then_else(and_(False, False), if_then_else(False, compare_blocks_cols, ones_diff_cols), if_then_else(True, -5, 4)))))), if_then_else(ge(if_then_else(and_(True, False), if_then_else(False, 0, -3), if_then_else(False, 3, -4)), if_then_else(or_(True, True), if_then_else(False, 0, -3), if_then_else(True, -1, 4))), if_then_else(ge(if_then_else(True, 0, -3), if_then_else(True, compare_blocks_cols, -3)), if_then_else(ge(-1, 4), if_then_else(False, -1, 0), if_then_else(False, 2, 0)), if_then_else(or_(False, False), if_then_else(True, 4, zeros_diff_cols), if_then_else(True, zeros_diff_rows, ones_diff_rows))), if_then_else(and_(and_(True, True), ge(4, ones_diff_cols)), if_then_else(ge(ones_diff_cols, 4), if_then_else(True, -1, -1), 4), if_then_else(ge(zeros_diff_cols, ones_diff_rows), if_then_else(True, zeros_diff_cols, 3), if_then_else(True, ones_diff_cols, -3)))), if_then_else(and_(le(if_then_else(False, ones_diff_rows, 1), if_then_else(True, -5, -1)), ge(if_then_else(False, ones_diff_rows, -4), if_then_else(True, compare_blocks_cols, 4))), if_then_else(ge(if_then_else(False, compare_blocks_cols, zeros_diff_rows), if_then_else(False, 0, -2)), if_then_else(le(-2, compare_blocks_cols), if_then_else(False, zeros_diff_rows, compare_blocks_rows), if_then_else(True, 3, ones_diff_rows)), if_then_else(or_(False, True), if_then_else(False, zeros_diff_rows, -3), if_then_else(False, 2, zeros_diff_cols))), if_then_else(ge(if_then_else(False, -3, ones_diff_rows), if_then_else(False, -2, ones_diff_rows)), if_then_else(le(3, ones_diff_cols), if_then_else(True, 4, 3), if_then_else(True, 0, -5)), if_then_else(le(1, ones_diff_rows), if_then_else(False, -3, 2), if_then_else(False, ones_diff_rows, -4))))), 3), if_then_else(True, zeros_diff_cols, compare_blocks_cols)))
le(if_then_else(or_(True, or_(False, False)), if_then_else(False, -2, -3), if_then_else(True, compare_blocks_rows, if_then_else(True, zeros_diff_rows, 0))), if_then_else(True, if_then_else(True, zeros_diff_rows, -1), if_then_else(or_(False, True), 0, if_then_else(ge(if_then_else(False, 1, -1), if_then_else(and_(True, True), 3, 2)), if_then_else(le(2, zeros_diff_cols), if_then_else(and_(True, False), zeros_diff_rows, if_then_else(True, 0, -2)), if_then_else(True, compare_blocks_cols, -3)), if_then_else(and_(False, ge(zeros_diff_rows, ones_diff_rows)), if_then_else(True, if_then_else(or_(and_(or_(and_(False, False), le(-1, 3)), or_(and_(False, True), or_(True, True))), or_(le(if_then_else(True, 0, -1), if_then_else(True, ones_diff_cols, -3)), ge(if_then_else(True, -2, ones_diff_rows), if_then_else(True, compare_blocks_cols, compare_blocks_cols)))), if_then_else(or_(le(if_then_else(False, -1, compare_blocks_rows), if_then_else(True, compare_blocks_cols, compare_blocks_cols)), ge(if_then_else(True, -2, -2), if_then_else(False, 3, -4))), if_then_else(ge(if_then_else(False, ones_diff_cols, zeros_diff_cols), if_then_else(False, compare_blocks_cols, -3)), if_then_else(ge(1, ones_diff_cols), if_then_else(False, zeros_diff_rows, compare_blocks_rows), if_then_else(True, 1, -2)), if_then_else(and_(False, True), if_then_else(True, -5, compare_blocks_rows), if_then_else(False, zeros_diff_rows, 3))), if_then_else(or_(le(ones_diff_rows, -4), or_(False, True)), if_then_else(and_(True, True), if_then_else(True, -3, 2), if_then_else(False, -5, 0)), if_then_else(and_(True, True), if_then_else(True, compare_blocks_cols, -5), if_then_else(False, compare_blocks_rows, ones_diff_rows)))), if_then_else(and_(or_(le(compare_blocks_cols, -2), le(-5, -5)), or_(ge(-5, -4), le(ones_diff_rows, -1))), if_then_else(le(if_then_else(False, -2, zeros_diff_rows), if_then_else(True, -4, compare_blocks_cols)), if_then_else(and_(False, False), if_then_else(False, compare_blocks_rows, zeros_diff_cols), if_then_else(True, -1, ones_diff_rows)), if_then_else(and_(False, False), if_then_else(True, 3, zeros_diff_rows), if_then_else(True, -3, ones_diff_cols))), if_then_else(ge(if_then_else(True, compare_blocks_rows, compare_blocks_cols), if_then_else(False, 0, zeros_diff_cols)), if_then_else(le(ones_diff_cols, -4), if_then_else(True, 4, -2), if_then_else(False, compare_blocks_cols, 3)), if_then_else(ge(-1, 4), if_then_else(False, -4, 2), if_then_else(True, 2, -3))))), ones_diff_rows), if_then_else(True, -4, 2))))))
and_(or_(or_(False, True), ge(compare_blocks_rows, zeros_diff_cols)), and_(le(1, if_then_else(and_(False, True), if_then_else(True, -3, compare_blocks_cols), -2)), ge(if_then_else(False, if_then_else(True, -5, -2), 1), compare_blocks_rows)))
and_(ge(if_then_else(True, if_then_else(ge(if_then_else(True, 0, ones_diff_cols), if_then_else(False, zeros_diff_cols, -2)), if_then_else(ge(compare_blocks_cols, zeros_diff_cols), if_then_else(False, 1, ones_diff_rows), if_then_else(True, zeros_diff_rows, -3)), if_then_else(ge(-2, compare_blocks_rows), if_then_else(True, -2, if_then_else(and_(False, and_(le(-4, 4), ge(0, -4))), if_then_else(True, 0, -3), if_then_else(False, 0, -2))), if_then_else(True, if_then_else(le(if_then_else(False, compare_blocks_rows, compare_blocks_cols), if_then_else(False, -1, -4)), if_then_else(ge(zeros_diff_rows, -2), if_then_else(True, -4, ones_diff_cols), if_then_else(False, 0, zeros_diff_rows)), if_then_else(ge(2, 3), if_then_else(False, 2, -2), if_then_else(False, ones_diff_cols, 2))), 0))), ones_diff_rows), if_then_else(True, ones_diff_cols, compare_blocks_cols)), le(if_then_else(or_(ge(ones_diff_rows, -3), False), -3, 1), if_then_else(False, -4, if_then_else(True, -1, if_then_else(True, zeros_diff_cols, -1)))))
and_(ge(if_then_else(False, zeros_diff_rows, ones_diff_cols), if_then_else(False, if_then_else(False, zeros_diff_cols, 1), if_then_else(and_(or_(True, True), and_(False, False)), if_then_else(le(ones_diff_cols, if_then_else(True, compare_blocks_cols, ones_diff_cols)), if_then_else(le(-1, 3), if_then_else(False, ones_diff_cols, ones_diff_cols), if_then_else(False, compare_blocks_cols, zeros_diff_cols)), if_then_else(True, -3, if_then_else(False, zeros_diff_cols, 3))), if_then_else(and_(False, True), if_then_else(False, compare_blocks_cols, zeros_diff_rows), if_then_else(False, -2, compare_blocks_cols))))), or_(and_(and_(True, True), False), or_(or_(or_(and_(and_(True, True), ge(3, compare_blocks_cols)), and_(le(ones_diff_cols, -3), ge(zeros_diff_rows, 3))), and_(or_(ge(-2, -3), ge(-5, zeros_diff_rows)), le(if_then_else(True, zeros_diff_cols, zeros_diff_rows), if_then_else(True, 4, zeros_diff_cols)))), False)))
VAL TREES:
add(add(add(ones_diff_cols, zeros_diff_cols), add(ones_diff_cols, ones_diff_cols)), add(add(ones_diff_rows, add(mul(add(add(compare_blocks_rows, ones_diff_rows), mul(zeros_diff_cols, zeros_diff_cols)), mul(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, zeros_diff_rows))), add(compare_blocks_cols, compare_blocks_cols))), add(compare_blocks_cols, mul(add(compare_blocks_cols, compare_blocks_cols), mul(compare_blocks_cols, add(add(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(compare_blocks_cols, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_rows), mul(zeros_diff_rows, ones_diff_rows))), add(add(mul(zeros_diff_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_cols)), add(mul(compare_blocks_cols, zeros_diff_cols), mul(compare_blocks_cols, compare_blocks_cols)))))))))
add(mul(mul(zeros_diff_cols, mul(compare_blocks_cols, zeros_diff_cols)), add(mul(add(compare_blocks_cols, zeros_diff_cols), add(ones_diff_rows, zeros_diff_cols)), add(mul(ones_diff_cols, zeros_diff_rows), mul(mul(compare_blocks_cols, zeros_diff_rows), compare_blocks_cols)))), zeros_diff_cols)
mul(add(add(add(mul(zeros_diff_cols, zeros_diff_cols), mul(zeros_diff_rows, compare_blocks_cols)), add(add(compare_blocks_rows, zeros_diff_cols), add(compare_blocks_rows, ones_diff_cols))), add(add(add(compare_blocks_rows, ones_diff_cols), add(compare_blocks_cols, ones_diff_rows)), mul(mul(compare_blocks_cols, compare_blocks_rows), add(compare_blocks_cols, compare_blocks_rows)))), add(zeros_diff_rows, mul(zeros_diff_rows, zeros_diff_rows)))
add(add(add(ones_diff_rows, compare_blocks_cols), add(compare_blocks_rows, compare_blocks_rows)), add(add(zeros_diff_cols, ones_diff_cols), mul(mul(add(mul(add(mul(add(add(zeros_diff_cols, ones_diff_cols), add(ones_diff_cols, compare_blocks_cols)), add(add(ones_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(add(mul(ones_diff_cols, ones_diff_cols), add(compare_blocks_rows, ones_diff_rows)), mul(add(ones_diff_cols, ones_diff_rows), add(compare_blocks_rows, zeros_diff_rows)))), add(add(mul(add(zeros_diff_cols, ones_diff_rows), add(zeros_diff_cols, ones_diff_rows)), mul(add(compare_blocks_rows, compare_blocks_rows), add(compare_blocks_rows, compare_blocks_cols))), mul(add(mul(zeros_diff_rows, zeros_diff_rows), add(ones_diff_rows, compare_blocks_rows)), add(add(ones_diff_rows, ones_diff_cols), add(zeros_diff_rows, compare_blocks_rows))))), zeros_diff_cols), add(zeros_diff_rows, zeros_diff_rows)), zeros_diff_cols)))
add(mul(compare_blocks_rows, add(ones_diff_cols, ones_diff_cols)), add(mul(mul(compare_blocks_rows, compare_blocks_rows), add(zeros_diff_cols, ones_diff_rows)), add(add(mul(add(mul(add(compare_blocks_cols, compare_blocks_cols), add(zeros_diff_rows, ones_diff_cols)), mul(add(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(mul(add(zeros_diff_cols, ones_diff_cols), add(zeros_diff_rows, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_cols), add(ones_diff_cols, compare_blocks_rows)))), ones_diff_rows), ones_diff_rows)))
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_rows)), add(add(add(add(ones_diff_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_cols)), add(ones_diff_rows, ones_diff_cols)), mul(mul(add(compare_blocks_rows, compare_blocks_rows), compare_blocks_cols), add(ones_diff_cols, add(zeros_diff_cols, compare_blocks_rows)))))
COND TREES:
or_(or_(and_(False, False), and_(True, False)), le(if_then_else(False, if_then_else(and_(ge(if_then_else(or_(True, True), if_then_else(False, 2, zeros_diff_cols), if_then_else(True, -5, 2)), if_then_else(ge(2, -2), if_then_else(False, ones_diff_rows, ones_diff_cols), if_then_else(True, zeros_diff_rows, 1))), and_(le(if_then_else(False, -3, 0), if_then_else(False, compare_blocks_cols, ones_diff_rows)), or_(ge(zeros_diff_cols, -2), le(-3, 3)))), if_then_else(ge(if_then_else(and_(True, False), if_then_else(False, 0, 3), if_then_else(False, 3, -4)), if_then_else(or_(True, True), if_then_else(False, 0, -3), if_then_else(True, -1, 4))), if_then_else(ge(if_then_else(True, 0, -3), if_then_else(True, compare_blocks_cols, -3)), if_then_else(ge(-1, 4), if_then_else(False, -1, 0), if_then_else(False, 2, 0)), if_then_else(or_(False, False), if_then_else(True, 4, zeros_diff_cols), if_then_else(True, zeros_diff_rows, ones_diff_rows))), if_then_else(and_(and_(True, True), ge(4, ones_diff_cols)), if_then_else(ge(ones_diff_cols, 4), if_then_else(True, -1, -1), if_then_else(True, 2, 2)), if_then_else(ge(zeros_diff_cols, ones_diff_rows), if_then_else(True, zeros_diff_cols, 3), if_then_else(True, ones_diff_cols, -3)))), if_then_else(and_(le(if_then_else(False, ones_diff_rows, 1), if_then_else(True, -5, -1)), ge(if_then_else(False, ones_diff_rows, -4), if_then_else(True, compare_blocks_cols, 4))), if_then_else(ge(if_then_else(False, compare_blocks_cols, zeros_diff_rows), if_then_else(False, 0, -2)), if_then_else(le(-2, compare_blocks_cols), if_then_else(False, zeros_diff_rows, compare_blocks_rows), if_then_else(True, 3, ones_diff_rows)), if_then_else(or_(False, True), if_then_else(False, zeros_diff_rows, -3), if_then_else(False, 2, zeros_diff_cols))), if_then_else(ge(if_then_else(False, -3, ones_diff_rows), if_then_else(False, -2, ones_diff_rows)), if_then_else(le(3, ones_diff_cols), if_then_else(True, 4, 3), if_then_else(True, 0, -5)), if_then_else(le(1, ones_diff_rows), if_then_else(False, -3, 2), if_then_else(False, ones_diff_rows, -4))))), 3), if_then_else(True, zeros_diff_cols, compare_blocks_cols)))
le(-1, if_then_else(le(-3, if_then_else(True, 3, -5)), if_then_else(True, zeros_diff_rows, -1), if_then_else(or_(False, True), 0, if_then_else(ge(if_then_else(False, 1, -1), if_then_else(and_(True, True), 3, 2)), if_then_else(le(2, zeros_diff_cols), if_then_else(and_(True, False), zeros_diff_rows, if_then_else(True, 0, -2)), if_then_else(True, compare_blocks_cols, -3)), if_then_else(and_(False, ge(zeros_diff_rows, ones_diff_rows)), if_then_else(True, -3, ones_diff_rows), if_then_else(True, -4, 2))))))
le(if_then_else(ge(if_then_else(False, if_then_else(True, 0, -3), 2), zeros_diff_cols), if_then_else(False, if_then_else(True, ones_diff_cols, 0), -5), if_then_else(and_(False, or_(True, ge(if_then_else(and_(ge(compare_blocks_cols, 1), False), if_then_else(False, zeros_diff_cols, if_then_else(True, 3, 4)), if_then_else(True, zeros_diff_cols, -4)), if_then_else(or_(True, ge(0, -5)), if_then_else(and_(False, True), 4, 1), if_then_else(False, if_then_else(False, ones_diff_cols, -5), compare_blocks_cols))))), 1, if_then_else(ge(2, zeros_diff_cols), ones_diff_cols, if_then_else(True, -3, compare_blocks_cols)))), if_then_else(or_(ge(compare_blocks_cols, -5), le(-3, zeros_diff_cols)), if_then_else(False, 0, 2), if_then_else(False, if_then_else(False, 2, if_then_else(False, -4, 3)), if_then_else(le(-3, -2), if_then_else(False, 1, 4), 4))))
and_(ge(if_then_else(True, if_then_else(ge(if_then_else(True, 0, ones_diff_cols), if_then_else(False, zeros_diff_cols, -2)), if_then_else(ge(compare_blocks_cols, zeros_diff_cols), if_then_else(False, 1, ones_diff_rows), if_then_else(True, zeros_diff_rows, -3)), if_then_else(ge(-2, compare_blocks_rows), if_then_else(True, -2, zeros_diff_cols), if_then_else(True, -4, 0))), ones_diff_rows), if_then_else(True, ones_diff_cols, compare_blocks_cols)), le(if_then_else(or_(True, False), -3, 1), if_then_else(False, -4, if_then_else(True, -1, if_then_else(True, zeros_diff_cols, -1)))))
and_(ge(if_then_else(False, zeros_diff_rows, ones_diff_cols), if_then_else(False, if_then_else(False, zeros_diff_cols, 1), if_then_else(and_(or_(True, True), and_(False, False)), if_then_else(le(ones_diff_cols, if_then_else(True, compare_blocks_cols, ones_diff_cols)), if_then_else(le(-1, 3), if_then_else(False, ones_diff_cols, zeros_diff_rows), -2), if_then_else(True, -3, if_then_else(False, zeros_diff_cols, 3))), if_then_else(and_(False, True), if_then_else(False, compare_blocks_cols, zeros_diff_rows), if_then_else(False, -2, compare_blocks_cols))))), or_(and_(and_(True, True), False), or_(False, False)))
VAL TREES:
add(add(add(ones_diff_cols, zeros_diff_cols), add(ones_diff_cols, ones_diff_cols)), add(add(ones_diff_rows, add(mul(add(add(compare_blocks_rows, ones_diff_rows), mul(zeros_diff_cols, zeros_diff_cols)), mul(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, zeros_diff_rows))), add(compare_blocks_cols, compare_blocks_cols))), add(compare_blocks_cols, mul(add(compare_blocks_cols, compare_blocks_cols), compare_blocks_cols))))
add(mul(mul(zeros_diff_cols, mul(compare_blocks_cols, add(zeros_diff_cols, ones_diff_cols))), mul(zeros_diff_rows, compare_blocks_cols)), zeros_diff_cols)
mul(compare_blocks_rows, add(zeros_diff_rows, mul(zeros_diff_rows, zeros_diff_rows)))
add(add(add(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_rows, compare_blocks_rows)), add(add(zeros_diff_cols, ones_diff_cols), mul(mul(add(compare_blocks_rows, zeros_diff_cols), add(zeros_diff_rows, zeros_diff_rows)), zeros_diff_cols)))
add(mul(compare_blocks_rows, add(ones_diff_cols, ones_diff_cols)), add(mul(mul(ones_diff_rows, compare_blocks_rows), add(zeros_diff_cols, ones_diff_rows)), add(add(add(compare_blocks_cols, compare_blocks_cols), ones_diff_rows), ones_diff_rows)))
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(compare_blocks_cols, mul(ones_diff_rows, zeros_diff_rows))), ones_diff_cols)
COND TREES:
le(if_then_else(le(1, 4), if_then_else(False, -3, compare_blocks_cols), if_then_else(True, ones_diff_cols, 2)), if_then_else(or_(False, False), if_then_else(True, -4, ones_diff_rows), if_then_else(True, 1, 4)))
or_(and_(le(0, 4), ge(zeros_diff_rows, zeros_diff_cols)), and_(ge(zeros_diff_rows, if_then_else(False, -1, -4)), le(if_then_else(True, compare_blocks_rows, ones_diff_rows), 0)))
or_(le(if_then_else(or_(False, True), if_then_else(True, -4, 0), if_then_else(True, -2, 2)), if_then_else(le(-4, -1), if_then_else(True, -1, -4), if_then_else(True, -2, -3))), le(if_then_else(le(zeros_diff_cols, ones_diff_rows), if_then_else(True, -4, 0), if_then_else(False, -3, -3)), if_then_else(ge(0, ones_diff_rows), if_then_else(True, compare_blocks_rows, zeros_diff_cols), if_then_else(True, 0, -1))))
le(if_then_else(ge(-4, -4), if_then_else(True, if_then_else(and_(False, False), if_then_else(False, -3, 3), 1), if_then_else(True, if_then_else(True, 3, 3), -5)), if_then_else(True, if_then_else(True, compare_blocks_rows, if_then_else(False, ones_diff_cols, -2)), -5)), if_then_else(and_(False, and_(le(-4, 4), ge(0, -4))), if_then_else(True, 0, -3), if_then_else(False, 0, -2)))
ge(if_then_else(and_(False, False), if_then_else(False, compare_blocks_cols, zeros_diff_cols), if_then_else(False, zeros_diff_rows, ones_diff_cols)), if_then_else(and_(False, False), if_then_else(True, ones_diff_cols, compare_blocks_cols), if_then_else(False, -1, 0)))
VAL TREES:
add(add(mul(compare_blocks_rows, ones_diff_cols), add(ones_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, compare_blocks_cols)))
add(add(add(zeros_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_rows)), mul(add(ones_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, zeros_diff_cols)))
add(add(add(compare_blocks_cols, zeros_diff_rows), add(add(ones_diff_rows, zeros_diff_cols), ones_diff_rows)), mul(add(mul(compare_blocks_rows, compare_blocks_rows), zeros_diff_rows), add(zeros_diff_rows, ones_diff_rows)))
mul(mul(mul(add(compare_blocks_rows, zeros_diff_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(add(ones_diff_rows, zeros_diff_rows), add(ones_diff_rows, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, zeros_diff_cols), add(compare_blocks_rows, compare_blocks_cols)), mul(mul(compare_blocks_cols, ones_diff_cols), add(compare_blocks_cols, zeros_diff_rows))))
mul(mul(mul(mul(compare_blocks_cols, ones_diff_cols), mul(ones_diff_rows, zeros_diff_rows)), mul(mul(compare_blocks_rows, compare_blocks_rows), add(zeros_diff_cols, ones_diff_rows))), add(mul(add(ones_diff_rows, compare_blocks_cols), mul(compare_blocks_cols, zeros_diff_cols)), mul(add(ones_diff_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_cols))))
mul(mul(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, ones_diff_rows)), add(add(ones_diff_rows, zeros_diff_cols), add(ones_diff_cols, compare_blocks_cols)))
COND TREES:
le(if_then_else(or_(le(if_then_else(le(if_then_else(False, -4, -1), if_then_else(False, -3, zeros_diff_rows)), if_then_else(or_(True, False), if_then_else(True, -3, zeros_diff_cols), if_then_else(False, -1, compare_blocks_cols)), if_then_else(and_(True, False), if_then_else(True, zeros_diff_cols, zeros_diff_cols), if_then_else(False, -5, ones_diff_cols))), if_then_else(le(if_then_else(False, 2, 2), if_then_else(False, zeros_diff_rows, zeros_diff_rows)), if_then_else(le(ones_diff_cols, -4), if_then_else(True, zeros_diff_cols, ones_diff_cols), if_then_else(True, 1, -1)), if_then_else(ge(4, -1), if_then_else(True, compare_blocks_cols, 3), if_then_else(False, 4, -5)))), and_(ge(if_then_else(or_(True, False), if_then_else(True, compare_blocks_cols, 1), if_then_else(False, ones_diff_rows, compare_blocks_cols)), if_then_else(or_(False, False), if_then_else(False, -5, -3), if_then_else(False, zeros_diff_cols, 4))), le(if_then_else(or_(False, False), if_then_else(False, 1, -1), if_then_else(True, 1, -4)), if_then_else(le(ones_diff_rows, zeros_diff_cols), if_then_else(True, ones_diff_cols, 0), if_then_else(False, ones_diff_rows, ones_diff_cols))))), if_then_else(False, -3, compare_blocks_cols), if_then_else(True, ones_diff_cols, 2)), if_then_else(or_(False, False), if_then_else(True, -4, ones_diff_rows), if_then_else(True, 1, 4)))
or_(and_(le(0, 4), ge(if_then_else(ge(if_then_else(True, -3, ones_diff_rows), if_then_else(True, zeros_diff_cols, -2)), if_then_else(ge(-1, ones_diff_cols), if_then_else(False, ones_diff_cols, -5), if_then_else(False, compare_blocks_rows, zeros_diff_cols)), if_then_else(and_(False, False), if_then_else(False, ones_diff_cols, -2), if_then_else(True, zeros_diff_cols, zeros_diff_cols))), zeros_diff_cols)), and_(ge(zeros_diff_rows, if_then_else(False, -1, -4)), le(if_then_else(True, compare_blocks_rows, ones_diff_rows), 0)))
or_(and_(and_(and_(True, False), le(-1, 2)), and_(or_(True, True), and_(False, True))), le(if_then_else(le(zeros_diff_cols, ones_diff_rows), if_then_else(True, -4, 0), if_then_else(False, -3, -3)), if_then_else(ge(0, ones_diff_rows), if_then_else(True, compare_blocks_rows, zeros_diff_cols), if_then_else(True, 0, -1))))
le(if_then_else(ge(-4, -4), if_then_else(True, if_then_else(and_(False, False), if_then_else(False, -3, 3), 1), if_then_else(True, if_then_else(True, 3, 3), -5)), if_then_else(True, if_then_else(True, compare_blocks_rows, if_then_else(False, ones_diff_cols, -2)), -5)), if_then_else(and_(False, and_(le(-4, 4), ge(0, -4))), if_then_else(True, 0, if_then_else(or_(ge(1, compare_blocks_cols), and_(False, True)), if_then_else(or_(False, True), if_then_else(False, ones_diff_rows, 4), if_then_else(True, -5, zeros_diff_cols)), if_then_else(le(if_then_else(False, 1, compare_blocks_rows), -4), if_then_else(True, if_then_else(True, -3, if_then_else(True, ones_diff_cols, compare_blocks_rows)), compare_blocks_cols), if_then_else(True, ones_diff_cols, zeros_diff_rows)))), if_then_else(False, 0, -2)))
ge(if_then_else(and_(False, False), if_then_else(False, if_then_else(or_(or_(False, True), or_(True, and_(True, True))), if_then_else(ge(compare_blocks_rows, 1), if_then_else(True, -2, if_then_else(True, -2, 2)), if_then_else(ge(ones_diff_rows, compare_blocks_rows), ones_diff_rows, -3)), if_then_else(le(-3, if_then_else(False, 3, ones_diff_cols)), if_then_else(ge(-4, 3), if_then_else(False, compare_blocks_cols, if_then_else(True, -1, -1)), if_then_else(and_(False, True), -3, -2)), if_then_else(ge(1, -1), -3, ones_diff_rows))), zeros_diff_cols), if_then_else(False, zeros_diff_rows, ones_diff_cols)), if_then_else(and_(False, False), if_then_else(True, ones_diff_cols, compare_blocks_cols), if_then_else(False, -1, 0)))
VAL TREES:
add(add(mul(compare_blocks_rows, ones_diff_cols), add(ones_diff_rows, add(mul(compare_blocks_cols, zeros_diff_cols), add(compare_blocks_rows, zeros_diff_cols)))), add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, compare_blocks_cols)))
add(add(add(zeros_diff_cols, ones_diff_cols), mul(ones_diff_cols, mul(compare_blocks_cols, add(ones_diff_rows, zeros_diff_rows)))), mul(add(ones_diff_rows, mul(zeros_diff_rows, zeros_diff_cols)), mul(compare_blocks_cols, zeros_diff_cols)))
add(add(add(compare_blocks_cols, zeros_diff_rows), add(add(ones_diff_rows, compare_blocks_rows), ones_diff_rows)), mul(compare_blocks_rows, add(zeros_diff_rows, ones_diff_rows)))
mul(mul(mul(add(compare_blocks_rows, zeros_diff_cols), add(zeros_diff_rows, zeros_diff_rows)), compare_blocks_cols), mul(add(add(zeros_diff_rows, compare_blocks_rows), zeros_diff_rows), mul(mul(compare_blocks_cols, ones_diff_cols), add(compare_blocks_cols, zeros_diff_rows))))
mul(mul(mul(mul(compare_blocks_cols, ones_diff_cols), mul(ones_diff_rows, zeros_diff_rows)), mul(mul(compare_blocks_rows, compare_blocks_rows), add(zeros_diff_cols, ones_diff_rows))), add(mul(add(ones_diff_rows, compare_blocks_cols), mul(compare_blocks_cols, zeros_diff_cols)), mul(add(ones_diff_rows, ones_diff_cols), compare_blocks_cols)))
mul(mul(add(zeros_diff_rows, zeros_diff_rows), ones_diff_cols), add(add(ones_diff_rows, zeros_diff_cols), add(ones_diff_cols, compare_blocks_cols)))
COND TREES:
le(if_then_else(le(1, 4), if_then_else(False, if_then_else(True, ones_diff_cols, 2), compare_blocks_cols), if_then_else(True, ones_diff_cols, 2)), if_then_else(or_(False, False), if_then_else(True, -4, if_then_else(True, 2, 2)), if_then_else(le(if_then_else(ge(if_then_else(True, zeros_diff_cols, 1), if_then_else(False, 3, ones_diff_rows)), if_then_else(True, compare_blocks_cols, -5), if_then_else(ge(4, 3), 4, ones_diff_cols)), if_then_else(le(2, compare_blocks_rows), if_then_else(False, 3, if_then_else(True, -4, 4)), if_then_else(False, compare_blocks_rows, -5))), 1, 4)))
or_(and_(le(0, 4), ge(zeros_diff_rows, zeros_diff_cols)), and_(le(if_then_else(le(4, zeros_diff_rows), if_then_else(True, 1, if_then_else(False, ones_diff_cols, 1)), if_then_else(False, -2, -2)), if_then_else(le(0, zeros_diff_cols), if_then_else(ge(ones_diff_rows, -4), -1, zeros_diff_cols), if_then_else(False, zeros_diff_cols, 3))), le(if_then_else(le(-3, if_then_else(True, 3, -5)), compare_blocks_rows, 0), 0)))
or_(le(if_then_else(or_(False, True), if_then_else(True, -4, 0), if_then_else(True, -2, 2)), compare_blocks_rows), le(if_then_else(le(zeros_diff_cols, ones_diff_rows), if_then_else(True, -4, 0), if_then_else(False, -3, -3)), if_then_else(ge(0, ones_diff_rows), compare_blocks_cols, if_then_else(True, 0, if_then_else(ge(if_then_else(or_(False, False), if_then_else(True, -5, 2), if_then_else(False, -1, ones_diff_cols)), if_then_else(and_(True, False), if_then_else(True, zeros_diff_cols, -4), if_then_else(True, -2, -1))), if_then_else(ge(if_then_else(True, 0, 1), if_then_else(False, 2, zeros_diff_rows)), if_then_else(ge(-4, -4), if_then_else(True, -2, compare_blocks_cols), if_then_else(True, zeros_diff_cols, zeros_diff_cols)), if_then_else(or_(True, True), if_then_else(False, 3, -1), if_then_else(True, -2, ones_diff_cols))), if_then_else(and_(ge(-1, -1), and_(False, False)), if_then_else(or_(False, False), if_then_else(False, -4, ones_diff_rows), if_then_else(False, 0, zeros_diff_cols)), if_then_else(and_(True, True), if_then_else(False, compare_blocks_cols, ones_diff_cols), if_then_else(False, 3, 1))))))))
le(if_then_else(ge(-4, -4), if_then_else(True, if_then_else(and_(True, False), if_then_else(False, -3, 3), if_then_else(ge(if_then_else(le(-4, zeros_diff_cols), if_then_else(True, -5, 1), if_then_else(False, ones_diff_cols, ones_diff_cols)), if_then_else(or_(True, True), if_then_else(False, compare_blocks_cols, compare_blocks_rows), if_then_else(False, zeros_diff_cols, -3))), if_then_else(and_(and_(False, False), and_(False, True)), if_then_else(or_(False, False), if_then_else(True, ones_diff_cols, -5), if_then_else(False, -5, compare_blocks_rows)), if_then_else(or_(True, True), if_then_else(True, ones_diff_cols, -1), if_then_else(True, ones_diff_cols, -4))), if_then_else(and_(and_(False, True), le(-5, zeros_diff_rows)), if_then_else(ge(-5, -5), if_then_else(False, 1, ones_diff_cols), if_then_else(True, compare_blocks_cols, zeros_diff_rows)), if_then_else(le(compare_blocks_cols, -5), if_then_else(False, 2, -5), if_then_else(True, 2, 3))))), if_then_else(True, if_then_else(True, 3, 3), -5)), if_then_else(True, if_then_else(True, compare_blocks_rows, if_then_else(False, ones_diff_cols, -2)), -5)), zeros_diff_cols)
ge(if_then_else(and_(False, False), -2, if_then_else(False, zeros_diff_rows, ones_diff_cols)), if_then_else(and_(False, False), if_then_else(True, if_then_else(le(if_then_else(or_(False, False), if_then_else(True, ones_diff_cols, ones_diff_rows), if_then_else(True, -2, -5)), if_then_else(ge(4, 2), if_then_else(True, ones_diff_cols, 3), if_then_else(True, 4, compare_blocks_cols))), if_then_else(or_(le(0, 3), ge(-2, zeros_diff_cols)), if_then_else(or_(True, False), if_then_else(False, compare_blocks_cols, 0), if_then_else(False, -4, -3)), if_then_else(ge(0, 3), if_then_else(True, 1, -1), if_then_else(False, 3, -2))), if_then_else(le(if_then_else(False, 3, -1), if_then_else(False, ones_diff_cols, -1)), if_then_else(and_(False, True), if_then_else(True, compare_blocks_rows, ones_diff_rows), if_then_else(False, zeros_diff_cols, -4)), if_then_else(and_(False, False), if_then_else(False, -2, 3), if_then_else(True, -3, ones_diff_cols)))), compare_blocks_cols), if_then_else(False, -1, 0)))
VAL TREES:
add(add(compare_blocks_rows, add(ones_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, compare_blocks_cols)))
add(mul(zeros_diff_rows, zeros_diff_rows), mul(add(ones_diff_rows, zeros_diff_rows), zeros_diff_rows))
add(add(add(compare_blocks_cols, mul(compare_blocks_rows, zeros_diff_cols)), add(add(ones_diff_rows, ones_diff_cols), ones_diff_rows)), mul(add(mul(zeros_diff_cols, compare_blocks_rows), zeros_diff_rows), add(zeros_diff_rows, ones_diff_rows)))
mul(mul(mul(add(mul(zeros_diff_cols, zeros_diff_cols), add(compare_blocks_rows, compare_blocks_cols)), add(zeros_diff_rows, zeros_diff_rows)), mul(add(ones_diff_rows, zeros_diff_rows), add(ones_diff_rows, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, zeros_diff_cols), add(compare_blocks_rows, compare_blocks_cols)), mul(mul(compare_blocks_cols, ones_diff_cols), add(compare_blocks_cols, zeros_diff_rows))))
mul(mul(mul(mul(compare_blocks_cols, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), mul(mul(compare_blocks_rows, compare_blocks_rows), add(add(compare_blocks_cols, compare_blocks_cols), ones_diff_rows))), add(mul(add(ones_diff_rows, compare_blocks_cols), mul(add(add(ones_diff_rows, ones_diff_cols), ones_diff_cols), zeros_diff_cols)), mul(add(ones_diff_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_cols))))
mul(mul(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols)), add(add(zeros_diff_rows, zeros_diff_cols), add(add(compare_blocks_cols, ones_diff_rows), compare_blocks_cols)))
COND TREES:
le(if_then_else(le(if_then_else(True, ones_diff_cols, 2), 4), if_then_else(False, if_then_else(True, ones_diff_cols, 2), compare_blocks_cols), if_then_else(True, ones_diff_cols, 2)), if_then_else(or_(False, False), if_then_else(True, -4, if_then_else(True, 2, 2)), if_then_else(True, 1, 4)))
or_(and_(le(0, 4), ge(zeros_diff_rows, zeros_diff_cols)), and_(ge(0, if_then_else(False, -1, 4)), le(if_then_else(le(-3, if_then_else(True, 3, -5)), compare_blocks_rows, 0), 0)))
or_(le(if_then_else(or_(False, True), if_then_else(True, -4, 0), if_then_else(True, -2, zeros_diff_cols)), compare_blocks_rows), le(if_then_else(le(zeros_diff_cols, ones_diff_rows), if_then_else(True, -4, 0), if_then_else(False, -3, -3)), if_then_else(ge(0, ones_diff_rows), compare_blocks_cols, if_then_else(True, 0, -1))))
le(if_then_else(ge(-4, -4), if_then_else(True, if_then_else(and_(True, False), if_then_else(False, -3, 3), 1), if_then_else(True, if_then_else(True, 3, 3), -5)), if_then_else(ge(-4, if_then_else(False, ones_diff_cols, -2)), if_then_else(True, compare_blocks_rows, if_then_else(False, ones_diff_cols, -2)), -5)), zeros_diff_cols)
ge(if_then_else(and_(False, False), -2, if_then_else(False, zeros_diff_rows, ones_diff_cols)), if_then_else(False, if_then_else(True, ones_diff_cols, compare_blocks_cols), if_then_else(False, -1, 0)))
VAL TREES:
add(add(add(mul(compare_blocks_cols, zeros_diff_cols), add(ones_diff_rows, zeros_diff_cols)), add(ones_diff_rows, mul(compare_blocks_cols, compare_blocks_cols))), add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, compare_blocks_cols)))
add(mul(zeros_diff_rows, zeros_diff_rows), mul(mul(zeros_diff_rows, compare_blocks_cols), mul(compare_blocks_cols, zeros_diff_cols)))
add(add(add(compare_blocks_cols, zeros_diff_rows), add(add(ones_diff_rows, ones_diff_cols), ones_diff_rows)), mul(add(mul(compare_blocks_rows, compare_blocks_rows), zeros_diff_rows), add(zeros_diff_rows, compare_blocks_rows)))
mul(mul(mul(add(add(zeros_diff_rows, compare_blocks_rows), zeros_diff_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(add(ones_diff_rows, zeros_diff_rows), add(ones_diff_rows, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, zeros_diff_cols), compare_blocks_rows), mul(mul(compare_blocks_cols, ones_diff_cols), add(compare_blocks_cols, zeros_diff_rows))))
mul(mul(mul(mul(add(add(add(compare_blocks_cols, compare_blocks_cols), ones_diff_rows), ones_diff_cols), ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), mul(mul(compare_blocks_rows, compare_blocks_rows), add(zeros_diff_cols, ones_diff_rows))), add(mul(add(ones_diff_rows, compare_blocks_cols), mul(compare_blocks_cols, zeros_diff_cols)), mul(add(ones_diff_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_cols))))
mul(mul(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, ones_diff_rows)), add(add(zeros_diff_rows, zeros_diff_cols), add(ones_diff_cols, compare_blocks_cols)))
COND TREES:
or_(or_(and_(False, False), and_(True, False)), le(if_then_else(False, if_then_else(and_(ge(if_then_else(or_(True, True), if_then_else(False, 2, zeros_diff_cols), if_then_else(True, -5, 2)), if_then_else(ge(2, -2), if_then_else(False, ones_diff_rows, ones_diff_cols), if_then_else(True, zeros_diff_rows, 1))), and_(le(if_then_else(False, -3, 0), if_then_else(False, compare_blocks_cols, ones_diff_rows)), or_(ge(zeros_diff_cols, -2), le(-3, 3)))), if_then_else(ge(if_then_else(and_(True, False), if_then_else(False, 0, -3), if_then_else(False, 3, -4)), if_then_else(or_(True, True), if_then_else(False, 0, -3), if_then_else(True, -1, 4))), if_then_else(ge(if_then_else(True, 0, -3), if_then_else(True, compare_blocks_cols, -3)), if_then_else(ge(-1, 4), if_then_else(False, -1, 0), if_then_else(False, 2, 0)), if_then_else(or_(False, False), if_then_else(True, 4, zeros_diff_cols), if_then_else(True, zeros_diff_rows, ones_diff_rows))), if_then_else(and_(and_(True, True), ge(4, ones_diff_cols)), if_then_else(ge(ones_diff_cols, 4), if_then_else(True, -1, -1), if_then_else(True, 2, 2)), if_then_else(ge(zeros_diff_cols, ones_diff_rows), if_then_else(True, zeros_diff_cols, 3), if_then_else(True, ones_diff_cols, -3)))), if_then_else(and_(le(if_then_else(False, ones_diff_rows, 1), if_then_else(True, -5, -1)), ge(if_then_else(False, ones_diff_rows, -4), if_then_else(True, compare_blocks_cols, 4))), if_then_else(ge(if_then_else(False, compare_blocks_cols, zeros_diff_rows), if_then_else(False, 0, -2)), if_then_else(le(-2, compare_blocks_cols), if_then_else(False, zeros_diff_rows, compare_blocks_rows), if_then_else(True, 3, ones_diff_rows)), if_then_else(or_(False, True), if_then_else(False, zeros_diff_rows, -3), if_then_else(False, 2, zeros_diff_cols))), if_then_else(ge(if_then_else(False, -3, ones_diff_rows), if_then_else(False, -2, ones_diff_rows)), if_then_else(le(3, ones_diff_cols), if_then_else(True, 4, 3), if_then_else(True, 0, -5)), if_then_else(le(1, ones_diff_rows), if_then_else(False, -3, 2), if_then_else(False, ones_diff_rows, -4))))), 3), if_then_else(True, zeros_diff_cols, compare_blocks_cols)))
le(if_then_else(or_(True, or_(False, False)), if_then_else(False, -2, -3), if_then_else(True, compare_blocks_rows, if_then_else(True, zeros_diff_rows, 0))), if_then_else(le(-3, if_then_else(True, 3, -5)), if_then_else(True, zeros_diff_rows, -1), if_then_else(or_(False, True), 0, if_then_else(ge(if_then_else(False, 1, -1), if_then_else(and_(True, True), 3, 2)), if_then_else(le(2, zeros_diff_cols), if_then_else(and_(True, False), zeros_diff_rows, if_then_else(True, 0, -2)), if_then_else(True, compare_blocks_cols, -3)), if_then_else(and_(False, ge(zeros_diff_rows, ones_diff_rows)), if_then_else(True, -3, ones_diff_rows), if_then_else(True, -4, 2))))))
le(if_then_else(ge(if_then_else(False, if_then_else(True, 0, -3), 2), zeros_diff_cols), if_then_else(False, if_then_else(True, ones_diff_cols, 0), -5), if_then_else(and_(False, or_(True, ge(if_then_else(and_(ge(compare_blocks_cols, 1), False), if_then_else(False, zeros_diff_cols, if_then_else(True, 3, 4)), if_then_else(True, zeros_diff_cols, -4)), if_then_else(or_(True, ge(0, -5)), if_then_else(and_(False, True), 4, 1), if_then_else(False, if_then_else(False, ones_diff_cols, -5), compare_blocks_cols))))), 1, if_then_else(ge(2, zeros_diff_cols), ones_diff_cols, if_then_else(True, -3, compare_blocks_cols)))), if_then_else(or_(ge(compare_blocks_cols, -5), le(-3, zeros_diff_cols)), if_then_else(True, 0, 2), if_then_else(False, if_then_else(False, 2, if_then_else(False, -4, 3)), if_then_else(le(-3, -2), if_then_else(False, 1, 4), 4))))
and_(ge(if_then_else(True, if_then_else(ge(if_then_else(True, 0, ones_diff_cols), if_then_else(False, zeros_diff_cols, -2)), if_then_else(ge(compare_blocks_cols, zeros_diff_cols), if_then_else(False, 1, ones_diff_rows), if_then_else(True, zeros_diff_rows, -3)), if_then_else(ge(-2, compare_blocks_rows), if_then_else(True, -2, zeros_diff_cols), if_then_else(True, -4, 0))), ones_diff_rows), if_then_else(True, ones_diff_cols, compare_blocks_cols)), le(if_then_else(or_(ge(ones_diff_rows, -3), False), -3, 1), if_then_else(False, -4, if_then_else(True, -1, if_then_else(True, zeros_diff_cols, -1)))))
and_(ge(if_then_else(False, zeros_diff_rows, ones_diff_cols), if_then_else(False, if_then_else(False, zeros_diff_cols, 1), if_then_else(and_(or_(True, True), and_(False, False)), if_then_else(le(ones_diff_cols, if_then_else(True, compare_blocks_cols, ones_diff_cols)), if_then_else(le(-1, 3), if_then_else(False, ones_diff_cols, ones_diff_cols), -2), if_then_else(True, -3, if_then_else(False, zeros_diff_cols, 3))), if_then_else(and_(False, True), if_then_else(False, compare_blocks_cols, zeros_diff_rows), if_then_else(False, -2, compare_blocks_cols))))), or_(and_(and_(True, True), False), or_(False, False)))
VAL TREES:
add(add(add(ones_diff_cols, zeros_diff_cols), add(zeros_diff_rows, ones_diff_cols)), add(add(ones_diff_rows, add(mul(add(add(compare_blocks_rows, ones_diff_rows), mul(zeros_diff_cols, zeros_diff_cols)), compare_blocks_cols), add(compare_blocks_cols, compare_blocks_cols))), add(compare_blocks_cols, mul(add(compare_blocks_cols, compare_blocks_cols), zeros_diff_rows))))
add(mul(mul(zeros_diff_cols, mul(compare_blocks_cols, zeros_diff_rows)), add(ones_diff_rows, zeros_diff_rows)), mul(compare_blocks_cols, zeros_diff_cols))
mul(ones_diff_rows, compare_blocks_cols)
add(add(add(mul(mul(add(compare_blocks_rows, zeros_diff_cols), add(zeros_diff_rows, mul(add(ones_diff_rows, zeros_diff_rows), add(ones_diff_rows, zeros_diff_cols)))), mul(add(ones_diff_rows, zeros_diff_rows), add(ones_diff_rows, zeros_diff_cols))), compare_blocks_cols), add(compare_blocks_rows, add(compare_blocks_rows, compare_blocks_cols))), add(add(zeros_diff_cols, ones_diff_cols), mul(mul(add(compare_blocks_rows, zeros_diff_cols), add(zeros_diff_rows, zeros_diff_rows)), zeros_diff_cols)))
add(mul(compare_blocks_rows, add(ones_diff_cols, ones_diff_cols)), add(mul(add(compare_blocks_rows, zeros_diff_rows), add(zeros_diff_cols, ones_diff_rows)), compare_blocks_cols))
mul(compare_blocks_cols, zeros_diff_rows)
COND TREES:
le(if_then_else(le(1, 4), if_then_else(False, -3, compare_blocks_cols), if_then_else(True, ones_diff_cols, 2)), if_then_else(True, ones_diff_cols, 2))
or_(and_(le(0, 4), ge(zeros_diff_rows, zeros_diff_cols)), False)
or_(le(if_then_else(or_(False, True), if_then_else(True, -4, 0), -3), if_then_else(le(-4, -1), if_then_else(True, -1, -4), if_then_else(True, -2, -3))), le(if_then_else(le(zeros_diff_cols, ones_diff_rows), if_then_else(True, -2, 0), if_then_else(False, -3, -3)), if_then_else(ge(0, ones_diff_rows), if_then_else(True, compare_blocks_rows, zeros_diff_cols), if_then_else(True, 0, -1))))
le(if_then_else(ge(-4, -4), if_then_else(True, if_then_else(and_(False, False), if_then_else(False, -3, 3), 1), if_then_else(True, if_then_else(True, 3, 3), -5)), if_then_else(True, if_then_else(True, compare_blocks_rows, if_then_else(True, ones_diff_cols, -2)), -5)), if_then_else(and_(False, and_(le(-4, 4), ge(0, -4))), if_then_else(True, 0, -3), if_then_else(ge(-4, -4), 0, -2)))
ge(if_then_else(and_(False, False), if_then_else(False, compare_blocks_cols, zeros_diff_cols), if_then_else(False, zeros_diff_rows, ones_diff_cols)), if_then_else(and_(False, False), if_then_else(True, ones_diff_cols, compare_blocks_cols), if_then_else(False, if_then_else(False, compare_blocks_cols, zeros_diff_cols), if_then_else(False, zeros_diff_rows, ones_diff_cols))))
VAL TREES:
add(add(mul(compare_blocks_rows, add(ones_diff_cols, mul(zeros_diff_cols, zeros_diff_cols))), add(ones_diff_rows, zeros_diff_rows)), add(mul(add(add(compare_blocks_rows, ones_diff_rows), compare_blocks_cols), mul(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, zeros_diff_rows))), add(compare_blocks_cols, compare_blocks_cols)))
add(add(add(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, zeros_diff_rows)), mul(add(zeros_diff_rows, zeros_diff_rows), zeros_diff_rows))
add(add(add(mul(zeros_diff_rows, zeros_diff_rows), zeros_diff_rows), add(add(ones_diff_rows, mul(zeros_diff_cols, mul(ones_diff_cols, compare_blocks_rows))), zeros_diff_rows)), zeros_diff_cols)
mul(mul(mul(add(compare_blocks_rows, zeros_diff_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(add(compare_blocks_rows, zeros_diff_cols), add(compare_blocks_cols, zeros_diff_rows))), mul(add(mul(add(mul(compare_blocks_cols, compare_blocks_cols), ones_diff_cols), zeros_diff_cols), add(zeros_diff_rows, add(compare_blocks_rows, ones_diff_rows))), mul(mul(compare_blocks_cols, ones_diff_cols), add(compare_blocks_cols, zeros_diff_rows))))
mul(mul(mul(mul(compare_blocks_cols, ones_diff_cols), zeros_diff_cols), ones_diff_rows), add(ones_diff_rows, ones_diff_cols))
mul(mul(mul(add(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_rows, zeros_diff_rows)), add(compare_blocks_cols, ones_diff_rows)), add(add(ones_diff_rows, ones_diff_rows), add(add(ones_diff_rows, zeros_diff_cols), mul(mul(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_rows, zeros_diff_rows)))))
COND TREES:
or_(or_(and_(False, False), and_(True, False)), le(if_then_else(False, if_then_else(and_(ge(if_then_else(or_(True, True), if_then_else(False, 2, zeros_diff_cols), if_then_else(True, -5, 2)), if_then_else(ge(2, -2), if_then_else(False, ones_diff_rows, ones_diff_cols), if_then_else(True, zeros_diff_rows, 1))), and_(le(if_then_else(False, -3, 0), if_then_else(False, compare_blocks_cols, ones_diff_rows)), or_(ge(zeros_diff_cols, -2), le(-3, 3)))), if_then_else(ge(if_then_else(and_(True, True), if_then_else(False, 0, -3), if_then_else(False, 3, -4)), if_then_else(or_(True, True), if_then_else(False, 0, -3), if_then_else(True, -1, 4))), if_then_else(ge(if_then_else(True, 0, -3), if_then_else(True, compare_blocks_cols, -3)), if_then_else(ge(-1, 4), if_then_else(False, -1, 0), if_then_else(False, 2, 0)), if_then_else(or_(False, False), if_then_else(True, 4, zeros_diff_cols), if_then_else(True, zeros_diff_rows, ones_diff_rows))), if_then_else(and_(and_(True, True), ge(4, ones_diff_cols)), if_then_else(ge(ones_diff_cols, 4), if_then_else(True, -1, -1), if_then_else(True, 2, 2)), if_then_else(ge(zeros_diff_cols, ones_diff_rows), if_then_else(True, zeros_diff_cols, 3), if_then_else(True, ones_diff_cols, -3)))), if_then_else(and_(le(if_then_else(False, ones_diff_rows, 1), if_then_else(True, -5, -1)), ge(if_then_else(False, ones_diff_rows, -4), if_then_else(True, compare_blocks_cols, 4))), if_then_else(ge(if_then_else(False, compare_blocks_cols, zeros_diff_rows), if_then_else(False, 0, -2)), if_then_else(le(-2, compare_blocks_cols), if_then_else(False, zeros_diff_rows, compare_blocks_rows), if_then_else(True, 3, ones_diff_rows)), if_then_else(or_(False, True), if_then_else(False, zeros_diff_rows, -3), if_then_else(False, 2, zeros_diff_cols))), if_then_else(ge(if_then_else(False, -3, ones_diff_rows), if_then_else(False, -2, ones_diff_rows)), if_then_else(le(3, ones_diff_cols), if_then_else(True, 4, 3), if_then_else(True, 0, -5)), if_then_else(le(1, ones_diff_rows), if_then_else(False, -3, 2), if_then_else(False, ones_diff_rows, -4))))), 3), if_then_else(True, zeros_diff_cols, compare_blocks_cols)))
le(if_then_else(or_(True, or_(False, False)), if_then_else(False, -2, -3), if_then_else(True, compare_blocks_rows, if_then_else(True, zeros_diff_rows, 0))), if_then_else(le(-3, if_then_else(True, 3, -5)), if_then_else(True, zeros_diff_rows, -1), if_then_else(or_(False, True), 0, if_then_else(ge(if_then_else(False, 1, -1), if_then_else(and_(True, True), 3, 4)), if_then_else(le(2, zeros_diff_cols), if_then_else(and_(True, False), zeros_diff_rows, if_then_else(True, 0, -2)), if_then_else(True, compare_blocks_cols, -3)), if_then_else(and_(False, ge(zeros_diff_rows, ones_diff_rows)), if_then_else(True, -3, ones_diff_rows), if_then_else(True, -4, 2))))))
le(if_then_else(ge(if_then_else(False, if_then_else(True, 0, -3), 2), zeros_diff_cols), if_then_else(False, if_then_else(True, ones_diff_cols, 0), -5), if_then_else(and_(False, or_(True, ge(if_then_else(and_(ge(compare_blocks_cols, 1), False), if_then_else(False, zeros_diff_cols, if_then_else(True, 3, 4)), if_then_else(True, zeros_diff_cols, -4)), if_then_else(or_(True, ge(0, -5)), if_then_else(and_(False, True), 4, 1), if_then_else(False, if_then_else(False, ones_diff_cols, -5), compare_blocks_cols))))), 1, if_then_else(ge(2, zeros_diff_cols), ones_diff_cols, compare_blocks_cols))), if_then_else(or_(ge(compare_blocks_cols, -5), le(-3, zeros_diff_cols)), if_then_else(True, 0, 2), if_then_else(False, if_then_else(False, 2, if_then_else(False, -4, 3)), if_then_else(le(-3, -2), if_then_else(False, 1, 4), 4))))
and_(ge(if_then_else(True, if_then_else(ge(-4, -4), if_then_else(ge(compare_blocks_cols, zeros_diff_cols), if_then_else(False, 1, ones_diff_rows), if_then_else(True, zeros_diff_rows, -3)), if_then_else(ge(-2, compare_blocks_rows), if_then_else(True, -2, zeros_diff_cols), if_then_else(True, -4, 0))), ones_diff_rows), if_then_else(True, ones_diff_cols, compare_blocks_cols)), le(if_then_else(or_(ge(ones_diff_rows, -3), False), -3, 1), if_then_else(False, -4, if_then_else(True, -1, if_then_else(True, zeros_diff_cols, -1)))))
and_(ge(if_then_else(False, zeros_diff_rows, ones_diff_cols), if_then_else(False, if_then_else(False, zeros_diff_cols, 1), if_then_else(and_(or_(True, True), and_(False, False)), if_then_else(le(ones_diff_cols, if_then_else(True, compare_blocks_cols, ones_diff_cols)), if_then_else(le(-1, 3), if_then_else(False, ones_diff_cols, ones_diff_cols), -2), if_then_else(True, -3, if_then_else(False, zeros_diff_cols, 3))), if_then_else(and_(False, False), -2, if_then_else(False, zeros_diff_rows, ones_diff_cols))))), or_(and_(and_(True, True), False), or_(False, False)))
VAL TREES:
add(add(add(ones_diff_cols, zeros_diff_cols), add(ones_diff_cols, ones_diff_cols)), add(add(ones_diff_rows, add(mul(add(add(compare_blocks_rows, ones_diff_rows), mul(zeros_diff_cols, zeros_diff_cols)), mul(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, zeros_diff_rows))), add(compare_blocks_cols, mul(add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, compare_blocks_cols)), zeros_diff_cols)))), add(compare_blocks_cols, mul(add(compare_blocks_cols, compare_blocks_cols), mul(compare_blocks_cols, compare_blocks_cols)))))
add(mul(mul(zeros_diff_cols, mul(compare_blocks_cols, zeros_diff_cols)), mul(mul(mul(zeros_diff_rows, zeros_diff_rows), zeros_diff_cols), compare_blocks_cols)), zeros_diff_cols)
mul(compare_blocks_rows, add(zeros_diff_rows, compare_blocks_cols))
add(add(add(ones_diff_rows, compare_blocks_cols), add(compare_blocks_rows, compare_blocks_rows)), add(add(zeros_diff_cols, ones_diff_cols), mul(mul(mul(compare_blocks_cols, ones_diff_cols), add(zeros_diff_rows, zeros_diff_rows)), zeros_diff_cols)))
add(mul(compare_blocks_rows, add(ones_diff_cols, ones_diff_cols)), add(mul(mul(compare_blocks_rows, compare_blocks_rows), add(mul(ones_diff_rows, zeros_diff_rows), ones_diff_rows)), add(add(add(compare_blocks_cols, compare_blocks_cols), ones_diff_rows), ones_diff_rows)))
mul(add(add(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_rows, zeros_diff_rows)), ones_diff_cols)
COND TREES:
or_(or_(False, and_(True, False)), le(if_then_else(False, 2, 3), if_then_else(True, zeros_diff_cols, if_then_else(False, 2, 3))))
le(if_then_else(or_(True, or_(False, False)), if_then_else(False, -2, -3), if_then_else(True, compare_blocks_rows, if_then_else(True, zeros_diff_rows, 0))), if_then_else(le(4, if_then_else(True, compare_blocks_rows, if_then_else(True, zeros_diff_rows, 0))), if_then_else(True, zeros_diff_rows, -1), if_then_else(or_(False, True), 0, if_then_else(True, -4, 2))))
le(if_then_else(ge(if_then_else(False, if_then_else(True, 0, -3), 2), zeros_diff_cols), if_then_else(False, if_then_else(True, ones_diff_cols, 2), -5), if_then_else(and_(False, or_(True, False)), 1, if_then_else(ge(2, zeros_diff_cols), ones_diff_cols, if_then_else(True, -3, compare_blocks_cols)))), if_then_else(or_(True, False), if_then_else(True, 0, 2), if_then_else(False, if_then_else(False, 2, if_then_else(False, -4, 3)), if_then_else(le(-3, -2), if_then_else(False, 1, 4), 4))))
and_(ge(if_then_else(True, 0, ones_diff_rows), if_then_else(True, ones_diff_cols, compare_blocks_cols)), le(if_then_else(or_(True, False), -3, 1), if_then_else(True, -4, if_then_else(True, -1, if_then_else(True, zeros_diff_cols, -1)))))
and_(ge(if_then_else(False, zeros_diff_rows, ones_diff_cols), if_then_else(ge(-1, 4), zeros_diff_rows, -4)), or_(and_(and_(True, True), False), or_(False, False)))
VAL TREES:
add(add(mul(ones_diff_rows, zeros_diff_cols), add(ones_diff_cols, ones_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), add(compare_blocks_cols, mul(add(compare_blocks_cols, compare_blocks_cols), mul(compare_blocks_cols, compare_blocks_cols)))))
add(mul(mul(zeros_diff_cols, zeros_diff_rows), mul(zeros_diff_rows, compare_blocks_cols)), add(add(ones_diff_rows, zeros_diff_rows), zeros_diff_rows))
mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(ones_diff_rows, compare_blocks_cols)), add(zeros_diff_rows, mul(ones_diff_rows, zeros_diff_rows)))
add(add(add(ones_diff_rows, compare_blocks_cols), add(compare_blocks_rows, compare_blocks_rows)), add(add(zeros_diff_rows, ones_diff_cols), mul(zeros_diff_rows, zeros_diff_cols)))
add(mul(compare_blocks_rows, add(ones_diff_cols, ones_diff_cols)), add(mul(compare_blocks_rows, ones_diff_cols), add(add(add(compare_blocks_cols, compare_blocks_cols), ones_diff_rows), ones_diff_rows)))
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(zeros_diff_rows, compare_blocks_rows)), compare_blocks_rows)
COND TREES:
le(if_then_else(le(1, 4), if_then_else(and_(le(if_then_else(and_(and_(False, True), le(1, compare_blocks_rows)), if_then_else(or_(False, True), if_then_else(True, 2, -2), if_then_else(True, 2, 3)), if_then_else(ge(zeros_diff_rows, compare_blocks_cols), if_then_else(True, zeros_diff_rows, -5), if_then_else(False, 0, 1))), if_then_else(and_(or_(ge(if_then_else(ge(if_then_else(True, -2, zeros_diff_cols), ones_diff_cols), if_then_else(False, if_then_else(False, -5, ones_diff_rows), -2), if_then_else(and_(True, False), compare_blocks_rows, ones_diff_cols)), if_then_else(ge(1, 4), if_then_else(False, -3, ones_diff_cols), if_then_else(False, -4, -4))), False), or_(False, True)), if_then_else(or_(True, True), if_then_else(True, -2, compare_blocks_rows), if_then_else(True, compare_blocks_cols, 0)), if_then_else(and_(True, False), if_then_else(True, zeros_diff_rows, 2), if_then_else(True, 1, zeros_diff_cols)))), le(if_then_else(and_(le(-4, -2), or_(False, False)), if_then_else(le(3, -3), if_then_else(False, ones_diff_rows, zeros_diff_cols), if_then_else(True, -2, ones_diff_rows)), if_then_else(or_(False, False), if_then_else(True, zeros_diff_rows, 0), if_then_else(True, 1, compare_blocks_rows))), if_then_else(and_(and_(False, False), or_(False, False)), if_then_else(or_(True, False), if_then_else(True, 4, ones_diff_cols), if_then_else(False, 1, -2)), if_then_else(or_(False, False), if_then_else(False, -3, -1), if_then_else(False, compare_blocks_cols, 1))))), -3, compare_blocks_cols), if_then_else(True, ones_diff_cols, 2)), if_then_else(or_(False, False), if_then_else(True, -4, ones_diff_rows), if_then_else(True, 1, 4)))
or_(and_(le(0, 4), ge(if_then_else(le(if_then_else(or_(False, True), if_then_else(True, -4, ones_diff_cols), if_then_else(True, zeros_diff_rows, 4)), if_then_else(le(3, zeros_diff_rows), if_then_else(False, 3, 3), if_then_else(True, 0, ones_diff_rows))), if_then_else(or_(le(-5, -1), ge(-2, 1)), if_then_else(or_(True, True), if_then_else(True, 0, 0), if_then_else(False, -1, 4)), if_then_else(and_(False, False), if_then_else(False, -4, 4), if_then_else(False, -4, 0))), if_then_else(ge(if_then_else(True, compare_blocks_rows, ones_diff_rows), if_then_else(True, 0, ones_diff_cols)), if_then_else(and_(False, False), if_then_else(False, zeros_diff_rows, 2), if_then_else(True, -4, -4)), if_then_else(and_(False, True), if_then_else(True, compare_blocks_cols, -1), if_then_else(True, -3, -3)))), zeros_diff_cols)), and_(ge(zeros_diff_rows, if_then_else(False, -1, -4)), le(if_then_else(le(if_then_else(True, ones_diff_cols, if_then_else(False, 4, zeros_diff_rows)), if_then_else(True, zeros_diff_cols, ones_diff_rows)), if_then_else(ge(0, zeros_diff_cols), if_then_else(False, if_then_else(True, compare_blocks_rows, 3), 1), if_then_else(False, -2, 1)), if_then_else(le(0, -2), if_then_else(True, 1, if_then_else(False, ones_diff_rows, zeros_diff_cols)), if_then_else(False, 4, 1))), 0)))
or_(le(if_then_else(or_(False, True), if_then_else(True, -4, 0), if_then_else(True, -2, if_then_else(and_(and_(and_(True, False), True), and_(False, or_(le(zeros_diff_cols, -3), ge(zeros_diff_rows, ones_diff_cols)))), if_then_else(and_(False, or_(False, and_(False, True))), if_then_else(True, -1, -3), if_then_else(False, 0, if_then_else(ge(0, ones_diff_cols), if_then_else(False, -5, compare_blocks_cols), if_then_else(False, zeros_diff_rows, compare_blocks_rows)))), if_then_else(ge(-1, -1), if_then_else(False, -4, if_then_else(False, 3, compare_blocks_rows)), if_then_else(False, zeros_diff_rows, zeros_diff_rows))))), if_then_else(le(-4, -1), if_then_else(True, -1, -4), if_then_else(True, -2, -3))), le(if_then_else(le(zeros_diff_cols, ones_diff_rows), if_then_else(True, -4, 0), if_then_else(False, -3, -3)), if_then_else(ge(0, ones_diff_rows), if_then_else(or_(and_(le(if_then_else(or_(False, True), if_then_else(False, zeros_diff_cols, ones_diff_cols), if_then_else(True, 0, compare_blocks_cols)), if_then_else(ge(ones_diff_rows, -1), if_then_else(True, -4, compare_blocks_rows), if_then_else(True, 2, 3))), or_(le(if_then_else(True, 1, -5), if_then_else(True, -1, -1)), and_(le(-5, 1), and_(False, False)))), and_(or_(ge(if_then_else(True, -1, 2), if_then_else(True, 2, -1)), and_(and_(True, False), ge(4, zeros_diff_cols))), and_(and_(or_(True, True), or_(False, False)), le(if_then_else(False, -2, -5), if_then_else(True, compare_blocks_cols, -4))))), compare_blocks_rows, zeros_diff_cols), if_then_else(True, 0, -1))))
le(if_then_else(ge(-4, -4), if_then_else(True, if_then_else(and_(False, False), if_then_else(False, if_then_else(ge(if_then_else(True, ones_diff_rows, -2), if_then_else(False, zeros_diff_rows, ones_diff_cols)), if_then_else(le(ones_diff_rows, -4), if_then_else(True, 3, compare_blocks_cols), if_then_else(True, zeros_diff_cols, -3)), if_then_else(and_(True, True), if_then_else(False, -5, zeros_diff_cols), if_then_else(False, 4, 3))), 3), 1), if_then_else(le(if_then_else(le(if_then_else(True, 1, 2), if_then_else(True, compare_blocks_cols, 0)), if_then_else(ge(-3, -2), if_then_else(True, 1, -2), if_then_else(False, compare_blocks_cols, ones_diff_rows)), if_then_else(ge(-1, -2), if_then_else(False, zeros_diff_rows, 2), if_then_else(True, -1, compare_blocks_rows))), if_then_else(le(if_then_else(True, ones_diff_rows, -4), if_then_else(True, ones_diff_cols, compare_blocks_cols)), if_then_else(and_(False, False), if_then_else(False, -3, 2), if_then_else(False, 0, zeros_diff_rows)), if_then_else(and_(False, False), if_then_else(False, ones_diff_rows, -3), if_then_else(True, -1, 0)))), if_then_else(True, 3, 3), -5)), if_then_else(True, if_then_else(True, compare_blocks_rows, if_then_else(False, ones_diff_cols, -2)), -5)), if_then_else(and_(False, and_(le(-4, 4), ge(0, -4))), if_then_else(True, 0, -3), if_then_else(False, 0, -2)))
ge(if_then_else(and_(False, False), if_then_else(False, compare_blocks_cols, zeros_diff_cols), if_then_else(False, if_then_else(and_(le(zeros_diff_cols, 1), or_(True, and_(True, True))), if_then_else(and_(or_(True, True), True), if_then_else(False, zeros_diff_cols, if_then_else(False, 1, -4)), if_then_else(False, compare_blocks_cols, 0)), if_then_else(or_(False, le(if_then_else(le(ones_diff_rows, ones_diff_rows), if_then_else(False, -2, 3), if_then_else(True, ones_diff_rows, -4)), if_then_else(or_(False, False), if_then_else(False, 1, compare_blocks_rows), if_then_else(False, -3, 0)))), if_then_else(True, 3, ones_diff_cols), if_then_else(True, if_then_else(False, compare_blocks_cols, -3), compare_blocks_cols))), ones_diff_cols)), if_then_else(and_(False, False), if_then_else(True, ones_diff_cols, compare_blocks_cols), if_then_else(False, -1, 0)))
VAL TREES:
add(add(mul(compare_blocks_rows, zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), add(mul(add(add(compare_blocks_rows, ones_diff_rows), mul(zeros_diff_cols, zeros_diff_cols)), mul(mul(zeros_diff_rows, mul(zeros_diff_cols, zeros_diff_cols)), add(ones_diff_rows, zeros_diff_rows))), add(compare_blocks_cols, compare_blocks_cols)))
add(add(add(zeros_diff_cols, ones_diff_cols), mul(zeros_diff_rows, zeros_diff_rows)), mul(add(ones_diff_rows, mul(add(ones_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, zeros_diff_cols))), mul(compare_blocks_cols, zeros_diff_cols)))
add(add(add(compare_blocks_cols, zeros_diff_rows), add(add(ones_diff_rows, mul(zeros_diff_cols, mul(ones_diff_cols, compare_blocks_rows))), ones_diff_rows)), mul(add(compare_blocks_rows, zeros_diff_rows), add(zeros_diff_rows, ones_diff_rows)))
mul(mul(mul(add(compare_blocks_rows, zeros_diff_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(compare_blocks_cols, ones_diff_cols), add(compare_blocks_cols, zeros_diff_rows))), mul(add(mul(add(mul(compare_blocks_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_cols)), zeros_diff_cols), add(mul(compare_blocks_cols, ones_diff_cols), compare_blocks_cols)), mul(mul(compare_blocks_cols, ones_diff_cols), add(compare_blocks_cols, zeros_diff_rows))))
mul(mul(mul(mul(compare_blocks_cols, mul(compare_blocks_cols, ones_diff_cols)), mul(ones_diff_rows, zeros_diff_rows)), mul(ones_diff_cols, add(zeros_diff_cols, ones_diff_rows))), add(mul(add(ones_diff_rows, compare_blocks_cols), mul(compare_blocks_cols, mul(compare_blocks_rows, compare_blocks_rows))), mul(add(ones_diff_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_cols))))
mul(mul(mul(mul(ones_diff_rows, zeros_diff_rows), mul(ones_diff_rows, zeros_diff_rows)), add(compare_blocks_cols, ones_diff_rows)), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)))
COND TREES:
le(if_then_else(le(1, 4), if_then_else(False, -3, compare_blocks_cols), if_then_else(True, ones_diff_cols, 2)), if_then_else(or_(False, False), if_then_else(True, -4, ones_diff_rows), if_then_else(True, 1, 2)))
or_(and_(le(0, 4), ge(zeros_diff_rows, zeros_diff_cols)), and_(ge(zeros_diff_rows, if_then_else(le(if_then_else(True, compare_blocks_rows, ones_diff_rows), 0), -1, -4)), le(if_then_else(True, compare_blocks_rows, ones_diff_rows), 0)))
or_(le(if_then_else(or_(False, True), if_then_else(True, -4, 0), if_then_else(True, -2, 2)), if_then_else(le(-4, -1), if_then_else(True, -1, -4), if_then_else(True, -2, -3))), le(if_then_else(le(zeros_diff_cols, ones_diff_rows), if_then_else(True, -4, -4), if_then_else(False, -3, -3)), if_then_else(ge(0, ones_diff_rows), if_then_else(True, compare_blocks_rows, zeros_diff_cols), if_then_else(True, 0, -1))))
le(if_then_else(True, if_then_else(True, compare_blocks_rows, if_then_else(False, ones_diff_cols, -2)), -5), if_then_else(and_(False, and_(le(-4, 4), ge(0, -4))), if_then_else(True, 0, -3), if_then_else(False, 0, -2)))
ge(if_then_else(and_(False, False), if_then_else(False, compare_blocks_cols, zeros_diff_cols), if_then_else(False, zeros_diff_rows, -1)), if_then_else(and_(False, False), if_then_else(True, ones_diff_cols, compare_blocks_cols), if_then_else(False, -1, 0)))
VAL TREES:
add(add(mul(compare_blocks_rows, ones_diff_cols), add(ones_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), add(zeros_diff_cols, compare_blocks_cols)))
add(add(add(compare_blocks_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_rows)), mul(add(ones_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, zeros_diff_cols)))
add(add(add(compare_blocks_cols, zeros_diff_rows), add(add(ones_diff_rows, zeros_diff_cols), ones_diff_rows)), mul(add(add(ones_diff_rows, ones_diff_cols), zeros_diff_rows), add(zeros_diff_rows, ones_diff_rows)))
mul(mul(mul(add(compare_blocks_rows, zeros_diff_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(add(zeros_diff_rows, zeros_diff_rows), add(ones_diff_rows, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, zeros_diff_cols), add(compare_blocks_rows, compare_blocks_cols)), mul(mul(compare_blocks_cols, ones_diff_cols), add(compare_blocks_cols, zeros_diff_rows))))
mul(mul(mul(mul(compare_blocks_cols, ones_diff_cols), mul(ones_diff_rows, zeros_diff_rows)), mul(mul(ones_diff_cols, compare_blocks_rows), add(zeros_diff_cols, ones_diff_rows))), add(mul(add(ones_diff_rows, compare_blocks_cols), mul(compare_blocks_cols, zeros_diff_cols)), mul(add(ones_diff_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_cols))))
mul(mul(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, ones_diff_rows)), add(add(ones_diff_rows, zeros_diff_cols), add(ones_diff_cols, zeros_diff_rows)))
COND TREES:
le(if_then_else(le(if_then_else(True, ones_diff_cols, 2), 4), if_then_else(False, if_then_else(True, ones_diff_cols, 2), compare_blocks_cols), if_then_else(True, ones_diff_cols, 2)), if_then_else(or_(False, False), if_then_else(True, -4, if_then_else(True, 2, 2)), if_then_else(True, 1, 4)))
or_(and_(le(0, 4), ge(zeros_diff_rows, zeros_diff_cols)), and_(ge(0, if_then_else(False, -1, 4)), le(if_then_else(le(-3, if_then_else(True, 3, -5)), compare_blocks_rows, 0), 0)))
or_(le(if_then_else(or_(False, True), if_then_else(True, -4, 0), if_then_else(True, -2, zeros_diff_cols)), compare_blocks_rows), le(if_then_else(le(zeros_diff_cols, ones_diff_rows), if_then_else(True, -4, 0), if_then_else(False, -3, -3)), if_then_else(ge(0, ones_diff_rows), compare_blocks_cols, if_then_else(True, 0, -1))))
le(if_then_else(ge(-4, -4), if_then_else(True, if_then_else(and_(True, False), if_then_else(False, -3, 3), 1), if_then_else(True, if_then_else(True, 3, 3), -5)), if_then_else(ge(-4, if_then_else(False, ones_diff_cols, -2)), if_then_else(True, compare_blocks_rows, if_then_else(False, ones_diff_cols, -2)), -5)), zeros_diff_cols)
ge(if_then_else(and_(False, False), -2, if_then_else(False, zeros_diff_rows, ones_diff_cols)), if_then_else(False, if_then_else(True, ones_diff_cols, compare_blocks_cols), if_then_else(False, -1, 0)))
VAL TREES:
add(add(add(mul(compare_blocks_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_cols)), add(ones_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, compare_blocks_cols)))
add(mul(zeros_diff_rows, zeros_diff_rows), mul(add(ones_diff_rows, zeros_diff_rows), mul(zeros_diff_cols, zeros_diff_cols)))
add(add(add(compare_blocks_cols, zeros_diff_rows), add(mul(compare_blocks_rows, compare_blocks_rows), ones_diff_rows)), mul(add(mul(compare_blocks_rows, compare_blocks_rows), zeros_diff_rows), add(zeros_diff_rows, ones_diff_rows)))
mul(mul(mul(add(add(zeros_diff_rows, compare_blocks_rows), zeros_diff_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(add(ones_diff_rows, ones_diff_rows), add(ones_diff_rows, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, zeros_diff_cols), add(compare_blocks_rows, compare_blocks_cols)), mul(mul(compare_blocks_cols, ones_diff_cols), add(compare_blocks_cols, zeros_diff_rows))))
mul(mul(mul(mul(compare_blocks_cols, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), mul(mul(compare_blocks_rows, compare_blocks_rows), add(zeros_diff_cols, ones_diff_rows))), add(mul(add(ones_diff_rows, compare_blocks_cols), mul(compare_blocks_cols, zeros_diff_cols)), mul(add(ones_diff_rows, ones_diff_cols), add(ones_diff_cols, compare_blocks_rows))))
mul(mul(add(ones_diff_cols, compare_blocks_cols), add(compare_blocks_cols, ones_diff_rows)), add(add(zeros_diff_rows, zeros_diff_cols), add(ones_diff_cols, compare_blocks_cols)))
COND TREES:
le(if_then_else(le(1, 4), if_then_else(False, -3, compare_blocks_cols), 1), if_then_else(or_(False, False), 1, if_then_else(True, 1, 4)))
or_(and_(le(zeros_diff_rows, 4), ge(if_then_else(False, -1, -4), zeros_diff_cols)), True)
or_(le(if_then_else(or_(False, True), if_then_else(True, -4, 0), if_then_else(True, -2, 2)), if_then_else(le(-4, -1), if_then_else(True, -1, -4), if_then_else(True, -2, -3))), le(-3, if_then_else(ge(0, ones_diff_rows), if_then_else(True, compare_blocks_rows, 2), if_then_else(True, 0, -2))))
le(if_then_else(True, if_then_else(True, if_then_else(and_(False, False), if_then_else(False, -3, 3), 1), if_then_else(True, if_then_else(True, 3, 3), -5)), if_then_else(True, if_then_else(True, compare_blocks_rows, if_then_else(False, ones_diff_cols, -2)), -5)), if_then_else(and_(False, and_(le(-4, 4), ge(0, if_then_else(False, 0, -2)))), if_then_else(True, 0, -3), if_then_else(False, 0, -2)))
ge(if_then_else(False, if_then_else(False, compare_blocks_cols, zeros_diff_cols), if_then_else(False, zeros_diff_rows, ones_diff_cols)), if_then_else(and_(False, False), if_then_else(True, ones_diff_cols, compare_blocks_cols), if_then_else(and_(False, False), -1, 0)))
VAL TREES:
add(add(mul(compare_blocks_rows, ones_diff_cols), add(ones_diff_rows, zeros_diff_rows)), add(mul(add(add(compare_blocks_rows, ones_diff_rows), mul(zeros_diff_cols, zeros_diff_cols)), mul(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, zeros_diff_rows))), add(compare_blocks_cols, compare_blocks_cols)))
add(add(add(zeros_diff_cols, ones_diff_cols), mul(mul(zeros_diff_rows, zeros_diff_cols), zeros_diff_rows)), mul(add(ones_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, zeros_diff_cols)))
add(add(add(compare_blocks_cols, zeros_diff_rows), add(add(ones_diff_rows, mul(zeros_diff_cols, mul(ones_diff_cols, compare_blocks_rows))), ones_diff_rows)), mul(add(mul(compare_blocks_rows, compare_blocks_rows), zeros_diff_rows), add(zeros_diff_rows, ones_diff_rows)))
mul(mul(mul(add(compare_blocks_rows, zeros_diff_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(add(ones_diff_rows, zeros_diff_rows), add(ones_diff_rows, zeros_diff_cols))), mul(add(mul(add(mul(compare_blocks_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_cols)), zeros_diff_cols), add(compare_blocks_rows, compare_blocks_cols)), mul(mul(compare_blocks_cols, ones_diff_cols), add(compare_blocks_cols, zeros_diff_rows))))
mul(mul(mul(mul(compare_blocks_cols, ones_diff_cols), mul(ones_diff_rows, zeros_diff_rows)), mul(ones_diff_cols, add(zeros_diff_cols, ones_diff_rows))), add(mul(add(ones_diff_rows, compare_blocks_cols), mul(compare_blocks_cols, zeros_diff_cols)), mul(add(ones_diff_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_cols))))
mul(mul(mul(add(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_rows, zeros_diff_rows)), add(compare_blocks_cols, ones_diff_rows)), add(add(ones_diff_rows, zeros_diff_cols), add(ones_diff_cols, compare_blocks_cols)))
COND TREES:
le(if_then_else(le(1, 4), if_then_else(False, -3, compare_blocks_cols), if_then_else(True, ones_diff_cols, 2)), 1)
or_(and_(le(0, 4), ge(zeros_diff_rows, -2)), and_(False, le(if_then_else(True, zeros_diff_cols, ones_diff_rows), 0)))
or_(ge(0, ones_diff_rows), le(if_then_else(le(zeros_diff_cols, 1), if_then_else(True, -4, 0), if_then_else(False, -3, -3)), if_then_else(ge(0, ones_diff_rows), if_then_else(True, compare_blocks_rows, zeros_diff_cols), if_then_else(True, 0, -1))))
le(if_then_else(ge(-4, -4), if_then_else(True, 3, if_then_else(True, if_then_else(True, 3, 3), -5)), if_then_else(True, if_then_else(True, compare_blocks_rows, if_then_else(False, ones_diff_cols, -3)), -5)), if_then_else(and_(False, and_(le(-4, 4), ge(0, -4))), if_then_else(True, 0, -3), if_then_else(False, 0, -2)))
ge(if_then_else(False, if_then_else(False, compare_blocks_cols, zeros_diff_cols), if_then_else(False, zeros_diff_rows, ones_diff_cols)), if_then_else(and_(False, False), zeros_diff_rows, if_then_else(False, -1, 0)))
VAL TREES:
add(add(mul(compare_blocks_rows, ones_diff_cols), add(ones_diff_rows, zeros_diff_rows)), compare_blocks_rows)
add(add(add(zeros_diff_cols, mul(add(ones_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, add(ones_diff_rows, zeros_diff_rows)))), mul(mul(zeros_diff_rows, zeros_diff_cols), zeros_diff_rows)), mul(add(ones_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, zeros_diff_cols)))
add(add(add(compare_blocks_cols, compare_blocks_rows), add(add(ones_diff_rows, mul(zeros_diff_cols, mul(ones_diff_cols, compare_blocks_rows))), ones_diff_rows)), mul(add(mul(compare_blocks_rows, compare_blocks_rows), zeros_diff_rows), add(zeros_diff_rows, ones_diff_rows)))
mul(mul(mul(add(compare_blocks_rows, zeros_diff_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(add(ones_diff_rows, zeros_diff_rows), add(ones_diff_rows, zeros_diff_cols))), compare_blocks_cols)
mul(mul(mul(mul(compare_blocks_cols, ones_diff_cols), mul(ones_diff_rows, zeros_diff_rows)), mul(ones_diff_cols, add(zeros_diff_cols, ones_diff_rows))), add(mul(add(ones_diff_rows, compare_blocks_cols), mul(compare_blocks_cols, zeros_diff_cols)), mul(add(zeros_diff_cols, ones_diff_cols), add(ones_diff_cols, ones_diff_cols))))
mul(mul(mul(add(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_rows, zeros_diff_rows)), add(compare_blocks_cols, ones_diff_rows)), add(add(ones_diff_rows, add(compare_blocks_cols, ones_diff_rows)), add(ones_diff_cols, compare_blocks_cols)))
COND TREES:
le(if_then_else(le(1, 4), if_then_else(False, -3, compare_blocks_cols), if_then_else(True, ones_diff_cols, 2)), if_then_else(or_(False, False), 1, if_then_else(True, 1, 4)))
or_(and_(le(0, 4), ge(if_then_else(False, -1, -4), zeros_diff_cols)), True)
or_(le(if_then_else(or_(False, True), if_then_else(True, -4, 0), if_then_else(True, -2, 2)), if_then_else(le(-4, -1), if_then_else(True, -1, -4), if_then_else(True, -2, -3))), le(-3, if_then_else(ge(0, ones_diff_rows), if_then_else(True, compare_blocks_rows, zeros_diff_cols), if_then_else(True, 0, -2))))
le(if_then_else(ge(-4, if_then_else(False, ones_diff_cols, -2)), if_then_else(True, if_then_else(and_(False, False), if_then_else(False, -3, 3), 1), if_then_else(True, if_then_else(True, 3, 3), -5)), if_then_else(True, if_then_else(True, compare_blocks_rows, if_then_else(False, ones_diff_cols, -2)), -5)), if_then_else(and_(False, and_(le(-4, 4), ge(0, if_then_else(False, 0, -2)))), if_then_else(True, 0, -3), if_then_else(False, 0, -2)))
ge(if_then_else(False, if_then_else(False, compare_blocks_cols, zeros_diff_cols), if_then_else(False, zeros_diff_rows, ones_diff_cols)), if_then_else(and_(False, False), if_then_else(True, ones_diff_cols, compare_blocks_cols), if_then_else(False, -1, 0)))
VAL TREES:
add(add(mul(compare_blocks_rows, ones_diff_cols), add(ones_diff_rows, add(compare_blocks_cols, compare_blocks_cols))), add(mul(add(add(zeros_diff_rows, ones_diff_rows), mul(zeros_diff_cols, zeros_diff_cols)), mul(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, zeros_diff_rows))), add(compare_blocks_cols, compare_blocks_cols)))
add(add(add(zeros_diff_cols, ones_diff_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(ones_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, zeros_diff_cols)))
add(add(add(compare_blocks_cols, zeros_diff_rows), add(add(ones_diff_rows, mul(zeros_diff_cols, mul(compare_blocks_rows, compare_blocks_rows))), ones_diff_rows)), mul(add(mul(compare_blocks_rows, add(mul(compare_blocks_rows, compare_blocks_rows), zeros_diff_rows)), zeros_diff_rows), add(zeros_diff_rows, ones_diff_rows)))
mul(mul(mul(add(zeros_diff_cols, zeros_diff_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(add(ones_diff_rows, zeros_diff_rows), add(ones_diff_rows, zeros_diff_cols))), mul(add(mul(add(mul(compare_blocks_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_cols)), zeros_diff_cols), add(compare_blocks_rows, compare_blocks_cols)), mul(mul(mul(add(ones_diff_rows, zeros_diff_rows), add(ones_diff_rows, zeros_diff_cols)), ones_diff_cols), add(compare_blocks_cols, zeros_diff_rows))))
mul(mul(mul(mul(compare_blocks_cols, ones_diff_cols), mul(ones_diff_rows, zeros_diff_rows)), mul(ones_diff_cols, add(zeros_diff_cols, ones_diff_rows))), add(mul(add(ones_diff_rows, compare_blocks_cols), mul(compare_blocks_cols, zeros_diff_cols)), mul(ones_diff_cols, add(ones_diff_cols, ones_diff_cols))))
mul(mul(mul(add(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_rows, mul(ones_diff_rows, zeros_diff_rows))), add(compare_blocks_cols, ones_diff_rows)), add(add(ones_diff_rows, zeros_diff_cols), add(ones_diff_cols, compare_blocks_cols)))
COND TREES:
or_(or_(and_(False, False), and_(True, False)), le(if_then_else(False, if_then_else(and_(ge(if_then_else(or_(True, True), if_then_else(False, 2, zeros_diff_cols), if_then_else(True, -5, 2)), if_then_else(ge(2, -2), if_then_else(False, ones_diff_rows, ones_diff_cols), if_then_else(True, zeros_diff_rows, 1))), and_(le(if_then_else(False, -3, 0), if_then_else(False, compare_blocks_cols, ones_diff_rows)), or_(ge(zeros_diff_cols, -2), le(-3, 3)))), if_then_else(ge(if_then_else(and_(True, False), if_then_else(False, 0, 3), if_then_else(False, 3, -4)), if_then_else(or_(True, True), if_then_else(False, 0, -3), if_then_else(True, -1, 4))), if_then_else(ge(if_then_else(True, 0, -3), if_then_else(True, compare_blocks_cols, -3)), if_then_else(ge(-1, 4), if_then_else(False, -1, 0), if_then_else(False, 2, 0)), if_then_else(or_(False, False), if_then_else(True, 4, zeros_diff_cols), if_then_else(True, zeros_diff_rows, ones_diff_rows))), if_then_else(and_(and_(True, True), ge(4, ones_diff_cols)), if_then_else(ge(ones_diff_cols, 4), if_then_else(True, -1, -1), if_then_else(True, 2, 2)), if_then_else(ge(zeros_diff_cols, ones_diff_rows), if_then_else(True, zeros_diff_cols, 3), if_then_else(True, ones_diff_cols, -3)))), if_then_else(and_(le(if_then_else(False, ones_diff_rows, 1), if_then_else(True, -5, -1)), ge(if_then_else(False, ones_diff_rows, -4), if_then_else(True, compare_blocks_cols, 4))), if_then_else(ge(if_then_else(False, compare_blocks_cols, zeros_diff_rows), if_then_else(False, 0, -2)), if_then_else(le(-2, compare_blocks_cols), if_then_else(False, zeros_diff_rows, compare_blocks_rows), if_then_else(True, 3, ones_diff_rows)), if_then_else(or_(False, True), if_then_else(False, zeros_diff_rows, -3), if_then_else(False, 2, zeros_diff_cols))), if_then_else(ge(if_then_else(False, -3, ones_diff_rows), if_then_else(False, -2, ones_diff_rows)), if_then_else(le(3, ones_diff_cols), if_then_else(True, 4, 3), if_then_else(True, 0, -5)), if_then_else(le(1, ones_diff_rows), if_then_else(False, -3, 2), if_then_else(False, ones_diff_rows, -4))))), 3), if_then_else(True, zeros_diff_cols, compare_blocks_cols)))
le(-1, if_then_else(le(-3, if_then_else(True, 3, -5)), if_then_else(True, zeros_diff_rows, -1), if_then_else(or_(False, True), 0, if_then_else(ge(if_then_else(False, 1, -1), if_then_else(and_(True, True), 3, 2)), if_then_else(le(2, zeros_diff_cols), if_then_else(and_(True, False), zeros_diff_rows, if_then_else(True, 0, -2)), if_then_else(True, compare_blocks_cols, -3)), if_then_else(and_(False, ge(zeros_diff_rows, ones_diff_rows)), if_then_else(True, -3, ones_diff_rows), if_then_else(True, -4, 2))))))
le(if_then_else(ge(if_then_else(False, if_then_else(True, 0, -3), 2), zeros_diff_cols), if_then_else(False, if_then_else(True, ones_diff_cols, 0), -5), if_then_else(and_(False, or_(True, ge(if_then_else(and_(ge(compare_blocks_cols, 1), False), if_then_else(False, zeros_diff_cols, if_then_else(True, 3, 4)), if_then_else(True, zeros_diff_cols, -4)), if_then_else(or_(True, ge(0, -5)), if_then_else(and_(False, True), 4, 1), if_then_else(False, if_then_else(False, ones_diff_cols, -5), compare_blocks_cols))))), 1, if_then_else(ge(2, zeros_diff_cols), ones_diff_cols, if_then_else(True, -3, compare_blocks_cols)))), if_then_else(or_(ge(compare_blocks_cols, -5), le(-3, zeros_diff_cols)), if_then_else(False, 0, 2), if_then_else(False, if_then_else(False, 2, if_then_else(False, -4, 3)), if_then_else(le(-3, -2), if_then_else(False, 1, 4), 4))))
and_(ge(if_then_else(True, if_then_else(ge(if_then_else(True, 0, ones_diff_cols), if_then_else(False, zeros_diff_cols, -2)), if_then_else(ge(compare_blocks_cols, zeros_diff_cols), if_then_else(False, 1, ones_diff_rows), if_then_else(True, zeros_diff_rows, -3)), if_then_else(ge(-2, compare_blocks_rows), if_then_else(True, -2, zeros_diff_cols), if_then_else(True, -4, 0))), ones_diff_rows), if_then_else(True, ones_diff_cols, compare_blocks_cols)), le(if_then_else(or_(True, False), -3, 1), if_then_else(False, -4, if_then_else(True, -1, if_then_else(True, zeros_diff_cols, -1)))))
and_(ge(if_then_else(False, zeros_diff_rows, ones_diff_cols), if_then_else(False, if_then_else(False, zeros_diff_cols, 1), if_then_else(and_(or_(True, True), and_(False, False)), if_then_else(le(ones_diff_cols, if_then_else(True, compare_blocks_cols, ones_diff_cols)), if_then_else(le(-1, 3), if_then_else(False, ones_diff_cols, zeros_diff_rows), -2), if_then_else(True, -3, if_then_else(False, zeros_diff_cols, 3))), if_then_else(and_(False, True), if_then_else(False, compare_blocks_cols, zeros_diff_rows), if_then_else(False, -2, compare_blocks_cols))))), or_(and_(and_(True, True), False), or_(False, False)))
VAL TREES:
add(add(add(ones_diff_cols, zeros_diff_cols), add(ones_diff_cols, ones_diff_cols)), add(add(ones_diff_rows, add(mul(add(add(compare_blocks_rows, ones_diff_rows), mul(zeros_diff_cols, zeros_diff_cols)), mul(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, zeros_diff_rows))), add(compare_blocks_cols, compare_blocks_cols))), add(compare_blocks_cols, mul(zeros_diff_rows, compare_blocks_cols))))
add(mul(mul(zeros_diff_cols, mul(compare_blocks_cols, add(zeros_diff_cols, ones_diff_cols))), mul(zeros_diff_rows, zeros_diff_rows)), zeros_diff_cols)
mul(ones_diff_cols, add(zeros_diff_rows, mul(zeros_diff_rows, zeros_diff_rows)))
add(add(add(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_rows, compare_blocks_rows)), add(add(compare_blocks_rows, ones_diff_cols), mul(mul(add(compare_blocks_rows, zeros_diff_cols), add(zeros_diff_rows, zeros_diff_rows)), zeros_diff_cols)))
add(mul(compare_blocks_rows, add(ones_diff_cols, ones_diff_cols)), add(mul(mul(ones_diff_rows, compare_blocks_rows), add(zeros_diff_cols, ones_diff_rows)), add(add(add(compare_blocks_cols, compare_blocks_cols), ones_diff_rows), ones_diff_rows)))
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_cols)), ones_diff_cols)
COND TREES:
le(if_then_else(le(1, 4), if_then_else(False, -3, compare_blocks_cols), if_then_else(True, ones_diff_cols, 2)), 1)
or_(and_(le(0, 4), ge(zeros_diff_rows, -2)), and_(False, le(if_then_else(True, zeros_diff_cols, ones_diff_rows), 0)))
or_(ge(0, ones_diff_rows), le(if_then_else(le(zeros_diff_cols, 1), if_then_else(True, -4, 0), if_then_else(False, -3, -3)), if_then_else(ge(0, ones_diff_rows), if_then_else(True, compare_blocks_rows, zeros_diff_cols), if_then_else(True, 0, -1))))
le(if_then_else(ge(-4, -4), if_then_else(True, 3, if_then_else(True, if_then_else(True, 3, 3), -5)), if_then_else(True, if_then_else(True, compare_blocks_rows, if_then_else(False, ones_diff_cols, -3)), -5)), if_then_else(and_(False, and_(le(-4, 4), ge(0, -4))), if_then_else(True, 0, -3), if_then_else(False, 0, -2)))
ge(if_then_else(False, if_then_else(False, compare_blocks_cols, zeros_diff_cols), if_then_else(False, zeros_diff_rows, ones_diff_cols)), if_then_else(and_(False, False), zeros_diff_rows, if_then_else(False, -1, 0)))
VAL TREES:
add(add(add(ones_diff_rows, zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), compare_blocks_rows)
add(add(add(zeros_diff_cols, mul(add(ones_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, add(ones_diff_rows, zeros_diff_rows)))), mul(mul(zeros_diff_rows, zeros_diff_cols), compare_blocks_cols)), mul(add(ones_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, zeros_diff_cols)))
add(add(add(compare_blocks_cols, compare_blocks_rows), add(add(ones_diff_rows, mul(zeros_diff_cols, mul(ones_diff_cols, compare_blocks_rows))), ones_diff_rows)), mul(add(mul(compare_blocks_rows, compare_blocks_rows), zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)))
mul(mul(mul(add(compare_blocks_rows, zeros_diff_cols), add(add(ones_diff_rows, zeros_diff_rows), zeros_diff_rows)), mul(add(ones_diff_rows, zeros_diff_rows), add(ones_diff_rows, zeros_diff_cols))), compare_blocks_cols)
mul(mul(mul(mul(compare_blocks_cols, ones_diff_cols), mul(ones_diff_rows, zeros_diff_rows)), mul(mul(mul(compare_blocks_cols, ones_diff_cols), mul(ones_diff_rows, zeros_diff_rows)), mul(ones_diff_cols, add(zeros_diff_cols, ones_diff_rows)))), add(mul(add(ones_diff_rows, compare_blocks_cols), mul(compare_blocks_cols, zeros_diff_cols)), mul(add(zeros_diff_cols, ones_diff_cols), add(ones_diff_cols, ones_diff_cols))))
mul(mul(mul(add(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_rows, zeros_diff_rows)), add(compare_blocks_cols, ones_diff_rows)), add(add(ones_diff_rows, add(compare_blocks_cols, ones_diff_rows)), add(ones_diff_cols, mul(ones_diff_rows, zeros_diff_rows))))
COND TREES:
le(if_then_else(le(1, 4), if_then_else(False, -3, compare_blocks_cols), if_then_else(True, ones_diff_cols, 2)), if_then_else(or_(False, or_(and_(False, False), and_(True, False))), if_then_else(True, -4, ones_diff_rows), if_then_else(True, 1, 4)))
or_(and_(le(0, 4), ge(zeros_diff_rows, -2)), and_(False, le(if_then_else(True, compare_blocks_rows, ones_diff_rows), 0)))
or_(le(if_then_else(or_(False, True), if_then_else(True, -4, 0), if_then_else(True, ones_diff_cols, 2)), if_then_else(le(-4, -1), if_then_else(True, -1, -4), if_then_else(True, -2, -3))), le(if_then_else(le(zeros_diff_cols, 1), if_then_else(True, -4, 0), if_then_else(False, -3, -3)), if_then_else(ge(0, ones_diff_rows), if_then_else(True, compare_blocks_rows, zeros_diff_cols), if_then_else(True, 0, -1))))
le(if_then_else(ge(-4, -4), if_then_else(True, if_then_else(ge(if_then_else(True, 0, ones_diff_rows), if_then_else(True, ones_diff_cols, compare_blocks_cols)), if_then_else(False, -3, 3), 1), if_then_else(True, if_then_else(True, 3, 3), -5)), if_then_else(True, if_then_else(True, compare_blocks_rows, if_then_else(False, ones_diff_cols, -3)), -5)), if_then_else(and_(False, and_(le(-4, 4), ge(0, -4))), if_then_else(True, 0, -3), if_then_else(False, 0, -2)))
ge(if_then_else(and_(False, False), if_then_else(False, compare_blocks_cols, zeros_diff_cols), if_then_else(False, zeros_diff_rows, ones_diff_cols)), if_then_else(and_(False, False), zeros_diff_rows, if_then_else(False, -1, 0)))
VAL TREES:
add(add(mul(compare_blocks_rows, ones_diff_cols), mul(compare_blocks_rows, ones_diff_cols)), compare_blocks_rows)
add(add(add(zeros_diff_cols, mul(add(ones_diff_rows, zeros_diff_rows), mul(zeros_diff_rows, add(ones_diff_rows, zeros_diff_rows)))), mul(mul(zeros_diff_rows, zeros_diff_cols), zeros_diff_rows)), mul(add(ones_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, zeros_diff_cols)))
add(add(add(compare_blocks_cols, compare_blocks_rows), add(add(ones_diff_rows, mul(zeros_diff_cols, mul(ones_diff_rows, compare_blocks_rows))), ones_diff_rows)), mul(add(mul(compare_blocks_rows, compare_blocks_rows), zeros_diff_rows), add(zeros_diff_rows, ones_diff_rows)))
mul(mul(mul(add(compare_blocks_rows, zeros_diff_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(zeros_diff_rows, add(ones_diff_rows, zeros_diff_cols))), compare_blocks_cols)
mul(mul(ones_diff_cols, add(zeros_diff_cols, ones_diff_rows)), add(mul(add(ones_diff_rows, compare_blocks_cols), mul(compare_blocks_cols, zeros_diff_cols)), mul(add(zeros_diff_cols, ones_diff_cols), add(ones_diff_cols, ones_diff_cols))))
mul(mul(mul(add(compare_blocks_rows, zeros_diff_rows), compare_blocks_cols), add(compare_blocks_cols, ones_diff_rows)), add(add(ones_diff_rows, add(compare_blocks_cols, ones_diff_rows)), add(ones_diff_cols, compare_blocks_cols)))
COND TREES:
le(if_then_else(le(1, 4), if_then_else(False, -3, compare_blocks_cols), if_then_else(True, ones_diff_cols, 2)), 1)
or_(and_(le(0, 4), ge(zeros_diff_rows, -2)), and_(False, le(if_then_else(True, zeros_diff_cols, ones_diff_rows), 0)))
or_(ge(0, ones_diff_rows), le(if_then_else(le(zeros_diff_cols, 1), if_then_else(True, -4, 0), if_then_else(False, -3, -3)), if_then_else(ge(0, ones_diff_rows), if_then_else(True, compare_blocks_rows, zeros_diff_cols), if_then_else(True, 0, -1))))
le(if_then_else(ge(-4, -4), if_then_else(True, 3, if_then_else(True, if_then_else(True, 3, 3), -5)), if_then_else(True, if_then_else(True, compare_blocks_rows, if_then_else(False, ones_diff_cols, -3)), -5)), if_then_else(and_(False, and_(le(-4, 4), ge(0, -4))), if_then_else(True, 0, -3), if_then_else(False, 0, -2)))
ge(if_then_else(False, if_then_else(False, compare_blocks_cols, zeros_diff_cols), if_then_else(False, zeros_diff_rows, ones_diff_cols)), if_then_else(and_(False, False), zeros_diff_rows, if_then_else(False, -1, 0)))
VAL TREES:
add(add(mul(compare_blocks_rows, ones_diff_cols), add(ones_diff_rows, zeros_diff_rows)), compare_blocks_rows)
add(add(add(zeros_diff_cols, mul(add(ones_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, add(ones_diff_rows, zeros_diff_rows)))), mul(mul(zeros_diff_rows, zeros_diff_cols), zeros_diff_rows)), mul(add(ones_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, zeros_diff_cols)))
add(add(add(compare_blocks_cols, compare_blocks_rows), add(add(ones_diff_rows, mul(zeros_diff_cols, mul(ones_diff_cols, compare_blocks_rows))), ones_diff_rows)), mul(add(mul(compare_blocks_rows, compare_blocks_rows), zeros_diff_rows), add(zeros_diff_rows, ones_diff_rows)))
mul(mul(mul(add(compare_blocks_rows, zeros_diff_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(add(ones_diff_rows, zeros_diff_rows), add(ones_diff_rows, zeros_diff_cols))), compare_blocks_cols)
mul(mul(mul(mul(compare_blocks_cols, ones_diff_cols), mul(ones_diff_rows, zeros_diff_rows)), mul(ones_diff_cols, add(zeros_diff_cols, ones_diff_rows))), add(mul(add(ones_diff_rows, compare_blocks_cols), mul(compare_blocks_cols, zeros_diff_cols)), mul(add(zeros_diff_cols, ones_diff_cols), add(ones_diff_cols, ones_diff_cols))))
mul(mul(mul(add(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_rows, zeros_diff_rows)), add(compare_blocks_cols, ones_diff_rows)), add(add(ones_diff_rows, add(compare_blocks_cols, ones_diff_rows)), add(ones_diff_cols, compare_blocks_cols)))
COND TREES:
le(if_then_else(le(1, 4), if_then_else(False, -3, compare_blocks_cols), if_then_else(True, ones_diff_cols, 2)), if_then_else(True, 2, 3))
or_(and_(le(0, 4), ge(zeros_diff_rows, if_then_else(False, if_then_else(True, compare_blocks_rows, 3), 1))), True)
or_(le(if_then_else(or_(False, True), if_then_else(True, -4, 0), if_then_else(True, -2, 2)), if_then_else(le(-4, -1), if_then_else(True, -1, -4), if_then_else(True, -2, -3))), and_(False, True))
le(if_then_else(ge(-4, -4), if_then_else(True, if_then_else(and_(True, False), if_then_else(False, -3, 3), 1), if_then_else(True, if_then_else(True, 3, 3), -5)), if_then_else(True, if_then_else(True, compare_blocks_rows, if_then_else(False, ones_diff_cols, -2)), -5)), if_then_else(and_(False, and_(le(-4, 4), ge(0, if_then_else(False, 0, -2)))), if_then_else(True, 0, -3), if_then_else(False, 0, -2)))
ge(if_then_else(and_(False, False), if_then_else(False, compare_blocks_cols, zeros_diff_cols), if_then_else(False, zeros_diff_rows, ones_diff_cols)), if_then_else(and_(False, False), if_then_else(True, ones_diff_cols, compare_blocks_cols), if_then_else(False, -1, 0)))
VAL TREES:
add(add(ones_diff_rows, add(ones_diff_rows, zeros_diff_rows)), add(mul(add(add(compare_blocks_rows, ones_diff_rows), mul(zeros_diff_cols, zeros_diff_cols)), mul(mul(zeros_diff_rows, compare_blocks_cols), ones_diff_cols)), add(ones_diff_rows, compare_blocks_cols)))
add(add(add(zeros_diff_cols, ones_diff_cols), mul(mul(zeros_diff_rows, zeros_diff_cols), zeros_diff_rows)), mul(add(ones_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, add(ones_diff_rows, zeros_diff_rows))))
add(add(add(compare_blocks_cols, zeros_diff_rows), add(add(ones_diff_rows, add(ones_diff_cols, ones_diff_rows)), ones_diff_rows)), mul(add(mul(ones_diff_rows, compare_blocks_rows), zeros_diff_rows), mul(add(ones_diff_cols, ones_diff_rows), mul(ones_diff_rows, zeros_diff_rows))))
mul(mul(mul(add(compare_blocks_rows, zeros_diff_cols), add(zeros_diff_rows, zeros_diff_rows)), compare_blocks_cols), mul(add(mul(add(mul(compare_blocks_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_cols)), zeros_diff_cols), add(compare_blocks_rows, compare_blocks_cols)), zeros_diff_rows))
mul(compare_blocks_cols, add(mul(add(mul(ones_diff_cols, add(zeros_diff_rows, compare_blocks_cols)), compare_blocks_cols), mul(compare_blocks_cols, zeros_diff_cols)), ones_diff_rows))
mul(add(add(add(add(ones_diff_cols, compare_blocks_rows), compare_blocks_rows), add(add(zeros_diff_rows, zeros_diff_cols), add(ones_diff_cols, compare_blocks_cols))), add(add(zeros_diff_cols, ones_diff_cols), mul(zeros_diff_cols, compare_blocks_cols))), zeros_diff_cols)
COND TREES:
or_(or_(and_(False, False), and_(True, False)), le(if_then_else(False, if_then_else(and_(ge(if_then_else(or_(True, True), if_then_else(False, 2, zeros_diff_cols), if_then_else(True, -5, 2)), if_then_else(ge(2, -2), if_then_else(False, ones_diff_rows, ones_diff_cols), if_then_else(True, zeros_diff_rows, 1))), and_(le(if_then_else(False, -3, 0), if_then_else(False, compare_blocks_cols, ones_diff_rows)), or_(ge(zeros_diff_cols, -2), le(-3, 3)))), if_then_else(ge(if_then_else(and_(True, False), if_then_else(False, 0, -3), if_then_else(False, 3, -4)), if_then_else(or_(False, True), if_then_else(False, 0, -3), if_then_else(True, -1, 4))), if_then_else(ge(if_then_else(True, 0, -3), if_then_else(True, compare_blocks_cols, -3)), if_then_else(ge(-1, 4), if_then_else(False, -1, 0), if_then_else(False, 2, 0)), if_then_else(or_(False, False), if_then_else(True, 4, zeros_diff_cols), if_then_else(True, zeros_diff_rows, ones_diff_rows))), if_then_else(and_(and_(True, True), ge(4, ones_diff_cols)), if_then_else(ge(ones_diff_cols, 4), if_then_else(True, -1, -1), if_then_else(True, 2, 2)), if_then_else(ge(zeros_diff_cols, ones_diff_rows), if_then_else(True, zeros_diff_cols, 3), if_then_else(True, ones_diff_cols, -3)))), if_then_else(and_(le(if_then_else(False, ones_diff_rows, 1), if_then_else(True, -5, -1)), ge(if_then_else(False, ones_diff_rows, -4), if_then_else(True, compare_blocks_cols, 4))), if_then_else(ge(if_then_else(False, compare_blocks_cols, zeros_diff_rows), if_then_else(False, 0, -2)), if_then_else(le(-2, compare_blocks_cols), if_then_else(False, zeros_diff_rows, compare_blocks_rows), if_then_else(True, 3, ones_diff_rows)), if_then_else(or_(False, True), if_then_else(False, zeros_diff_rows, -3), if_then_else(False, 2, zeros_diff_cols))), if_then_else(ge(if_then_else(False, -3, ones_diff_rows), if_then_else(False, -2, ones_diff_rows)), if_then_else(le(3, ones_diff_cols), if_then_else(True, 4, 3), if_then_else(True, 0, -5)), if_then_else(le(1, ones_diff_rows), if_then_else(False, -3, 2), if_then_else(False, ones_diff_rows, -4))))), 3), if_then_else(True, zeros_diff_cols, compare_blocks_cols)))
le(if_then_else(or_(True, or_(False, False)), if_then_else(False, -2, -3), if_then_else(False, compare_blocks_rows, if_then_else(True, zeros_diff_rows, 0))), if_then_else(le(-3, if_then_else(True, 3, -5)), if_then_else(True, zeros_diff_rows, -1), if_then_else(or_(False, True), 0, if_then_else(ge(if_then_else(False, 1, -1), if_then_else(and_(True, True), 3, 2)), if_then_else(le(2, zeros_diff_cols), if_then_else(and_(True, False), zeros_diff_rows, if_then_else(True, 0, -2)), if_then_else(True, compare_blocks_cols, -3)), if_then_else(and_(False, ge(zeros_diff_rows, ones_diff_rows)), if_then_else(True, -3, ones_diff_rows), if_then_else(True, -4, 2))))))
le(if_then_else(ge(if_then_else(False, if_then_else(True, 0, -3), 2), zeros_diff_cols), if_then_else(False, if_then_else(True, ones_diff_cols, 0), -5), if_then_else(and_(False, or_(True, ge(if_then_else(and_(ge(compare_blocks_cols, 1), False), if_then_else(False, zeros_diff_cols, if_then_else(True, 3, 4)), if_then_else(True, zeros_diff_cols, -4)), if_then_else(or_(True, ge(0, -5)), if_then_else(and_(False, True), 4, 1), if_then_else(False, if_then_else(False, ones_diff_cols, -5), compare_blocks_cols))))), 1, if_then_else(ge(2, zeros_diff_cols), ones_diff_cols, 0))), if_then_else(or_(ge(compare_blocks_cols, -5), le(-3, zeros_diff_cols)), if_then_else(True, 0, 2), if_then_else(False, if_then_else(False, 2, if_then_else(False, -4, 3)), if_then_else(le(-3, -2), if_then_else(False, 1, 4), 4))))
and_(ge(if_then_else(True, if_then_else(ge(if_then_else(True, 0, ones_diff_cols), if_then_else(False, zeros_diff_cols, -2)), if_then_else(ge(compare_blocks_cols, zeros_diff_cols), if_then_else(False, 1, ones_diff_rows), if_then_else(True, zeros_diff_rows, -3)), if_then_else(ge(-2, compare_blocks_rows), if_then_else(True, -2, zeros_diff_cols), if_then_else(True, -4, 0))), if_then_else(True, -2, zeros_diff_cols)), if_then_else(True, ones_diff_cols, compare_blocks_cols)), le(if_then_else(or_(ge(ones_diff_rows, -3), False), -3, 1), if_then_else(False, -4, if_then_else(True, -1, if_then_else(True, zeros_diff_cols, -1)))))
and_(ge(if_then_else(False, zeros_diff_rows, ones_diff_cols), if_then_else(False, if_then_else(False, -1, 1), if_then_else(and_(or_(True, True), and_(False, False)), if_then_else(le(ones_diff_cols, if_then_else(True, compare_blocks_cols, ones_diff_cols)), if_then_else(le(-1, 3), if_then_else(False, ones_diff_cols, ones_diff_cols), -2), if_then_else(True, -3, if_then_else(False, zeros_diff_cols, 3))), if_then_else(and_(False, True), if_then_else(False, compare_blocks_cols, zeros_diff_rows), if_then_else(False, -2, compare_blocks_cols))))), or_(and_(and_(True, True), False), or_(False, False)))
VAL TREES:
add(add(add(ones_diff_cols, zeros_diff_cols), add(ones_diff_cols, ones_diff_cols)), add(add(ones_diff_rows, add(mul(add(add(compare_blocks_rows, ones_diff_rows), mul(zeros_diff_cols, zeros_diff_cols)), mul(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, zeros_diff_rows))), add(compare_blocks_cols, compare_blocks_cols))), add(compare_blocks_cols, mul(add(compare_blocks_cols, compare_blocks_cols), mul(compare_blocks_cols, compare_blocks_cols)))))
add(mul(mul(zeros_diff_cols, mul(compare_blocks_cols, zeros_diff_cols)), mul(zeros_diff_rows, compare_blocks_cols)), zeros_diff_cols)
mul(compare_blocks_rows, add(zeros_diff_rows, mul(zeros_diff_rows, zeros_diff_rows)))
add(add(add(ones_diff_rows, compare_blocks_cols), add(compare_blocks_rows, compare_blocks_rows)), add(add(zeros_diff_cols, ones_diff_cols), mul(mul(add(compare_blocks_rows, zeros_diff_cols), add(zeros_diff_rows, zeros_diff_rows)), zeros_diff_cols)))
add(mul(compare_blocks_rows, add(ones_diff_cols, ones_diff_cols)), add(mul(mul(compare_blocks_rows, compare_blocks_rows), add(zeros_diff_cols, ones_diff_rows)), add(add(add(compare_blocks_cols, compare_blocks_cols), ones_diff_rows), ones_diff_rows)))
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_rows)), ones_diff_cols)
COND TREES:
or_(or_(and_(False, False), and_(True, False)), le(if_then_else(False, if_then_else(and_(ge(if_then_else(or_(True, True), if_then_else(False, 2, zeros_diff_cols), if_then_else(True, -5, 2)), if_then_else(ge(2, -2), if_then_else(False, ones_diff_rows, ones_diff_cols), if_then_else(True, zeros_diff_rows, 1))), and_(le(if_then_else(False, -3, 0), if_then_else(False, compare_blocks_cols, ones_diff_rows)), or_(ge(zeros_diff_cols, -2), le(-3, 3)))), if_then_else(ge(if_then_else(and_(True, True), if_then_else(False, 0, -3), if_then_else(False, 3, -4)), if_then_else(or_(True, True), if_then_else(False, 0, -3), if_then_else(True, -1, 4))), if_then_else(ge(if_then_else(True, 0, -3), if_then_else(True, compare_blocks_cols, -3)), if_then_else(ge(-1, 4), if_then_else(False, -1, 0), if_then_else(False, 2, 0)), if_then_else(or_(False, False), if_then_else(True, 4, zeros_diff_cols), if_then_else(True, zeros_diff_rows, ones_diff_rows))), if_then_else(and_(and_(True, True), ge(4, ones_diff_cols)), if_then_else(ge(ones_diff_cols, 4), if_then_else(True, -1, -1), if_then_else(True, 2, 2)), if_then_else(ge(zeros_diff_cols, ones_diff_rows), if_then_else(True, zeros_diff_cols, 3), if_then_else(True, ones_diff_cols, -3)))), if_then_else(and_(le(if_then_else(False, ones_diff_rows, 1), if_then_else(True, -5, -1)), ge(if_then_else(False, ones_diff_rows, -4), if_then_else(True, compare_blocks_cols, 4))), if_then_else(ge(if_then_else(True, compare_blocks_cols, zeros_diff_rows), if_then_else(False, 0, -2)), if_then_else(le(-2, compare_blocks_cols), if_then_else(False, zeros_diff_rows, compare_blocks_rows), if_then_else(True, 3, ones_diff_rows)), if_then_else(or_(False, True), if_then_else(False, zeros_diff_rows, -3), if_then_else(False, 2, zeros_diff_cols))), if_then_else(ge(if_then_else(False, -3, ones_diff_rows), if_then_else(False, -2, ones_diff_rows)), if_then_else(le(3, ones_diff_cols), if_then_else(True, 4, 3), if_then_else(True, 0, -5)), if_then_else(le(1, ones_diff_rows), if_then_else(False, -3, 2), if_then_else(False, ones_diff_rows, -4))))), 3), if_then_else(True, zeros_diff_cols, compare_blocks_cols)))
le(if_then_else(or_(True, or_(False, False)), if_then_else(False, -2, -3), if_then_else(True, compare_blocks_rows, if_then_else(True, zeros_diff_rows, 0))), if_then_else(le(-3, if_then_else(True, 3, -5)), if_then_else(True, zeros_diff_rows, -1), if_then_else(or_(False, True), 0, if_then_else(ge(if_then_else(True, 1, -1), if_then_else(and_(True, True), 3, 4)), if_then_else(le(2, zeros_diff_cols), if_then_else(and_(True, False), zeros_diff_rows, if_then_else(True, 0, -2)), if_then_else(True, compare_blocks_cols, -3)), if_then_else(and_(False, ge(zeros_diff_rows, ones_diff_rows)), if_then_else(True, -3, ones_diff_rows), if_then_else(True, -4, 2))))))
le(if_then_else(ge(if_then_else(False, if_then_else(True, if_then_else(True, -3, compare_blocks_cols), -3), 2), zeros_diff_cols), if_then_else(False, if_then_else(True, ones_diff_cols, 0), -5), if_then_else(and_(False, or_(True, ge(if_then_else(and_(ge(compare_blocks_cols, 1), False), if_then_else(False, zeros_diff_cols, if_then_else(True, 3, 4)), if_then_else(True, zeros_diff_cols, -4)), if_then_else(or_(True, ge(0, -5)), if_then_else(and_(False, True), 4, 1), if_then_else(False, if_then_else(False, ones_diff_cols, -5), compare_blocks_cols))))), 1, if_then_else(ge(2, zeros_diff_cols), ones_diff_cols, compare_blocks_cols))), if_then_else(or_(ge(compare_blocks_cols, -5), le(-3, zeros_diff_cols)), if_then_else(True, 0, 2), if_then_else(False, if_then_else(False, 2, if_then_else(False, -4, 3)), if_then_else(le(-3, -2), if_then_else(False, 1, 4), 4))))
and_(ge(if_then_else(True, if_then_else(ge(-4, -4), if_then_else(ge(compare_blocks_cols, zeros_diff_cols), if_then_else(False, 1, ones_diff_rows), if_then_else(True, zeros_diff_rows, -3)), if_then_else(ge(-2, compare_blocks_rows), ones_diff_rows, if_then_else(True, -4, 0))), ones_diff_rows), if_then_else(True, ones_diff_cols, compare_blocks_cols)), le(if_then_else(or_(ge(ones_diff_rows, -3), False), -3, 1), if_then_else(False, -4, if_then_else(True, -1, if_then_else(True, zeros_diff_cols, -1)))))
and_(ge(if_then_else(False, zeros_diff_rows, ones_diff_cols), if_then_else(False, if_then_else(False, zeros_diff_cols, 1), if_then_else(and_(or_(True, True), and_(False, False)), if_then_else(le(ones_diff_cols, if_then_else(True, compare_blocks_cols, ones_diff_cols)), if_then_else(le(zeros_diff_cols, 3), if_then_else(False, ones_diff_cols, ones_diff_cols), -2), if_then_else(True, -3, if_then_else(False, zeros_diff_cols, 3))), if_then_else(and_(False, False), -2, if_then_else(False, zeros_diff_rows, ones_diff_cols))))), or_(and_(and_(True, True), False), or_(False, False)))
VAL TREES:
add(add(add(ones_diff_cols, zeros_diff_cols), add(ones_diff_cols, ones_diff_cols)), add(add(ones_diff_rows, add(mul(add(add(compare_blocks_rows, ones_diff_rows), mul(zeros_diff_cols, zeros_diff_cols)), mul(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, zeros_diff_rows))), add(compare_blocks_cols, compare_blocks_cols))), add(compare_blocks_cols, mul(add(compare_blocks_cols, compare_blocks_cols), mul(compare_blocks_cols, compare_blocks_cols)))))
add(mul(mul(zeros_diff_cols, mul(compare_blocks_cols, zeros_diff_cols)), mul(zeros_diff_rows, compare_blocks_cols)), zeros_diff_cols)
mul(compare_blocks_rows, add(zeros_diff_rows, mul(zeros_diff_rows, zeros_diff_rows)))
add(add(add(ones_diff_rows, compare_blocks_cols), add(compare_blocks_rows, compare_blocks_rows)), add(add(zeros_diff_cols, ones_diff_cols), mul(mul(add(compare_blocks_rows, zeros_diff_cols), add(zeros_diff_rows, zeros_diff_rows)), zeros_diff_cols)))
add(mul(compare_blocks_rows, add(ones_diff_cols, ones_diff_cols)), add(mul(mul(compare_blocks_rows, compare_blocks_rows), add(zeros_diff_cols, ones_diff_rows)), add(add(add(compare_blocks_cols, compare_blocks_cols), ones_diff_rows), ones_diff_rows)))
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_rows)), ones_diff_cols)
COND TREES:
le(if_then_else(le(if_then_else(True, ones_diff_cols, 2), 4), if_then_else(False, if_then_else(True, ones_diff_cols, 2), compare_blocks_cols), if_then_else(True, ones_diff_cols, 2)), if_then_else(or_(False, False), if_then_else(False, -4, if_then_else(True, 2, 2)), if_then_else(True, 1, 4)))
or_(and_(le(0, 2), ge(zeros_diff_rows, zeros_diff_cols)), and_(ge(0, if_then_else(False, -1, 4)), le(if_then_else(le(-3, if_then_else(True, 3, -5)), compare_blocks_rows, 0), 0)))
or_(le(if_then_else(or_(False, True), if_then_else(True, -4, 0), if_then_else(True, -2, zeros_diff_cols)), compare_blocks_rows), le(if_then_else(le(zeros_diff_cols, ones_diff_rows), if_then_else(True, -4, 0), if_then_else(False, -3, -3)), if_then_else(ge(0, ones_diff_rows), if_then_else(True, -3, compare_blocks_cols), if_then_else(True, 0, -1))))
le(if_then_else(ge(if_then_else(True, 0, ones_diff_cols), if_then_else(False, zeros_diff_cols, -2)), if_then_else(True, if_then_else(and_(True, False), if_then_else(False, -3, 3), 1), if_then_else(True, if_then_else(True, 3, 3), -5)), if_then_else(ge(-4, if_then_else(False, ones_diff_cols, -2)), if_then_else(True, compare_blocks_rows, if_then_else(False, ones_diff_cols, -2)), -5)), zeros_diff_cols)
ge(if_then_else(and_(False, True), if_then_else(False, compare_blocks_cols, zeros_diff_rows), if_then_else(False, -2, compare_blocks_cols)), if_then_else(False, if_then_else(True, ones_diff_cols, compare_blocks_cols), if_then_else(False, -1, 0)))
VAL TREES:
add(add(add(mul(compare_blocks_cols, zeros_diff_cols), add(add(mul(mul(compare_blocks_rows, ones_diff_rows), add(ones_diff_rows, zeros_diff_rows)), mul(mul(ones_diff_rows, ones_diff_rows), mul(zeros_diff_rows, zeros_diff_cols))), add(mul(add(compare_blocks_rows, compare_blocks_rows), add(ones_diff_cols, ones_diff_cols)), mul(mul(ones_diff_rows, compare_blocks_rows), add(compare_blocks_cols, zeros_diff_rows))))), add(ones_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, compare_blocks_cols)))
add(mul(zeros_diff_rows, zeros_diff_rows), mul(add(ones_diff_rows, mul(zeros_diff_cols, ones_diff_cols)), mul(add(add(mul(mul(add(ones_diff_rows, zeros_diff_cols), add(compare_blocks_cols, compare_blocks_cols)), mul(mul(compare_blocks_rows, ones_diff_cols), mul(compare_blocks_rows, compare_blocks_cols))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, ones_diff_cols)), mul(mul(zeros_diff_rows, zeros_diff_rows), add(zeros_diff_cols, zeros_diff_rows)))), mul(mul(mul(add(compare_blocks_cols, ones_diff_cols), mul(ones_diff_rows, compare_blocks_rows)), mul(add(compare_blocks_rows, zeros_diff_cols), add(compare_blocks_rows, ones_diff_rows))), mul(add(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_cols, ones_diff_rows)), add(add(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_rows))))), zeros_diff_cols)))
add(add(add(compare_blocks_cols, zeros_diff_rows), add(add(add(mul(add(mul(mul(zeros_diff_rows, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_rows)), add(mul(ones_diff_rows, ones_diff_rows), add(compare_blocks_cols, compare_blocks_rows))), mul(add(mul(compare_blocks_rows, compare_blocks_rows), add(zeros_diff_cols, ones_diff_cols)), mul(add(ones_diff_cols, ones_diff_cols), add(zeros_diff_rows, zeros_diff_rows)))), mul(mul(mul(add(compare_blocks_cols, zeros_diff_rows), mul(zeros_diff_rows, zeros_diff_cols)), add(add(zeros_diff_cols, compare_blocks_rows), mul(zeros_diff_rows, zeros_diff_rows))), add(add(add(compare_blocks_cols, compare_blocks_rows), mul(zeros_diff_rows, ones_diff_cols)), add(add(compare_blocks_rows, compare_blocks_cols), mul(compare_blocks_rows, compare_blocks_rows))))), ones_diff_cols), ones_diff_rows)), mul(add(mul(compare_blocks_rows, zeros_diff_rows), zeros_diff_rows), add(zeros_diff_rows, ones_diff_rows)))
mul(mul(mul(mul(add(compare_blocks_rows, ones_diff_cols), add(zeros_diff_cols, ones_diff_rows)), add(mul(compare_blocks_rows, zeros_diff_cols), add(ones_diff_cols, compare_blocks_rows))), mul(add(ones_diff_rows, zeros_diff_rows), zeros_diff_rows)), mul(add(mul(zeros_diff_cols, zeros_diff_cols), add(compare_blocks_rows, compare_blocks_cols)), mul(mul(compare_blocks_cols, ones_diff_cols), add(compare_blocks_cols, zeros_diff_rows))))
mul(mul(mul(mul(compare_blocks_cols, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), mul(mul(compare_blocks_rows, compare_blocks_rows), add(zeros_diff_cols, ones_diff_rows))), add(mul(add(add(mul(add(add(ones_diff_cols, ones_diff_rows), compare_blocks_rows), mul(mul(ones_diff_cols, mul(compare_blocks_rows, ones_diff_cols)), mul(ones_diff_cols, add(compare_blocks_rows, ones_diff_rows)))), mul(mul(zeros_diff_cols, compare_blocks_rows), add(compare_blocks_rows, compare_blocks_rows))), compare_blocks_cols), mul(compare_blocks_cols, add(ones_diff_cols, ones_diff_cols))), mul(add(ones_diff_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_cols))))
mul(mul(add(ones_diff_cols, add(compare_blocks_cols, zeros_diff_rows)), add(compare_blocks_cols, ones_diff_rows)), add(add(zeros_diff_rows, zeros_diff_cols), add(add(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(zeros_diff_rows, ones_diff_cols)), add(add(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, zeros_diff_cols))), compare_blocks_cols)))
COND TREES:
or_(or_(and_(False, False), and_(True, False)), le(if_then_else(False, 2, 3), if_then_else(True, zeros_diff_cols, if_then_else(False, 2, 3))))
le(if_then_else(or_(True, or_(False, False)), if_then_else(False, -2, -3), if_then_else(True, compare_blocks_rows, if_then_else(True, zeros_diff_rows, 0))), if_then_else(le(-3, if_then_else(True, compare_blocks_rows, if_then_else(True, zeros_diff_rows, 0))), if_then_else(True, zeros_diff_rows, -1), if_then_else(or_(False, True), 0, if_then_else(True, -4, 2))))
le(if_then_else(ge(if_then_else(False, if_then_else(True, 0, -3), 2), zeros_diff_cols), if_then_else(False, if_then_else(True, ones_diff_cols, 2), -5), if_then_else(and_(False, or_(True, False)), 1, if_then_else(ge(2, zeros_diff_cols), ones_diff_cols, if_then_else(True, -3, compare_blocks_cols)))), if_then_else(or_(ge(compare_blocks_cols, -5), le(-3, zeros_diff_cols)), if_then_else(True, 0, 2), if_then_else(False, if_then_else(False, 2, if_then_else(False, -4, 3)), if_then_else(le(-3, -2), if_then_else(False, 1, 4), 4))))
and_(ge(if_then_else(True, 0, ones_diff_rows), if_then_else(True, ones_diff_cols, compare_blocks_cols)), le(if_then_else(or_(True, False), -3, 1), if_then_else(False, -4, if_then_else(True, -1, if_then_else(True, zeros_diff_cols, -1)))))
and_(ge(if_then_else(False, zeros_diff_rows, ones_diff_cols), if_then_else(False, zeros_diff_rows, -4)), or_(and_(and_(True, True), False), or_(False, False)))
VAL TREES:
add(add(mul(ones_diff_rows, zeros_diff_cols), add(ones_diff_cols, ones_diff_cols)), add(compare_blocks_cols, add(compare_blocks_cols, mul(ones_diff_rows, mul(compare_blocks_cols, compare_blocks_cols)))))
add(mul(zeros_diff_rows, mul(zeros_diff_rows, compare_blocks_cols)), add(add(ones_diff_rows, zeros_diff_rows), zeros_diff_rows))
mul(add(compare_blocks_rows, zeros_diff_cols), add(zeros_diff_rows, mul(ones_diff_rows, compare_blocks_rows)))
add(add(add(ones_diff_rows, compare_blocks_cols), add(compare_blocks_rows, compare_blocks_rows)), add(add(ones_diff_rows, zeros_diff_cols), mul(zeros_diff_rows, zeros_diff_cols)))
add(mul(mul(zeros_diff_rows, compare_blocks_cols), zeros_diff_cols), add(mul(compare_blocks_rows, ones_diff_cols), add(add(add(compare_blocks_cols, compare_blocks_cols), ones_diff_rows), ones_diff_rows)))
mul(add(zeros_diff_rows, ones_diff_cols), compare_blocks_rows)
COND TREES:
or_(or_(and_(False, False), and_(True, False)), le(if_then_else(False, if_then_else(and_(ge(if_then_else(or_(True, True), if_then_else(False, 2, zeros_diff_cols), if_then_else(True, -5, 2)), if_then_else(ge(2, -2), if_then_else(False, ones_diff_rows, ones_diff_cols), if_then_else(True, zeros_diff_rows, 1))), and_(le(if_then_else(False, -3, 0), if_then_else(False, compare_blocks_cols, ones_diff_rows)), or_(ge(zeros_diff_cols, -2), ge(if_then_else(and_(True, False), if_then_else(False, -4, 1), if_then_else(False, -1, 0)), if_then_else(and_(False, False), if_then_else(False, compare_blocks_cols, ones_diff_cols), if_then_else(True, -5, 4)))))), if_then_else(ge(if_then_else(and_(True, False), if_then_else(False, 0, -3), if_then_else(False, 3, -4)), if_then_else(or_(True, True), if_then_else(False, 0, -3), if_then_else(True, -1, 4))), if_then_else(ge(if_then_else(True, 0, -3), if_then_else(True, compare_blocks_cols, -3)), if_then_else(ge(-1, 4), if_then_else(False, -1, 0), if_then_else(False, 2, 0)), if_then_else(or_(False, False), if_then_else(True, 4, zeros_diff_cols), if_then_else(True, zeros_diff_rows, ones_diff_rows))), if_then_else(and_(and_(True, True), ge(4, ones_diff_cols)), if_then_else(ge(ones_diff_cols, 4), if_then_else(True, -1, -1), 4), if_then_else(ge(zeros_diff_cols, ones_diff_rows), if_then_else(True, zeros_diff_cols, 3), if_then_else(True, ones_diff_cols, -3)))), if_then_else(and_(le(if_then_else(False, ones_diff_rows, 1), if_then_else(True, -5, -1)), ge(if_then_else(False, ones_diff_rows, -4), if_then_else(True, compare_blocks_cols, 4))), if_then_else(ge(if_then_else(False, compare_blocks_cols, zeros_diff_rows), if_then_else(False, 0, -2)), if_then_else(le(-2, compare_blocks_cols), if_then_else(False, zeros_diff_rows, compare_blocks_rows), if_then_else(True, 3, ones_diff_rows)), if_then_else(or_(False, True), if_then_else(False, zeros_diff_rows, -3), if_then_else(False, 2, zeros_diff_cols))), if_then_else(ge(if_then_else(False, -3, ones_diff_rows), if_then_else(False, -2, ones_diff_rows)), if_then_else(le(3, ones_diff_cols), if_then_else(True, 4, 3), if_then_else(True, 0, -5)), if_then_else(le(1, ones_diff_rows), if_then_else(False, -3, 2), if_then_else(False, ones_diff_rows, -4))))), 3), if_then_else(True, zeros_diff_cols, compare_blocks_cols)))
le(if_then_else(or_(True, or_(False, False)), if_then_else(False, -2, -3), if_then_else(True, compare_blocks_rows, if_then_else(True, zeros_diff_rows, 0))), if_then_else(True, if_then_else(True, zeros_diff_rows, -1), if_then_else(or_(False, True), 0, if_then_else(ge(if_then_else(False, 1, -1), if_then_else(and_(True, True), 3, 2)), if_then_else(le(2, zeros_diff_cols), if_then_else(and_(True, False), zeros_diff_rows, if_then_else(True, 0, -2)), if_then_else(True, compare_blocks_cols, -3)), if_then_else(and_(False, ge(zeros_diff_rows, ones_diff_rows)), if_then_else(True, if_then_else(or_(and_(or_(and_(False, False), le(-1, 3)), or_(and_(False, True), or_(True, True))), or_(le(if_then_else(True, 0, -1), if_then_else(True, ones_diff_cols, -3)), ge(if_then_else(True, -2, ones_diff_rows), if_then_else(True, compare_blocks_cols, compare_blocks_cols)))), if_then_else(or_(le(if_then_else(False, -1, compare_blocks_rows), if_then_else(True, compare_blocks_cols, compare_blocks_cols)), ge(if_then_else(True, -2, -2), if_then_else(False, 3, -4))), if_then_else(ge(if_then_else(False, ones_diff_cols, zeros_diff_cols), if_then_else(False, compare_blocks_cols, -3)), if_then_else(ge(1, ones_diff_cols), if_then_else(False, zeros_diff_rows, compare_blocks_rows), if_then_else(True, 1, -2)), if_then_else(and_(False, True), if_then_else(True, -5, compare_blocks_rows), if_then_else(False, zeros_diff_rows, 3))), if_then_else(or_(le(ones_diff_rows, -4), or_(False, True)), if_then_else(and_(True, True), if_then_else(True, -3, 2), if_then_else(False, -5, 0)), if_then_else(and_(True, True), if_then_else(True, compare_blocks_cols, -5), if_then_else(False, compare_blocks_rows, ones_diff_rows)))), if_then_else(and_(or_(le(compare_blocks_cols, -2), le(-5, -5)), or_(ge(-5, -4), le(ones_diff_rows, -1))), if_then_else(le(if_then_else(False, -2, zeros_diff_rows), if_then_else(True, -4, compare_blocks_cols)), if_then_else(and_(False, False), if_then_else(False, compare_blocks_rows, zeros_diff_cols), if_then_else(True, -1, ones_diff_rows)), if_then_else(and_(False, False), if_then_else(True, 3, zeros_diff_rows), if_then_else(True, -3, ones_diff_cols))), if_then_else(ge(if_then_else(True, compare_blocks_rows, compare_blocks_cols), if_then_else(False, 0, zeros_diff_cols)), if_then_else(le(ones_diff_cols, -4), if_then_else(True, 4, -2), if_then_else(False, compare_blocks_cols, 3)), if_then_else(ge(-1, 4), if_then_else(False, -4, 2), if_then_else(True, 2, -3))))), ones_diff_rows), if_then_else(True, -4, 2))))))
and_(or_(or_(False, True), ge(compare_blocks_rows, zeros_diff_cols)), and_(le(1, if_then_else(and_(False, True), if_then_else(True, -3, compare_blocks_cols), -2)), ge(if_then_else(False, if_then_else(True, -5, -2), 1), compare_blocks_rows)))
and_(ge(if_then_else(True, if_then_else(ge(if_then_else(True, 0, ones_diff_cols), if_then_else(False, zeros_diff_cols, -2)), if_then_else(ge(compare_blocks_cols, zeros_diff_cols), if_then_else(False, 1, ones_diff_rows), if_then_else(True, zeros_diff_rows, -3)), if_then_else(ge(-2, compare_blocks_rows), if_then_else(True, -2, if_then_else(and_(False, and_(le(-4, 4), ge(0, -4))), if_then_else(True, 0, -3), if_then_else(False, 0, -2))), if_then_else(True, if_then_else(le(if_then_else(False, compare_blocks_rows, compare_blocks_cols), if_then_else(False, -1, -4)), if_then_else(ge(zeros_diff_rows, -2), if_then_else(True, -4, ones_diff_cols), if_then_else(False, 0, zeros_diff_rows)), if_then_else(ge(2, 3), if_then_else(False, 2, -2), if_then_else(False, ones_diff_cols, 2))), 0))), ones_diff_rows), if_then_else(True, ones_diff_cols, compare_blocks_cols)), le(if_then_else(or_(ge(ones_diff_rows, -3), False), -3, 1), if_then_else(False, -4, if_then_else(True, -1, if_then_else(True, zeros_diff_cols, -1)))))
and_(ge(if_then_else(False, zeros_diff_rows, ones_diff_cols), if_then_else(False, if_then_else(False, zeros_diff_cols, 1), if_then_else(and_(or_(True, True), and_(False, False)), if_then_else(le(ones_diff_cols, if_then_else(True, compare_blocks_cols, ones_diff_cols)), if_then_else(le(-1, 3), if_then_else(False, ones_diff_cols, ones_diff_cols), if_then_else(False, compare_blocks_cols, zeros_diff_cols)), if_then_else(True, -3, if_then_else(False, zeros_diff_cols, 3))), if_then_else(and_(False, True), if_then_else(False, compare_blocks_cols, zeros_diff_rows), if_then_else(False, -2, compare_blocks_cols))))), or_(and_(and_(True, True), False), or_(or_(or_(and_(and_(True, True), ge(3, compare_blocks_cols)), and_(le(ones_diff_cols, -3), ge(zeros_diff_rows, 3))), and_(or_(ge(-2, -3), ge(-5, zeros_diff_rows)), le(if_then_else(True, zeros_diff_cols, zeros_diff_rows), if_then_else(True, 4, zeros_diff_cols)))), False)))
VAL TREES:
add(add(add(ones_diff_cols, zeros_diff_cols), add(ones_diff_cols, ones_diff_cols)), add(add(ones_diff_rows, add(mul(add(add(compare_blocks_rows, ones_diff_rows), mul(zeros_diff_cols, zeros_diff_cols)), mul(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, zeros_diff_rows))), add(compare_blocks_cols, compare_blocks_cols))), add(compare_blocks_cols, mul(add(compare_blocks_cols, compare_blocks_cols), mul(compare_blocks_cols, add(add(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(compare_blocks_cols, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_rows), mul(zeros_diff_rows, ones_diff_rows))), add(add(mul(zeros_diff_rows, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_cols)), add(mul(compare_blocks_cols, zeros_diff_cols), mul(compare_blocks_cols, compare_blocks_cols)))))))))
add(mul(mul(zeros_diff_cols, mul(compare_blocks_cols, zeros_diff_cols)), add(mul(add(compare_blocks_cols, zeros_diff_cols), add(ones_diff_rows, zeros_diff_cols)), add(mul(ones_diff_cols, zeros_diff_rows), mul(mul(compare_blocks_cols, zeros_diff_rows), compare_blocks_cols)))), zeros_diff_cols)
mul(add(add(add(mul(zeros_diff_cols, zeros_diff_cols), mul(zeros_diff_rows, compare_blocks_cols)), add(add(compare_blocks_rows, zeros_diff_cols), add(compare_blocks_rows, ones_diff_cols))), add(add(add(compare_blocks_rows, ones_diff_cols), add(compare_blocks_cols, ones_diff_rows)), mul(mul(compare_blocks_cols, compare_blocks_rows), add(compare_blocks_cols, compare_blocks_rows)))), add(zeros_diff_rows, mul(zeros_diff_rows, zeros_diff_rows)))
add(add(add(ones_diff_rows, compare_blocks_cols), add(compare_blocks_rows, compare_blocks_rows)), add(add(zeros_diff_cols, ones_diff_cols), mul(mul(add(mul(add(mul(add(add(zeros_diff_cols, ones_diff_cols), add(ones_diff_cols, compare_blocks_cols)), add(add(ones_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows))), add(add(mul(ones_diff_cols, ones_diff_cols), add(compare_blocks_rows, ones_diff_rows)), mul(add(ones_diff_cols, ones_diff_rows), add(compare_blocks_rows, zeros_diff_rows)))), add(add(mul(add(zeros_diff_cols, ones_diff_rows), add(zeros_diff_cols, ones_diff_rows)), mul(add(compare_blocks_rows, compare_blocks_rows), add(compare_blocks_rows, compare_blocks_cols))), mul(add(mul(zeros_diff_rows, zeros_diff_rows), add(ones_diff_rows, compare_blocks_rows)), add(add(ones_diff_rows, ones_diff_cols), add(zeros_diff_rows, compare_blocks_rows))))), zeros_diff_cols), add(zeros_diff_rows, zeros_diff_rows)), zeros_diff_cols)))
add(mul(compare_blocks_rows, add(ones_diff_cols, ones_diff_cols)), add(mul(mul(compare_blocks_rows, compare_blocks_rows), add(zeros_diff_cols, ones_diff_rows)), add(add(mul(add(mul(add(compare_blocks_cols, compare_blocks_cols), add(zeros_diff_rows, ones_diff_cols)), mul(add(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(mul(add(zeros_diff_cols, ones_diff_cols), add(zeros_diff_rows, ones_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_cols), add(ones_diff_cols, compare_blocks_rows)))), ones_diff_rows), ones_diff_rows)))
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(compare_blocks_cols, compare_blocks_rows)), add(add(add(add(ones_diff_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_cols)), add(ones_diff_rows, ones_diff_cols)), mul(mul(add(compare_blocks_rows, compare_blocks_rows), compare_blocks_cols), add(ones_diff_cols, add(zeros_diff_cols, compare_blocks_rows)))))
COND TREES:
le(if_then_else(le(if_then_else(True, ones_diff_cols, 2), 4), if_then_else(or_(le(if_then_else(ge(ones_diff_cols, compare_blocks_cols), if_then_else(False, compare_blocks_rows, -1), if_then_else(False, compare_blocks_rows, 4)), if_then_else(ge(zeros_diff_cols, 4), if_then_else(True, compare_blocks_cols, -1), if_then_else(False, -3, -1))), and_(or_(ge(-3, 3), and_(True, False)), ge(if_then_else(True, -4, 0), if_then_else(False, 1, compare_blocks_rows)))), if_then_else(le(if_then_else(or_(False, False), if_then_else(False, -1, -3), if_then_else(True, 3, 1)), if_then_else(or_(False, False), if_then_else(True, -5, 2), if_then_else(True, -3, -2))), if_then_else(and_(or_(True, True), or_(False, False)), if_then_else(and_(True, False), if_then_else(False, 4, -3), if_then_else(True, compare_blocks_cols, -4)), if_then_else(le(zeros_diff_cols, ones_diff_rows), if_then_else(True, 3, -2), if_then_else(False, -2, 2))), if_then_else(le(if_then_else(False, ones_diff_cols, ones_diff_rows), if_then_else(True, -2, 0)), if_then_else(le(2, 4), if_then_else(True, 1, compare_blocks_cols), if_then_else(True, -3, -5)), if_then_else(or_(True, True), if_then_else(True, -2, compare_blocks_cols), if_then_else(True, 1, 1)))), if_then_else(and_(or_(ge(zeros_diff_rows, -1), or_(True, True)), ge(if_then_else(False, 4, -5), if_then_else(True, 0, ones_diff_rows))), if_then_else(or_(le(zeros_diff_rows, -3), and_(False, False)), if_then_else(le(3, 2), if_then_else(False, -1, -3), if_then_else(True, 3, zeros_diff_cols)), if_then_else(or_(True, False), if_then_else(True, -4, 2), if_then_else(True, zeros_diff_rows, ones_diff_rows))), if_then_else(le(if_then_else(False, zeros_diff_rows, 0), if_then_else(False, -2, zeros_diff_rows)), if_then_else(or_(True, False), if_then_else(True, 4, ones_diff_cols), if_then_else(True, zeros_diff_rows, zeros_diff_cols)), if_then_else(or_(False, True), if_then_else(True, compare_blocks_cols, compare_blocks_rows), if_then_else(True, zeros_diff_rows, compare_blocks_cols))))), if_then_else(True, ones_diff_cols, 2)), if_then_else(or_(False, False), if_then_else(True, -4, if_then_else(True, 2, 2)), if_then_else(True, 1, 4)))
or_(and_(le(0, 4), ge(zeros_diff_rows, zeros_diff_cols)), and_(ge(0, if_then_else(False, -1, 4)), le(if_then_else(le(if_then_else(and_(le(-3, -1), ge(-2, -5)), if_then_else(ge(-2, 4), if_then_else(False, -4, -1), if_then_else(True, -2, -3)), if_then_else(or_(False, True), if_then_else(True, -5, compare_blocks_cols), if_then_else(True, 2, -5))), if_then_else(True, 3, -5)), compare_blocks_rows, 0), 0)))
or_(le(if_then_else(or_(or_(or_(le(if_then_else(le(compare_blocks_cols, 0), if_then_else(True, zeros_diff_rows, -3), if_then_else(True, compare_blocks_cols, -4)), if_then_else(le(compare_blocks_rows, zeros_diff_cols), if_then_else(False, -5, 1), if_then_else(True, ones_diff_cols, zeros_diff_cols))), ge(if_then_else(ge(ones_diff_rows, -4), if_then_else(False, -1, -3), if_then_else(False, ones_diff_cols, -5)), if_then_else(or_(False, False), if_then_else(False, 1, -3), if_then_else(True, -2, zeros_diff_cols)))), and_(le(if_then_else(ge(compare_blocks_rows, compare_blocks_cols), if_then_else(False, 4, zeros_diff_cols), if_then_else(False, ones_diff_cols, 4)), if_then_else(and_(True, False), if_then_else(True, -2, -5), if_then_else(True, ones_diff_cols, zeros_diff_cols))), le(if_then_else(le(-5, -3), if_then_else(True, compare_blocks_cols, ones_diff_rows), if_then_else(True, 3, ones_diff_cols)), if_then_else(and_(False, False), if_then_else(False, -3, zeros_diff_cols), if_then_else(True, 4, 1))))), True), if_then_else(True, -4, 0), if_then_else(True, -2, zeros_diff_cols)), compare_blocks_rows), le(if_then_else(le(zeros_diff_cols, ones_diff_rows), if_then_else(True, -4, 0), if_then_else(False, -3, -3)), if_then_else(ge(0, ones_diff_rows), compare_blocks_cols, if_then_else(True, 0, -1))))
le(if_then_else(ge(-4, -4), if_then_else(True, if_then_else(and_(True, False), if_then_else(False, -3, 3), 1), if_then_else(True, if_then_else(True, 3, 3), -5)), if_then_else(ge(-4, if_then_else(False, ones_diff_cols, -2)), if_then_else(or_(and_(and_(True, False), and_(True, True)), le(if_then_else(False, -4, 4), if_then_else(True, zeros_diff_rows, zeros_diff_rows))), compare_blocks_rows, if_then_else(False, ones_diff_cols, -2)), -5)), zeros_diff_cols)
ge(if_then_else(and_(False, False), -2, if_then_else(False, zeros_diff_rows, ones_diff_cols)), if_then_else(False, if_then_else(le(if_then_else(ge(-3, -4), if_then_else(False, compare_blocks_rows, -1), if_then_else(False, zeros_diff_rows, ones_diff_rows)), if_then_else(le(1, compare_blocks_rows), if_then_else(True, -2, 3), if_then_else(True, 4, -4))), if_then_else(or_(and_(False, False), or_(True, False)), if_then_else(or_(False, True), if_then_else(False, 1, 4), if_then_else(True, 3, -3)), if_then_else(ge(3, -4), if_then_else(False, -4, 0), if_then_else(False, compare_blocks_cols, -4))), if_then_else(and_(le(3, 2), ge(-5, ones_diff_rows)), if_then_else(le(-3, 4), if_then_else(False, 3, 0), if_then_else(True, -5, 1)), if_then_else(le(4, 1), if_then_else(True, -1, zeros_diff_cols), if_then_else(False, zeros_diff_cols, zeros_diff_cols)))), if_then_else(False, -1, 0)))
VAL TREES:
add(add(add(mul(compare_blocks_cols, zeros_diff_cols), add(ones_diff_rows, zeros_diff_cols)), add(ones_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, compare_blocks_cols)))
add(mul(zeros_diff_rows, zeros_diff_rows), mul(add(ones_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, zeros_diff_cols)))
add(add(add(compare_blocks_cols, zeros_diff_rows), add(add(ones_diff_rows, ones_diff_cols), ones_diff_rows)), mul(add(mul(compare_blocks_rows, compare_blocks_rows), zeros_diff_rows), add(zeros_diff_rows, ones_diff_rows)))
mul(mul(mul(add(add(zeros_diff_rows, compare_blocks_rows), zeros_diff_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(add(ones_diff_rows, zeros_diff_rows), add(ones_diff_rows, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, zeros_diff_cols), add(compare_blocks_rows, compare_blocks_cols)), mul(mul(compare_blocks_cols, ones_diff_cols), add(compare_blocks_cols, zeros_diff_rows))))
mul(mul(mul(mul(compare_blocks_cols, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), mul(mul(compare_blocks_rows, compare_blocks_rows), add(zeros_diff_cols, ones_diff_rows))), add(mul(add(ones_diff_rows, compare_blocks_cols), mul(compare_blocks_cols, zeros_diff_cols)), mul(add(ones_diff_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_cols))))
mul(mul(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, ones_diff_rows)), add(add(zeros_diff_rows, zeros_diff_cols), add(ones_diff_cols, compare_blocks_cols)))
COND TREES:
or_(or_(and_(False, False), and_(True, False)), le(if_then_else(False, if_then_else(and_(ge(if_then_else(or_(True, True), if_then_else(False, 2, zeros_diff_cols), if_then_else(True, -5, 2)), if_then_else(ge(2, -2), if_then_else(False, ones_diff_rows, ones_diff_cols), if_then_else(True, zeros_diff_rows, 1))), and_(le(if_then_else(False, -3, 0), if_then_else(False, compare_blocks_cols, ones_diff_rows)), or_(ge(zeros_diff_cols, -2), le(-3, 3)))), if_then_else(ge(if_then_else(and_(True, False), if_then_else(False, 0, -3), if_then_else(False, 3, -4)), if_then_else(or_(True, True), if_then_else(False, 0, -3), if_then_else(True, -1, 4))), if_then_else(ge(if_then_else(True, 0, -3), if_then_else(True, compare_blocks_cols, -3)), if_then_else(ge(-1, 4), if_then_else(False, -1, 0), if_then_else(False, 2, 0)), if_then_else(or_(False, False), if_then_else(True, 4, zeros_diff_cols), if_then_else(True, zeros_diff_rows, ones_diff_rows))), if_then_else(and_(and_(True, True), ge(4, ones_diff_cols)), if_then_else(ge(ones_diff_cols, 4), if_then_else(True, -1, -1), if_then_else(True, 2, 2)), if_then_else(ge(zeros_diff_cols, ones_diff_rows), if_then_else(True, zeros_diff_cols, 3), if_then_else(True, ones_diff_cols, -3)))), if_then_else(and_(le(if_then_else(False, ones_diff_rows, 1), if_then_else(True, -5, -1)), ge(if_then_else(False, ones_diff_rows, -4), if_then_else(True, compare_blocks_cols, 4))), if_then_else(ge(if_then_else(False, compare_blocks_cols, zeros_diff_rows), if_then_else(False, 0, -2)), if_then_else(le(-2, compare_blocks_cols), if_then_else(False, zeros_diff_rows, compare_blocks_rows), if_then_else(True, 3, ones_diff_rows)), if_then_else(or_(False, True), if_then_else(False, zeros_diff_rows, -3), if_then_else(False, 2, zeros_diff_cols))), if_then_else(ge(if_then_else(False, -3, ones_diff_rows), if_then_else(False, -2, ones_diff_rows)), if_then_else(le(3, ones_diff_cols), if_then_else(True, 4, 3), if_then_else(True, 0, -5)), if_then_else(le(1, ones_diff_rows), if_then_else(False, -3, 2), if_then_else(False, ones_diff_rows, -4))))), 3), if_then_else(True, zeros_diff_cols, compare_blocks_cols)))
le(if_then_else(or_(True, or_(False, False)), if_then_else(False, -2, -3), if_then_else(True, compare_blocks_rows, if_then_else(True, zeros_diff_rows, 0))), if_then_else(le(-3, if_then_else(True, 3, -5)), if_then_else(True, zeros_diff_rows, -1), if_then_else(or_(False, True), 0, if_then_else(ge(if_then_else(False, 1, -1), if_then_else(and_(True, True), 3, 2)), if_then_else(le(2, zeros_diff_cols), if_then_else(and_(True, False), zeros_diff_rows, if_then_else(True, 0, -2)), if_then_else(True, compare_blocks_cols, -3)), if_then_else(and_(False, ge(zeros_diff_rows, ones_diff_rows)), if_then_else(True, -3, ones_diff_rows), if_then_else(True, -4, 2))))))
le(if_then_else(ge(if_then_else(False, if_then_else(True, 0, -3), 2), zeros_diff_cols), if_then_else(False, if_then_else(True, ones_diff_cols, 0), -5), if_then_else(and_(False, or_(True, ge(if_then_else(and_(ge(compare_blocks_cols, 1), False), if_then_else(False, zeros_diff_cols, if_then_else(True, 3, 4)), if_then_else(True, zeros_diff_cols, -4)), if_then_else(or_(True, ge(0, -5)), if_then_else(and_(False, True), 4, 1), if_then_else(False, if_then_else(False, ones_diff_cols, -5), compare_blocks_cols))))), 1, if_then_else(ge(2, zeros_diff_cols), ones_diff_cols, if_then_else(True, -3, compare_blocks_cols)))), if_then_else(or_(ge(compare_blocks_cols, -5), le(-3, zeros_diff_cols)), if_then_else(True, 0, 2), if_then_else(False, if_then_else(False, 2, if_then_else(False, -4, 3)), if_then_else(le(-3, -2), if_then_else(False, 1, 4), 4))))
and_(ge(if_then_else(True, if_then_else(ge(if_then_else(True, 0, ones_diff_cols), if_then_else(False, zeros_diff_cols, -2)), if_then_else(ge(compare_blocks_cols, zeros_diff_cols), if_then_else(False, 1, ones_diff_rows), if_then_else(True, zeros_diff_rows, -3)), if_then_else(ge(-2, compare_blocks_rows), if_then_else(True, -2, zeros_diff_cols), if_then_else(True, -4, 0))), ones_diff_rows), if_then_else(True, ones_diff_cols, compare_blocks_cols)), le(if_then_else(or_(ge(ones_diff_rows, -3), False), -3, 1), if_then_else(False, -4, if_then_else(True, -1, if_then_else(True, zeros_diff_cols, -1)))))
and_(ge(if_then_else(False, zeros_diff_rows, ones_diff_cols), if_then_else(False, if_then_else(False, zeros_diff_cols, 1), if_then_else(and_(or_(True, True), and_(False, False)), if_then_else(le(ones_diff_cols, if_then_else(True, compare_blocks_cols, ones_diff_cols)), if_then_else(le(-1, 3), if_then_else(False, ones_diff_cols, ones_diff_cols), -2), if_then_else(True, -3, if_then_else(False, zeros_diff_cols, 3))), if_then_else(and_(False, True), if_then_else(False, compare_blocks_cols, zeros_diff_rows), if_then_else(False, -2, compare_blocks_cols))))), or_(and_(and_(True, True), False), or_(False, False)))
VAL TREES:
add(add(add(ones_diff_cols, zeros_diff_cols), add(zeros_diff_rows, ones_diff_cols)), add(add(ones_diff_rows, add(mul(add(add(compare_blocks_rows, ones_diff_rows), mul(zeros_diff_cols, zeros_diff_cols)), compare_blocks_cols), add(compare_blocks_cols, compare_blocks_cols))), add(compare_blocks_cols, mul(add(compare_blocks_cols, compare_blocks_cols), mul(compare_blocks_cols, compare_blocks_cols)))))
add(mul(mul(zeros_diff_cols, mul(compare_blocks_cols, zeros_diff_rows)), mul(zeros_diff_rows, compare_blocks_cols)), mul(compare_blocks_cols, zeros_diff_cols))
mul(compare_blocks_rows, compare_blocks_cols)
add(add(add(mul(mul(add(compare_blocks_rows, zeros_diff_cols), add(zeros_diff_rows, mul(add(ones_diff_rows, zeros_diff_rows), add(ones_diff_rows, zeros_diff_cols)))), mul(add(ones_diff_rows, zeros_diff_rows), add(ones_diff_rows, zeros_diff_cols))), compare_blocks_cols), add(compare_blocks_rows, compare_blocks_rows)), add(add(zeros_diff_cols, ones_diff_cols), mul(mul(add(compare_blocks_rows, zeros_diff_cols), add(zeros_diff_rows, zeros_diff_rows)), zeros_diff_cols)))
add(mul(compare_blocks_rows, add(ones_diff_cols, ones_diff_cols)), add(mul(add(compare_blocks_rows, zeros_diff_rows), add(zeros_diff_cols, ones_diff_rows)), add(add(add(compare_blocks_cols, compare_blocks_cols), ones_diff_rows), ones_diff_cols)))
mul(compare_blocks_cols, zeros_diff_rows)
COND TREES:
or_(ge(if_then_else(ge(2, zeros_diff_cols), if_then_else(False, 2, zeros_diff_cols), if_then_else(False, 2, -5)), if_then_else(and_(False, True), if_then_else(True, 0, compare_blocks_rows), if_then_else(True, -3, -4))), le(if_then_else(False, if_then_else(or_(or_(ge(-3, zeros_diff_cols), or_(False, True)), or_(and_(False, True), and_(False, True))), if_then_else(or_(and_(True, True), ge(3, -3)), if_then_else(le(-4, 3), if_then_else(True, 4, -2), if_then_else(True, 3, -3)), if_then_else(or_(True, False), if_then_else(True, 1, compare_blocks_rows), if_then_else(False, zeros_diff_rows, -4))), if_then_else(ge(if_then_else(False, 4, 4), if_then_else(True, ones_diff_cols, -3)), if_then_else(le(ones_diff_cols, zeros_diff_rows), if_then_else(False, 0, -3), if_then_else(False, zeros_diff_rows, -3)), if_then_else(and_(False, True), if_then_else(True, compare_blocks_cols, ones_diff_rows), if_then_else(True, zeros_diff_rows, zeros_diff_rows)))), if_then_else(True, zeros_diff_cols, ones_diff_cols)), if_then_else(and_(False, True), if_then_else(True, 4, 2), if_then_else(True, ones_diff_cols, 1))))
and_(ge(if_then_else(False, if_then_else(False, compare_blocks_cols, -5), if_then_else(True, 1, 0)), if_then_else(le(compare_blocks_rows, -4), if_then_else(False, -1, 0), if_then_else(True, compare_blocks_cols, ones_diff_rows))), ge(if_then_else(or_(ge(if_then_else(le(zeros_diff_rows, compare_blocks_rows), if_then_else(False, compare_blocks_cols, 3), if_then_else(or_(False, False), 4, 4)), if_then_else(le(-4, if_then_else(False, zeros_diff_cols, compare_blocks_cols)), if_then_else(False, compare_blocks_cols, -2), if_then_else(True, 4, 2))), False), if_then_else(False, -3, 0), if_then_else(False, ones_diff_cols, -1)), if_then_else(ge(0, -4), if_then_else(False, zeros_diff_cols, ones_diff_rows), if_then_else(True, 1, 0))))
and_(ge(if_then_else(or_(or_(True, False), ge(compare_blocks_rows, 0)), if_then_else(or_(False, False), if_then_else(True, zeros_diff_rows, 3), if_then_else(True, ones_diff_rows, -5)), if_then_else(ge(ones_diff_cols, ones_diff_cols), if_then_else(False, compare_blocks_rows, 3), if_then_else(False, compare_blocks_rows, 3))), if_then_else(True, 2, 0)), and_(le(0, ones_diff_rows), or_(False, True)))
ge(if_then_else(le(2, 3), if_then_else(True, compare_blocks_cols, if_then_else(and_(le(compare_blocks_rows, 0), ge(if_then_else(False, zeros_diff_cols, compare_blocks_cols), if_then_else(True, ones_diff_rows, -4))), if_then_else(and_(True, or_(ge(ones_diff_cols, -1), True)), if_then_else(True, -1, -4), if_then_else(False, if_then_else(True, if_then_else(False, -4, -2), if_then_else(False, zeros_diff_rows, -5)), if_then_else(False, 3, 2))), if_then_else(ge(compare_blocks_cols, ones_diff_rows), if_then_else(False, -4, -4), if_then_else(True, zeros_diff_cols, compare_blocks_cols)))), if_then_else(False, 0, 2)), if_then_else(or_(False, False), compare_blocks_cols, if_then_else(True, -2, compare_blocks_rows)))
and_(and_(ge(zeros_diff_rows, compare_blocks_cols), or_(True, True)), and_(ge(-1, 4), and_(False, False)))
VAL TREES:
add(mul(ones_diff_rows, compare_blocks_cols), add(mul(ones_diff_rows, zeros_diff_cols), add(compare_blocks_cols, ones_diff_rows)))
add(mul(zeros_diff_cols, zeros_diff_rows), mul(add(compare_blocks_cols, zeros_diff_cols), mul(compare_blocks_cols, compare_blocks_cols)))
add(mul(mul(add(mul(compare_blocks_cols, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)), mul(add(compare_blocks_rows, ones_diff_rows), mul(ones_diff_cols, zeros_diff_cols))), zeros_diff_rows), add(mul(add(add(compare_blocks_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows)), mul(add(compare_blocks_cols, compare_blocks_cols), mul(compare_blocks_cols, ones_diff_cols))), mul(add(mul(ones_diff_rows, ones_diff_cols), add(ones_diff_rows, ones_diff_rows)), mul(add(compare_blocks_cols, ones_diff_rows), add(compare_blocks_rows, zeros_diff_rows)))))
add(add(mul(zeros_diff_cols, compare_blocks_cols), compare_blocks_rows), mul(mul(zeros_diff_rows, zeros_diff_rows), add(add(compare_blocks_cols, ones_diff_cols), zeros_diff_cols)))
mul(mul(add(mul(zeros_diff_rows, compare_blocks_cols), compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols)), mul(compare_blocks_cols, add(zeros_diff_cols, compare_blocks_rows)))
mul(mul(mul(add(add(compare_blocks_cols, zeros_diff_rows), zeros_diff_cols), mul(ones_diff_cols, zeros_diff_cols)), add(add(compare_blocks_cols, ones_diff_cols), add(ones_diff_cols, ones_diff_cols))), add(mul(mul(ones_diff_rows, zeros_diff_rows), add(ones_diff_cols, zeros_diff_rows)), add(add(ones_diff_rows, compare_blocks_cols), mul(zeros_diff_rows, zeros_diff_cols))))
COND TREES:
le(if_then_else(le(1, 4), if_then_else(False, -3, compare_blocks_cols), if_then_else(True, ones_diff_cols, 4)), if_then_else(or_(False, False), if_then_else(True, -4, ones_diff_rows), if_then_else(True, 1, 4)))
or_(and_(le(0, 4), ge(zeros_diff_rows, zeros_diff_cols)), and_(ge(zeros_diff_rows, if_then_else(False, -1, -4)), False))
or_(le(if_then_else(or_(False, True), if_then_else(True, 0, 0), if_then_else(True, -2, 2)), if_then_else(le(-4, -1), if_then_else(True, -1, -4), if_then_else(True, -2, -3))), le(if_then_else(le(zeros_diff_cols, ones_diff_rows), if_then_else(True, -4, 0), if_then_else(False, -3, -3)), if_then_else(ge(0, ones_diff_rows), if_then_else(True, compare_blocks_rows, zeros_diff_cols), if_then_else(True, 0, -1))))
le(if_then_else(ge(-4, -4), if_then_else(True, if_then_else(and_(False, False), if_then_else(False, -3, 3), 1), if_then_else(True, if_then_else(True, 3, 3), -5)), if_then_else(ge(-4, -4), if_then_else(True, if_then_else(and_(False, False), if_then_else(False, -3, 3), 1), if_then_else(True, if_then_else(True, 3, 3), -5)), if_then_else(True, if_then_else(True, compare_blocks_rows, if_then_else(False, ones_diff_cols, -2)), -5))), if_then_else(and_(False, and_(le(-4, 4), ge(0, -4))), if_then_else(True, 0, -3), if_then_else(False, 0, -2)))
ge(if_then_else(and_(False, False), if_then_else(False, compare_blocks_cols, zeros_diff_cols), if_then_else(False, zeros_diff_rows, ones_diff_cols)), if_then_else(and_(False, False), if_then_else(True, ones_diff_cols, compare_blocks_cols), if_then_else(False, ones_diff_cols, 0)))
VAL TREES:
add(add(mul(compare_blocks_rows, ones_diff_cols), add(ones_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, compare_blocks_cols)))
add(add(add(zeros_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_rows)), mul(add(ones_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, zeros_diff_cols)))
add(add(add(compare_blocks_cols, zeros_diff_rows), add(add(ones_diff_rows, zeros_diff_cols), ones_diff_rows)), mul(add(mul(compare_blocks_rows, compare_blocks_rows), zeros_diff_rows), add(zeros_diff_rows, ones_diff_rows)))
mul(mul(mul(add(compare_blocks_rows, zeros_diff_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(add(ones_diff_rows, zeros_diff_rows), add(ones_diff_rows, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, zeros_diff_cols), add(compare_blocks_rows, compare_blocks_cols)), mul(mul(compare_blocks_cols, ones_diff_cols), add(compare_blocks_cols, zeros_diff_rows))))
mul(mul(mul(mul(compare_blocks_cols, ones_diff_cols), mul(ones_diff_rows, zeros_diff_rows)), mul(mul(compare_blocks_rows, compare_blocks_rows), add(zeros_diff_cols, ones_diff_rows))), add(mul(add(ones_diff_rows, compare_blocks_cols), mul(compare_blocks_cols, zeros_diff_cols)), mul(add(ones_diff_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_cols))))
mul(mul(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, ones_diff_rows)), add(add(ones_diff_rows, zeros_diff_cols), add(ones_diff_cols, compare_blocks_cols)))
COND TREES:
le(if_then_else(le(1, 4), if_then_else(False, -3, compare_blocks_cols), if_then_else(True, ones_diff_cols, 2)), if_then_else(or_(False, False), if_then_else(True, -4, ones_diff_rows), if_then_else(True, 1, 2)))
or_(and_(le(0, 4), ge(zeros_diff_rows, zeros_diff_cols)), and_(ge(zeros_diff_rows, if_then_else(le(if_then_else(True, compare_blocks_rows, ones_diff_rows), 0), -1, -4)), le(if_then_else(True, compare_blocks_rows, ones_diff_rows), 0)))
or_(le(if_then_else(or_(False, True), if_then_else(True, -4, 0), if_then_else(True, -2, 2)), if_then_else(le(-4, -1), if_then_else(True, -1, -4), if_then_else(True, -2, -3))), le(if_then_else(le(zeros_diff_cols, ones_diff_rows), if_then_else(True, -4, -4), if_then_else(False, -3, -3)), if_then_else(ge(0, ones_diff_rows), if_then_else(True, compare_blocks_rows, zeros_diff_cols), if_then_else(True, 0, -1))))
le(if_then_else(True, if_then_else(True, compare_blocks_rows, if_then_else(False, ones_diff_cols, -2)), -5), if_then_else(and_(False, and_(le(-4, 4), ge(0, -4))), if_then_else(True, 0, -3), if_then_else(False, 0, -2)))
ge(if_then_else(and_(False, False), if_then_else(False, compare_blocks_cols, zeros_diff_cols), if_then_else(False, zeros_diff_rows, -1)), if_then_else(and_(False, False), if_then_else(True, ones_diff_cols, compare_blocks_cols), if_then_else(False, -1, 0)))
VAL TREES:
add(add(mul(compare_blocks_rows, ones_diff_cols), add(ones_diff_rows, zeros_diff_rows)), add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, compare_blocks_cols)))
add(add(add(zeros_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_rows)), mul(add(ones_diff_rows, zeros_diff_rows), mul(compare_blocks_cols, zeros_diff_cols)))
add(add(add(compare_blocks_cols, zeros_diff_rows), add(add(ones_diff_rows, zeros_diff_cols), ones_diff_rows)), mul(add(mul(compare_blocks_rows, compare_blocks_rows), zeros_diff_rows), add(zeros_diff_rows, ones_diff_rows)))
mul(mul(mul(add(compare_blocks_rows, zeros_diff_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(add(ones_diff_rows, zeros_diff_rows), add(ones_diff_rows, zeros_diff_cols))), mul(add(mul(zeros_diff_cols, zeros_diff_cols), add(compare_blocks_rows, compare_blocks_cols)), mul(mul(compare_blocks_cols, ones_diff_cols), add(compare_blocks_cols, zeros_diff_rows))))
mul(mul(mul(mul(compare_blocks_cols, ones_diff_cols), mul(ones_diff_rows, zeros_diff_rows)), mul(mul(compare_blocks_rows, compare_blocks_rows), add(zeros_diff_cols, ones_diff_rows))), add(mul(add(ones_diff_rows, compare_blocks_cols), mul(compare_blocks_cols, zeros_diff_cols)), mul(add(ones_diff_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_cols))))
mul(mul(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, ones_diff_rows)), add(add(ones_diff_rows, zeros_diff_cols), add(ones_diff_cols, compare_blocks_cols)))


INFO:root:hof: COND TREES:
or_(or_(and_(False, False), and_(True, False)), le(if_then_else(False, 2, 3), if_then_else(True, zeros_diff_cols, compare_blocks_cols)))
le(if_then_else(or_(True, or_(False, False)), if_then_else(False, -2, -3), if_then_else(True, compare_blocks_rows, if_then_else(True, zeros_diff_rows, 0))), if_then_else(le(-3, if_then_else(True, 3, -5)), if_then_else(True, zeros_diff_rows, -1), if_then_else(or_(False, True), 0, if_then_else(True, -4, 2))))
le(if_then_else(ge(if_then_else(False, if_then_else(True, 0, -3), 2), zeros_diff_cols), if_then_else(False, if_then_else(True, ones_diff_cols, 0), -5), if_then_else(and_(False, or_(True, False)), 1, if_then_else(ge(2, zeros_diff_cols), ones_diff_cols, if_then_else(True, -3, compare_blocks_cols)))), if_then_else(or_(ge(compare_blocks_cols, -5), le(-3, zeros_diff_cols)), if_then_else(True, 0, 2), if_then_else(False, if_then_else(False, 2, if_then_else(False, -4, 3)), if_then_else(le(-3, -2), if_then_else(False, 1, 4), 4))))
and_(ge(if_then_else(True, 0, ones_diff_rows), if_then_else(True, ones_diff_cols, compare_blocks_cols)), le(if_then_else(or_(ge(ones_diff_rows, -3), False), -3, 1), if_then_else(False, -4, if_then_else(True, -1, if_then_else(True, zeros_diff_cols, -1)))))
and_(ge(if_then_else(False, zeros_diff_rows, ones_diff_cols), if_then_else(False, if_then_else(False, zeros_diff_cols, 1), -4)), or_(and_(and_(True, True), False), or_(False, False)))
VAL TREES:
add(add(mul(ones_diff_rows, zeros_diff_cols), add(ones_diff_cols, ones_diff_cols)), add(add(ones_diff_rows, compare_blocks_rows), add(compare_blocks_cols, compare_blocks_rows)))
add(mul(mul(zeros_diff_cols, zeros_diff_rows), mul(zeros_diff_rows, compare_blocks_cols)), add(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)))
mul(mul(mul(compare_blocks_rows, zeros_diff_cols), mul(ones_diff_rows, compare_blocks_cols)), add(add(zeros_diff_rows, zeros_diff_cols), mul(ones_diff_rows, zeros_diff_rows)))
add(add(add(ones_diff_cols, compare_blocks_cols), add(compare_blocks_rows, compare_blocks_rows)), add(add(zeros_diff_rows, ones_diff_cols), mul(zeros_diff_rows, zeros_diff_cols)))
add(mul(add(ones_diff_cols, zeros_diff_rows), add(ones_diff_cols, ones_diff_cols)), add(mul(compare_blocks_rows, ones_diff_cols), add(add(add(compare_blocks_cols, compare_blocks_cols), ones_diff_rows), ones_diff_rows)))
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(zeros_diff_rows, compare_blocks_rows)), mul(mul(add(compare_blocks_rows, compare_blocks_rows), compare_blocks_cols), add(add(mul(compare_blocks_rows, compare_blocks_cols), compare_blocks_cols), ones_diff_rows)))


INFO:root:stats: {'fitness': <deap.tools.support.Statistics object at 0x0000023DD0F90EB8>, 'size': <deap.tools.support.Statistics object at 0x0000023DD0F90EF0>}

