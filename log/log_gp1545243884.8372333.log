INFO:root:

*******STARTING!!!******


INFO:root:

*******Configuration******


INFO:root:# NUM_ROWS = 20


INFO:root:NUM_ROWS = 5


INFO:root:# NUM_COLS = 20


INFO:root:NUM_COLS = 5


INFO:root:empty_in_split = '\xa0'


INFO:root:


INFO:root:pickle_unsolved_file_path = 'data/%dx%d_nonograms.pkl' % (NUM_ROWS, NUM_COLS)


INFO:root:pickle_solved_file_path = 'data/%dx%d_nonograms_solved.pkl' % (NUM_ROWS, NUM_COLS)


INFO:root:should_run_in_parallel = True


INFO:root:


INFO:root:NUM_COND_TREES = 5


INFO:root:NUM_VAL_TREES = NUM_COND_TREES + 1


INFO:root:prob_crossover_global = 0.6  # global probability for cx


INFO:root:prob_crossover_individual_cond = 0.8  # probability to cx a specific cond tree in an individual


INFO:root:prob_crossover_individual_val = 0.8  # probability to cx a specific cond tree in an individual


INFO:root:prob_mutate_global = 0.4


INFO:root:prob_mutate_individual_cond = 1


INFO:root:prob_mutate_individual_val = 1


INFO:root:


INFO:root:points_correct_box = 5


INFO:root:points_incorrect_box = 0


INFO:root:# points_incorrect_box = -2


INFO:root:pop_size = 100


INFO:root:hof_size = 1


INFO:root:# num_gen = 40


INFO:root:num_gen = 10


INFO:root:train_size = 3


INFO:root:

*******DONE!!!******


INFO:root:run time: 79 sec

INFO:root:max possible fitness for the nonograms ran: 70

INFO:root:log:    	      	              fitness              	              size              
   	      	-----------------------------------	--------------------------------
gen	nevals	avg    	max    	min    	std        	avg 	max	min	std     
0  	100   	41.6667	41.6667	41.6667	7.10543e-15	7.35	9  	6  	0.622495
1  	71    	41.5833	51.6667	28.3333	4.02337    	7.57	9  	6  	0.667158
2  	75    	43.0333	55     	28.3333	4.87271    	7.61	10 	6  	0.835404
3  	77    	44.0167	55     	28.3333	5.87412    	7.71	10 	6  	0.851998
4  	84    	44.0833	55     	28.3333	5.94594    	7.89	10 	6  	0.926229
5  	70    	45.9333	55     	33.3333	5.77504    	7.92	10 	6  	0.832827
6  	80    	45.7333	55     	36.6667	6.02919    	8.13	11 	6  	0.976268
7  	72    	47.0333	55     	33.3333	6.50034    	8.3 	10 	6  	0.932738
8  	74    	47.75  	55     	20     	7.40261    	8.29	10 	6  	0.962237
9  	75    	49.25  	55     	33.3333	6.59703    	8.4 	11 	6  	0.905539
10 	77    	49.3167	55     	28.3333	6.84793    	8.31	11 	6  	0.902164

INFO:root:pop: COND TREES:
ge(_if_then_else(and_(or_(True, False), or_(True, False)), _if_then_else(or_(False, True), _if_then_else(False, max_col_clue, 0), _if_then_else(True, ones_diff_rows, ones_diff_cols)), _if_then_else(le(max_col_clue, ones_diff_rows), _if_then_else(False, 2, 2), _if_then_else(False, ones_diff_cols, compare_blocks_cols))), _if_then_else(ge(_if_then_else(True, max_col_clue, compare_blocks_cols), _if_then_else(le(_if_then_else(True, max_col_clue, max_row_clue), _if_then_else(or_(True, True), compare_blocks_cols, 4)), max_row_clue, 1)), _if_then_else(and_(False, False), _if_then_else(False, zeros_diff_cols, compare_blocks_rows), _if_then_else(True, compare_blocks_rows, max_col_clue)), _if_then_else(and_(le(1, max_col_clue), and_(False, False)), _if_then_else(True, 1, 4), _if_then_else(True, ones_diff_rows, ones_diff_cols))))
le(_if_then_else(le(zeros_diff_rows, 0), _if_then_else(le(max_row_clue, max_col_clue), zeros_diff_rows, zeros_diff_cols), _if_then_else(False, ones_diff_rows, max_row_clue)), _if_then_else(False, ones_diff_cols, _if_then_else(True, _if_then_else(False, 3, ones_diff_rows), max_row_clue)))
or_(and_(le(_if_then_else(True, ones_diff_rows, 4), zeros_diff_rows), or_(and_(and_(True, False), ge(2, 2)), or_(ge(compare_blocks_rows, 0), and_(False, True)))), or_(and_(True, False), le(3, ones_diff_cols)))
le(_if_then_else(le(_if_then_else(ge(max_col_clue, 0), _if_then_else(False, zeros_diff_rows, compare_blocks_cols), _if_then_else(False, 0, max_row_clue)), _if_then_else(ge(3, 3), _if_then_else(True, ones_diff_rows, 2), _if_then_else(True, 1, ones_diff_cols))), _if_then_else(or_(and_(True, False), or_(True, False)), _if_then_else(ge(zeros_diff_cols, compare_blocks_rows), _if_then_else(False, 3, compare_blocks_rows), _if_then_else(False, zeros_diff_rows, 1)), _if_then_else(True, compare_blocks_cols, 4)), _if_then_else(le(_if_then_else(False, ones_diff_cols, 0), _if_then_else(False, compare_blocks_rows, ones_diff_cols)), _if_then_else(ge(compare_blocks_cols, max_row_clue), _if_then_else(ge(3, 3), ones_diff_cols, ones_diff_rows), _if_then_else(False, 1, 2)), _if_then_else(ge(3, zeros_diff_rows), _if_then_else(False, 0, compare_blocks_rows), _if_then_else(False, max_col_clue, ones_diff_rows)))), _if_then_else(le(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, max_col_clue, compare_blocks_cols)), _if_then_else(False, _if_then_else(ge(2, 3), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(False, 4, ones_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, 0), _if_then_else(True, ones_diff_cols, 0))), _if_then_else(le(_if_then_else(False, ones_diff_rows, 0), _if_then_else(True, 3, ones_diff_cols)), _if_then_else(le(0, compare_blocks_rows), _if_then_else(True, 0, 0), _if_then_else(False, zeros_diff_rows, compare_blocks_cols)), _if_then_else(le(max_row_clue, 3), _if_then_else(False, max_row_clue, zeros_diff_rows), _if_then_else(False, compare_blocks_rows, zeros_diff_cols)))))
ge(_if_then_else(and_(True, True), _if_then_else(True, 0, 0), compare_blocks_rows), _if_then_else(True, _if_then_else(True, 2, ones_diff_cols), _if_then_else(False, 4, max_row_clue)))
VAL TREES:
mul(zeros_diff_rows, compare_blocks_rows)
add(add(add(add(ones_diff_rows, compare_blocks_cols), compare_blocks_rows), add(add(ones_diff_cols, compare_blocks_rows), compare_blocks_rows)), mul(mul(compare_blocks_rows, ones_diff_cols), mul(ones_diff_rows, compare_blocks_cols)))
mul(add(zeros_diff_cols, mul(ones_diff_cols, compare_blocks_cols)), add(mul(mul(zeros_diff_rows, zeros_diff_rows), ones_diff_rows), add(zeros_diff_cols, compare_blocks_cols)))
mul(add(add(ones_diff_cols, compare_blocks_rows), ones_diff_rows), add(add(compare_blocks_rows, ones_diff_cols), add(zeros_diff_rows, mul(compare_blocks_cols, ones_diff_rows))))
add(add(ones_diff_cols, zeros_diff_rows), mul(zeros_diff_cols, zeros_diff_rows))
add(mul(add(compare_blocks_cols, ones_diff_cols), mul(zeros_diff_rows, zeros_diff_rows)), mul(mul(compare_blocks_rows, ones_diff_cols), mul(mul(compare_blocks_cols, compare_blocks_rows), add(ones_diff_rows, compare_blocks_cols))))
COND TREES:
ge(_if_then_else(and_(or_(True, False), or_(True, True)), _if_then_else(or_(False, True), _if_then_else(False, max_col_clue, 0), _if_then_else(True, ones_diff_rows, ones_diff_cols)), _if_then_else(le(max_col_clue, ones_diff_rows), _if_then_else(or_(False, True), _if_then_else(le(1, max_col_clue), compare_blocks_rows, compare_blocks_cols), _if_then_else(True, ones_diff_cols, max_row_clue)), _if_then_else(False, ones_diff_cols, compare_blocks_cols))), _if_then_else(ge(_if_then_else(False, max_col_clue, compare_blocks_cols), _if_then_else(le(_if_then_else(True, max_col_clue, max_row_clue), _if_then_else(or_(True, True), compare_blocks_cols, 4)), max_row_clue, 1)), _if_then_else(and_(True, False), _if_then_else(False, zeros_diff_cols, compare_blocks_rows), _if_then_else(True, compare_blocks_rows, max_col_clue)), _if_then_else(ge(max_col_clue, zeros_diff_cols), _if_then_else(True, 1, 4), _if_then_else(True, compare_blocks_cols, max_row_clue))))
le(_if_then_else(le(zeros_diff_rows, 0), _if_then_else(or_(False, True), zeros_diff_rows, zeros_diff_cols), _if_then_else(True, max_col_clue, 4)), _if_then_else(and_(False, True), _if_then_else(ge(_if_then_else(True, zeros_diff_rows, zeros_diff_rows), _if_then_else(True, zeros_diff_rows, zeros_diff_rows)), compare_blocks_cols, max_row_clue), _if_then_else(True, _if_then_else(False, 3, ones_diff_rows), max_row_clue)))
or_(and_(and_(le(_if_then_else(False, max_col_clue, 0), _if_then_else(False, 0, 3)), or_(le(zeros_diff_rows, 3), and_(True, False))), or_(and_(and_(True, False), ge(2, 2)), or_(ge(compare_blocks_rows, 0), and_(False, True)))), ge(_if_then_else(ge(_if_then_else(True, 0, 3), _if_then_else(False, max_col_clue, ones_diff_rows)), _if_then_else(and_(True, False), _if_then_else(False, 3, ones_diff_cols), _if_then_else(False, 4, 4)), _if_then_else(le(max_col_clue, zeros_diff_rows), _if_then_else(False, 4, max_row_clue), _if_then_else(True, 2, 3))), _if_then_else(ge(_if_then_else(ge(_if_then_else(True, 0, 3), _if_then_else(False, max_col_clue, ones_diff_rows)), _if_then_else(and_(True, False), _if_then_else(False, 3, ones_diff_cols), _if_then_else(False, 4, 4)), _if_then_else(le(max_col_clue, zeros_diff_rows), _if_then_else(False, 4, max_row_clue), _if_then_else(True, 4, 3))), _if_then_else(or_(and_(True, False), le(3, ones_diff_cols)), _if_then_else(le(4, ones_diff_cols), _if_then_else(le(_if_then_else(True, ones_diff_rows, 4), zeros_diff_rows), ones_diff_rows, 4), _if_then_else(True, 0, ones_diff_rows)), _if_then_else(or_(True, True), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(True, ones_diff_rows, ones_diff_cols)))), _if_then_else(le(compare_blocks_rows, ones_diff_cols), _if_then_else(False, ones_diff_rows, 4), _if_then_else(True, 0, ones_diff_rows)), _if_then_else(or_(True, False), zeros_diff_rows, _if_then_else(True, 1, zeros_diff_cols)))))
le(_if_then_else(le(_if_then_else(ge(max_col_clue, 0), _if_then_else(True, zeros_diff_rows, compare_blocks_cols), _if_then_else(False, 0, max_row_clue)), _if_then_else(True, _if_then_else(True, ones_diff_rows, 2), _if_then_else(True, 1, ones_diff_cols))), _if_then_else(or_(and_(True, False), or_(True, False)), _if_then_else(ge(zeros_diff_cols, compare_blocks_rows), _if_then_else(False, 3, compare_blocks_rows), _if_then_else(False, zeros_diff_rows, 1)), _if_then_else(or_(False, False), _if_then_else(True, 1, compare_blocks_cols), _if_then_else(True, ones_diff_cols, ones_diff_cols))), _if_then_else(or_(True, True), _if_then_else(True, 2, max_col_clue), _if_then_else(False, zeros_diff_rows, compare_blocks_rows))), _if_then_else(or_(le(_if_then_else(True, compare_blocks_cols, compare_blocks_cols), _if_then_else(False, 3, compare_blocks_rows)), ge(_if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(True, 0, compare_blocks_rows))), _if_then_else(and_(le(max_row_clue, zeros_diff_rows), le(max_col_clue, 4)), _if_then_else(ge(2, 3), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(False, 4, ones_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, 0), _if_then_else(True, ones_diff_cols, 0))), _if_then_else(le(_if_then_else(False, ones_diff_rows, 0), _if_then_else(True, 3, ones_diff_cols)), _if_then_else(le(0, compare_blocks_rows), _if_then_else(True, 0, 0), _if_then_else(False, zeros_diff_rows, compare_blocks_cols)), _if_then_else(le(max_row_clue, 3), _if_then_else(False, max_row_clue, zeros_diff_rows), _if_then_else(True, zeros_diff_cols, _if_then_else(True, compare_blocks_cols, ones_diff_rows))))))
ge(_if_then_else(or_(False, True), _if_then_else(False, 4, max_row_clue), _if_then_else(False, 4, max_col_clue)), _if_then_else(or_(True, True), _if_then_else(False, compare_blocks_cols, 0), _if_then_else(False, max_row_clue, 2)))
VAL TREES:
mul(add(mul(add(zeros_diff_rows, ones_diff_cols), zeros_diff_rows), add(add(ones_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))), mul(mul(mul(zeros_diff_cols, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), add(add(compare_blocks_cols, zeros_diff_rows), add(zeros_diff_cols, zeros_diff_rows))))
add(add(add(add(mul(compare_blocks_rows, zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_cols, compare_blocks_rows), compare_blocks_rows)), mul(mul(compare_blocks_rows, ones_diff_cols), mul(ones_diff_rows, compare_blocks_cols)))
mul(add(add(ones_diff_cols, mul(zeros_diff_rows, compare_blocks_cols)), mul(ones_diff_cols, ones_diff_cols)), add(mul(zeros_diff_rows, ones_diff_rows), add(zeros_diff_cols, compare_blocks_cols)))
mul(add(add(ones_diff_cols, compare_blocks_rows), mul(compare_blocks_rows, compare_blocks_rows)), add(add(compare_blocks_rows, ones_diff_cols), add(zeros_diff_rows, ones_diff_cols)))
add(zeros_diff_cols, mul(add(ones_diff_cols, mul(mul(zeros_diff_cols, zeros_diff_rows), mul(zeros_diff_cols, compare_blocks_rows))), mul(zeros_diff_rows, add(compare_blocks_rows, compare_blocks_rows))))
add(mul(add(compare_blocks_cols, ones_diff_cols), mul(zeros_diff_rows, zeros_diff_rows)), mul(mul(compare_blocks_rows, ones_diff_cols), add(mul(mul(ones_diff_cols, ones_diff_rows), mul(compare_blocks_cols, ones_diff_rows)), compare_blocks_cols)))
COND TREES:
or_(and_(False, le(2, max_row_clue)), and_(True, and_(False, False)))
or_(ge(_if_then_else(True, _if_then_else(ge(_if_then_else(True, zeros_diff_rows, 1), _if_then_else(True, zeros_diff_rows, 3)), 3, compare_blocks_cols), 1), _if_then_else(or_(False, True), 0, 3)), or_(le(4, 2), or_(False, False)))
le(_if_then_else(and_(True, le(_if_then_else(False, zeros_diff_cols, max_row_clue), _if_then_else(False, 2, 2))), _if_then_else(False, _if_then_else(False, 4, max_row_clue), 4), _if_then_else(ge(4, max_row_clue), 4, 2)), _if_then_else(or_(le(_if_then_else(True, ones_diff_rows, 4), zeros_diff_rows), False), _if_then_else(True, 2, _if_then_else(False, 4, max_row_clue)), _if_then_else(True, _if_then_else(True, zeros_diff_cols, compare_blocks_rows), 0)))
or_(le(3, _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(False, max_row_clue, compare_blocks_cols), _if_then_else(True, 4, max_col_clue))), and_(le(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, max_col_clue, compare_blocks_cols)), or_(or_(False, False), ge(max_row_clue, ones_diff_cols))))
and_(and_(or_(True, True), le(3, zeros_diff_cols)), ge(_if_then_else(or_(False, False), _if_then_else(True, 3, compare_blocks_rows), _if_then_else(False, 4, max_row_clue)), _if_then_else(and_(or_(True, True), True), _if_then_else(True, ones_diff_rows, compare_blocks_cols), _if_then_else(False, max_row_clue, 0))))
VAL TREES:
mul(mul(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows)), add(add(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, zeros_diff_cols)))))
mul(add(mul(ones_diff_cols, zeros_diff_cols), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, ones_diff_rows)))
mul(add(add(add(ones_diff_cols, zeros_diff_cols), add(add(compare_blocks_cols, ones_diff_cols), add(zeros_diff_cols, compare_blocks_rows))), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_rows, compare_blocks_rows))), add(add(add(compare_blocks_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_cols))))
mul(mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)), mul(compare_blocks_cols, add(zeros_diff_rows, zeros_diff_cols)))
mul(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), mul(mul(compare_blocks_cols, zeros_diff_rows), add(mul(mul(compare_blocks_cols, compare_blocks_rows), add(compare_blocks_rows, zeros_diff_rows)), compare_blocks_cols)))
add(mul(add(ones_diff_cols, zeros_diff_cols), mul(ones_diff_cols, ones_diff_cols)), mul(mul(mul(ones_diff_cols, ones_diff_rows), add(ones_diff_cols, ones_diff_cols)), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
ge(_if_then_else(and_(or_(True, False), or_(True, False)), _if_then_else(or_(False, True), _if_then_else(False, max_col_clue, 0), _if_then_else(True, ones_diff_rows, ones_diff_cols)), _if_then_else(le(max_col_clue, ones_diff_rows), _if_then_else(False, 2, 2), _if_then_else(False, ones_diff_cols, compare_blocks_cols))), _if_then_else(ge(_if_then_else(True, max_col_clue, compare_blocks_cols), _if_then_else(le(_if_then_else(True, max_col_clue, max_row_clue), _if_then_else(or_(True, True), compare_blocks_cols, 4)), max_row_clue, 1)), _if_then_else(and_(False, False), _if_then_else(False, zeros_diff_cols, compare_blocks_rows), _if_then_else(True, compare_blocks_rows, max_col_clue)), _if_then_else(and_(le(1, max_col_clue), and_(False, False)), _if_then_else(True, 1, 4), _if_then_else(True, ones_diff_rows, ones_diff_cols))))
le(_if_then_else(le(zeros_diff_rows, zeros_diff_rows), _if_then_else(le(max_row_clue, max_col_clue), zeros_diff_rows, zeros_diff_cols), _if_then_else(False, ones_diff_rows, max_row_clue)), _if_then_else(False, ones_diff_cols, _if_then_else(True, _if_then_else(False, 3, ones_diff_rows), max_row_clue)))
or_(and_(le(_if_then_else(True, ones_diff_rows, 4), zeros_diff_rows), or_(and_(and_(True, False), ge(2, 2)), or_(ge(compare_blocks_rows, 0), and_(False, True)))), ge(_if_then_else(ge(_if_then_else(True, 0, 3), _if_then_else(False, max_col_clue, ones_diff_rows)), _if_then_else(and_(True, False), _if_then_else(False, 3, ones_diff_cols), _if_then_else(False, 4, 4)), _if_then_else(le(max_col_clue, zeros_diff_rows), 3, _if_then_else(True, 4, 3))), _if_then_else(or_(and_(True, False), le(3, ones_diff_cols)), _if_then_else(le(4, ones_diff_cols), _if_then_else(le(_if_then_else(True, ones_diff_rows, 4), zeros_diff_rows), ones_diff_rows, 4), _if_then_else(True, 0, ones_diff_rows)), _if_then_else(or_(True, True), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(True, ones_diff_rows, ones_diff_cols)))))
le(_if_then_else(le(_if_then_else(ge(max_col_clue, 0), _if_then_else(False, zeros_diff_rows, compare_blocks_cols), _if_then_else(False, 0, max_row_clue)), _if_then_else(ge(3, 3), _if_then_else(True, ones_diff_rows, 2), _if_then_else(True, 1, ones_diff_cols))), _if_then_else(or_(and_(True, False), or_(True, False)), _if_then_else(ge(zeros_diff_cols, compare_blocks_rows), _if_then_else(False, 3, compare_blocks_rows), _if_then_else(False, zeros_diff_rows, 1)), _if_then_else(True, compare_blocks_cols, 4)), _if_then_else(le(_if_then_else(False, ones_diff_cols, 0), _if_then_else(False, compare_blocks_rows, ones_diff_cols)), _if_then_else(ge(compare_blocks_cols, max_row_clue), _if_then_else(True, ones_diff_cols, ones_diff_rows), _if_then_else(False, 1, 2)), _if_then_else(ge(3, zeros_diff_rows), _if_then_else(False, 0, compare_blocks_rows), _if_then_else(False, max_col_clue, ones_diff_rows)))), _if_then_else(le(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, max_col_clue, compare_blocks_cols)), _if_then_else(False, _if_then_else(ge(2, 3), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(False, 4, ones_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, 0), _if_then_else(True, ones_diff_cols, 0))), _if_then_else(le(_if_then_else(False, ones_diff_rows, 0), _if_then_else(True, _if_then_else(le(max_col_clue, zeros_diff_rows), _if_then_else(or_(False, True), max_row_clue, compare_blocks_cols), _if_then_else(True, compare_blocks_cols, max_row_clue)), ones_diff_cols)), _if_then_else(le(0, compare_blocks_rows), _if_then_else(True, 0, 0), _if_then_else(False, zeros_diff_rows, compare_blocks_cols)), _if_then_else(le(max_row_clue, 3), _if_then_else(False, max_row_clue, zeros_diff_rows), _if_then_else(False, compare_blocks_rows, zeros_diff_cols)))))
ge(_if_then_else(True, _if_then_else(True, 0, 0), compare_blocks_rows), _if_then_else(True, _if_then_else(True, 2, ones_diff_cols), _if_then_else(False, 4, max_row_clue)))
VAL TREES:
mul(zeros_diff_rows, compare_blocks_rows)
add(add(add(add(ones_diff_rows, compare_blocks_cols), compare_blocks_rows), add(add(ones_diff_cols, compare_blocks_rows), compare_blocks_rows)), mul(mul(compare_blocks_rows, ones_diff_cols), mul(ones_diff_rows, compare_blocks_cols)))
mul(add(zeros_diff_cols, mul(ones_diff_cols, compare_blocks_cols)), add(mul(mul(zeros_diff_rows, zeros_diff_rows), ones_diff_rows), add(zeros_diff_cols, compare_blocks_cols)))
mul(add(add(ones_diff_cols, compare_blocks_rows), ones_diff_rows), add(add(compare_blocks_rows, ones_diff_cols), add(zeros_diff_rows, mul(compare_blocks_cols, ones_diff_rows))))
add(add(ones_diff_cols, zeros_diff_rows), mul(zeros_diff_cols, zeros_diff_rows))
add(mul(add(compare_blocks_cols, ones_diff_cols), mul(zeros_diff_rows, zeros_diff_rows)), mul(mul(compare_blocks_rows, ones_diff_cols), mul(mul(compare_blocks_cols, compare_blocks_rows), add(ones_diff_rows, compare_blocks_cols))))
COND TREES:
or_(and_(le(_if_then_else(or_(False, True), _if_then_else(or_(False, le(2, 0)), _if_then_else(True, compare_blocks_rows, compare_blocks_cols), _if_then_else(True, ones_diff_cols, max_row_clue)), _if_then_else(True, ones_diff_cols, max_row_clue)), max_col_clue), le(2, 0)), and_(le(1, max_col_clue), and_(False, False)))
or_(ge(_if_then_else(True, zeros_diff_rows, 1), _if_then_else(False, zeros_diff_rows, 3)), le(_if_then_else(True, ones_diff_rows, ones_diff_rows), _if_then_else(False, ones_diff_rows, compare_blocks_rows)))
le(_if_then_else(le(_if_then_else(True, ones_diff_rows, 4), zeros_diff_rows), _if_then_else(False, _if_then_else(False, 4, max_row_clue), 4), _if_then_else(or_(True, False), zeros_diff_rows, _if_then_else(False, 1, zeros_diff_cols))), _if_then_else(or_(True, False), _if_then_else(True, 2, 3), _if_then_else(True, 4, 0)))
or_(le(_if_then_else(True, compare_blocks_cols, 4), _if_then_else(and_(False, False), _if_then_else(True, _if_then_else(True, zeros_diff_rows, 0), max_row_clue), _if_then_else(True, zeros_diff_cols, _if_then_else(True, compare_blocks_cols, ones_diff_rows)))), and_(le(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, max_col_clue, compare_blocks_cols)), or_(True, ge(max_row_clue, ones_diff_cols))))
and_(and_(ge(_if_then_else(True, 0, 1), _if_then_else(or_(ge(0, 3), ge(compare_blocks_rows, 4)), compare_blocks_cols, 2)), le(4, 3)), ge(_if_then_else(or_(False, False), _if_then_else(True, 3, compare_blocks_rows), _if_then_else(False, 4, max_row_clue)), _if_then_else(and_(True, False), _if_then_else(True, compare_blocks_cols, zeros_diff_rows), _if_then_else(False, max_row_clue, _if_then_else(le(2, 4), _if_then_else(True, 3, 4), _if_then_else(False, zeros_diff_rows, compare_blocks_rows))))))
VAL TREES:
mul(mul(add(add(zeros_diff_cols, zeros_diff_cols), mul(ones_diff_rows, compare_blocks_rows)), add(add(add(ones_diff_cols, ones_diff_rows), ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, mul(add(zeros_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))))))
mul(add(mul(ones_diff_cols, zeros_diff_cols), mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_rows))), add(add(compare_blocks_cols, mul(ones_diff_cols, ones_diff_cols)), zeros_diff_rows))
mul(compare_blocks_rows, mul(add(compare_blocks_cols, zeros_diff_rows), ones_diff_cols))
mul(mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)), mul(add(ones_diff_cols, add(mul(zeros_diff_cols, zeros_diff_cols), mul(compare_blocks_rows, compare_blocks_rows))), add(mul(mul(add(compare_blocks_cols, zeros_diff_cols), add(compare_blocks_cols, compare_blocks_rows)), add(compare_blocks_cols, ones_diff_cols)), zeros_diff_cols)))
mul(mul(mul(compare_blocks_rows, add(add(compare_blocks_rows, ones_diff_cols), mul(compare_blocks_rows, compare_blocks_cols))), mul(add(add(ones_diff_cols, zeros_diff_rows), compare_blocks_cols), zeros_diff_cols)), mul(mul(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols)))
ones_diff_cols
COND TREES:
or_(and_(False, le(2, 0)), and_(True, True))
or_(ge(_if_then_else(True, _if_then_else(ge(_if_then_else(True, zeros_diff_rows, 1), _if_then_else(True, zeros_diff_rows, 3)), 3, compare_blocks_cols), 1), _if_then_else(or_(True, True), zeros_diff_rows, 3)), le(1, _if_then_else(False, ones_diff_rows, 4)))
le(_if_then_else(and_(True, le(_if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(False, 2, 2))), _if_then_else(False, _if_then_else(False, 4, max_row_clue), 4), _if_then_else(ge(4, max_row_clue), 4, 2)), _if_then_else(or_(le(_if_then_else(True, ones_diff_rows, 4), zeros_diff_rows), False), _if_then_else(True, 2, 3), _if_then_else(True, _if_then_else(True, zeros_diff_cols, compare_blocks_rows), 0)))
or_(le(_if_then_else(or_(False, False), _if_then_else(True, zeros_diff_rows, 0), max_row_clue), _if_then_else(and_(False, False), _if_then_else(True, max_row_clue, max_row_clue), _if_then_else(True, zeros_diff_cols, _if_then_else(True, 2, ones_diff_rows)))), and_(le(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, max_col_clue, compare_blocks_cols)), or_(or_(False, False), ge(max_row_clue, ones_diff_cols))))
and_(and_(or_(True, True), le(_if_then_else(True, 4, zeros_diff_rows), _if_then_else(False, max_col_clue, zeros_diff_cols))), ge(_if_then_else(or_(False, False), _if_then_else(True, 3, compare_blocks_rows), _if_then_else(False, 4, max_row_clue)), _if_then_else(False, max_row_clue, _if_then_else(and_(True, False), _if_then_else(True, 3, 4), _if_then_else(False, zeros_diff_rows, max_row_clue)))))
VAL TREES:
mul(mul(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows)), add(add(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, zeros_diff_cols)))))
mul(add(mul(ones_diff_cols, zeros_diff_cols), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, ones_diff_rows)))
mul(add(add(add(ones_diff_cols, zeros_diff_cols), add(add(compare_blocks_cols, ones_diff_cols), add(zeros_diff_cols, compare_blocks_rows))), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_rows, compare_blocks_rows))), add(add(add(compare_blocks_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_cols))))
mul(mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)), mul(compare_blocks_cols, add(zeros_diff_rows, zeros_diff_cols)))
mul(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), mul(mul(compare_blocks_cols, zeros_diff_rows), add(mul(mul(compare_blocks_cols, compare_blocks_rows), add(compare_blocks_rows, zeros_diff_rows)), compare_blocks_cols)))
add(mul(add(ones_diff_cols, zeros_diff_cols), mul(ones_diff_cols, ones_diff_cols)), mul(mul(mul(ones_diff_cols, ones_diff_rows), add(ones_diff_cols, ones_diff_cols)), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(ge(ones_diff_rows, zeros_diff_rows), _if_then_else(False, ones_diff_rows, max_row_clue), _if_then_else(and_(le(1, max_col_clue), le(1, max_col_clue)), ones_diff_rows, zeros_diff_cols)), _if_then_else(ge(_if_then_else(True, 4, 3), _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(le(ones_diff_rows, zeros_diff_cols), max_row_clue, ones_diff_cols), _if_then_else(le(max_col_clue, max_col_clue), _if_then_else(True, 3, ones_diff_cols), zeros_diff_cols)))
or_(le(max_col_clue, _if_then_else(False, 0, 0)), le(_if_then_else(False, zeros_diff_cols, ones_diff_rows), _if_then_else(False, zeros_diff_rows, _if_then_else(or_(False, True), _if_then_else(False, zeros_diff_rows, 4), _if_then_else(True, zeros_diff_rows, 0)))))
and_(le(_if_then_else(False, zeros_diff_cols, compare_blocks_cols), _if_then_else(False, _if_then_else(False, zeros_diff_rows, zeros_diff_cols), 0)), or_(True, False))
False
and_(le(4, 3), le(compare_blocks_rows, 0))
VAL TREES:
mul(add(zeros_diff_rows, mul(compare_blocks_rows, ones_diff_cols)), mul(mul(compare_blocks_rows, ones_diff_cols), add(add(zeros_diff_cols, compare_blocks_rows), zeros_diff_rows)))
add(add(add(add(zeros_diff_cols, zeros_diff_rows), ones_diff_cols), mul(ones_diff_cols, compare_blocks_cols)), add(ones_diff_cols, add(compare_blocks_cols, zeros_diff_rows)))
mul(add(add(add(ones_diff_cols, ones_diff_rows), mul(add(zeros_diff_cols, compare_blocks_cols), compare_blocks_rows)), mul(add(compare_blocks_rows, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols))), mul(mul(mul(compare_blocks_rows, ones_diff_rows), mul(ones_diff_cols, zeros_diff_cols)), mul(add(zeros_diff_rows, ones_diff_cols), mul(zeros_diff_cols, compare_blocks_cols))))
mul(mul(mul(compare_blocks_cols, zeros_diff_rows), mul(zeros_diff_cols, zeros_diff_rows)), mul(ones_diff_rows, ones_diff_cols))
add(add(add(add(mul(compare_blocks_cols, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_cols)), add(add(zeros_diff_cols, compare_blocks_rows), mul(mul(compare_blocks_rows, zeros_diff_rows), zeros_diff_cols))), add(add(mul(zeros_diff_cols, zeros_diff_rows), mul(zeros_diff_cols, zeros_diff_cols)), add(mul(ones_diff_cols, ones_diff_cols), mul(compare_blocks_cols, ones_diff_cols)))), mul(mul(mul(mul(zeros_diff_rows, compare_blocks_rows), add(compare_blocks_cols, compare_blocks_rows)), add(add(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_cols, compare_blocks_cols))), add(mul(add(ones_diff_rows, compare_blocks_rows), add(zeros_diff_cols, zeros_diff_cols)), add(mul(compare_blocks_cols, ones_diff_cols), add(zeros_diff_rows, compare_blocks_rows)))))
add(mul(add(mul(ones_diff_rows, compare_blocks_rows), compare_blocks_cols), mul(compare_blocks_rows, compare_blocks_rows)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(zeros_diff_rows, zeros_diff_rows)))
COND TREES:
le(_if_then_else(ge(ones_diff_rows, zeros_diff_rows), _if_then_else(le(compare_blocks_rows, zeros_diff_cols), _if_then_else(True, ones_diff_rows, max_col_clue), _if_then_else(True, ones_diff_rows, 4)), _if_then_else(and_(le(1, max_col_clue), le(1, max_col_clue)), ones_diff_rows, zeros_diff_cols)), _if_then_else(ge(_if_then_else(True, 4, 3), _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(le(ones_diff_rows, zeros_diff_cols), max_row_clue, ones_diff_cols), _if_then_else(le(max_col_clue, max_col_clue), _if_then_else(True, 3, ones_diff_cols), zeros_diff_cols)))
or_(le(max_col_clue, _if_then_else(False, 0, 0)), le(_if_then_else(False, zeros_diff_cols, ones_diff_rows), _if_then_else(False, zeros_diff_rows, _if_then_else(or_(False, True), _if_then_else(False, _if_then_else(False, ones_diff_cols, ones_diff_rows), 4), _if_then_else(True, zeros_diff_rows, 0)))))
and_(False, False)
le(ones_diff_cols, 0)
or_(True, True)
VAL TREES:
mul(add(zeros_diff_rows, mul(compare_blocks_rows, ones_diff_cols)), mul(mul(compare_blocks_rows, ones_diff_cols), add(add(zeros_diff_cols, compare_blocks_rows), zeros_diff_rows)))
add(add(add(add(zeros_diff_cols, zeros_diff_rows), ones_diff_cols), mul(ones_diff_cols, compare_blocks_cols)), add(ones_diff_cols, add(compare_blocks_cols, zeros_diff_rows)))
mul(add(add(add(ones_diff_cols, ones_diff_rows), mul(add(zeros_diff_cols, compare_blocks_cols), compare_blocks_rows)), mul(add(compare_blocks_rows, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols))), mul(mul(mul(compare_blocks_rows, ones_diff_rows), mul(ones_diff_cols, zeros_diff_cols)), mul(add(zeros_diff_rows, ones_diff_cols), mul(zeros_diff_cols, compare_blocks_cols))))
mul(mul(mul(compare_blocks_cols, zeros_diff_rows), mul(zeros_diff_cols, zeros_diff_rows)), mul(ones_diff_rows, ones_diff_cols))
add(add(add(add(mul(compare_blocks_cols, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_cols)), add(add(zeros_diff_cols, compare_blocks_rows), mul(mul(compare_blocks_rows, zeros_diff_rows), zeros_diff_cols))), add(add(mul(zeros_diff_cols, zeros_diff_rows), mul(zeros_diff_cols, zeros_diff_cols)), add(mul(ones_diff_cols, ones_diff_cols), mul(compare_blocks_cols, ones_diff_cols)))), mul(mul(mul(mul(zeros_diff_rows, compare_blocks_rows), add(compare_blocks_cols, compare_blocks_rows)), add(add(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_cols, compare_blocks_cols))), add(mul(add(ones_diff_rows, compare_blocks_rows), add(zeros_diff_cols, zeros_diff_cols)), add(mul(compare_blocks_cols, ones_diff_cols), add(zeros_diff_rows, compare_blocks_rows)))))
add(mul(add(mul(ones_diff_rows, compare_blocks_rows), compare_blocks_cols), mul(compare_blocks_rows, compare_blocks_rows)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(zeros_diff_rows, zeros_diff_rows)))
COND TREES:
ge(_if_then_else(and_(or_(True, False), or_(True, True)), _if_then_else(or_(False, True), _if_then_else(False, max_col_clue, 0), _if_then_else(True, compare_blocks_rows, compare_blocks_cols)), _if_then_else(le(max_col_clue, ones_diff_rows), _if_then_else(False, 2, 2), ones_diff_cols)), _if_then_else(ge(_if_then_else(True, max_col_clue, compare_blocks_cols), _if_then_else(le(_if_then_else(True, max_col_clue, max_row_clue), _if_then_else(or_(True, True), compare_blocks_cols, 4)), max_row_clue, 1)), _if_then_else(and_(False, False), _if_then_else(False, zeros_diff_cols, compare_blocks_rows), _if_then_else(True, compare_blocks_rows, max_col_clue)), _if_then_else(and_(le(1, 4), and_(False, False)), _if_then_else(True, 1, 4), _if_then_else(True, compare_blocks_cols, max_row_clue))))
le(_if_then_else(le(zeros_diff_rows, 0), _if_then_else(True, zeros_diff_rows, zeros_diff_cols), _if_then_else(True, max_col_clue, 4)), _if_then_else(ge(_if_then_else(True, zeros_diff_rows, 1), _if_then_else(True, zeros_diff_rows, 3)), ones_diff_cols, _if_then_else(True, _if_then_else(False, 3, ones_diff_rows), max_row_clue)))
or_(and_(le(_if_then_else(True, ones_diff_rows, 4), zeros_diff_rows), or_(and_(and_(True, and_(False, le(ones_diff_rows, 3))), ge(2, 2)), or_(ge(compare_blocks_rows, 0), and_(False, True)))), ge(_if_then_else(ge(_if_then_else(True, 0, 3), _if_then_else(False, max_col_clue, ones_diff_rows)), _if_then_else(and_(True, False), _if_then_else(False, 3, ones_diff_cols), _if_then_else(False, 4, 4)), _if_then_else(le(max_col_clue, zeros_diff_rows), _if_then_else(False, 4, max_row_clue), _if_then_else(True, 2, 3))), _if_then_else(or_(and_(True, False), le(3, ones_diff_cols)), _if_then_else(False, _if_then_else(False, ones_diff_rows, 4), _if_then_else(le(_if_then_else(True, ones_diff_rows, 4), zeros_diff_rows), 0, ones_diff_rows)), _if_then_else(or_(True, True), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(True, ones_diff_rows, ones_diff_cols)))))
le(_if_then_else(le(_if_then_else(ge(max_col_clue, 0), _if_then_else(False, zeros_diff_rows, compare_blocks_cols), _if_then_else(False, 0, max_row_clue)), _if_then_else(ge(3, 3), _if_then_else(True, ones_diff_rows, 2), _if_then_else(True, 1, ones_diff_cols))), _if_then_else(or_(and_(True, False), or_(True, False)), _if_then_else(ge(zeros_diff_cols, compare_blocks_rows), _if_then_else(False, 3, compare_blocks_rows), _if_then_else(False, zeros_diff_rows, 1)), _if_then_else(True, compare_blocks_cols, 4)), _if_then_else(le(_if_then_else(False, ones_diff_cols, 0), _if_then_else(False, compare_blocks_rows, ones_diff_cols)), _if_then_else(and_(True, False), _if_then_else(True, ones_diff_cols, ones_diff_rows), _if_then_else(and_(False, False), _if_then_else(True, _if_then_else(True, zeros_diff_rows, 0), max_row_clue), _if_then_else(True, zeros_diff_cols, _if_then_else(True, compare_blocks_cols, ones_diff_rows)))), _if_then_else(ge(3, zeros_diff_rows), _if_then_else(False, 0, compare_blocks_rows), _if_then_else(False, max_col_clue, ones_diff_rows)))), _if_then_else(or_(le(_if_then_else(True, compare_blocks_cols, compare_blocks_cols), _if_then_else(False, 3, compare_blocks_rows)), ge(_if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(True, 0, compare_blocks_rows))), _if_then_else(and_(le(zeros_diff_rows, zeros_diff_cols), or_(False, True)), _if_then_else(ge(2, 3), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(False, 4, ones_diff_cols)), _if_then_else(or_(False, True), _if_then_else(False, max_col_clue, 0), _if_then_else(True, ones_diff_cols, 0))), _if_then_else(le(_if_then_else(False, ones_diff_rows, 0), _if_then_else(True, 3, ones_diff_cols)), _if_then_else(le(0, compare_blocks_rows), _if_then_else(True, 0, 0), _if_then_else(False, zeros_diff_rows, compare_blocks_cols)), _if_then_else(le(max_row_clue, 3), _if_then_else(False, max_row_clue, zeros_diff_rows), _if_then_else(False, compare_blocks_rows, zeros_diff_cols)))))
ge(_if_then_else(or_(True, and_(True, False)), _if_then_else(True, 0, 0), _if_then_else(True, 3, 4)), _if_then_else(True, _if_then_else(True, ones_diff_cols, ones_diff_cols), _if_then_else(False, max_row_clue, 2)))
VAL TREES:
mul(add(mul(add(zeros_diff_rows, ones_diff_cols), mul(compare_blocks_rows, add(zeros_diff_cols, compare_blocks_rows))), add(add(ones_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))), mul(mul(mul(zeros_diff_cols, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), add(add(compare_blocks_cols, ones_diff_rows), add(zeros_diff_cols, zeros_diff_rows))))
add(add(add(add(mul(mul(compare_blocks_rows, zeros_diff_cols), zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), compare_blocks_rows), add(add(ones_diff_cols, compare_blocks_rows), compare_blocks_rows)), mul(mul(compare_blocks_rows, ones_diff_cols), mul(ones_diff_rows, compare_blocks_cols)))
mul(add(zeros_diff_cols, mul(ones_diff_cols, compare_blocks_cols)), add(mul(zeros_diff_rows, ones_diff_rows), add(zeros_diff_cols, compare_blocks_cols)))
mul(add(add(ones_diff_cols, compare_blocks_rows), ones_diff_rows), add(add(compare_blocks_rows, ones_diff_cols), add(zeros_diff_rows, mul(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_cols, compare_blocks_rows)))))
mul(ones_diff_rows, compare_blocks_cols)
add(mul(add(compare_blocks_cols, ones_diff_cols), mul(zeros_diff_rows, zeros_diff_rows)), mul(mul(compare_blocks_rows, ones_diff_cols), mul(mul(compare_blocks_cols, compare_blocks_rows), add(ones_diff_rows, compare_blocks_cols))))
COND TREES:
le(_if_then_else(ge(ones_diff_rows, zeros_diff_rows), _if_then_else(False, ones_diff_rows, max_row_clue), _if_then_else(True, ones_diff_rows, zeros_diff_cols)), _if_then_else(ge(_if_then_else(True, max_col_clue, 3), _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(le(ones_diff_rows, zeros_diff_cols), max_row_clue, ones_diff_cols), _if_then_else(and_(le(1, max_col_clue), and_(False, False)), _if_then_else(True, 3, ones_diff_cols), zeros_diff_cols)))
or_(le(max_col_clue, _if_then_else(ge(_if_then_else(True, zeros_diff_rows, 1), _if_then_else(True, zeros_diff_rows, 3)), 0, 0)), le(_if_then_else(False, zeros_diff_cols, ones_diff_rows), _if_then_else(False, zeros_diff_rows, _if_then_else(True, _if_then_else(False, zeros_diff_cols, ones_diff_rows), _if_then_else(True, zeros_diff_rows, 0)))))
and_(or_(True, le(4, ones_diff_cols)), True)
False
and_(or_(and_(or_(True, False), le(2, 3)), or_(False, le(4, 3))), le(compare_blocks_rows, 0))
VAL TREES:
mul(add(zeros_diff_rows, mul(compare_blocks_rows, ones_diff_cols)), mul(mul(compare_blocks_rows, ones_diff_cols), ones_diff_cols))
add(add(add(compare_blocks_cols, ones_diff_cols), mul(ones_diff_cols, compare_blocks_cols)), add(ones_diff_cols, mul(mul(ones_diff_rows, zeros_diff_rows), add(compare_blocks_rows, ones_diff_cols))))
mul(add(add(add(ones_diff_cols, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(add(compare_blocks_rows, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols))), mul(mul(mul(compare_blocks_rows, ones_diff_rows), mul(ones_diff_cols, zeros_diff_cols)), mul(add(zeros_diff_rows, ones_diff_cols), mul(zeros_diff_cols, compare_blocks_cols))))
mul(mul(mul(ones_diff_rows, ones_diff_cols), mul(ones_diff_rows, ones_diff_rows)), mul(ones_diff_rows, ones_diff_cols))
add(add(add(add(mul(compare_blocks_cols, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_cols)), add(add(zeros_diff_cols, compare_blocks_rows), mul(zeros_diff_rows, zeros_diff_cols))), add(add(mul(zeros_diff_cols, zeros_diff_rows), mul(zeros_diff_cols, zeros_diff_cols)), add(mul(ones_diff_cols, ones_diff_cols), mul(compare_blocks_cols, ones_diff_cols)))), mul(mul(mul(mul(zeros_diff_rows, compare_blocks_rows), add(compare_blocks_cols, compare_blocks_rows)), add(add(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_cols, compare_blocks_cols))), add(mul(add(ones_diff_rows, compare_blocks_rows), add(zeros_diff_cols, zeros_diff_cols)), add(mul(compare_blocks_cols, ones_diff_cols), add(ones_diff_cols, zeros_diff_cols)))))
add(mul(add(mul(zeros_diff_rows, compare_blocks_rows), add(compare_blocks_cols, compare_blocks_cols)), mul(compare_blocks_rows, compare_blocks_rows)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(zeros_diff_rows, zeros_diff_rows)))
COND TREES:
or_(and_(le(_if_then_else(or_(False, True), _if_then_else(True, compare_blocks_rows, compare_blocks_cols), _if_then_else(True, _if_then_else(False, 2, 2), _if_then_else(False, 0, ones_diff_cols))), max_col_clue), le(2, 0)), and_(le(max_row_clue, max_col_clue), and_(and_(and_(True, False), or_(le(0, 1), and_(False, False))), False)))
or_(ge(_if_then_else(True, zeros_diff_rows, 1), _if_then_else(True, zeros_diff_rows, 3)), le(_if_then_else(ge(_if_then_else(True, zeros_diff_rows, 1), _if_then_else(True, zeros_diff_rows, 3)), zeros_diff_rows, zeros_diff_cols), _if_then_else(False, ones_diff_rows, compare_blocks_rows)))
le(_if_then_else(le(_if_then_else(True, ones_diff_rows, 4), zeros_diff_rows), _if_then_else(False, _if_then_else(False, 4, max_row_clue), 4), _if_then_else(and_(False, le(ones_diff_rows, 3)), zeros_diff_rows, _if_then_else(True, 1, zeros_diff_cols))), _if_then_else(False, _if_then_else(or_(and_(True, False), le(3, ones_diff_cols)), _if_then_else(le(compare_blocks_rows, ones_diff_cols), _if_then_else(False, ones_diff_rows, 4), _if_then_else(True, 0, ones_diff_rows)), _if_then_else(or_(True, True), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(True, ones_diff_rows, ones_diff_cols))), _if_then_else(True, _if_then_else(True, zeros_diff_cols, compare_blocks_rows), 0)))
or_(le(_if_then_else(True, compare_blocks_cols, 4), _if_then_else(and_(False, False), 0, _if_then_else(True, zeros_diff_cols, _if_then_else(True, compare_blocks_cols, ones_diff_rows)))), and_(le(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, max_col_clue, compare_blocks_cols)), or_(True, ge(max_row_clue, max_row_clue))))
and_(and_(ge(_if_then_else(True, 0, 1), _if_then_else(True, _if_then_else(True, 2, ones_diff_cols), 2)), le(4, 3)), ge(_if_then_else(or_(False, False), _if_then_else(True, _if_then_else(True, _if_then_else(True, 0, 0), _if_then_else(ge(ones_diff_rows, 0), _if_then_else(True, max_row_clue, zeros_diff_rows), _if_then_else(False, max_col_clue, 0))), compare_blocks_rows), _if_then_else(False, 4, max_row_clue)), _if_then_else(and_(True, False), _if_then_else(True, compare_blocks_cols, zeros_diff_rows), _if_then_else(False, max_row_clue, _if_then_else(and_(True, False), _if_then_else(True, 3, 4), _if_then_else(False, zeros_diff_rows, compare_blocks_rows))))))
VAL TREES:
mul(mul(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows)), add(add(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, ones_diff_cols))))
mul(add(mul(ones_diff_cols, zeros_diff_cols), mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, ones_diff_rows)))
mul(add(add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, ones_diff_cols)), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_rows, compare_blocks_rows))), add(add(add(compare_blocks_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_cols))))
mul(mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)), mul(add(ones_diff_cols, compare_blocks_rows), add(zeros_diff_rows, zeros_diff_cols)))
mul(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), mul(mul(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols)))
add(mul(add(ones_diff_cols, zeros_diff_cols), mul(ones_diff_cols, ones_diff_cols)), mul(mul(ones_diff_cols, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
or_(False, False)
or_(False, le(_if_then_else(True, ones_diff_rows, ones_diff_rows), _if_then_else(False, ones_diff_cols, _if_then_else(ge(compare_blocks_rows, zeros_diff_rows), _if_then_else(False, 3, ones_diff_rows), max_row_clue))))
le(_if_then_else(le(_if_then_else(ge(_if_then_else(False, 1, ones_diff_cols), _if_then_else(True, 2, zeros_diff_cols)), ones_diff_rows, 4), zeros_diff_rows), _if_then_else(False, _if_then_else(or_(True, False), 4, max_row_clue), 4), _if_then_else(False, 4, max_row_clue)), _if_then_else(or_(True, False), _if_then_else(True, 2, 3), _if_then_else(True, _if_then_else(True, 1, compare_blocks_cols), 0)))
or_(le(_if_then_else(True, compare_blocks_cols, 4), _if_then_else(and_(True, False), _if_then_else(True, _if_then_else(True, zeros_diff_rows, 0), max_row_clue), _if_then_else(True, zeros_diff_cols, _if_then_else(True, compare_blocks_cols, ones_diff_rows)))), and_(le(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, max_col_clue, compare_blocks_cols)), or_(or_(False, or_(True, False)), ge(max_row_clue, ones_diff_cols))))
True
VAL TREES:
mul(mul(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows)), ones_diff_cols), mul(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, ones_diff_cols))))
mul(add(mul(ones_diff_cols, zeros_diff_cols), mul(add(zeros_diff_cols, compare_blocks_cols), add(mul(add(zeros_diff_cols, ones_diff_cols), add(compare_blocks_cols, zeros_diff_rows)), zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, ones_diff_rows)))
mul(add(add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, ones_diff_cols)), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_rows, compare_blocks_rows))), add(add(add(compare_blocks_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(mul(ones_diff_rows, ones_diff_cols), compare_blocks_cols), add(zeros_diff_cols, zeros_diff_cols))))
mul(mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)), mul(compare_blocks_cols, ones_diff_rows))
mul(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(compare_blocks_rows, add(mul(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols)))), mul(mul(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols)))
add(mul(add(ones_diff_cols, zeros_diff_rows), mul(ones_diff_cols, ones_diff_cols)), mul(mul(ones_diff_cols, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
ge(_if_then_else(and_(or_(True, False), or_(True, True)), _if_then_else(or_(False, True), _if_then_else(False, max_col_clue, 0), _if_then_else(True, ones_diff_cols, ones_diff_cols)), _if_then_else(le(max_col_clue, ones_diff_rows), max_col_clue, _if_then_else(False, ones_diff_cols, compare_blocks_cols))), _if_then_else(ge(_if_then_else(True, max_col_clue, compare_blocks_cols), _if_then_else(le(_if_then_else(True, max_col_clue, max_row_clue), _if_then_else(False, compare_blocks_cols, 4)), max_row_clue, 1)), _if_then_else(and_(False, False), _if_then_else(False, zeros_diff_cols, compare_blocks_rows), _if_then_else(True, compare_blocks_rows, max_col_clue)), _if_then_else(ge(max_col_clue, zeros_diff_cols), _if_then_else(True, 1, 4), _if_then_else(True, compare_blocks_cols, max_row_clue))))
le(_if_then_else(le(zeros_diff_rows, 0), _if_then_else(True, zeros_diff_rows, 3), _if_then_else(True, max_col_clue, 4)), _if_then_else(and_(False, False), zeros_diff_rows, _if_then_else(True, _if_then_else(False, 3, ones_diff_rows), max_row_clue)))
or_(and_(and_(le(_if_then_else(False, max_col_clue, 0), _if_then_else(False, 0, 3)), or_(le(zeros_diff_rows, 3), and_(True, False))), or_(and_(and_(True, False), ge(2, 2)), or_(ge(compare_blocks_rows, 0), and_(False, True)))), ge(_if_then_else(ge(_if_then_else(True, 0, 3), _if_then_else(False, max_col_clue, ones_diff_rows)), _if_then_else(and_(True, False), _if_then_else(False, 3, ones_diff_cols), ones_diff_rows), _if_then_else(le(max_col_clue, zeros_diff_rows), _if_then_else(False, 4, max_row_clue), _if_then_else(True, max_row_clue, 3))), _if_then_else(or_(and_(True, False), le(3, ones_diff_cols)), _if_then_else(le(compare_blocks_rows, ones_diff_cols), _if_then_else(False, ones_diff_rows, 4), _if_then_else(True, 0, ones_diff_rows)), _if_then_else(or_(True, True), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(ge(1, max_row_clue), _if_then_else(False, 2, 1), _if_then_else(False, 2, 2))))))
le(_if_then_else(le(_if_then_else(ge(max_col_clue, 0), _if_then_else(False, zeros_diff_rows, compare_blocks_cols), _if_then_else(False, 0, max_row_clue)), _if_then_else(ge(3, 3), _if_then_else(True, ones_diff_rows, 2), _if_then_else(True, 1, ones_diff_cols))), _if_then_else(or_(and_(True, False), or_(True, False)), _if_then_else(ge(zeros_diff_cols, compare_blocks_rows), _if_then_else(False, 3, 2), _if_then_else(False, zeros_diff_rows, 1)), _if_then_else(or_(False, False), _if_then_else(True, 1, compare_blocks_cols), _if_then_else(True, ones_diff_cols, ones_diff_cols))), _if_then_else(le(_if_then_else(False, ones_diff_cols, 0), _if_then_else(False, compare_blocks_rows, ones_diff_cols)), _if_then_else(and_(True, False), _if_then_else(True, ones_diff_cols, ones_diff_rows), _if_then_else(False, 1, 2)), _if_then_else(ge(3, zeros_diff_rows), _if_then_else(False, 0, compare_blocks_rows), _if_then_else(False, max_col_clue, ones_diff_rows)))), _if_then_else(or_(le(_if_then_else(True, compare_blocks_cols, compare_blocks_cols), _if_then_else(False, 3, compare_blocks_rows)), ge(_if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(True, 0, compare_blocks_rows))), _if_then_else(and_(le(max_row_clue, zeros_diff_rows), le(max_col_clue, 4)), _if_then_else(ge(2, 3), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, 4, ones_diff_cols)), _if_then_else(le(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, max_col_clue, compare_blocks_cols)), _if_then_else(False, max_col_clue, 0), _if_then_else(True, ones_diff_cols, 0))), _if_then_else(le(_if_then_else(False, ones_diff_rows, 0), _if_then_else(True, 3, ones_diff_cols)), _if_then_else(le(0, compare_blocks_rows), _if_then_else(True, 0, 0), _if_then_else(False, zeros_diff_rows, compare_blocks_cols)), _if_then_else(le(max_row_clue, 3), _if_then_else(False, max_row_clue, zeros_diff_rows), _if_then_else(False, compare_blocks_rows, zeros_diff_cols)))))
ge(_if_then_else(True, _if_then_else(True, 0, 0), _if_then_else(True, compare_blocks_cols, 2)), _if_then_else(and_(False, True), _if_then_else(True, 2, ones_diff_cols), 4))
VAL TREES:
mul(add(mul(add(zeros_diff_rows, ones_diff_cols), zeros_diff_rows), add(add(ones_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))), mul(mul(mul(zeros_diff_cols, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), add(add(compare_blocks_cols, zeros_diff_rows), add(zeros_diff_cols, zeros_diff_rows))))
add(add(add(add(mul(compare_blocks_rows, zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_cols, compare_blocks_rows), compare_blocks_rows)), mul(mul(compare_blocks_rows, ones_diff_cols), mul(add(zeros_diff_rows, ones_diff_cols), compare_blocks_cols)))
mul(add(add(ones_diff_cols, mul(zeros_diff_rows, compare_blocks_cols)), mul(ones_diff_cols, ones_diff_cols)), add(mul(zeros_diff_rows, mul(compare_blocks_cols, compare_blocks_cols)), add(zeros_diff_cols, compare_blocks_cols)))
mul(add(add(ones_diff_cols, compare_blocks_rows), mul(compare_blocks_rows, compare_blocks_rows)), add(add(compare_blocks_rows, ones_diff_cols), add(zeros_diff_rows, mul(ones_diff_cols, ones_diff_cols))))
mul(compare_blocks_cols, ones_diff_cols)
add(mul(add(compare_blocks_cols, ones_diff_cols), mul(zeros_diff_cols, compare_blocks_cols)), mul(mul(compare_blocks_rows, ones_diff_cols), add(mul(mul(ones_diff_cols, ones_diff_rows), mul(compare_blocks_cols, ones_diff_rows)), compare_blocks_cols)))
COND TREES:
ge(_if_then_else(and_(or_(True, False), or_(True, True)), _if_then_else(False, compare_blocks_rows, _if_then_else(True, ones_diff_rows, ones_diff_cols)), _if_then_else(le(max_col_clue, ones_diff_rows), _if_then_else(False, 2, 2), _if_then_else(False, ones_diff_cols, compare_blocks_cols))), _if_then_else(ge(_if_then_else(True, max_col_clue, compare_blocks_rows), _if_then_else(le(_if_then_else(True, max_col_clue, max_row_clue), _if_then_else(or_(True, True), compare_blocks_cols, 4)), max_row_clue, 1)), _if_then_else(and_(False, False), _if_then_else(False, zeros_diff_cols, compare_blocks_rows), _if_then_else(True, compare_blocks_rows, max_col_clue)), _if_then_else(ge(max_col_clue, zeros_diff_cols), _if_then_else(True, 1, 4), _if_then_else(True, compare_blocks_cols, max_row_clue))))
le(_if_then_else(le(zeros_diff_rows, 0), _if_then_else(or_(False, True), _if_then_else(False, compare_blocks_rows, _if_then_else(True, _if_then_else(False, 3, ones_diff_rows), max_row_clue)), zeros_diff_cols), _if_then_else(True, max_col_clue, 4)), _if_then_else(and_(False, True), _if_then_else(le(3, zeros_diff_rows), compare_blocks_cols, max_row_clue), _if_then_else(True, _if_then_else(or_(le(4, 2), or_(False, False)), 3, ones_diff_rows), max_row_clue)))
or_(and_(and_(le(_if_then_else(False, ones_diff_rows, 0), _if_then_else(False, 0, 3)), or_(le(zeros_diff_rows, 3), and_(True, False))), or_(and_(and_(True, False), ge(2, 2)), or_(ge(compare_blocks_rows, 0), and_(False, True)))), ge(_if_then_else(ge(_if_then_else(True, 0, 3), _if_then_else(False, max_col_clue, ones_diff_rows)), _if_then_else(and_(True, False), _if_then_else(False, 3, ones_diff_cols), _if_then_else(False, 4, 4)), 0), _if_then_else(or_(and_(True, False), le(3, ones_diff_cols)), _if_then_else(le(compare_blocks_rows, ones_diff_cols), _if_then_else(False, ones_diff_rows, 4), _if_then_else(True, 0, ones_diff_rows)), _if_then_else(or_(True, True), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(True, ones_diff_rows, ones_diff_cols)))))
le(_if_then_else(le(_if_then_else(ge(max_col_clue, 0), _if_then_else(False, zeros_diff_rows, compare_blocks_cols), _if_then_else(False, 0, max_row_clue)), _if_then_else(ge(3, 3), _if_then_else(False, ones_diff_rows, 2), _if_then_else(True, 1, ones_diff_cols))), _if_then_else(or_(and_(True, False), or_(True, False)), _if_then_else(ge(zeros_diff_cols, compare_blocks_rows), _if_then_else(False, 3, compare_blocks_rows), _if_then_else(False, zeros_diff_rows, 1)), _if_then_else(or_(False, False), _if_then_else(True, 1, compare_blocks_cols), _if_then_else(True, ones_diff_cols, ones_diff_cols))), _if_then_else(le(_if_then_else(False, ones_diff_cols, 0), _if_then_else(False, compare_blocks_rows, ones_diff_cols)), _if_then_else(and_(True, False), _if_then_else(True, ones_diff_cols, ones_diff_rows), _if_then_else(False, 1, 2)), _if_then_else(ge(3, zeros_diff_rows), _if_then_else(False, 0, compare_blocks_rows), _if_then_else(False, max_col_clue, ones_diff_rows)))), _if_then_else(or_(le(_if_then_else(True, compare_blocks_cols, compare_blocks_cols), _if_then_else(False, 3, compare_blocks_rows)), ge(_if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(True, 0, compare_blocks_rows))), _if_then_else(and_(le(max_row_clue, zeros_diff_rows), le(max_col_clue, 4)), _if_then_else(ge(2, 3), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(False, 4, ones_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, 0), _if_then_else(True, ones_diff_cols, 0))), _if_then_else(le(_if_then_else(False, ones_diff_rows, 0), _if_then_else(True, 3, ones_diff_cols)), _if_then_else(le(0, compare_blocks_rows), _if_then_else(True, 0, 0), _if_then_else(False, _if_then_else(le(zeros_diff_rows, 2), _if_then_else(True, 0, ones_diff_rows), _if_then_else(True, max_col_clue, 3)), compare_blocks_cols)), _if_then_else(le(max_row_clue, 3), _if_then_else(False, max_row_clue, zeros_diff_rows), _if_then_else(False, compare_blocks_rows, zeros_diff_cols)))))
ge(_if_then_else(or_(False, True), _if_then_else(False, ones_diff_rows, compare_blocks_cols), 2), _if_then_else(and_(True, True), _if_then_else(True, _if_then_else(True, compare_blocks_cols, 3), ones_diff_cols), _if_then_else(False, max_row_clue, 2)))
VAL TREES:
mul(add(mul(add(zeros_diff_rows, ones_diff_cols), zeros_diff_rows), add(add(ones_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))), mul(mul(mul(zeros_diff_cols, ones_diff_rows), mul(compare_blocks_rows, add(ones_diff_rows, zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_rows), add(zeros_diff_cols, zeros_diff_rows))))
add(add(add(add(mul(compare_blocks_rows, zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_cols, compare_blocks_rows), compare_blocks_rows)), mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), add(ones_diff_cols, compare_blocks_cols)), ones_diff_cols), mul(ones_diff_rows, compare_blocks_cols)))
mul(add(compare_blocks_cols, mul(ones_diff_cols, ones_diff_cols)), add(mul(zeros_diff_rows, ones_diff_rows), add(zeros_diff_cols, compare_blocks_cols)))
mul(add(add(ones_diff_cols, compare_blocks_rows), mul(compare_blocks_rows, compare_blocks_rows)), add(add(compare_blocks_rows, zeros_diff_cols), add(zeros_diff_rows, ones_diff_cols)))
add(zeros_diff_cols, mul(add(ones_diff_cols, mul(mul(zeros_diff_cols, zeros_diff_rows), mul(zeros_diff_cols, compare_blocks_rows))), mul(zeros_diff_rows, ones_diff_cols)))
add(mul(add(compare_blocks_cols, ones_diff_cols), mul(zeros_diff_rows, zeros_diff_rows)), mul(mul(compare_blocks_rows, ones_diff_cols), add(mul(mul(ones_diff_cols, ones_diff_rows), mul(compare_blocks_cols, ones_diff_rows)), compare_blocks_cols)))
COND TREES:
or_(and_(le(_if_then_else(False, zeros_diff_cols, zeros_diff_rows), max_col_clue), le(2, 0)), and_(True, and_(le(compare_blocks_cols, ones_diff_rows), False)))
or_(ge(_if_then_else(le(max_row_clue, 4), _if_then_else(True, compare_blocks_rows, max_col_clue), _if_then_else(True, 1, zeros_diff_rows)), _if_then_else(and_(False, True), _if_then_else(False, 0, _if_then_else(False, ones_diff_rows, compare_blocks_rows)), _if_then_else(True, 3, compare_blocks_rows))), True)
le(_if_then_else(False, _if_then_else(False, _if_then_else(False, 4, max_row_clue), 4), _if_then_else(le(_if_then_else(True, ones_diff_rows, 4), zeros_diff_rows), _if_then_else(False, _if_then_else(False, _if_then_else(False, compare_blocks_cols, 1), max_row_clue), 4), _if_then_else(or_(True, False), zeros_diff_rows, max_row_clue))), _if_then_else(or_(True, False), _if_then_else(True, 2, 3), _if_then_else(True, _if_then_else(True, zeros_diff_cols, compare_blocks_rows), 0)))
or_(le(_if_then_else(True, compare_blocks_cols, 4), _if_then_else(and_(and_(ge(0, 4), or_(False, False)), False), _if_then_else(True, _if_then_else(True, zeros_diff_rows, 0), max_row_clue), _if_then_else(True, zeros_diff_cols, _if_then_else(True, compare_blocks_cols, ones_diff_rows)))), ge(zeros_diff_rows, 3))
and_(and_(ge(_if_then_else(True, 0, 1), _if_then_else(True, compare_blocks_cols, 2)), le(max_col_clue, 3)), ge(_if_then_else(or_(False, False), _if_then_else(True, 3, compare_blocks_rows), _if_then_else(False, 4, max_row_clue)), _if_then_else(and_(True, False), _if_then_else(True, compare_blocks_cols, zeros_diff_rows), _if_then_else(False, _if_then_else(True, max_col_clue, compare_blocks_rows), _if_then_else(True, compare_blocks_cols, 2)))))
VAL TREES:
mul(mul(mul(compare_blocks_rows, ones_diff_rows), add(add(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, ones_diff_cols))))
mul(add(mul(ones_diff_cols, zeros_diff_cols), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_cols, compare_blocks_cols))), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, ones_diff_rows)))
mul(add(add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, ones_diff_cols)), add(mul(ones_diff_cols, ones_diff_rows), mul(compare_blocks_cols, compare_blocks_cols))), add(add(add(compare_blocks_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_cols))))
mul(mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)), add(ones_diff_rows, compare_blocks_rows))
mul(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(add(zeros_diff_rows, compare_blocks_rows), zeros_diff_cols)), mul(mul(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols)))
add(mul(ones_diff_cols, mul(ones_diff_cols, ones_diff_cols)), mul(mul(ones_diff_cols, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
and_(ge(ones_diff_cols, _if_then_else(True, 4, compare_blocks_rows)), le(_if_then_else(False, _if_then_else(le(_if_then_else(ge(max_col_clue, zeros_diff_cols), max_col_clue, max_row_clue), _if_then_else(False, max_row_clue, 4)), zeros_diff_cols, 3), max_row_clue), _if_then_else(True, max_col_clue, ones_diff_cols)))
or_(le(_if_then_else(le(_if_then_else(True, ones_diff_rows, ones_diff_rows), _if_then_else(False, ones_diff_rows, 4)), _if_then_else(and_(False, False), _if_then_else(True, compare_blocks_cols, zeros_diff_cols), _if_then_else(False, max_col_clue, 2)), _if_then_else(ge(ones_diff_rows, compare_blocks_rows), _if_then_else(False, 1, compare_blocks_rows), _if_then_else(True, zeros_diff_rows, zeros_diff_rows))), _if_then_else(or_(le(4, 2), or_(False, False)), _if_then_else(and_(False, False), _if_then_else(False, zeros_diff_rows, 2), _if_then_else(True, zeros_diff_rows, 4)), _if_then_else(or_(True, True), _if_then_else(False, max_row_clue, 0), _if_then_else(True, compare_blocks_rows, 0)))), ge(_if_then_else(le(_if_then_else(False, 0, max_row_clue), _if_then_else(False, 2, 4)), _if_then_else(ge(3, _if_then_else(ge(zeros_diff_rows, zeros_diff_rows), _if_then_else(True, zeros_diff_rows, max_row_clue), _if_then_else(True, compare_blocks_rows, ones_diff_rows))), _if_then_else(True, 3, compare_blocks_cols), _if_then_else(False, 3, max_col_clue)), _if_then_else(le(max_col_clue, _if_then_else(True, _if_then_else(False, 2, 1), 0)), _if_then_else(False, 0, zeros_diff_rows), max_col_clue)), _if_then_else(ge(_if_then_else(True, ones_diff_cols, _if_then_else(True, _if_then_else(False, 3, ones_diff_rows), max_row_clue)), _if_then_else(True, max_col_clue, 2)), _if_then_else(and_(False, False), _if_then_else(False, zeros_diff_cols, 0), _if_then_else(False, 0, compare_blocks_rows)), _if_then_else(or_(False, True), _if_then_else(False, compare_blocks_cols, ones_diff_rows), _if_then_else(True, zeros_diff_rows, compare_blocks_cols)))))
or_(le(_if_then_else(True, 3, zeros_diff_rows), _if_then_else(True, 0, 4)), le(_if_then_else(or_(False, False), _if_then_else(le(4, ones_diff_cols), _if_then_else(False, ones_diff_rows, 4), _if_then_else(True, 0, ones_diff_rows)), _if_then_else(False, zeros_diff_rows, compare_blocks_rows)), zeros_diff_rows))
False
le(_if_then_else(False, max_row_clue, 4), _if_then_else(True, _if_then_else(and_(le(zeros_diff_cols, max_col_clue), or_(True, True)), _if_then_else(ge(ones_diff_rows, compare_blocks_cols), _if_then_else(True, 3, 1), _if_then_else(True, ones_diff_cols, max_row_clue)), _if_then_else(or_(True, True), _if_then_else(True, compare_blocks_cols, 3), _if_then_else(and_(True, True), _if_then_else(False, zeros_diff_cols, 3), _if_then_else(True, 3, zeros_diff_rows)))), _if_then_else(ge(_if_then_else(True, ones_diff_cols, max_row_clue), _if_then_else(False, max_col_clue, 2)), _if_then_else(le(1, max_row_clue), _if_then_else(True, zeros_diff_cols, max_col_clue), _if_then_else(True, zeros_diff_rows, compare_blocks_rows)), _if_then_else(le(3, zeros_diff_cols), _if_then_else(True, 0, 0), _if_then_else(False, compare_blocks_rows, max_row_clue)))))
VAL TREES:
mul(mul(add(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, zeros_diff_cols)), add(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_cols, mul(compare_blocks_rows, ones_diff_cols)))), add(zeros_diff_cols, zeros_diff_cols))
mul(add(mul(zeros_diff_rows, ones_diff_cols), add(add(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, zeros_diff_cols))), mul(mul(add(ones_diff_rows, compare_blocks_cols), mul(ones_diff_cols, compare_blocks_cols)), add(add(zeros_diff_rows, zeros_diff_cols), add(compare_blocks_cols, ones_diff_cols))))
add(add(mul(add(mul(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_rows, compare_blocks_rows)), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_cols, zeros_diff_rows))), mul(add(add(compare_blocks_rows, ones_diff_rows), mul(ones_diff_cols, ones_diff_rows)), zeros_diff_cols)), mul(mul(mul(mul(ones_diff_rows, ones_diff_cols), add(ones_diff_cols, zeros_diff_cols)), mul(add(add(mul(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_rows, zeros_diff_rows)), ones_diff_cols), add(ones_diff_rows, compare_blocks_cols))), mul(add(add(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, zeros_diff_cols)), mul(add(zeros_diff_cols, ones_diff_cols), add(compare_blocks_rows, zeros_diff_cols)))))
add(mul(mul(ones_diff_cols, ones_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(mul(add(mul(compare_blocks_cols, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), ones_diff_cols), add(ones_diff_cols, ones_diff_rows)))
mul(mul(ones_diff_cols, zeros_diff_cols), mul(ones_diff_cols, zeros_diff_rows))
add(add(add(mul(ones_diff_cols, compare_blocks_cols), add(zeros_diff_rows, ones_diff_rows)), add(add(ones_diff_cols, add(compare_blocks_cols, zeros_diff_rows)), add(zeros_diff_rows, zeros_diff_rows))), mul(mul(add(ones_diff_cols, zeros_diff_cols), add(ones_diff_cols, ones_diff_cols)), mul(mul(ones_diff_rows, ones_diff_rows), mul(zeros_diff_rows, compare_blocks_rows))))
COND TREES:
or_(and_(le(_if_then_else(False, zeros_diff_cols, zeros_diff_rows), max_col_clue), le(2, 0)), and_(True, and_(le(2, 0), False)))
or_(ge(_if_then_else(le(max_row_clue, 4), _if_then_else(True, compare_blocks_rows, max_col_clue), _if_then_else(True, 1, zeros_diff_rows)), _if_then_else(and_(False, True), 3, _if_then_else(True, 3, compare_blocks_rows))), True)
le(_if_then_else(False, _if_then_else(False, _if_then_else(le(max_col_clue, zeros_diff_rows), _if_then_else(False, 4, max_row_clue), _if_then_else(True, _if_then_else(False, ones_diff_rows, 4), 3)), 4), _if_then_else(le(_if_then_else(True, ones_diff_rows, 4), zeros_diff_rows), _if_then_else(False, _if_then_else(False, _if_then_else(False, compare_blocks_cols, 1), max_row_clue), 4), _if_then_else(or_(True, False), zeros_diff_rows, max_row_clue))), _if_then_else(or_(True, False), _if_then_else(True, 2, 3), _if_then_else(True, _if_then_else(True, zeros_diff_cols, compare_blocks_rows), 0)))
or_(le(_if_then_else(True, _if_then_else(and_(False, False), _if_then_else(True, compare_blocks_rows, 4), _if_then_else(False, 0, compare_blocks_cols)), 4), _if_then_else(and_(and_(ge(0, 4), or_(False, False)), False), _if_then_else(True, _if_then_else(True, zeros_diff_rows, 0), max_row_clue), _if_then_else(True, zeros_diff_cols, _if_then_else(or_(True, False), compare_blocks_cols, ones_diff_rows)))), ge(zeros_diff_rows, 3))
and_(and_(ge(_if_then_else(True, 0, 1), _if_then_else(True, compare_blocks_cols, 2)), le(max_col_clue, 3)), ge(3, _if_then_else(and_(True, False), _if_then_else(True, compare_blocks_cols, zeros_diff_rows), _if_then_else(False, _if_then_else(True, max_col_clue, compare_blocks_rows), _if_then_else(True, compare_blocks_cols, 2)))))
VAL TREES:
mul(mul(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows)), add(add(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, ones_diff_cols))))
mul(add(mul(ones_diff_cols, zeros_diff_cols), mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, ones_diff_rows)))
mul(add(add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, ones_diff_cols)), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_rows, compare_blocks_rows))), add(add(add(compare_blocks_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_cols))))
mul(mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)), mul(add(ones_diff_cols, compare_blocks_rows), add(zeros_diff_rows, zeros_diff_cols)))
mul(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), mul(mul(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols)))
add(mul(add(ones_diff_cols, zeros_diff_cols), mul(ones_diff_cols, ones_diff_cols)), mul(mul(ones_diff_cols, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
ge(_if_then_else(and_(or_(True, False), or_(True, False)), _if_then_else(or_(False, True), _if_then_else(False, max_col_clue, 0), _if_then_else(True, ones_diff_rows, ones_diff_cols)), _if_then_else(le(max_col_clue, ones_diff_rows), _if_then_else(False, 2, 2), _if_then_else(False, ones_diff_cols, compare_blocks_cols))), _if_then_else(ge(_if_then_else(True, max_col_clue, compare_blocks_cols), _if_then_else(le(_if_then_else(True, max_col_clue, 4), _if_then_else(or_(True, True), compare_blocks_cols, 4)), max_row_clue, 1)), _if_then_else(and_(False, False), _if_then_else(False, zeros_diff_cols, compare_blocks_rows), _if_then_else(le(compare_blocks_cols, ones_diff_rows), compare_blocks_rows, max_col_clue)), _if_then_else(and_(le(1, max_col_clue), and_(False, False)), _if_then_else(True, 1, 4), _if_then_else(True, compare_blocks_cols, max_row_clue))))
le(_if_then_else(le(zeros_diff_rows, 0), _if_then_else(le(1, max_col_clue), zeros_diff_rows, zeros_diff_cols), _if_then_else(True, max_col_clue, 4)), _if_then_else(False, ones_diff_cols, _if_then_else(True, 1, 0)))
or_(and_(le(_if_then_else(or_(True, True), ones_diff_rows, 4), zeros_diff_rows), or_(and_(and_(True, False), ge(2, 2)), or_(ge(compare_blocks_rows, 0), and_(False, True)))), ge(_if_then_else(ge(_if_then_else(True, 0, 3), _if_then_else(False, max_col_clue, ones_diff_rows)), _if_then_else(and_(True, False), _if_then_else(False, 3, ones_diff_cols), _if_then_else(False, 4, 4)), _if_then_else(False, 4, max_row_clue)), _if_then_else(or_(and_(True, False), le(3, ones_diff_cols)), _if_then_else(le(4, ones_diff_cols), _if_then_else(False, ones_diff_rows, 4), _if_then_else(True, 0, ones_diff_rows)), _if_then_else(or_(True, False), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(True, ones_diff_rows, ones_diff_cols)))))
le(_if_then_else(le(_if_then_else(ge(max_col_clue, 0), _if_then_else(False, zeros_diff_rows, compare_blocks_cols), _if_then_else(False, 0, max_row_clue)), _if_then_else(ge(3, 3), _if_then_else(True, ones_diff_rows, 2), _if_then_else(True, 1, ones_diff_cols))), _if_then_else(le(_if_then_else(True, compare_blocks_cols, ones_diff_cols), _if_then_else(False, compare_blocks_rows, 3)), _if_then_else(ge(zeros_diff_cols, compare_blocks_rows), _if_then_else(False, 3, compare_blocks_rows), _if_then_else(False, zeros_diff_rows, 1)), _if_then_else(True, compare_blocks_cols, 4)), _if_then_else(le(_if_then_else(False, ones_diff_cols, 0), _if_then_else(False, compare_blocks_rows, ones_diff_cols)), _if_then_else(ge(compare_blocks_cols, max_row_clue), _if_then_else(True, ones_diff_cols, ones_diff_rows), _if_then_else(False, 1, 2)), _if_then_else(ge(3, zeros_diff_rows), _if_then_else(False, 0, compare_blocks_rows), _if_then_else(False, max_col_clue, ones_diff_rows)))), _if_then_else(or_(le(_if_then_else(True, compare_blocks_cols, compare_blocks_cols), _if_then_else(False, 3, compare_blocks_rows)), ge(_if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(True, 0, compare_blocks_rows))), _if_then_else(and_(le(zeros_diff_rows, zeros_diff_cols), or_(False, True)), _if_then_else(ge(2, 3), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(False, 4, ones_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, 0), _if_then_else(True, ones_diff_cols, 0))), _if_then_else(le(_if_then_else(False, ones_diff_rows, 0), _if_then_else(True, 3, ones_diff_cols)), _if_then_else(le(0, compare_blocks_rows), _if_then_else(True, 0, 0), _if_then_else(False, zeros_diff_rows, compare_blocks_cols)), _if_then_else(le(max_row_clue, 3), _if_then_else(False, max_row_clue, zeros_diff_rows), _if_then_else(False, compare_blocks_rows, 0)))))
ge(_if_then_else(and_(and_(True, False), ge(compare_blocks_rows, 0)), _if_then_else(True, 0, 0), compare_blocks_rows), _if_then_else(True, 3, compare_blocks_rows))
VAL TREES:
mul(add(mul(add(zeros_diff_rows, ones_diff_cols), mul(compare_blocks_rows, add(zeros_diff_cols, compare_blocks_rows))), add(add(ones_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))), mul(mul(mul(zeros_diff_cols, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), add(add(compare_blocks_cols, ones_diff_rows), add(zeros_diff_cols, zeros_diff_rows))))
add(add(add(add(mul(mul(compare_blocks_rows, zeros_diff_cols), zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), compare_blocks_rows), add(add(ones_diff_cols, compare_blocks_rows), compare_blocks_rows)), mul(mul(compare_blocks_rows, ones_diff_cols), mul(ones_diff_rows, compare_blocks_cols)))
mul(add(zeros_diff_cols, mul(ones_diff_cols, compare_blocks_cols)), add(mul(zeros_diff_rows, ones_diff_rows), add(zeros_diff_cols, compare_blocks_cols)))
mul(add(add(ones_diff_cols, compare_blocks_rows), ones_diff_rows), add(add(compare_blocks_rows, ones_diff_cols), add(zeros_diff_rows, mul(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_cols, compare_blocks_rows)))))
mul(ones_diff_rows, compare_blocks_cols)
add(mul(add(compare_blocks_cols, ones_diff_cols), mul(zeros_diff_rows, zeros_diff_rows)), mul(mul(compare_blocks_rows, ones_diff_cols), mul(mul(compare_blocks_cols, compare_blocks_rows), add(ones_diff_rows, compare_blocks_cols))))
COND TREES:
or_(and_(False, le(1, 0)), and_(True, le(2, 0)))
or_(ge(_if_then_else(True, _if_then_else(ge(_if_then_else(False, zeros_diff_rows, 1), _if_then_else(True, zeros_diff_rows, 3)), 3, compare_blocks_cols), 1), _if_then_else(or_(False, True), zeros_diff_rows, 3)), le(1, _if_then_else(False, ones_diff_rows, 4)))
le(_if_then_else(and_(True, le(_if_then_else(False, zeros_diff_cols, max_row_clue), _if_then_else(False, 2, 2))), _if_then_else(False, _if_then_else(False, 4, max_row_clue), 4), _if_then_else(ge(4, max_row_clue), 4, 2)), _if_then_else(or_(le(_if_then_else(True, ones_diff_rows, 4), zeros_diff_rows), False), _if_then_else(True, 2, 3), _if_then_else(True, _if_then_else(True, zeros_diff_cols, compare_blocks_rows), 0)))
or_(le(_if_then_else(True, _if_then_else(True, zeros_diff_rows, 0), max_row_clue), _if_then_else(and_(False, False), _if_then_else(True, max_row_clue, max_row_clue), _if_then_else(True, zeros_diff_cols, _if_then_else(True, 2, ones_diff_rows)))), and_(le(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, max_col_clue, compare_blocks_cols)), or_(or_(le(_if_then_else(True, compare_blocks_cols, 4), _if_then_else(and_(True, False), _if_then_else(True, _if_then_else(True, zeros_diff_rows, 0), max_row_clue), _if_then_else(True, zeros_diff_cols, _if_then_else(True, compare_blocks_cols, ones_diff_rows)))), False), ge(max_row_clue, ones_diff_cols))))
and_(and_(or_(True, True), le(_if_then_else(True, 4, zeros_diff_rows), _if_then_else(False, max_col_clue, zeros_diff_cols))), ge(_if_then_else(or_(False, False), _if_then_else(True, 3, compare_blocks_rows), _if_then_else(False, 4, max_row_clue)), _if_then_else(False, max_row_clue, _if_then_else(and_(True, False), _if_then_else(True, 3, 4), _if_then_else(False, zeros_diff_rows, compare_blocks_rows)))))
VAL TREES:
mul(mul(mul(zeros_diff_cols, compare_blocks_rows), mul(compare_blocks_cols, zeros_diff_rows)), mul(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, zeros_diff_cols)))))
mul(add(mul(ones_diff_cols, zeros_diff_cols), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows))), add(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_rows, ones_diff_rows)))
mul(add(add(add(ones_diff_cols, zeros_diff_cols), add(add(compare_blocks_cols, ones_diff_cols), add(zeros_diff_cols, compare_blocks_rows))), add(mul(zeros_diff_rows, zeros_diff_rows), add(ones_diff_rows, compare_blocks_rows))), add(add(add(compare_blocks_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_cols))))
mul(mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)), mul(compare_blocks_cols, add(zeros_diff_rows, add(mul(zeros_diff_rows, ones_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)))))
mul(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), mul(mul(compare_blocks_cols, add(mul(zeros_diff_rows, ones_diff_cols), add(compare_blocks_rows, ones_diff_cols))), add(mul(mul(compare_blocks_cols, compare_blocks_rows), add(compare_blocks_rows, zeros_diff_rows)), compare_blocks_cols)))
add(ones_diff_rows, ones_diff_cols)
COND TREES:
or_(False, and_(le(1, max_col_clue), or_(le(0, 2), and_(False, ge(compare_blocks_rows, ones_diff_rows)))))
or_(or_(False, True), ge(max_row_clue, 3))
le(_if_then_else(le(_if_then_else(ge(_if_then_else(False, 1, ones_diff_cols), _if_then_else(True, 2, zeros_diff_cols)), ones_diff_rows, 4), zeros_diff_rows), _if_then_else(False, _if_then_else(False, 4, max_row_clue), 4), _if_then_else(and_(and_(True, True), le(max_row_clue, ones_diff_rows)), zeros_diff_rows, _if_then_else(True, 1, zeros_diff_cols))), _if_then_else(or_(True, False), _if_then_else(True, 2, 3), _if_then_else(True, _if_then_else(True, zeros_diff_cols, compare_blocks_rows), 0)))
or_(False, and_(le(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, max_col_clue, compare_blocks_cols)), or_(or_(False, False), ge(max_row_clue, ones_diff_cols))))
and_(True, True)
VAL TREES:
mul(mul(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows)), ones_diff_cols), mul(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, mul(ones_diff_rows, ones_diff_cols)))))
mul(add(mul(ones_diff_cols, zeros_diff_cols), mul(add(zeros_diff_cols, compare_blocks_cols), add(mul(add(zeros_diff_cols, ones_diff_cols), add(zeros_diff_rows, compare_blocks_cols)), zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, ones_diff_rows)))
mul(add(add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, ones_diff_cols)), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_rows, compare_blocks_rows))), mul(zeros_diff_rows, compare_blocks_cols))
mul(mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_rows, add(zeros_diff_rows, zeros_diff_cols))), mul(compare_blocks_cols, ones_diff_rows))
mul(mul(mul(add(zeros_diff_rows, compare_blocks_cols), compare_blocks_cols), mul(compare_blocks_rows, add(mul(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols)))), mul(mul(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols)))
add(mul(add(ones_diff_cols, zeros_diff_rows), mul(ones_diff_cols, ones_diff_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
and_(ge(ones_diff_cols, _if_then_else(True, 4, compare_blocks_rows)), le(_if_then_else(False, _if_then_else(le(_if_then_else(ge(max_col_clue, zeros_diff_cols), max_col_clue, max_row_clue), _if_then_else(False, max_row_clue, 4)), zeros_diff_cols, 3), max_row_clue), _if_then_else(False, max_col_clue, ones_diff_cols)))
or_(le(_if_then_else(le(_if_then_else(True, ones_diff_rows, ones_diff_rows), _if_then_else(False, ones_diff_rows, 4)), _if_then_else(and_(False, False), _if_then_else(True, compare_blocks_cols, zeros_diff_cols), _if_then_else(False, max_col_clue, 2)), _if_then_else(ge(ones_diff_rows, compare_blocks_rows), _if_then_else(False, 1, compare_blocks_rows), _if_then_else(True, zeros_diff_rows, zeros_diff_rows))), _if_then_else(or_(le(4, 2), or_(False, le(_if_then_else(True, ones_diff_rows, ones_diff_rows), _if_then_else(False, ones_diff_rows, compare_blocks_rows)))), _if_then_else(and_(False, False), _if_then_else(False, zeros_diff_rows, 2), _if_then_else(True, zeros_diff_rows, 4)), _if_then_else(or_(True, True), _if_then_else(False, max_row_clue, 0), _if_then_else(True, compare_blocks_rows, 0)))), ge(_if_then_else(le(_if_then_else(False, 0, max_row_clue), _if_then_else(False, 2, 4)), _if_then_else(ge(3, _if_then_else(ge(zeros_diff_rows, zeros_diff_rows), _if_then_else(True, zeros_diff_rows, max_row_clue), _if_then_else(True, compare_blocks_rows, ones_diff_rows))), _if_then_else(True, 3, compare_blocks_cols), _if_then_else(False, 3, max_col_clue)), _if_then_else(le(max_col_clue, _if_then_else(True, _if_then_else(False, 2, 1), 0)), _if_then_else(False, 0, zeros_diff_rows), max_col_clue)), _if_then_else(ge(_if_then_else(True, ones_diff_cols, _if_then_else(True, _if_then_else(False, 3, ones_diff_rows), max_row_clue)), _if_then_else(True, max_col_clue, 2)), _if_then_else(and_(False, False), _if_then_else(False, zeros_diff_cols, 0), _if_then_else(False, 0, compare_blocks_rows)), _if_then_else(or_(False, True), _if_then_else(False, compare_blocks_cols, ones_diff_rows), _if_then_else(True, zeros_diff_rows, compare_blocks_cols)))))
or_(le(_if_then_else(True, 3, max_row_clue), _if_then_else(True, 0, 4)), le(_if_then_else(or_(False, False), _if_then_else(le(4, ones_diff_cols), _if_then_else(False, ones_diff_rows, 4), _if_then_else(True, 0, ones_diff_rows)), _if_then_else(False, zeros_diff_rows, compare_blocks_rows)), zeros_diff_rows))
False
le(_if_then_else(False, max_row_clue, 4), _if_then_else(True, _if_then_else(and_(le(zeros_diff_cols, max_col_clue), or_(True, True)), _if_then_else(ge(ones_diff_rows, compare_blocks_cols), _if_then_else(True, 3, 1), _if_then_else(True, ones_diff_cols, max_row_clue)), _if_then_else(or_(True, True), _if_then_else(True, compare_blocks_cols, 3), _if_then_else(and_(True, True), _if_then_else(False, zeros_diff_cols, 3), _if_then_else(True, 3, zeros_diff_rows)))), _if_then_else(ge(_if_then_else(True, ones_diff_cols, max_row_clue), _if_then_else(False, max_col_clue, 2)), _if_then_else(le(1, max_row_clue), _if_then_else(True, zeros_diff_cols, max_col_clue), _if_then_else(True, zeros_diff_rows, compare_blocks_rows)), _if_then_else(le(3, zeros_diff_cols), _if_then_else(True, 0, 0), _if_then_else(False, compare_blocks_rows, max_row_clue)))))
VAL TREES:
mul(mul(add(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, zeros_diff_cols)), add(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_cols, mul(compare_blocks_rows, ones_diff_cols)))), add(zeros_diff_cols, zeros_diff_cols))
mul(add(mul(zeros_diff_rows, ones_diff_cols), add(add(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, zeros_diff_cols))), mul(mul(add(ones_diff_rows, compare_blocks_cols), mul(ones_diff_cols, compare_blocks_cols)), add(add(zeros_diff_rows, zeros_diff_cols), add(compare_blocks_cols, ones_diff_cols))))
add(add(mul(add(mul(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_rows, compare_blocks_rows)), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_cols, zeros_diff_rows))), mul(add(add(compare_blocks_rows, ones_diff_rows), mul(ones_diff_cols, ones_diff_rows)), zeros_diff_cols)), mul(mul(mul(mul(ones_diff_rows, ones_diff_cols), add(ones_diff_cols, zeros_diff_cols)), mul(add(add(mul(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_rows, zeros_diff_rows)), ones_diff_cols), add(ones_diff_rows, compare_blocks_cols))), mul(add(add(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, zeros_diff_cols)), mul(add(zeros_diff_cols, ones_diff_cols), add(compare_blocks_rows, zeros_diff_cols)))))
add(mul(mul(ones_diff_cols, ones_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(mul(add(mul(compare_blocks_cols, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), ones_diff_cols), add(ones_diff_cols, ones_diff_rows)))
mul(mul(ones_diff_cols, zeros_diff_cols), mul(ones_diff_cols, zeros_diff_rows))
add(add(add(mul(ones_diff_cols, compare_blocks_cols), add(zeros_diff_rows, ones_diff_rows)), add(add(ones_diff_cols, add(compare_blocks_cols, zeros_diff_rows)), add(zeros_diff_rows, zeros_diff_rows))), mul(mul(add(ones_diff_cols, zeros_diff_cols), add(ones_diff_cols, ones_diff_cols)), mul(mul(ones_diff_rows, ones_diff_rows), mul(zeros_diff_rows, compare_blocks_rows))))
COND TREES:
or_(False, and_(le(1, max_col_clue), or_(le(0, 1), and_(False, True))))
or_(False, False)
le(_if_then_else(le(_if_then_else(ge(_if_then_else(False, 1, ones_diff_cols), _if_then_else(True, 2, zeros_diff_cols)), ones_diff_rows, 4), zeros_diff_rows), _if_then_else(False, _if_then_else(False, 4, zeros_diff_rows), 4), _if_then_else(or_(True, False), zeros_diff_rows, _if_then_else(True, 1, zeros_diff_cols))), _if_then_else(or_(True, False), _if_then_else(True, 2, 3), _if_then_else(True, _if_then_else(True, zeros_diff_cols, compare_blocks_rows), 0)))
or_(le(_if_then_else(True, compare_blocks_cols, 4), _if_then_else(and_(True, False), _if_then_else(True, _if_then_else(True, zeros_diff_rows, 0), max_row_clue), _if_then_else(True, zeros_diff_cols, _if_then_else(True, compare_blocks_cols, ones_diff_rows)))), and_(le(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, max_col_clue, compare_blocks_cols)), or_(or_(False, False), ge(max_row_clue, ones_diff_cols))))
False
VAL TREES:
mul(mul(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows)), ones_diff_cols), mul(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, ones_diff_cols))))
mul(add(mul(ones_diff_cols, zeros_diff_cols), mul(add(zeros_diff_cols, compare_blocks_cols), add(mul(add(zeros_diff_cols, ones_diff_cols), add(compare_blocks_cols, zeros_diff_rows)), zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, ones_diff_rows)))
mul(add(add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, ones_diff_cols)), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_rows, compare_blocks_rows))), add(add(add(compare_blocks_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(mul(ones_diff_rows, ones_diff_cols), compare_blocks_cols), add(zeros_diff_cols, zeros_diff_cols))))
mul(mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)), mul(compare_blocks_cols, ones_diff_rows))
mul(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(compare_blocks_rows, add(mul(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols)))), mul(mul(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols)))
add(mul(add(ones_diff_cols, zeros_diff_rows), mul(ones_diff_cols, ones_diff_cols)), mul(mul(ones_diff_cols, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
or_(and_(le(_if_then_else(or_(False, le(1, max_col_clue)), _if_then_else(True, compare_blocks_rows, compare_blocks_cols), _if_then_else(True, ones_diff_cols, zeros_diff_cols)), max_col_clue), False), and_(le(1, max_col_clue), and_(False, False)))
or_(True, le(_if_then_else(False, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, _if_then_else(True, zeros_diff_rows, 1))))
le(_if_then_else(True, _if_then_else(False, _if_then_else(False, 4, max_row_clue), 4), _if_then_else(and_(False, le(ones_diff_rows, 3)), zeros_diff_rows, _if_then_else(True, 1, zeros_diff_cols))), _if_then_else(or_(True, False), _if_then_else(False, zeros_diff_rows, zeros_diff_cols), _if_then_else(and_(True, True), _if_then_else(True, zeros_diff_cols, compare_blocks_rows), 0)))
or_(le(_if_then_else(and_(True, True), _if_then_else(False, ones_diff_rows, 2), _if_then_else(True, 3, max_col_clue)), _if_then_else(and_(False, False), _if_then_else(True, _if_then_else(True, zeros_diff_rows, 0), max_row_clue), _if_then_else(True, zeros_diff_cols, _if_then_else(True, compare_blocks_cols, ones_diff_rows)))), and_(le(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, max_col_clue, compare_blocks_cols)), or_(or_(False, False), ge(max_row_clue, max_row_clue))))
and_(and_(ge(_if_then_else(True, 0, 1), _if_then_else(True, compare_blocks_cols, 2)), le(4, 3)), and_(ge(_if_then_else(True, 0, 1), _if_then_else(or_(ge(0, 3), ge(max_row_clue, 4)), compare_blocks_cols, _if_then_else(False, 1, 2))), le(4, 3)))
VAL TREES:
mul(mul(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows)), add(add(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, ones_diff_cols))))
mul(add(mul(ones_diff_cols, zeros_diff_cols), mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, ones_diff_rows)))
mul(add(add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, ones_diff_cols)), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_rows, compare_blocks_rows))), add(add(add(compare_blocks_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_cols))))
mul(mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)), mul(add(ones_diff_cols, compare_blocks_rows), add(zeros_diff_rows, zeros_diff_cols)))
mul(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), mul(mul(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols)))
add(mul(add(ones_diff_cols, zeros_diff_cols), mul(ones_diff_cols, ones_diff_cols)), mul(mul(ones_diff_cols, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
or_(and_(le(_if_then_else(or_(False, True), _if_then_else(or_(False, True), _if_then_else(True, compare_blocks_rows, _if_then_else(False, max_row_clue, 0)), _if_then_else(True, ones_diff_cols, max_row_clue)), _if_then_else(True, ones_diff_cols, max_row_clue)), max_col_clue), le(2, 0)), and_(le(1, max_col_clue), and_(le(2, 0), False)))
or_(ge(compare_blocks_rows, _if_then_else(True, zeros_diff_rows, _if_then_else(and_(True, False), _if_then_else(False, compare_blocks_cols, 2), _if_then_else(True, ones_diff_rows, zeros_diff_cols)))), le(3, zeros_diff_rows))
le(_if_then_else(le(_if_then_else(True, ones_diff_rows, 4), zeros_diff_rows), _if_then_else(False, _if_then_else(False, 4, _if_then_else(False, 3, ones_diff_cols)), _if_then_else(le(2, 4), _if_then_else(False, compare_blocks_rows, compare_blocks_cols), _if_then_else(True, 3, ones_diff_rows))), _if_then_else(or_(True, False), zeros_diff_rows, _if_then_else(True, 1, zeros_diff_cols))), _if_then_else(or_(True, False), _if_then_else(True, 2, 3), _if_then_else(True, 4, 0)))
or_(le(_if_then_else(True, compare_blocks_cols, 4), _if_then_else(and_(False, False), _if_then_else(True, _if_then_else(True, zeros_diff_rows, 0), max_row_clue), _if_then_else(True, zeros_diff_cols, _if_then_else(True, compare_blocks_cols, ones_diff_rows)))), and_(le(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, max_col_clue, compare_blocks_cols)), or_(or_(False, False), or_(True, False))))
and_(ge(_if_then_else(or_(False, False), _if_then_else(True, 3, compare_blocks_rows), _if_then_else(False, 4, max_row_clue)), compare_blocks_rows), ge(_if_then_else(or_(False, False), _if_then_else(True, 3, compare_blocks_rows), _if_then_else(False, 4, max_row_clue)), _if_then_else(and_(True, False), 0, _if_then_else(False, max_row_clue, _if_then_else(le(2, 4), _if_then_else(True, 3, 4), _if_then_else(False, zeros_diff_rows, compare_blocks_rows))))))
VAL TREES:
mul(mul(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows)), add(add(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, mul(add(zeros_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))))))
mul(add(mul(ones_diff_cols, zeros_diff_cols), mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_cols), zeros_diff_rows))
mul(compare_blocks_rows, compare_blocks_rows)
mul(mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)), mul(add(ones_diff_cols, add(mul(zeros_diff_cols, zeros_diff_cols), mul(compare_blocks_rows, compare_blocks_rows))), add(zeros_diff_rows, zeros_diff_cols)))
mul(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(add(add(ones_diff_cols, zeros_diff_rows), mul(ones_diff_cols, ones_diff_cols)), zeros_diff_cols)), mul(mul(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols)))
add(zeros_diff_rows, mul(mul(ones_diff_cols, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
or_(and_(False, le(2, max_row_clue)), and_(True, and_(False, False)))
or_(ge(_if_then_else(True, _if_then_else(ge(_if_then_else(True, zeros_diff_rows, 1), _if_then_else(True, zeros_diff_rows, 3)), 3, compare_blocks_cols), 1), _if_then_else(or_(False, True), zeros_diff_rows, 3)), or_(le(4, 2), or_(False, False)))
le(_if_then_else(and_(True, le(_if_then_else(False, zeros_diff_cols, max_row_clue), _if_then_else(False, 2, 2))), _if_then_else(False, _if_then_else(False, 4, max_row_clue), 4), _if_then_else(ge(4, max_row_clue), 4, 2)), _if_then_else(or_(le(_if_then_else(True, ones_diff_rows, 4), zeros_diff_rows), False), _if_then_else(True, 2, 3), _if_then_else(True, _if_then_else(True, zeros_diff_cols, compare_blocks_rows), 0)))
or_(le(_if_then_else(le(max_col_clue, zeros_diff_rows), _if_then_else(or_(False, True), max_row_clue, compare_blocks_cols), _if_then_else(True, compare_blocks_cols, max_row_clue)), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(False, max_row_clue, compare_blocks_cols), _if_then_else(True, 4, max_col_clue))), and_(le(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, max_col_clue, compare_blocks_cols)), or_(or_(False, False), ge(max_row_clue, ones_diff_cols))))
and_(and_(or_(True, True), le(3, zeros_diff_cols)), ge(_if_then_else(or_(False, False), _if_then_else(True, 3, compare_blocks_rows), _if_then_else(False, 4, max_row_clue)), _if_then_else(and_(True, True), _if_then_else(True, ones_diff_rows, compare_blocks_cols), _if_then_else(False, max_row_clue, 0))))
VAL TREES:
mul(mul(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows)), add(add(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, zeros_diff_cols)))))
mul(add(mul(ones_diff_cols, zeros_diff_cols), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, ones_diff_rows)))
mul(add(add(add(ones_diff_cols, zeros_diff_cols), add(add(compare_blocks_cols, ones_diff_cols), add(zeros_diff_cols, compare_blocks_rows))), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_rows, compare_blocks_rows))), add(add(add(compare_blocks_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_cols))))
mul(mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)), mul(compare_blocks_cols, add(zeros_diff_rows, zeros_diff_cols)))
mul(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), mul(mul(compare_blocks_cols, zeros_diff_rows), add(mul(mul(compare_blocks_cols, compare_blocks_rows), add(compare_blocks_rows, zeros_diff_rows)), compare_blocks_cols)))
add(mul(add(ones_diff_cols, zeros_diff_cols), mul(ones_diff_cols, ones_diff_cols)), mul(mul(mul(ones_diff_cols, ones_diff_rows), add(ones_diff_cols, ones_diff_cols)), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
or_(and_(le(_if_then_else(or_(False, True), _if_then_else(True, compare_blocks_rows, compare_blocks_cols), _if_then_else(True, ones_diff_cols, max_row_clue)), max_col_clue), le(2, 0)), and_(le(1, max_col_clue), and_(False, False)))
or_(ge(_if_then_else(True, zeros_diff_rows, 1), _if_then_else(True, _if_then_else(True, 3, compare_blocks_cols), 1)), le(_if_then_else(True, ones_diff_rows, ones_diff_rows), _if_then_else(False, ones_diff_rows, compare_blocks_rows)))
le(_if_then_else(and_(True, le(_if_then_else(False, zeros_diff_cols, max_row_clue), _if_then_else(False, 2, 2))), _if_then_else(False, _if_then_else(False, 4, max_row_clue), 4), _if_then_else(or_(True, False), zeros_diff_rows, _if_then_else(True, 1, zeros_diff_cols))), _if_then_else(or_(True, False), _if_then_else(True, 2, 3), _if_then_else(True, _if_then_else(True, zeros_diff_cols, compare_blocks_rows), 0)))
or_(le(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(and_(False, False), _if_then_else(True, _if_then_else(True, zeros_diff_rows, 0), max_row_clue), _if_then_else(True, zeros_diff_cols, _if_then_else(True, compare_blocks_cols, ones_diff_rows)))), and_(le(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, max_col_clue, compare_blocks_cols)), or_(or_(False, False), ge(max_row_clue, ones_diff_cols))))
and_(and_(ge(_if_then_else(True, 0, 1), _if_then_else(True, compare_blocks_cols, 2)), le(4, 3)), ge(_if_then_else(or_(False, False), _if_then_else(True, 3, compare_blocks_rows), _if_then_else(False, 4, max_row_clue)), _if_then_else(and_(True, False), _if_then_else(True, compare_blocks_cols, zeros_diff_rows), _if_then_else(False, max_row_clue, _if_then_else(le(2, 4), _if_then_else(True, 3, 4), _if_then_else(False, zeros_diff_rows, compare_blocks_rows))))))
VAL TREES:
mul(mul(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows)), add(add(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, ones_diff_cols))))
mul(add(mul(ones_diff_cols, zeros_diff_cols), mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, ones_diff_rows)))
mul(add(add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, ones_diff_cols)), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_rows, compare_blocks_rows))), add(add(add(compare_blocks_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_cols))))
mul(mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)), mul(add(ones_diff_cols, compare_blocks_rows), add(zeros_diff_rows, zeros_diff_cols)))
mul(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), mul(mul(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols)))
add(mul(add(ones_diff_cols, zeros_diff_cols), mul(ones_diff_cols, ones_diff_cols)), mul(mul(ones_diff_cols, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
or_(and_(le(_if_then_else(True, ones_diff_rows, ones_diff_cols), _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), le(2, 0)), and_(le(max_row_clue, max_col_clue), and_(False, False)))
or_(ge(_if_then_else(True, zeros_diff_rows, 1), _if_then_else(True, zeros_diff_rows, 3)), le(_if_then_else(or_(True, False), zeros_diff_rows, 0), _if_then_else(False, ones_diff_rows, compare_blocks_rows)))
le(_if_then_else(le(_if_then_else(True, ones_diff_rows, 4), zeros_diff_rows), _if_then_else(False, _if_then_else(False, 4, max_row_clue), 4), _if_then_else(and_(False, le(ones_diff_rows, 3)), zeros_diff_rows, _if_then_else(True, 1, zeros_diff_cols))), _if_then_else(or_(True, False), _if_then_else(or_(and_(True, False), le(3, ones_diff_cols)), _if_then_else(False, 4, max_row_clue), _if_then_else(or_(True, True), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(True, ones_diff_rows, ones_diff_cols))), _if_then_else(True, _if_then_else(True, zeros_diff_cols, compare_blocks_rows), 0)))
or_(le(_if_then_else(True, max_row_clue, zeros_diff_rows), _if_then_else(and_(False, False), _if_then_else(True, _if_then_else(True, zeros_diff_rows, 0), max_row_clue), _if_then_else(True, zeros_diff_cols, _if_then_else(and_(le(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, max_col_clue, compare_blocks_cols)), or_(or_(False, False), ge(max_row_clue, max_row_clue))), compare_blocks_cols, ones_diff_rows)))), and_(le(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, max_col_clue, compare_blocks_cols)), or_(True, ge(max_row_clue, max_row_clue))))
and_(and_(ge(_if_then_else(True, 0, 1), _if_then_else(True, _if_then_else(True, 2, ones_diff_cols), 2)), le(4, 3)), ge(_if_then_else(or_(False, False), _if_then_else(True, 3, compare_blocks_rows), _if_then_else(False, 4, max_row_clue)), _if_then_else(and_(True, False), _if_then_else(True, compare_blocks_cols, zeros_diff_rows), _if_then_else(False, max_row_clue, _if_then_else(ge(_if_then_else(or_(False, False), _if_then_else(True, 3, compare_blocks_rows), _if_then_else(False, 4, max_row_clue)), _if_then_else(and_(True, False), _if_then_else(True, compare_blocks_cols, zeros_diff_rows), _if_then_else(False, max_row_clue, _if_then_else(and_(True, False), _if_then_else(False, 4, max_col_clue), _if_then_else(False, zeros_diff_rows, compare_blocks_rows))))), _if_then_else(True, 3, 4), _if_then_else(False, zeros_diff_cols, 2))))))
VAL TREES:
mul(mul(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows)), add(add(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, ones_diff_cols))))
mul(add(mul(ones_diff_cols, zeros_diff_cols), mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, ones_diff_rows)))
mul(add(add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, ones_diff_cols)), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_rows, compare_blocks_rows))), add(add(add(compare_blocks_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_cols))))
mul(mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)), mul(add(ones_diff_cols, compare_blocks_rows), add(zeros_diff_rows, zeros_diff_cols)))
mul(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), mul(mul(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols)))
add(mul(add(ones_diff_cols, zeros_diff_cols), mul(ones_diff_cols, ones_diff_cols)), mul(mul(ones_diff_cols, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
or_(and_(le(_if_then_else(le(_if_then_else(ge(max_col_clue, zeros_diff_cols), max_col_clue, max_row_clue), _if_then_else(False, max_row_clue, 4)), _if_then_else(or_(False, True), _if_then_else(True, compare_blocks_rows, compare_blocks_cols), _if_then_else(True, ones_diff_cols, _if_then_else(False, 0, ones_diff_cols))), _if_then_else(True, ones_diff_cols, _if_then_else(False, 0, ones_diff_cols))), max_col_clue), le(2, 0)), and_(le(1, max_col_clue), and_(False, False)))
or_(le(1, max_col_clue), le(_if_then_else(False, zeros_diff_rows, 0), _if_then_else(False, ones_diff_rows, max_row_clue)))
le(_if_then_else(le(_if_then_else(True, ones_diff_rows, 4), zeros_diff_rows), _if_then_else(False, _if_then_else(le(compare_blocks_rows, ones_diff_cols), _if_then_else(False, ones_diff_rows, 4), _if_then_else(True, 0, ones_diff_rows)), 4), _if_then_else(False, zeros_diff_rows, _if_then_else(True, 1, zeros_diff_cols))), _if_then_else(or_(True, False), _if_then_else(True, 2, 3), _if_then_else(True, 0, 4)))
or_(le(_if_then_else(True, compare_blocks_cols, 4), _if_then_else(False, 1, 2)), True)
and_(and_(ge(_if_then_else(True, 0, 1), _if_then_else(True, compare_blocks_cols, 2)), le(4, 3)), and_(True, False))
VAL TREES:
mul(mul(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows)), add(add(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, ones_diff_cols))))
mul(add(mul(ones_diff_cols, zeros_diff_cols), mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, ones_diff_rows)))
mul(add(add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, ones_diff_cols)), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_rows, compare_blocks_rows))), add(add(add(compare_blocks_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_cols))))
mul(mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)), mul(add(ones_diff_cols, compare_blocks_rows), add(zeros_diff_rows, zeros_diff_cols)))
mul(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), mul(mul(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols)))
add(mul(add(ones_diff_cols, zeros_diff_cols), mul(ones_diff_cols, ones_diff_cols)), mul(mul(ones_diff_cols, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
ge(_if_then_else(and_(or_(True, False), or_(True, True)), _if_then_else(or_(False, True), _if_then_else(False, max_col_clue, 0), _if_then_else(True, ones_diff_cols, ones_diff_cols)), _if_then_else(le(max_col_clue, ones_diff_rows), max_col_clue, _if_then_else(False, ones_diff_cols, compare_blocks_cols))), _if_then_else(ge(_if_then_else(True, max_col_clue, compare_blocks_cols), _if_then_else(le(_if_then_else(True, max_col_clue, max_row_clue), _if_then_else(False, compare_blocks_cols, 4)), max_row_clue, 1)), _if_then_else(and_(False, False), _if_then_else(False, zeros_diff_cols, compare_blocks_rows), _if_then_else(True, compare_blocks_rows, max_col_clue)), _if_then_else(ge(max_col_clue, zeros_diff_cols), _if_then_else(True, 1, 4), _if_then_else(True, compare_blocks_cols, max_row_clue))))
le(_if_then_else(le(zeros_diff_rows, 0), _if_then_else(True, zeros_diff_rows, 3), _if_then_else(True, max_col_clue, 4)), _if_then_else(and_(False, False), zeros_diff_rows, _if_then_else(True, _if_then_else(False, 3, ones_diff_rows), max_row_clue)))
or_(and_(and_(le(_if_then_else(False, max_col_clue, 0), _if_then_else(False, 0, 3)), or_(le(zeros_diff_rows, 3), and_(True, False))), or_(and_(and_(True, False), ge(2, 2)), or_(ge(compare_blocks_rows, 0), and_(False, True)))), ge(_if_then_else(ge(_if_then_else(True, 0, 3), _if_then_else(False, max_col_clue, ones_diff_rows)), _if_then_else(and_(True, False), _if_then_else(False, 3, ones_diff_cols), ones_diff_rows), _if_then_else(le(max_col_clue, zeros_diff_rows), _if_then_else(False, 4, max_row_clue), _if_then_else(True, max_row_clue, 3))), _if_then_else(or_(and_(True, False), le(3, ones_diff_cols)), _if_then_else(le(compare_blocks_rows, ones_diff_cols), _if_then_else(False, ones_diff_rows, 4), _if_then_else(True, 0, ones_diff_rows)), _if_then_else(or_(True, True), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(ge(1, max_row_clue), _if_then_else(False, 2, 1), _if_then_else(False, 2, 2))))))
le(_if_then_else(le(_if_then_else(ge(max_col_clue, 0), _if_then_else(False, zeros_diff_rows, compare_blocks_cols), _if_then_else(False, 0, max_row_clue)), _if_then_else(ge(3, 3), _if_then_else(True, ones_diff_rows, 2), _if_then_else(True, 1, ones_diff_cols))), _if_then_else(or_(and_(True, False), or_(True, False)), _if_then_else(ge(zeros_diff_cols, compare_blocks_rows), _if_then_else(False, 3, 2), _if_then_else(False, zeros_diff_rows, 1)), _if_then_else(or_(False, False), _if_then_else(True, 1, compare_blocks_cols), _if_then_else(True, ones_diff_cols, ones_diff_cols))), _if_then_else(le(_if_then_else(False, ones_diff_cols, 0), _if_then_else(False, compare_blocks_rows, ones_diff_cols)), _if_then_else(and_(True, False), _if_then_else(True, ones_diff_cols, ones_diff_rows), _if_then_else(False, 1, 2)), _if_then_else(ge(3, zeros_diff_rows), _if_then_else(False, 0, compare_blocks_rows), _if_then_else(False, max_col_clue, ones_diff_rows)))), _if_then_else(or_(le(_if_then_else(True, compare_blocks_cols, compare_blocks_cols), _if_then_else(False, 3, compare_blocks_rows)), ge(_if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(True, 0, compare_blocks_rows))), _if_then_else(and_(le(max_row_clue, zeros_diff_rows), le(max_col_clue, 4)), _if_then_else(ge(2, 3), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, 4, ones_diff_cols)), _if_then_else(le(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, max_col_clue, compare_blocks_cols)), _if_then_else(False, max_col_clue, 0), _if_then_else(True, ones_diff_cols, 0))), _if_then_else(le(_if_then_else(False, ones_diff_rows, 0), _if_then_else(True, 3, ones_diff_cols)), _if_then_else(le(0, compare_blocks_rows), _if_then_else(True, 0, 0), _if_then_else(False, zeros_diff_rows, compare_blocks_cols)), _if_then_else(le(max_row_clue, 3), _if_then_else(False, max_row_clue, zeros_diff_rows), _if_then_else(False, compare_blocks_rows, zeros_diff_cols)))))
ge(_if_then_else(True, _if_then_else(True, 0, 0), _if_then_else(True, compare_blocks_cols, 2)), _if_then_else(and_(False, True), _if_then_else(True, 2, ones_diff_cols), 4))
VAL TREES:
mul(add(mul(add(zeros_diff_rows, ones_diff_cols), zeros_diff_rows), add(add(ones_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))), mul(mul(mul(zeros_diff_cols, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), add(add(compare_blocks_cols, zeros_diff_rows), add(zeros_diff_cols, zeros_diff_rows))))
add(add(add(add(mul(compare_blocks_rows, zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_cols, compare_blocks_rows), compare_blocks_rows)), mul(mul(compare_blocks_rows, ones_diff_cols), mul(add(zeros_diff_rows, ones_diff_cols), compare_blocks_cols)))
mul(add(add(ones_diff_cols, mul(zeros_diff_rows, compare_blocks_cols)), mul(ones_diff_cols, ones_diff_cols)), add(mul(zeros_diff_rows, mul(compare_blocks_cols, compare_blocks_cols)), add(zeros_diff_cols, compare_blocks_cols)))
mul(add(add(ones_diff_cols, compare_blocks_rows), mul(compare_blocks_rows, compare_blocks_rows)), add(add(compare_blocks_rows, ones_diff_cols), add(zeros_diff_rows, mul(ones_diff_cols, ones_diff_cols))))
mul(compare_blocks_cols, ones_diff_cols)
add(mul(add(compare_blocks_cols, ones_diff_cols), mul(zeros_diff_cols, compare_blocks_cols)), mul(mul(compare_blocks_rows, ones_diff_cols), add(mul(mul(ones_diff_cols, ones_diff_rows), mul(compare_blocks_cols, ones_diff_rows)), compare_blocks_cols)))
COND TREES:
or_(and_(le(_if_then_else(or_(False, True), _if_then_else(True, compare_blocks_rows, compare_blocks_cols), _if_then_else(True, ones_diff_cols, _if_then_else(False, 0, ones_diff_cols))), _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), le(2, 0)), and_(le(max_row_clue, max_col_clue), and_(False, False)))
or_(ge(_if_then_else(True, zeros_diff_rows, 1), _if_then_else(True, zeros_diff_rows, 3)), le(_if_then_else(or_(True, False), zeros_diff_rows, 0), _if_then_else(False, ones_diff_rows, compare_blocks_rows)))
le(_if_then_else(le(_if_then_else(True, ones_diff_rows, 4), zeros_diff_rows), _if_then_else(False, _if_then_else(False, 4, max_row_clue), 4), _if_then_else(and_(False, le(ones_diff_rows, 3)), zeros_diff_rows, _if_then_else(True, 1, zeros_diff_cols))), _if_then_else(or_(True, False), _if_then_else(or_(and_(True, False), le(3, ones_diff_cols)), _if_then_else(le(compare_blocks_rows, ones_diff_cols), _if_then_else(False, ones_diff_rows, 4), _if_then_else(True, 0, ones_diff_rows)), _if_then_else(or_(True, True), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(True, ones_diff_rows, ones_diff_cols))), _if_then_else(True, _if_then_else(True, zeros_diff_cols, compare_blocks_rows), 0)))
or_(le(_if_then_else(True, max_row_clue, zeros_diff_rows), _if_then_else(and_(False, False), _if_then_else(True, _if_then_else(True, zeros_diff_rows, 0), max_row_clue), _if_then_else(True, zeros_diff_cols, _if_then_else(True, compare_blocks_cols, ones_diff_rows)))), and_(le(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, max_col_clue, compare_blocks_cols)), or_(True, ge(max_row_clue, max_row_clue))))
and_(and_(ge(_if_then_else(True, 0, 1), _if_then_else(True, _if_then_else(True, 2, ones_diff_cols), 2)), le(4, 3)), ge(_if_then_else(or_(False, False), _if_then_else(True, 3, compare_blocks_rows), _if_then_else(False, 4, max_row_clue)), _if_then_else(and_(True, False), _if_then_else(True, compare_blocks_cols, zeros_diff_rows), _if_then_else(False, max_row_clue, _if_then_else(and_(True, False), _if_then_else(True, 3, 4), _if_then_else(False, zeros_diff_cols, 2))))))
VAL TREES:
mul(mul(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows)), add(add(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, ones_diff_cols))))
mul(add(mul(ones_diff_cols, zeros_diff_cols), mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, ones_diff_rows)))
mul(add(add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, ones_diff_cols)), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_rows, compare_blocks_rows))), add(add(add(compare_blocks_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_cols))))
mul(mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)), mul(add(ones_diff_cols, compare_blocks_rows), add(zeros_diff_rows, zeros_diff_cols)))
mul(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), mul(mul(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols)))
add(mul(add(ones_diff_cols, zeros_diff_cols), mul(ones_diff_cols, ones_diff_cols)), mul(mul(ones_diff_cols, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
ge(_if_then_else(True, ones_diff_cols, 3), _if_then_else(True, 4, 2))
or_(True, or_(False, True))
le(_if_then_else(True, _if_then_else(False, _if_then_else(False, 4, max_row_clue), 4), _if_then_else(and_(False, le(ones_diff_rows, 3)), zeros_diff_rows, _if_then_else(True, 1, zeros_diff_cols))), _if_then_else(or_(True, False), _if_then_else(ge(_if_then_else(True, 0, 3), _if_then_else(False, max_col_clue, ones_diff_rows)), _if_then_else(and_(True, False), _if_then_else(False, 3, ones_diff_cols), _if_then_else(False, 4, 4)), _if_then_else(le(max_col_clue, zeros_diff_rows), _if_then_else(False, 4, max_row_clue), _if_then_else(True, 2, 3))), _if_then_else(or_(ge(compare_blocks_cols, 1), and_(True, False)), _if_then_else(True, zeros_diff_cols, compare_blocks_rows), 0)))
or_(le(_if_then_else(and_(True, True), _if_then_else(True, ones_diff_rows, 2), _if_then_else(True, 3, max_col_clue)), _if_then_else(and_(False, False), _if_then_else(True, _if_then_else(True, zeros_diff_rows, 0), max_row_clue), _if_then_else(ge(_if_then_else(True, 1, max_row_clue), _if_then_else(True, 1, 0)), _if_then_else(le(0, compare_blocks_rows), _if_then_else(True, 0, 0), _if_then_else(False, zeros_diff_rows, compare_blocks_cols)), _if_then_else(le(max_row_clue, 3), _if_then_else(False, max_row_clue, zeros_diff_rows), _if_then_else(False, compare_blocks_rows, zeros_diff_cols))))), and_(le(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, max_col_clue, compare_blocks_cols)), or_(or_(False, False), ge(max_row_clue, max_row_clue))))
and_(and_(ge(_if_then_else(True, 0, 1), _if_then_else(True, compare_blocks_cols, 2)), True), ge(_if_then_else(or_(False, False), _if_then_else(True, 3, compare_blocks_rows), _if_then_else(False, 4, max_row_clue)), _if_then_else(and_(True, False), _if_then_else(True, compare_blocks_cols, zeros_diff_rows), _if_then_else(le(_if_then_else(True, compare_blocks_cols, compare_blocks_cols), _if_then_else(False, ones_diff_cols, 1)), _if_then_else(and_(True, True), _if_then_else(True, zeros_diff_rows, zeros_diff_rows), _if_then_else(True, 1, 1)), _if_then_else(and_(False, False), _if_then_else(True, 3, 4), _if_then_else(False, zeros_diff_rows, compare_blocks_rows))))))
VAL TREES:
mul(mul(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows)), add(add(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, ones_diff_cols))))
mul(add(mul(ones_diff_cols, zeros_diff_cols), mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, ones_diff_rows)))
mul(add(add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, ones_diff_cols)), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_rows, compare_blocks_rows))), add(add(add(compare_blocks_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_cols))))
mul(mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)), mul(add(ones_diff_cols, compare_blocks_rows), add(zeros_diff_rows, zeros_diff_cols)))
mul(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), mul(mul(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols)))
add(mul(add(ones_diff_cols, zeros_diff_cols), mul(ones_diff_cols, ones_diff_cols)), mul(mul(ones_diff_cols, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
ge(_if_then_else(and_(True, True), _if_then_else(False, compare_blocks_cols, zeros_diff_rows), _if_then_else(True, 4, 2)), _if_then_else(ge(_if_then_else(True, max_col_clue, compare_blocks_cols), _if_then_else(le(_if_then_else(True, max_col_clue, max_row_clue), _if_then_else(False, compare_blocks_cols, 4)), max_row_clue, 1)), _if_then_else(and_(False, False), _if_then_else(False, zeros_diff_cols, compare_blocks_rows), _if_then_else(True, compare_blocks_rows, max_col_clue)), _if_then_else(ge(max_col_clue, zeros_diff_cols), _if_then_else(True, 1, 4), _if_then_else(True, compare_blocks_cols, max_row_clue))))
le(_if_then_else(le(zeros_diff_rows, _if_then_else(False, max_col_clue, compare_blocks_rows)), _if_then_else(or_(False, True), zeros_diff_rows, zeros_diff_cols), _if_then_else(True, max_col_clue, 4)), _if_then_else(True, _if_then_else(le(3, zeros_diff_rows), compare_blocks_cols, max_row_clue), _if_then_else(True, _if_then_else(False, 3, ones_diff_rows), max_row_clue)))
or_(and_(and_(le(_if_then_else(False, max_col_clue, 0), _if_then_else(False, 0, 3)), or_(le(zeros_diff_rows, 3), and_(True, False))), or_(and_(and_(True, False), ge(2, 2)), or_(ge(compare_blocks_rows, 0), and_(False, True)))), ge(_if_then_else(ge(_if_then_else(True, 0, 3), _if_then_else(False, max_col_clue, ones_diff_rows)), _if_then_else(and_(True, False), _if_then_else(False, 3, ones_diff_cols), _if_then_else(False, 4, 4)), _if_then_else(le(max_col_clue, zeros_diff_rows), _if_then_else(False, 4, max_row_clue), _if_then_else(True, 2, 3))), _if_then_else(or_(and_(True, False), le(3, _if_then_else(True, ones_diff_cols, 0))), _if_then_else(le(compare_blocks_rows, ones_diff_cols), _if_then_else(False, ones_diff_rows, 4), _if_then_else(True, 0, ones_diff_rows)), _if_then_else(or_(True, True), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(True, ones_diff_rows, ones_diff_cols)))))
le(_if_then_else(le(_if_then_else(ge(max_col_clue, 0), _if_then_else(False, zeros_diff_rows, compare_blocks_cols), _if_then_else(False, 0, max_row_clue)), _if_then_else(ge(3, 3), _if_then_else(False, ones_diff_rows, 2), _if_then_else(True, 1, ones_diff_cols))), _if_then_else(or_(and_(True, False), or_(True, False)), _if_then_else(ge(zeros_diff_cols, compare_blocks_rows), _if_then_else(False, 3, compare_blocks_rows), _if_then_else(False, zeros_diff_rows, 1)), _if_then_else(or_(False, False), _if_then_else(True, 1, compare_blocks_cols), _if_then_else(True, ones_diff_cols, ones_diff_cols))), _if_then_else(le(_if_then_else(False, ones_diff_cols, 0), _if_then_else(False, compare_blocks_rows, ones_diff_cols)), _if_then_else(and_(True, False), _if_then_else(True, ones_diff_cols, ones_diff_rows), _if_then_else(False, 1, 2)), _if_then_else(ge(3, zeros_diff_rows), _if_then_else(False, 0, compare_blocks_rows), _if_then_else(False, max_col_clue, ones_diff_rows)))), _if_then_else(or_(le(_if_then_else(True, compare_blocks_cols, compare_blocks_cols), _if_then_else(False, 3, compare_blocks_rows)), ge(_if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(True, 0, compare_blocks_rows))), _if_then_else(and_(le(max_row_clue, zeros_diff_rows), le(max_col_clue, 4)), _if_then_else(ge(2, 3), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(False, 4, ones_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, 0), _if_then_else(True, ones_diff_cols, 0))), _if_then_else(le(_if_then_else(False, ones_diff_rows, 0), _if_then_else(True, 3, ones_diff_cols)), _if_then_else(le(0, compare_blocks_rows), _if_then_else(True, 0, 0), _if_then_else(False, zeros_diff_rows, compare_blocks_cols)), _if_then_else(or_(True, True), _if_then_else(False, ones_diff_rows, ones_diff_cols), _if_then_else(True, compare_blocks_cols, zeros_diff_cols)))))
ge(_if_then_else(or_(False, True), _if_then_else(True, 0, 0), _if_then_else(False, 4, max_col_clue)), _if_then_else(and_(True, True), _if_then_else(True, 2, _if_then_else(True, 2, compare_blocks_rows)), _if_then_else(False, max_row_clue, 2)))
VAL TREES:
mul(add(mul(add(zeros_diff_rows, ones_diff_cols), zeros_diff_rows), add(add(ones_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))), mul(mul(mul(zeros_diff_cols, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), add(add(compare_blocks_cols, zeros_diff_rows), add(zeros_diff_cols, zeros_diff_rows))))
add(add(add(add(mul(compare_blocks_rows, zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_cols, compare_blocks_rows), compare_blocks_rows)), mul(mul(compare_blocks_rows, ones_diff_cols), mul(ones_diff_rows, compare_blocks_cols)))
mul(add(add(ones_diff_cols, mul(zeros_diff_rows, compare_blocks_cols)), mul(ones_diff_cols, ones_diff_cols)), add(mul(zeros_diff_rows, ones_diff_rows), add(zeros_diff_cols, compare_blocks_cols)))
mul(add(add(ones_diff_cols, compare_blocks_rows), mul(compare_blocks_rows, compare_blocks_rows)), add(add(compare_blocks_rows, ones_diff_cols), add(zeros_diff_rows, ones_diff_cols)))
add(zeros_diff_cols, mul(add(ones_diff_cols, mul(mul(zeros_diff_cols, zeros_diff_rows), mul(zeros_diff_cols, compare_blocks_rows))), mul(zeros_diff_rows, add(compare_blocks_rows, compare_blocks_rows))))
add(mul(add(compare_blocks_cols, ones_diff_cols), mul(zeros_diff_rows, zeros_diff_rows)), mul(mul(compare_blocks_rows, ones_diff_cols), add(mul(mul(ones_diff_cols, ones_diff_rows), mul(compare_blocks_cols, ones_diff_rows)), compare_blocks_cols)))
COND TREES:
or_(and_(le(_if_then_else(le(_if_then_else(ge(max_col_clue, zeros_diff_cols), max_col_clue, max_row_clue), _if_then_else(False, max_row_clue, 4)), _if_then_else(True, ones_diff_rows, ones_diff_cols), _if_then_else(True, ones_diff_cols, _if_then_else(False, 0, ones_diff_cols))), max_col_clue), le(2, 0)), and_(le(1, max_col_clue), and_(False, False)))
or_(ge(_if_then_else(True, _if_then_else(True, 3, compare_blocks_cols), 1), _if_then_else(or_(False, True), zeros_diff_rows, 3)), le(_if_then_else(False, zeros_diff_rows, 0), _if_then_else(False, ones_diff_rows, max_row_clue)))
le(_if_then_else(le(_if_then_else(True, ones_diff_rows, 4), zeros_diff_rows), _if_then_else(False, _if_then_else(False, 4, max_row_clue), 4), _if_then_else(False, zeros_diff_rows, _if_then_else(True, 1, zeros_diff_cols))), _if_then_else(le(_if_then_else(False, zeros_diff_cols, max_row_clue), _if_then_else(False, 2, 2)), _if_then_else(True, 2, 3), _if_then_else(True, 0, 4)))
or_(le(_if_then_else(True, compare_blocks_cols, 4), _if_then_else(False, 1, 2)), and_(and_(False, False), or_(or_(False, False), ge(max_row_clue, max_row_clue))))
and_(and_(ge(_if_then_else(True, 0, 1), _if_then_else(True, compare_blocks_cols, 2)), le(4, 3)), ge(_if_then_else(or_(False, False), _if_then_else(True, 3, compare_blocks_rows), _if_then_else(False, 4, max_row_clue)), _if_then_else(True, ones_diff_rows, compare_blocks_cols)))
VAL TREES:
mul(mul(add(zeros_diff_cols, compare_blocks_rows), add(add(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, ones_diff_cols))))
mul(add(mul(ones_diff_cols, zeros_diff_cols), mul(add(zeros_diff_cols, zeros_diff_cols), add(compare_blocks_cols, zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, ones_diff_rows)))
mul(add(add(add(ones_diff_cols, zeros_diff_cols), add(add(zeros_diff_cols, zeros_diff_cols), ones_diff_cols)), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_rows, compare_blocks_rows))), add(add(add(compare_blocks_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_cols))))
mul(mul(add(ones_diff_cols, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)), mul(add(ones_diff_cols, compare_blocks_rows), add(zeros_diff_rows, zeros_diff_cols)))
mul(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), mul(mul(compare_blocks_cols, zeros_diff_rows), mul(ones_diff_cols, ones_diff_rows)))
add(mul(add(ones_diff_cols, zeros_diff_cols), mul(ones_diff_cols, ones_diff_cols)), mul(mul(mul(compare_blocks_cols, ones_diff_rows), compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
or_(and_(False, le(2, max_col_clue)), and_(le(1, _if_then_else(le(0, 0), _if_then_else(False, max_row_clue, zeros_diff_rows), _if_then_else(False, 2, compare_blocks_rows))), and_(False, False)))
and_(or_(True, True), ge(compare_blocks_rows, 3))
le(_if_then_else(True, _if_then_else(False, _if_then_else(False, 4, max_row_clue), 4), _if_then_else(le(zeros_diff_cols, 3), zeros_diff_rows, 2)), _if_then_else(or_(and_(True, le(_if_then_else(False, zeros_diff_cols, max_row_clue), _if_then_else(True, 2, 2))), False), _if_then_else(True, 2, 3), _if_then_else(True, _if_then_else(True, zeros_diff_cols, compare_blocks_rows), 0)))
or_(le(_if_then_else(True, compare_blocks_cols, 4), _if_then_else(and_(False, False), _if_then_else(True, _if_then_else(True, zeros_diff_rows, 0), max_row_clue), _if_then_else(True, _if_then_else(True, zeros_diff_rows, 4), _if_then_else(True, compare_blocks_cols, ones_diff_rows)))), and_(le(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, max_col_clue, compare_blocks_cols)), ge(_if_then_else(True, compare_blocks_rows, zeros_diff_cols), _if_then_else(True, zeros_diff_rows, 1))))
and_(and_(ge(_if_then_else(True, 0, 1), _if_then_else(True, compare_blocks_cols, 2)), le(4, 3)), ge(_if_then_else(or_(False, False), _if_then_else(True, 3, compare_blocks_rows), ones_diff_rows), _if_then_else(False, 0, compare_blocks_cols)))
VAL TREES:
mul(mul(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows)), add(add(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, ones_diff_cols))))
mul(add(mul(ones_diff_cols, zeros_diff_cols), mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, ones_diff_rows)))
mul(add(add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, ones_diff_cols)), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_rows, compare_blocks_rows))), add(add(add(compare_blocks_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(mul(zeros_diff_cols, ones_diff_rows), zeros_diff_cols))))
mul(mul(add(add(compare_blocks_rows, zeros_diff_cols), compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)), mul(add(ones_diff_cols, compare_blocks_rows), add(zeros_diff_rows, zeros_diff_cols)))
mul(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), mul(mul(compare_blocks_cols, zeros_diff_rows), add(add(ones_diff_rows, zeros_diff_rows), compare_blocks_cols)))
add(mul(add(ones_diff_cols, zeros_diff_cols), mul(ones_diff_cols, ones_diff_cols)), mul(mul(ones_diff_cols, ones_diff_rows), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
ge(_if_then_else(and_(or_(True, False), or_(True, True)), _if_then_else(or_(False, True), _if_then_else(False, max_col_clue, 0), _if_then_else(True, ones_diff_rows, ones_diff_cols)), _if_then_else(le(max_col_clue, ones_diff_rows), _if_then_else(False, 2, 2), _if_then_else(False, ones_diff_cols, compare_blocks_cols))), _if_then_else(ge(_if_then_else(False, max_col_clue, compare_blocks_cols), _if_then_else(le(_if_then_else(True, max_col_clue, max_row_clue), _if_then_else(or_(True, True), compare_blocks_cols, 4)), max_row_clue, 1)), _if_then_else(and_(False, False), _if_then_else(False, zeros_diff_cols, compare_blocks_rows), _if_then_else(True, compare_blocks_rows, max_col_clue)), _if_then_else(ge(max_col_clue, zeros_diff_cols), _if_then_else(True, 1, 4), _if_then_else(True, compare_blocks_cols, max_row_clue))))
le(_if_then_else(le(zeros_diff_rows, 0), _if_then_else(or_(False, True), zeros_diff_rows, zeros_diff_cols), _if_then_else(True, max_col_clue, 4)), _if_then_else(and_(False, True), _if_then_else(le(3, zeros_diff_rows), compare_blocks_cols, max_row_clue), _if_then_else(True, _if_then_else(le(_if_then_else(True, ones_diff_rows, compare_blocks_cols), _if_then_else(False, 4, 3)), 3, ones_diff_rows), max_row_clue)))
or_(and_(and_(le(_if_then_else(False, max_col_clue, 0), _if_then_else(False, 0, 3)), or_(le(zeros_diff_rows, 3), and_(True, False))), or_(and_(and_(True, False), ge(2, 2)), or_(ge(compare_blocks_rows, 0), and_(False, True)))), ge(_if_then_else(ge(_if_then_else(True, 0, 3), _if_then_else(False, max_col_clue, ones_diff_rows)), _if_then_else(and_(True, False), _if_then_else(False, 3, ones_diff_cols), _if_then_else(False, 4, 4)), _if_then_else(le(max_col_clue, zeros_diff_rows), _if_then_else(False, 4, max_row_clue), _if_then_else(True, max_col_clue, 2))), _if_then_else(or_(and_(True, False), le(3, ones_diff_cols)), _if_then_else(le(compare_blocks_rows, ones_diff_cols), _if_then_else(False, ones_diff_rows, 4), _if_then_else(True, 0, ones_diff_rows)), _if_then_else(or_(True, True), _if_then_else(True, zeros_diff_cols, max_row_clue), 3))))
le(_if_then_else(le(_if_then_else(ge(max_col_clue, 0), _if_then_else(True, zeros_diff_rows, compare_blocks_cols), _if_then_else(False, 0, max_row_clue)), _if_then_else(ge(3, _if_then_else(or_(True, True), _if_then_else(False, max_row_clue, ones_diff_rows), _if_then_else(True, 3, 0))), _if_then_else(True, ones_diff_rows, 2), _if_then_else(True, 1, ones_diff_cols))), _if_then_else(or_(and_(True, False), or_(True, False)), _if_then_else(ge(zeros_diff_cols, compare_blocks_rows), _if_then_else(False, 3, compare_blocks_rows), _if_then_else(False, zeros_diff_rows, 1)), _if_then_else(or_(False, False), _if_then_else(True, 1, compare_blocks_cols), _if_then_else(True, ones_diff_cols, ones_diff_cols))), _if_then_else(le(_if_then_else(False, ones_diff_cols, 0), _if_then_else(False, compare_blocks_rows, ones_diff_cols)), _if_then_else(and_(True, False), _if_then_else(True, ones_diff_cols, ones_diff_rows), _if_then_else(False, 1, 2)), _if_then_else(ge(3, zeros_diff_rows), _if_then_else(False, 0, compare_blocks_rows), _if_then_else(False, max_col_clue, ones_diff_rows)))), _if_then_else(or_(le(_if_then_else(True, compare_blocks_cols, compare_blocks_cols), _if_then_else(False, 3, compare_blocks_rows)), ge(_if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(True, 0, compare_blocks_rows))), _if_then_else(and_(le(max_row_clue, zeros_diff_rows), le(max_col_clue, 4)), _if_then_else(ge(2, 3), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(False, 4, ones_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, 0), _if_then_else(True, ones_diff_cols, 0))), _if_then_else(le(_if_then_else(False, ones_diff_rows, 0), _if_then_else(True, 3, ones_diff_cols)), _if_then_else(le(0, compare_blocks_rows), _if_then_else(True, 0, 0), _if_then_else(False, zeros_diff_rows, compare_blocks_cols)), _if_then_else(le(max_row_clue, 3), _if_then_else(False, max_row_clue, zeros_diff_rows), _if_then_else(False, compare_blocks_rows, zeros_diff_cols)))))
ge(_if_then_else(or_(False, True), _if_then_else(True, 0, 0), _if_then_else(False, 4, max_col_clue)), _if_then_else(and_(True, True), _if_then_else(True, 2, ones_diff_cols), zeros_diff_rows))
VAL TREES:
mul(add(mul(add(zeros_diff_rows, ones_diff_cols), zeros_diff_rows), add(add(ones_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))), mul(mul(mul(zeros_diff_cols, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), add(add(compare_blocks_cols, zeros_diff_rows), add(zeros_diff_cols, zeros_diff_rows))))
add(add(add(add(mul(compare_blocks_rows, zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_cols, compare_blocks_rows), compare_blocks_rows)), mul(mul(compare_blocks_rows, ones_diff_cols), mul(ones_diff_rows, compare_blocks_cols)))
mul(add(add(ones_diff_cols, mul(zeros_diff_rows, compare_blocks_cols)), mul(ones_diff_cols, ones_diff_cols)), add(mul(zeros_diff_rows, ones_diff_rows), add(zeros_diff_cols, compare_blocks_cols)))
mul(add(add(ones_diff_cols, compare_blocks_rows), mul(compare_blocks_rows, compare_blocks_rows)), add(add(compare_blocks_rows, ones_diff_cols), add(zeros_diff_rows, ones_diff_cols)))
add(zeros_diff_cols, mul(add(ones_diff_cols, mul(mul(zeros_diff_cols, zeros_diff_rows), mul(zeros_diff_cols, compare_blocks_rows))), mul(zeros_diff_rows, add(compare_blocks_rows, compare_blocks_rows))))
add(mul(add(compare_blocks_cols, ones_diff_cols), mul(zeros_diff_rows, zeros_diff_rows)), mul(mul(compare_blocks_rows, ones_diff_cols), add(mul(mul(ones_diff_cols, ones_diff_rows), mul(compare_blocks_cols, ones_diff_rows)), compare_blocks_cols)))
COND TREES:
or_(and_(False, le(2, 0)), and_(le(_if_then_else(or_(False, False), _if_then_else(False, zeros_diff_rows, 0), _if_then_else(False, compare_blocks_cols, 0)), max_col_clue), and_(False, False)))
or_(ge(_if_then_else(True, zeros_diff_rows, 1), _if_then_else(True, zeros_diff_rows, 2)), ge(_if_then_else(True, 0, ones_diff_rows), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)))
le(_if_then_else(and_(False, True), _if_then_else(False, _if_then_else(False, _if_then_else(False, compare_blocks_cols, max_row_clue), max_row_clue), 4), _if_then_else(or_(True, False), zeros_diff_rows, 2)), _if_then_else(or_(and_(True, False), False), _if_then_else(True, 2, 3), _if_then_else(True, _if_then_else(True, zeros_diff_cols, compare_blocks_rows), 0)))
or_(le(_if_then_else(or_(False, False), compare_blocks_cols, 4), _if_then_else(and_(False, False), _if_then_else(True, _if_then_else(True, zeros_diff_rows, compare_blocks_cols), max_row_clue), _if_then_else(True, _if_then_else(True, zeros_diff_rows, 4), _if_then_else(True, compare_blocks_cols, ones_diff_rows)))), and_(le(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, max_col_clue, compare_blocks_cols)), or_(le(ones_diff_rows, zeros_diff_cols), ge(max_row_clue, ones_diff_cols))))
and_(and_(ge(_if_then_else(True, 0, _if_then_else(False, max_row_clue, zeros_diff_rows)), _if_then_else(True, compare_blocks_cols, 2)), le(4, 3)), ge(_if_then_else(or_(False, False), _if_then_else(True, 3, compare_blocks_rows), ones_diff_rows), _if_then_else(and_(True, False), _if_then_else(True, compare_blocks_cols, zeros_diff_rows), _if_then_else(False, max_row_clue, _if_then_else(le(2, 4), _if_then_else(True, compare_blocks_rows, 4), _if_then_else(False, zeros_diff_rows, compare_blocks_rows))))))
VAL TREES:
mul(mul(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows)), add(add(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, ones_diff_cols))))
mul(add(mul(ones_diff_cols, zeros_diff_cols), mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, ones_diff_rows)))
mul(add(add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, ones_diff_cols)), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_rows, compare_blocks_rows))), add(add(add(compare_blocks_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_cols))))
mul(mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)), mul(add(ones_diff_cols, compare_blocks_rows), add(zeros_diff_rows, zeros_diff_cols)))
mul(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), mul(mul(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols)))
add(mul(add(ones_diff_cols, zeros_diff_cols), mul(ones_diff_cols, ones_diff_cols)), mul(mul(ones_diff_cols, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
or_(and_(le(_if_then_else(or_(False, le(1, max_col_clue)), _if_then_else(True, compare_blocks_rows, compare_blocks_cols), _if_then_else(True, ones_diff_cols, _if_then_else(False, 0, max_row_clue))), max_col_clue), le(2, 0)), and_(le(1, max_col_clue), and_(False, False)))
or_(True, le(_if_then_else(False, zeros_diff_rows, 0), _if_then_else(False, ones_diff_rows, compare_blocks_rows)))
le(_if_then_else(True, _if_then_else(False, _if_then_else(False, 4, max_row_clue), 4), _if_then_else(and_(False, le(ones_diff_rows, 3)), zeros_diff_rows, _if_then_else(True, 1, zeros_diff_cols))), _if_then_else(or_(True, False), _if_then_else(True, 2, 3), _if_then_else(and_(True, True), _if_then_else(True, zeros_diff_cols, compare_blocks_rows), 0)))
or_(le(_if_then_else(and_(True, True), _if_then_else(False, ones_diff_rows, 2), _if_then_else(True, 3, max_col_clue)), _if_then_else(and_(False, False), _if_then_else(True, _if_then_else(True, zeros_diff_rows, 0), max_row_clue), _if_then_else(True, zeros_diff_cols, _if_then_else(True, compare_blocks_cols, ones_diff_rows)))), and_(le(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, max_col_clue, compare_blocks_cols)), or_(or_(False, False), ge(max_row_clue, max_row_clue))))
and_(and_(ge(_if_then_else(True, 0, 1), _if_then_else(True, compare_blocks_cols, 2)), le(4, 3)), ge(_if_then_else(or_(False, False), _if_then_else(True, 3, compare_blocks_rows), _if_then_else(False, 4, max_row_clue)), _if_then_else(and_(True, False), _if_then_else(True, compare_blocks_cols, zeros_diff_rows), _if_then_else(le(_if_then_else(True, compare_blocks_cols, compare_blocks_cols), _if_then_else(False, ones_diff_cols, 1)), max_row_clue, _if_then_else(and_(False, False), _if_then_else(True, 3, 4), _if_then_else(False, zeros_diff_rows, compare_blocks_rows))))))
VAL TREES:
mul(mul(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows)), add(add(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, ones_diff_cols))))
mul(add(mul(ones_diff_cols, zeros_diff_cols), mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, ones_diff_rows)))
mul(add(add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, ones_diff_cols)), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_rows, compare_blocks_rows))), add(add(add(compare_blocks_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_cols))))
mul(mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)), mul(add(ones_diff_cols, compare_blocks_rows), add(zeros_diff_rows, zeros_diff_cols)))
mul(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), mul(mul(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols)))
add(mul(add(ones_diff_cols, zeros_diff_cols), mul(ones_diff_cols, ones_diff_cols)), mul(mul(ones_diff_cols, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
ge(_if_then_else(and_(or_(True, False), or_(True, False)), _if_then_else(or_(False, True), _if_then_else(False, max_col_clue, 0), _if_then_else(True, ones_diff_rows, ones_diff_cols)), _if_then_else(le(max_col_clue, ones_diff_rows), _if_then_else(False, 2, 2), _if_then_else(False, ones_diff_cols, compare_blocks_cols))), _if_then_else(ge(_if_then_else(True, max_col_clue, compare_blocks_cols), _if_then_else(le(_if_then_else(True, max_col_clue, max_row_clue), _if_then_else(or_(True, True), compare_blocks_cols, 4)), max_row_clue, 1)), _if_then_else(and_(False, False), _if_then_else(False, zeros_diff_cols, compare_blocks_rows), _if_then_else(True, compare_blocks_rows, max_col_clue)), _if_then_else(and_(le(1, max_col_clue), and_(False, False)), _if_then_else(True, 1, 4), _if_then_else(True, compare_blocks_cols, max_row_clue))))
le(_if_then_else(le(zeros_diff_rows, 0), _if_then_else(le(1, max_col_clue), zeros_diff_rows, zeros_diff_cols), _if_then_else(True, max_col_clue, 4)), _if_then_else(False, ones_diff_cols, _if_then_else(True, _if_then_else(False, 3, ones_diff_rows), max_row_clue)))
or_(and_(le(_if_then_else(True, ones_diff_rows, 4), zeros_diff_rows), or_(and_(and_(True, False), ge(2, 2)), or_(ge(compare_blocks_rows, 0), and_(False, True)))), ge(_if_then_else(ge(_if_then_else(True, 0, 3), _if_then_else(False, max_col_clue, ones_diff_rows)), _if_then_else(and_(True, False), _if_then_else(False, 3, ones_diff_cols), _if_then_else(False, 4, 4)), _if_then_else(le(max_col_clue, zeros_diff_rows), _if_then_else(False, 4, max_row_clue), _if_then_else(True, 4, 3))), _if_then_else(or_(and_(True, False), le(3, ones_diff_cols)), _if_then_else(le(4, ones_diff_cols), _if_then_else(False, ones_diff_rows, 4), _if_then_else(True, 0, ones_diff_rows)), _if_then_else(or_(True, True), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(True, ones_diff_rows, ones_diff_cols)))))
le(_if_then_else(le(_if_then_else(ge(max_col_clue, 0), _if_then_else(False, zeros_diff_rows, compare_blocks_cols), _if_then_else(False, 0, max_row_clue)), _if_then_else(ge(3, 3), _if_then_else(True, ones_diff_rows, 2), _if_then_else(True, 1, ones_diff_cols))), _if_then_else(or_(and_(True, False), or_(True, False)), _if_then_else(ge(zeros_diff_cols, compare_blocks_rows), _if_then_else(False, 3, compare_blocks_rows), _if_then_else(False, zeros_diff_rows, 1)), _if_then_else(True, compare_blocks_cols, 4)), _if_then_else(le(_if_then_else(False, ones_diff_cols, 0), _if_then_else(False, compare_blocks_rows, ones_diff_cols)), _if_then_else(ge(compare_blocks_cols, max_row_clue), _if_then_else(True, ones_diff_cols, ones_diff_rows), _if_then_else(False, 1, 2)), _if_then_else(ge(3, zeros_diff_rows), _if_then_else(False, 0, compare_blocks_rows), _if_then_else(False, max_col_clue, ones_diff_rows)))), _if_then_else(or_(le(_if_then_else(True, compare_blocks_cols, compare_blocks_cols), _if_then_else(False, 3, compare_blocks_rows)), ge(_if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(True, 0, compare_blocks_rows))), _if_then_else(and_(le(zeros_diff_rows, zeros_diff_cols), or_(False, True)), _if_then_else(ge(2, 3), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(False, 4, ones_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, 0), _if_then_else(True, ones_diff_cols, 0))), _if_then_else(le(_if_then_else(False, ones_diff_rows, 0), _if_then_else(True, 3, ones_diff_cols)), _if_then_else(le(0, compare_blocks_rows), _if_then_else(True, 0, 0), _if_then_else(False, zeros_diff_rows, compare_blocks_cols)), _if_then_else(le(max_row_clue, 3), _if_then_else(False, max_row_clue, zeros_diff_rows), _if_then_else(False, compare_blocks_rows, zeros_diff_cols)))))
ge(_if_then_else(or_(True, True), _if_then_else(True, 0, 0), compare_blocks_rows), _if_then_else(True, _if_then_else(True, 2, ones_diff_cols), _if_then_else(False, max_row_clue, 2)))
VAL TREES:
mul(add(mul(add(zeros_diff_rows, ones_diff_cols), mul(compare_blocks_rows, add(zeros_diff_cols, compare_blocks_rows))), add(add(ones_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))), mul(mul(mul(zeros_diff_cols, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), add(add(compare_blocks_cols, ones_diff_rows), add(zeros_diff_cols, zeros_diff_rows))))
add(add(add(add(mul(mul(compare_blocks_rows, zeros_diff_cols), zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), compare_blocks_rows), add(add(ones_diff_cols, compare_blocks_rows), compare_blocks_rows)), mul(mul(compare_blocks_rows, ones_diff_cols), mul(ones_diff_rows, compare_blocks_cols)))
mul(add(zeros_diff_cols, mul(ones_diff_cols, compare_blocks_cols)), add(mul(zeros_diff_rows, ones_diff_rows), add(zeros_diff_cols, compare_blocks_cols)))
mul(add(add(ones_diff_cols, compare_blocks_rows), ones_diff_rows), add(add(compare_blocks_rows, ones_diff_cols), add(zeros_diff_rows, mul(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_cols, compare_blocks_rows)))))
mul(ones_diff_rows, compare_blocks_cols)
add(mul(add(compare_blocks_cols, ones_diff_cols), mul(zeros_diff_rows, zeros_diff_rows)), mul(mul(compare_blocks_rows, ones_diff_cols), mul(mul(compare_blocks_cols, compare_blocks_rows), add(ones_diff_rows, compare_blocks_cols))))
COND TREES:
or_(False, and_(le(1, max_col_clue), or_(le(0, 1), and_(False, False))))
or_(False, le(_if_then_else(True, ones_diff_rows, ones_diff_rows), _if_then_else(False, ones_diff_rows, compare_blocks_rows)))
le(_if_then_else(le(_if_then_else(ge(_if_then_else(False, 1, ones_diff_cols), _if_then_else(True, 2, zeros_diff_cols)), ones_diff_rows, 4), zeros_diff_rows), _if_then_else(False, _if_then_else(False, 4, max_row_clue), 4), _if_then_else(or_(True, False), zeros_diff_rows, _if_then_else(True, 1, zeros_diff_cols))), _if_then_else(or_(True, False), _if_then_else(True, 2, 3), _if_then_else(True, _if_then_else(True, zeros_diff_cols, compare_blocks_rows), 0)))
or_(le(_if_then_else(True, compare_blocks_cols, 4), _if_then_else(and_(True, False), _if_then_else(True, _if_then_else(True, zeros_diff_rows, 0), max_row_clue), _if_then_else(True, zeros_diff_cols, _if_then_else(True, compare_blocks_cols, ones_diff_rows)))), and_(le(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, max_col_clue, compare_blocks_cols)), or_(or_(False, False), ge(max_row_clue, ones_diff_cols))))
False
VAL TREES:
mul(mul(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows)), ones_diff_cols), mul(mul(add(ones_diff_cols, add(ones_diff_cols, ones_diff_rows)), mul(ones_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, mul(ones_diff_rows, ones_diff_cols)))))
mul(add(mul(ones_diff_cols, zeros_diff_cols), mul(add(zeros_diff_cols, compare_blocks_cols), add(add(zeros_diff_rows, compare_blocks_cols), zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, ones_diff_rows)))
mul(add(add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, ones_diff_cols)), add(add(ones_diff_rows, ones_diff_rows), add(compare_blocks_rows, compare_blocks_rows))), mul(zeros_diff_rows, compare_blocks_cols))
mul(mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_rows, add(zeros_diff_rows, compare_blocks_cols))), mul(compare_blocks_cols, ones_diff_rows))
mul(mul(mul(add(zeros_diff_rows, compare_blocks_cols), compare_blocks_cols), mul(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, compare_blocks_cols))), mul(mul(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols)))
add(compare_blocks_rows, mul(add(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
or_(and_(le(_if_then_else(False, zeros_diff_cols, zeros_diff_rows), max_col_clue), le(2, 0)), and_(True, and_(le(compare_blocks_cols, ones_diff_rows), False)))
or_(ge(_if_then_else(le(max_row_clue, 4), _if_then_else(True, compare_blocks_rows, max_col_clue), _if_then_else(True, 1, zeros_diff_rows)), _if_then_else(and_(False, True), _if_then_else(False, 0, _if_then_else(False, ones_diff_rows, compare_blocks_rows)), _if_then_else(True, 3, compare_blocks_rows))), True)
le(_if_then_else(False, _if_then_else(False, _if_then_else(False, 4, max_row_clue), 4), _if_then_else(le(_if_then_else(True, ones_diff_rows, 4), zeros_diff_rows), _if_then_else(False, _if_then_else(False, _if_then_else(False, compare_blocks_cols, 1), max_row_clue), 4), _if_then_else(or_(True, False), zeros_diff_rows, max_row_clue))), _if_then_else(or_(True, False), _if_then_else(True, 2, 3), _if_then_else(True, _if_then_else(True, zeros_diff_cols, compare_blocks_rows), 0)))
or_(le(_if_then_else(True, compare_blocks_cols, 4), _if_then_else(and_(and_(ge(0, 4), or_(False, False)), False), _if_then_else(True, _if_then_else(True, zeros_diff_rows, 0), max_row_clue), _if_then_else(True, zeros_diff_cols, _if_then_else(True, compare_blocks_cols, ones_diff_rows)))), ge(zeros_diff_rows, 3))
and_(and_(ge(_if_then_else(True, 0, 1), _if_then_else(True, compare_blocks_cols, 2)), le(max_col_clue, 3)), ge(_if_then_else(or_(False, False), _if_then_else(True, 3, compare_blocks_rows), _if_then_else(False, 4, max_row_clue)), _if_then_else(and_(True, False), _if_then_else(True, compare_blocks_cols, zeros_diff_rows), _if_then_else(False, _if_then_else(True, max_col_clue, compare_blocks_rows), _if_then_else(True, compare_blocks_cols, 2)))))
VAL TREES:
mul(mul(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows)), add(add(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, ones_diff_cols))))
mul(add(mul(ones_diff_cols, zeros_diff_cols), mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, ones_diff_rows)))
mul(add(add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, ones_diff_cols)), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_rows, compare_blocks_rows))), add(add(add(compare_blocks_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_cols))))
mul(mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)), mul(add(ones_diff_cols, compare_blocks_rows), add(zeros_diff_rows, zeros_diff_cols)))
mul(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), mul(mul(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols)))
add(mul(add(ones_diff_cols, zeros_diff_cols), mul(ones_diff_cols, ones_diff_cols)), mul(mul(ones_diff_cols, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
ge(_if_then_else(and_(or_(True, False), or_(True, True)), _if_then_else(or_(False, True), _if_then_else(False, max_col_clue, 0), _if_then_else(True, ones_diff_rows, ones_diff_cols)), _if_then_else(False, 3, 4)), _if_then_else(ge(_if_then_else(False, max_col_clue, compare_blocks_cols), _if_then_else(le(_if_then_else(True, max_col_clue, max_row_clue), _if_then_else(or_(True, True), compare_blocks_cols, 4)), max_row_clue, 1)), _if_then_else(and_(False, False), _if_then_else(False, zeros_diff_cols, compare_blocks_rows), _if_then_else(True, compare_blocks_rows, max_col_clue)), _if_then_else(ge(max_col_clue, zeros_diff_cols), _if_then_else(True, 1, 4), _if_then_else(True, compare_blocks_cols, max_row_clue))))
le(_if_then_else(le(zeros_diff_rows, 0), _if_then_else(or_(False, True), zeros_diff_rows, zeros_diff_cols), _if_then_else(False, max_row_clue, 3)), _if_then_else(and_(False, True), _if_then_else(ge(_if_then_else(True, zeros_diff_rows, 1), _if_then_else(True, zeros_diff_rows, zeros_diff_rows)), compare_blocks_cols, max_row_clue), _if_then_else(True, _if_then_else(False, 3, ones_diff_rows), max_row_clue)))
or_(and_(and_(le(_if_then_else(False, max_col_clue, 0), _if_then_else(False, 0, 3)), or_(le(zeros_diff_rows, 3), and_(True, False))), or_(and_(and_(True, False), ge(2, 2)), or_(ge(compare_blocks_rows, 0), and_(False, True)))), ge(_if_then_else(ge(_if_then_else(True, 0, 3), _if_then_else(False, max_col_clue, ones_diff_rows)), _if_then_else(and_(True, False), _if_then_else(False, 3, ones_diff_cols), _if_then_else(False, 4, 4)), _if_then_else(le(max_col_clue, zeros_diff_rows), _if_then_else(False, 4, max_row_clue), _if_then_else(True, 2, 3))), _if_then_else(or_(and_(True, False), le(3, ones_diff_cols)), _if_then_else(le(compare_blocks_rows, _if_then_else(True, compare_blocks_rows, 2)), _if_then_else(False, ones_diff_rows, 4), _if_then_else(True, 0, ones_diff_rows)), _if_then_else(or_(True, False), zeros_diff_rows, _if_then_else(True, 1, zeros_diff_cols)))))
le(_if_then_else(le(_if_then_else(ge(max_col_clue, 0), _if_then_else(True, zeros_diff_rows, compare_blocks_cols), _if_then_else(False, 0, max_row_clue)), _if_then_else(ge(3, 3), _if_then_else(True, ones_diff_rows, 2), _if_then_else(True, 1, ones_diff_cols))), _if_then_else(or_(and_(True, False), or_(True, False)), _if_then_else(ge(zeros_diff_cols, compare_blocks_rows), _if_then_else(False, 3, compare_blocks_rows), _if_then_else(False, zeros_diff_rows, 1)), _if_then_else(or_(False, False), _if_then_else(True, 1, compare_blocks_cols), _if_then_else(True, ones_diff_cols, ones_diff_cols))), _if_then_else(le(_if_then_else(False, ones_diff_cols, 0), _if_then_else(False, compare_blocks_rows, ones_diff_cols)), _if_then_else(and_(True, False), _if_then_else(True, ones_diff_cols, ones_diff_rows), _if_then_else(False, 1, 2)), _if_then_else(ge(_if_then_else(False, 2, 4), zeros_diff_rows), _if_then_else(False, 0, compare_blocks_rows), _if_then_else(False, max_col_clue, ones_diff_rows)))), _if_then_else(or_(le(_if_then_else(True, compare_blocks_cols, compare_blocks_cols), _if_then_else(False, 3, compare_blocks_rows)), ge(_if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(True, 0, compare_blocks_rows))), _if_then_else(and_(le(max_row_clue, zeros_diff_rows), le(max_col_clue, 4)), _if_then_else(ge(2, 3), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(False, 4, ones_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, 0), _if_then_else(True, ones_diff_cols, 0))), _if_then_else(le(_if_then_else(False, ones_diff_rows, 0), _if_then_else(True, 3, ones_diff_cols)), _if_then_else(le(0, compare_blocks_rows), _if_then_else(True, 0, 0), _if_then_else(False, zeros_diff_rows, compare_blocks_cols)), _if_then_else(le(max_row_clue, 3), _if_then_else(False, max_row_clue, zeros_diff_rows), _if_then_else(True, zeros_diff_cols, _if_then_else(True, compare_blocks_cols, ones_diff_rows))))))
ge(_if_then_else(or_(False, True), _if_then_else(False, 4, max_row_clue), _if_then_else(False, 4, max_col_clue)), _if_then_else(and_(or_(or_(False, False), and_(True, False)), True), _if_then_else(True, 2, ones_diff_cols), _if_then_else(False, max_row_clue, 2)))
VAL TREES:
mul(add(mul(add(zeros_diff_rows, ones_diff_cols), zeros_diff_rows), add(add(ones_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))), mul(mul(mul(zeros_diff_cols, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), add(add(compare_blocks_cols, zeros_diff_rows), add(zeros_diff_cols, zeros_diff_rows))))
add(add(add(add(mul(compare_blocks_rows, zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_cols, compare_blocks_rows), compare_blocks_rows)), mul(mul(compare_blocks_rows, ones_diff_cols), mul(ones_diff_rows, compare_blocks_cols)))
mul(add(add(ones_diff_cols, mul(zeros_diff_rows, compare_blocks_cols)), mul(ones_diff_cols, ones_diff_cols)), add(mul(zeros_diff_rows, ones_diff_rows), add(zeros_diff_cols, compare_blocks_cols)))
mul(add(add(ones_diff_cols, compare_blocks_rows), mul(compare_blocks_rows, compare_blocks_rows)), add(add(compare_blocks_rows, ones_diff_cols), add(zeros_diff_rows, ones_diff_cols)))
add(zeros_diff_cols, mul(add(ones_diff_cols, mul(mul(zeros_diff_cols, zeros_diff_rows), mul(zeros_diff_cols, compare_blocks_rows))), mul(zeros_diff_rows, add(compare_blocks_rows, compare_blocks_rows))))
add(mul(add(compare_blocks_cols, ones_diff_cols), mul(zeros_diff_rows, zeros_diff_rows)), mul(mul(compare_blocks_rows, ones_diff_cols), add(mul(mul(ones_diff_cols, ones_diff_rows), mul(compare_blocks_cols, ones_diff_rows)), compare_blocks_cols)))
COND TREES:
ge(_if_then_else(and_(or_(True, False), or_(True, True)), _if_then_else(or_(False, True), _if_then_else(False, max_col_clue, 0), _if_then_else(True, compare_blocks_rows, compare_blocks_cols)), _if_then_else(le(max_col_clue, ones_diff_rows), _if_then_else(False, 2, 2), ones_diff_cols)), _if_then_else(ge(_if_then_else(True, max_col_clue, compare_blocks_cols), _if_then_else(le(_if_then_else(True, max_col_clue, max_row_clue), _if_then_else(or_(True, True), compare_blocks_cols, 4)), max_row_clue, 1)), _if_then_else(and_(False, False), _if_then_else(False, zeros_diff_cols, compare_blocks_rows), _if_then_else(True, compare_blocks_rows, max_col_clue)), _if_then_else(and_(le(1, max_col_clue), and_(False, False)), _if_then_else(True, 1, 4), _if_then_else(True, compare_blocks_cols, max_row_clue))))
le(_if_then_else(le(zeros_diff_rows, 0), _if_then_else(ge(_if_then_else(True, zeros_diff_rows, 1), _if_then_else(True, zeros_diff_rows, 3)), zeros_diff_rows, zeros_diff_cols), _if_then_else(True, max_col_clue, 4)), _if_then_else(ge(_if_then_else(True, zeros_diff_rows, 1), _if_then_else(True, zeros_diff_rows, 3)), ones_diff_cols, _if_then_else(True, _if_then_else(False, 3, ones_diff_rows), max_row_clue)))
or_(and_(le(_if_then_else(True, ones_diff_rows, 4), zeros_diff_rows), or_(and_(and_(True, and_(False, le(ones_diff_rows, 3))), ge(2, 2)), or_(ge(compare_blocks_rows, 0), and_(False, True)))), ge(_if_then_else(ge(_if_then_else(True, 0, 3), _if_then_else(False, max_col_clue, ones_diff_rows)), _if_then_else(and_(True, False), _if_then_else(False, 3, ones_diff_cols), _if_then_else(False, 4, 4)), _if_then_else(le(max_col_clue, zeros_diff_rows), _if_then_else(False, 4, max_row_clue), _if_then_else(True, 2, 3))), _if_then_else(or_(and_(True, False), le(3, ones_diff_cols)), _if_then_else(le(4, ones_diff_cols), _if_then_else(False, ones_diff_rows, 4), _if_then_else(le(_if_then_else(True, ones_diff_rows, 4), zeros_diff_rows), 0, ones_diff_rows)), _if_then_else(or_(True, True), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(True, ones_diff_rows, ones_diff_cols)))))
le(_if_then_else(le(_if_then_else(ge(max_col_clue, 0), _if_then_else(False, zeros_diff_rows, compare_blocks_cols), _if_then_else(False, 0, max_row_clue)), _if_then_else(ge(3, 3), _if_then_else(True, ones_diff_rows, 2), _if_then_else(True, 1, ones_diff_cols))), _if_then_else(or_(and_(True, False), or_(True, False)), _if_then_else(ge(zeros_diff_cols, compare_blocks_rows), _if_then_else(False, 3, compare_blocks_rows), _if_then_else(False, zeros_diff_rows, 1)), _if_then_else(True, compare_blocks_cols, 4)), _if_then_else(le(_if_then_else(False, ones_diff_cols, 0), _if_then_else(False, compare_blocks_rows, ones_diff_cols)), _if_then_else(and_(True, False), _if_then_else(True, ones_diff_cols, ones_diff_rows), _if_then_else(and_(False, False), _if_then_else(True, _if_then_else(True, zeros_diff_rows, 0), max_row_clue), _if_then_else(True, zeros_diff_cols, _if_then_else(True, compare_blocks_cols, ones_diff_rows)))), _if_then_else(ge(3, zeros_diff_rows), _if_then_else(False, 0, compare_blocks_rows), _if_then_else(False, max_col_clue, ones_diff_rows)))), _if_then_else(or_(le(_if_then_else(True, compare_blocks_cols, compare_blocks_cols), _if_then_else(False, 3, compare_blocks_rows)), ge(_if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(True, 0, compare_blocks_rows))), _if_then_else(and_(le(zeros_diff_rows, zeros_diff_cols), or_(False, True)), _if_then_else(ge(2, 3), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(False, 4, ones_diff_cols)), _if_then_else(or_(False, True), _if_then_else(False, max_col_clue, 0), _if_then_else(True, ones_diff_cols, 0))), _if_then_else(le(_if_then_else(False, ones_diff_rows, 0), _if_then_else(True, 3, ones_diff_cols)), _if_then_else(le(0, compare_blocks_rows), _if_then_else(True, 0, 0), _if_then_else(False, zeros_diff_rows, compare_blocks_cols)), _if_then_else(le(max_row_clue, 3), _if_then_else(False, max_row_clue, zeros_diff_rows), _if_then_else(False, compare_blocks_rows, zeros_diff_cols)))))
ge(_if_then_else(or_(True, and_(True, False)), _if_then_else(True, 0, 0), _if_then_else(True, 3, 4)), _if_then_else(True, _if_then_else(True, 2, ones_diff_cols), _if_then_else(False, max_row_clue, 2)))
VAL TREES:
mul(add(mul(add(zeros_diff_rows, ones_diff_cols), mul(compare_blocks_rows, add(zeros_diff_cols, compare_blocks_rows))), add(add(ones_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))), mul(mul(mul(zeros_diff_cols, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), add(add(compare_blocks_cols, ones_diff_rows), add(zeros_diff_cols, zeros_diff_rows))))
add(add(add(add(mul(mul(compare_blocks_rows, zeros_diff_cols), zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), compare_blocks_rows), add(add(ones_diff_cols, compare_blocks_rows), compare_blocks_rows)), mul(mul(compare_blocks_rows, ones_diff_cols), mul(ones_diff_rows, compare_blocks_cols)))
mul(add(zeros_diff_cols, mul(ones_diff_cols, compare_blocks_cols)), add(mul(zeros_diff_rows, ones_diff_rows), add(zeros_diff_cols, compare_blocks_cols)))
mul(add(add(ones_diff_cols, compare_blocks_rows), ones_diff_rows), add(add(compare_blocks_rows, ones_diff_cols), add(zeros_diff_rows, mul(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_cols, compare_blocks_rows)))))
mul(ones_diff_rows, compare_blocks_cols)
add(mul(add(compare_blocks_cols, ones_diff_cols), mul(zeros_diff_rows, zeros_diff_rows)), mul(mul(compare_blocks_rows, ones_diff_cols), mul(mul(compare_blocks_cols, compare_blocks_rows), add(ones_diff_rows, compare_blocks_cols))))
COND TREES:
ge(_if_then_else(and_(or_(True, False), or_(True, True)), _if_then_else(or_(False, True), _if_then_else(False, max_col_clue, 0), _if_then_else(True, ones_diff_rows, ones_diff_cols)), _if_then_else(le(max_col_clue, ones_diff_rows), _if_then_else(False, 2, 2), _if_then_else(False, ones_diff_cols, compare_blocks_cols))), _if_then_else(ge(ones_diff_rows, zeros_diff_rows), _if_then_else(False, ones_diff_rows, max_row_clue), _if_then_else(and_(le(1, max_col_clue), le(1, max_col_clue)), ones_diff_rows, zeros_diff_cols)))
le(_if_then_else(le(zeros_diff_rows, 0), _if_then_else(or_(False, True), zeros_diff_rows, zeros_diff_cols), _if_then_else(True, max_col_clue, 4)), _if_then_else(le(max_col_clue, _if_then_else(False, 0, 0)), _if_then_else(le(3, zeros_diff_rows), compare_blocks_cols, max_row_clue), _if_then_else(True, _if_then_else(False, 3, ones_diff_rows), max_row_clue)))
or_(and_(and_(le(_if_then_else(False, zeros_diff_rows, zeros_diff_cols), _if_then_else(False, 0, 3)), or_(le(zeros_diff_rows, 3), and_(True, False))), or_(and_(and_(True, False), ge(2, 2)), or_(ge(compare_blocks_rows, 0), and_(False, True)))), ge(_if_then_else(ge(_if_then_else(True, 0, 3), _if_then_else(False, max_col_clue, ones_diff_rows)), _if_then_else(and_(True, False), _if_then_else(False, 3, ones_diff_cols), _if_then_else(False, 4, 4)), _if_then_else(le(max_col_clue, zeros_diff_rows), _if_then_else(False, 4, max_row_clue), _if_then_else(True, 2, 3))), _if_then_else(or_(and_(True, False), le(3, ones_diff_cols)), _if_then_else(le(compare_blocks_rows, ones_diff_cols), _if_then_else(False, ones_diff_rows, 4), _if_then_else(True, 0, ones_diff_rows)), _if_then_else(or_(True, True), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(True, ones_diff_rows, ones_diff_cols)))))
le(_if_then_else(le(_if_then_else(ge(max_col_clue, 0), _if_then_else(False, zeros_diff_rows, compare_blocks_cols), _if_then_else(False, 0, max_row_clue)), _if_then_else(ge(3, 3), _if_then_else(True, ones_diff_rows, 2), _if_then_else(True, 1, ones_diff_cols))), _if_then_else(or_(and_(True, False), or_(True, False)), _if_then_else(ge(zeros_diff_cols, compare_blocks_rows), _if_then_else(False, 3, compare_blocks_rows), _if_then_else(False, zeros_diff_rows, 1)), _if_then_else(or_(False, False), _if_then_else(True, 1, compare_blocks_cols), _if_then_else(True, ones_diff_cols, ones_diff_cols))), _if_then_else(le(_if_then_else(False, ones_diff_cols, 0), _if_then_else(False, compare_blocks_rows, ones_diff_cols)), _if_then_else(and_(True, False), _if_then_else(True, ones_diff_cols, ones_diff_rows), _if_then_else(False, 1, 2)), _if_then_else(ge(3, zeros_diff_rows), _if_then_else(False, 0, compare_blocks_rows), _if_then_else(False, max_col_clue, ones_diff_rows)))), _if_then_else(or_(le(_if_then_else(True, compare_blocks_cols, compare_blocks_cols), _if_then_else(False, 3, compare_blocks_rows)), ge(_if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(True, 0, compare_blocks_rows))), _if_then_else(and_(le(max_row_clue, zeros_diff_rows), le(max_col_clue, 4)), _if_then_else(ge(2, 3), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(False, 4, ones_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, 0), _if_then_else(True, ones_diff_cols, 0))), _if_then_else(le(_if_then_else(False, ones_diff_rows, 0), _if_then_else(True, 3, ones_diff_cols)), _if_then_else(le(0, compare_blocks_rows), _if_then_else(True, 0, 0), _if_then_else(False, zeros_diff_rows, compare_blocks_cols)), _if_then_else(le(max_row_clue, 3), _if_then_else(False, max_row_clue, zeros_diff_rows), _if_then_else(False, compare_blocks_rows, zeros_diff_cols)))))
ge(_if_then_else(le(compare_blocks_rows, 0), _if_then_else(True, 0, 0), _if_then_else(False, 4, max_col_clue)), _if_then_else(and_(True, True), _if_then_else(True, 2, ones_diff_cols), _if_then_else(False, max_row_clue, 2)))
VAL TREES:
mul(add(mul(add(zeros_diff_rows, ones_diff_cols), zeros_diff_rows), add(add(ones_diff_cols, zeros_diff_rows), mul(zeros_diff_cols, ones_diff_rows))), mul(mul(mul(zeros_diff_cols, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), add(add(compare_blocks_cols, zeros_diff_rows), add(zeros_diff_cols, zeros_diff_rows))))
add(add(add(add(mul(compare_blocks_rows, zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), mul(compare_blocks_cols, compare_blocks_cols)), add(add(mul(compare_blocks_rows, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols)), compare_blocks_rows)), mul(mul(compare_blocks_rows, ones_diff_cols), mul(ones_diff_rows, compare_blocks_cols)))
mul(zeros_diff_cols, add(mul(zeros_diff_rows, ones_diff_rows), add(zeros_diff_cols, compare_blocks_cols)))
mul(add(add(ones_diff_cols, compare_blocks_rows), mul(compare_blocks_rows, compare_blocks_rows)), add(add(compare_blocks_rows, ones_diff_cols), add(add(zeros_diff_rows, compare_blocks_cols), ones_diff_cols)))
add(zeros_diff_cols, mul(add(ones_diff_cols, mul(mul(zeros_diff_cols, compare_blocks_cols), mul(zeros_diff_cols, compare_blocks_rows))), mul(zeros_diff_rows, add(compare_blocks_rows, compare_blocks_rows))))
add(mul(add(compare_blocks_cols, ones_diff_cols), mul(zeros_diff_rows, zeros_diff_rows)), mul(mul(compare_blocks_rows, ones_diff_cols), add(mul(mul(ones_diff_cols, ones_diff_rows), mul(compare_blocks_cols, zeros_diff_rows)), compare_blocks_cols)))
COND TREES:
le(_if_then_else(ge(_if_then_else(True, max_col_clue, compare_blocks_cols), _if_then_else(le(_if_then_else(True, max_col_clue, max_row_clue), _if_then_else(or_(True, True), compare_blocks_cols, 4)), max_row_clue, 1)), _if_then_else(and_(False, False), _if_then_else(False, zeros_diff_cols, compare_blocks_rows), _if_then_else(True, compare_blocks_rows, max_col_clue)), _if_then_else(ge(max_col_clue, zeros_diff_cols), _if_then_else(True, 1, 4), _if_then_else(True, compare_blocks_cols, max_row_clue))), _if_then_else(ge(_if_then_else(True, 4, 3), _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(le(ones_diff_rows, zeros_diff_cols), max_row_clue, ones_diff_cols), _if_then_else(le(max_col_clue, max_col_clue), _if_then_else(True, 3, ones_diff_cols), zeros_diff_cols)))
or_(and_(False, True), le(_if_then_else(False, zeros_diff_cols, ones_diff_rows), _if_then_else(False, zeros_diff_rows, _if_then_else(or_(False, True), _if_then_else(False, zeros_diff_rows, 4), _if_then_else(True, zeros_diff_rows, 0)))))
and_(le(_if_then_else(False, zeros_diff_cols, compare_blocks_cols), _if_then_else(False, _if_then_else(False, max_col_clue, 0), 0)), or_(True, False))
False
and_(le(4, 3), or_(False, True))
VAL TREES:
mul(add(zeros_diff_rows, mul(compare_blocks_rows, ones_diff_cols)), mul(mul(compare_blocks_rows, ones_diff_cols), add(add(zeros_diff_cols, compare_blocks_rows), zeros_diff_rows)))
add(add(add(add(zeros_diff_cols, zeros_diff_rows), ones_diff_cols), mul(ones_diff_cols, compare_blocks_cols)), add(ones_diff_cols, add(compare_blocks_cols, zeros_diff_rows)))
mul(add(add(add(ones_diff_cols, ones_diff_rows), mul(add(zeros_diff_cols, compare_blocks_cols), compare_blocks_rows)), mul(add(compare_blocks_rows, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols))), mul(mul(mul(compare_blocks_rows, ones_diff_rows), mul(ones_diff_cols, zeros_diff_cols)), mul(add(zeros_diff_rows, ones_diff_cols), mul(zeros_diff_cols, compare_blocks_cols))))
mul(mul(mul(compare_blocks_cols, zeros_diff_rows), mul(zeros_diff_cols, zeros_diff_rows)), mul(ones_diff_rows, ones_diff_cols))
add(add(add(add(mul(compare_blocks_cols, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_cols)), add(add(zeros_diff_cols, compare_blocks_rows), mul(mul(compare_blocks_rows, zeros_diff_rows), zeros_diff_cols))), add(add(mul(zeros_diff_cols, zeros_diff_rows), mul(zeros_diff_cols, zeros_diff_cols)), add(mul(ones_diff_cols, ones_diff_cols), mul(compare_blocks_cols, ones_diff_cols)))), mul(mul(mul(mul(zeros_diff_rows, compare_blocks_rows), add(compare_blocks_cols, compare_blocks_rows)), add(add(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_cols, compare_blocks_cols))), add(mul(add(ones_diff_rows, compare_blocks_rows), add(zeros_diff_cols, zeros_diff_cols)), add(mul(compare_blocks_cols, ones_diff_cols), add(zeros_diff_rows, compare_blocks_rows)))))
add(mul(add(mul(ones_diff_rows, compare_blocks_rows), compare_blocks_cols), mul(compare_blocks_rows, compare_blocks_rows)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(zeros_diff_rows, zeros_diff_rows)))
COND TREES:
or_(and_(le(_if_then_else(or_(False, le(1, max_col_clue)), _if_then_else(True, compare_blocks_rows, compare_blocks_cols), _if_then_else(True, ones_diff_cols, zeros_diff_cols)), max_col_clue), le(2, 0)), and_(le(1, max_col_clue), and_(False, False)))
or_(True, le(_if_then_else(False, zeros_diff_rows, 4), _if_then_else(False, ones_diff_rows, compare_blocks_rows)))
le(_if_then_else(True, _if_then_else(False, _if_then_else(False, 4, max_row_clue), 4), _if_then_else(and_(False, le(ones_diff_rows, 3)), zeros_diff_rows, _if_then_else(True, 1, zeros_diff_cols))), _if_then_else(or_(True, False), _if_then_else(False, zeros_diff_rows, zeros_diff_cols), _if_then_else(and_(True, True), _if_then_else(True, zeros_diff_cols, compare_blocks_rows), 0)))
or_(le(_if_then_else(and_(True, True), _if_then_else(False, ones_diff_rows, 2), _if_then_else(True, 3, max_col_clue)), _if_then_else(and_(False, False), _if_then_else(True, _if_then_else(True, zeros_diff_rows, 0), max_row_clue), _if_then_else(True, zeros_diff_cols, _if_then_else(True, compare_blocks_cols, ones_diff_rows)))), and_(le(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, max_col_clue, compare_blocks_cols)), or_(or_(False, False), ge(max_row_clue, max_row_clue))))
and_(and_(ge(_if_then_else(True, 0, 1), _if_then_else(True, compare_blocks_cols, 2)), le(4, 3)), ge(_if_then_else(or_(False, False), _if_then_else(True, 3, compare_blocks_rows), _if_then_else(False, 4, max_row_clue)), compare_blocks_rows))
VAL TREES:
mul(mul(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows)), add(add(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_cols, add(add(ones_diff_cols, ones_diff_rows), add(ones_diff_cols, compare_blocks_rows))), add(zeros_diff_cols, ones_diff_cols))))
mul(add(mul(ones_diff_cols, zeros_diff_cols), mul(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_cols, zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, ones_diff_rows)))
mul(add(add(add(ones_diff_cols, zeros_diff_cols), ones_diff_rows), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_rows, compare_blocks_rows))), add(add(add(compare_blocks_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_cols))))
mul(mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)), mul(add(compare_blocks_cols, compare_blocks_rows), add(zeros_diff_rows, zeros_diff_cols)))
mul(mul(add(compare_blocks_rows, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), mul(mul(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols)))
add(mul(mul(mul(compare_blocks_rows, zeros_diff_rows), add(ones_diff_rows, compare_blocks_cols)), mul(ones_diff_cols, ones_diff_cols)), mul(mul(ones_diff_cols, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
or_(and_(le(_if_then_else(or_(False, True), _if_then_else(True, compare_blocks_rows, compare_blocks_cols), _if_then_else(True, ones_diff_cols, max_row_clue)), max_col_clue), le(2, 0)), and_(le(1, max_col_clue), and_(False, False)))
or_(ge(_if_then_else(True, zeros_diff_rows, 1), _if_then_else(True, _if_then_else(True, 3, compare_blocks_cols), 1)), le(_if_then_else(True, ones_diff_rows, ones_diff_rows), _if_then_else(False, ones_diff_rows, compare_blocks_rows)))
le(_if_then_else(and_(True, le(_if_then_else(False, zeros_diff_cols, max_row_clue), _if_then_else(False, 2, 2))), _if_then_else(False, _if_then_else(False, 4, max_row_clue), 4), _if_then_else(or_(True, False), zeros_diff_rows, _if_then_else(True, 1, zeros_diff_cols))), _if_then_else(or_(True, False), _if_then_else(True, 2, 3), _if_then_else(True, _if_then_else(True, zeros_diff_cols, compare_blocks_rows), 0)))
or_(le(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(and_(False, False), _if_then_else(True, _if_then_else(True, zeros_diff_rows, 0), max_row_clue), _if_then_else(True, zeros_diff_cols, _if_then_else(True, compare_blocks_cols, ones_diff_rows)))), and_(le(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, max_col_clue, compare_blocks_cols)), or_(or_(False, False), ge(max_row_clue, ones_diff_cols))))
and_(and_(ge(_if_then_else(True, 0, 1), _if_then_else(True, compare_blocks_cols, 2)), le(4, 3)), ge(_if_then_else(or_(False, False), _if_then_else(True, 3, compare_blocks_rows), _if_then_else(False, 4, max_row_clue)), _if_then_else(and_(True, False), _if_then_else(True, compare_blocks_cols, zeros_diff_rows), _if_then_else(False, max_row_clue, _if_then_else(le(2, 4), _if_then_else(True, 3, 4), _if_then_else(False, zeros_diff_rows, compare_blocks_rows))))))
VAL TREES:
mul(mul(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows)), add(add(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, ones_diff_cols))))
mul(add(mul(ones_diff_cols, zeros_diff_cols), mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, ones_diff_rows)))
mul(add(add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, ones_diff_cols)), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_rows, compare_blocks_rows))), add(add(add(compare_blocks_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_cols))))
mul(mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)), mul(add(ones_diff_cols, compare_blocks_rows), add(zeros_diff_rows, zeros_diff_cols)))
mul(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), mul(mul(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols)))
add(mul(add(ones_diff_cols, zeros_diff_cols), mul(ones_diff_cols, ones_diff_cols)), mul(mul(ones_diff_cols, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
or_(and_(le(max_col_clue, max_col_clue), le(2, 0)), and_(le(1, max_col_clue), and_(False, False)))
or_(True, True)
le(_if_then_else(True, _if_then_else(False, _if_then_else(False, 4, max_row_clue), 4), _if_then_else(and_(False, True), zeros_diff_rows, _if_then_else(True, 1, zeros_diff_cols))), _if_then_else(or_(True, False), _if_then_else(ge(_if_then_else(True, 0, 3), _if_then_else(False, max_col_clue, ones_diff_rows)), _if_then_else(and_(True, False), _if_then_else(False, 3, ones_diff_cols), _if_then_else(False, 4, 4)), _if_then_else(le(max_col_clue, zeros_diff_rows), _if_then_else(False, 4, max_row_clue), _if_then_else(True, 2, 3))), _if_then_else(and_(True, True), _if_then_else(True, zeros_diff_cols, compare_blocks_rows), 0)))
or_(le(_if_then_else(and_(True, True), _if_then_else(False, ones_diff_rows, 2), _if_then_else(True, 3, max_col_clue)), _if_then_else(and_(False, False), _if_then_else(True, _if_then_else(True, zeros_diff_rows, 0), max_row_clue), _if_then_else(le(ones_diff_rows, _if_then_else(True, 3, ones_diff_cols)), _if_then_else(le(0, compare_blocks_rows), _if_then_else(True, 0, 0), _if_then_else(False, zeros_diff_rows, compare_blocks_cols)), _if_then_else(le(max_row_clue, 3), _if_then_else(False, max_row_clue, zeros_diff_rows), _if_then_else(False, compare_blocks_rows, zeros_diff_cols))))), and_(le(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, max_col_clue, compare_blocks_cols)), or_(or_(False, False), ge(max_row_clue, max_row_clue))))
and_(and_(ge(_if_then_else(True, 0, 1), _if_then_else(True, compare_blocks_cols, 2)), True), ge(_if_then_else(or_(False, False), _if_then_else(True, 3, compare_blocks_rows), _if_then_else(False, 4, max_row_clue)), _if_then_else(and_(True, False), _if_then_else(True, compare_blocks_cols, zeros_diff_rows), _if_then_else(le(_if_then_else(True, compare_blocks_cols, compare_blocks_cols), _if_then_else(False, ones_diff_cols, 1)), max_row_clue, _if_then_else(and_(False, False), _if_then_else(True, 3, 4), _if_then_else(False, zeros_diff_rows, compare_blocks_rows))))))
VAL TREES:
mul(mul(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows)), add(add(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, ones_diff_cols))))
mul(add(mul(ones_diff_cols, zeros_diff_cols), mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, ones_diff_rows)))
mul(add(add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, ones_diff_cols)), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_rows, compare_blocks_rows))), add(add(add(compare_blocks_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_cols))))
mul(mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)), mul(add(ones_diff_cols, compare_blocks_rows), add(zeros_diff_rows, zeros_diff_cols)))
mul(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), mul(mul(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols)))
add(mul(add(ones_diff_cols, zeros_diff_cols), mul(ones_diff_cols, ones_diff_cols)), mul(mul(ones_diff_cols, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
ge(_if_then_else(and_(or_(True, False), or_(True, True)), _if_then_else(or_(False, True), _if_then_else(False, max_col_clue, 0), _if_then_else(True, ones_diff_rows, ones_diff_cols)), _if_then_else(le(max_col_clue, ones_diff_rows), _if_then_else(False, 2, 2), _if_then_else(False, ones_diff_cols, compare_blocks_cols))), _if_then_else(ge(_if_then_else(True, max_col_clue, compare_blocks_cols), _if_then_else(le(_if_then_else(True, max_col_clue, 1), _if_then_else(or_(True, True), compare_blocks_cols, 4)), max_row_clue, 1)), _if_then_else(and_(False, False), _if_then_else(False, zeros_diff_cols, compare_blocks_rows), _if_then_else(True, compare_blocks_rows, max_col_clue)), _if_then_else(ge(max_col_clue, zeros_diff_cols), _if_then_else(True, 1, 4), _if_then_else(True, compare_blocks_cols, max_row_clue))))
le(_if_then_else(le(zeros_diff_rows, 0), _if_then_else(or_(False, True), zeros_diff_rows, zeros_diff_cols), _if_then_else(True, max_col_clue, 4)), _if_then_else(and_(False, True), _if_then_else(le(3, zeros_diff_rows), compare_blocks_cols, max_row_clue), _if_then_else(True, _if_then_else(False, 3, ones_diff_rows), max_row_clue)))
or_(and_(and_(le(_if_then_else(False, max_col_clue, 0), _if_then_else(False, 0, 3)), or_(le(zeros_diff_rows, 3), and_(True, False))), or_(and_(and_(le(ones_diff_rows, 3), False), ge(2, 2)), or_(ge(compare_blocks_rows, 0), and_(False, True)))), ge(_if_then_else(ge(_if_then_else(True, 0, 3), _if_then_else(False, max_col_clue, ones_diff_rows)), _if_then_else(and_(True, False), _if_then_else(False, 3, ones_diff_cols), _if_then_else(False, 4, 4)), _if_then_else(le(max_col_clue, zeros_diff_rows), _if_then_else(False, 4, max_row_clue), _if_then_else(True, 2, 3))), _if_then_else(True, 2, 3)))
le(_if_then_else(le(_if_then_else(ge(max_col_clue, 0), _if_then_else(False, zeros_diff_rows, compare_blocks_cols), _if_then_else(False, 0, max_row_clue)), _if_then_else(ge(3, 3), _if_then_else(True, ones_diff_rows, 2), _if_then_else(True, 1, ones_diff_cols))), _if_then_else(or_(and_(True, False), or_(True, False)), _if_then_else(ge(zeros_diff_cols, compare_blocks_rows), _if_then_else(False, 3, compare_blocks_rows), _if_then_else(False, zeros_diff_rows, 1)), _if_then_else(or_(False, False), _if_then_else(True, 1, compare_blocks_cols), _if_then_else(or_(False, False), ones_diff_cols, ones_diff_cols))), _if_then_else(le(_if_then_else(False, ones_diff_cols, 0), _if_then_else(False, compare_blocks_rows, ones_diff_cols)), _if_then_else(and_(True, False), _if_then_else(True, ones_diff_cols, ones_diff_rows), _if_then_else(False, 1, 2)), _if_then_else(ge(3, zeros_diff_rows), _if_then_else(False, 0, compare_blocks_rows), _if_then_else(False, max_col_clue, _if_then_else(False, ones_diff_rows, 0))))), _if_then_else(or_(le(_if_then_else(True, compare_blocks_cols, compare_blocks_cols), _if_then_else(False, 3, compare_blocks_rows)), ge(_if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(True, 0, compare_blocks_rows))), _if_then_else(and_(le(max_row_clue, zeros_diff_rows), le(max_col_clue, 4)), _if_then_else(ge(2, 3), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(False, 4, ones_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, 0), _if_then_else(True, ones_diff_cols, 0))), _if_then_else(le(_if_then_else(False, ones_diff_rows, 0), _if_then_else(True, 3, ones_diff_cols)), _if_then_else(le(0, compare_blocks_rows), _if_then_else(True, 0, 0), _if_then_else(False, zeros_diff_rows, compare_blocks_cols)), _if_then_else(le(max_row_clue, 3), _if_then_else(False, max_row_clue, zeros_diff_rows), _if_then_else(False, compare_blocks_rows, zeros_diff_cols)))))
ge(_if_then_else(or_(False, True), _if_then_else(True, 0, 0), _if_then_else(False, 4, max_col_clue)), _if_then_else(and_(True, True), compare_blocks_cols, _if_then_else(False, max_row_clue, 2)))
VAL TREES:
mul(add(mul(add(zeros_diff_rows, ones_diff_cols), zeros_diff_rows), add(add(ones_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))), mul(mul(mul(zeros_diff_cols, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), add(mul(compare_blocks_cols, zeros_diff_rows), mul(ones_diff_rows, ones_diff_rows))))
add(add(add(add(add(compare_blocks_rows, ones_diff_rows), mul(ones_diff_cols, zeros_diff_cols)), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_cols, compare_blocks_rows), compare_blocks_rows)), mul(mul(compare_blocks_rows, ones_diff_cols), mul(ones_diff_rows, compare_blocks_cols)))
mul(add(zeros_diff_rows, ones_diff_cols), add(mul(zeros_diff_rows, ones_diff_rows), add(zeros_diff_cols, compare_blocks_cols)))
mul(add(add(ones_diff_cols, compare_blocks_rows), mul(compare_blocks_rows, compare_blocks_rows)), add(add(compare_blocks_rows, ones_diff_cols), ones_diff_cols))
add(zeros_diff_cols, mul(add(ones_diff_cols, mul(mul(zeros_diff_cols, zeros_diff_rows), mul(zeros_diff_cols, compare_blocks_rows))), mul(zeros_diff_rows, mul(add(zeros_diff_rows, compare_blocks_cols), add(ones_diff_cols, ones_diff_rows)))))
add(mul(add(compare_blocks_cols, ones_diff_cols), mul(zeros_diff_rows, mul(ones_diff_cols, zeros_diff_rows))), mul(mul(compare_blocks_rows, ones_diff_cols), add(mul(mul(ones_diff_cols, ones_diff_rows), mul(compare_blocks_cols, ones_diff_rows)), compare_blocks_cols)))
COND TREES:
or_(and_(le(_if_then_else(False, max_row_clue, 4), max_col_clue), le(2, 0)), and_(True, and_(le(compare_blocks_cols, ones_diff_rows), False)))
or_(le(_if_then_else(False, zeros_diff_rows, 0), _if_then_else(False, ones_diff_rows, max_row_clue)), True)
le(zeros_diff_cols, _if_then_else(or_(True, False), _if_then_else(True, 2, 3), _if_then_else(True, _if_then_else(True, zeros_diff_cols, compare_blocks_rows), 0)))
or_(le(_if_then_else(True, compare_blocks_cols, 4), _if_then_else(and_(and_(ge(0, 4), or_(False, False)), False), 4, _if_then_else(True, zeros_diff_cols, _if_then_else(True, compare_blocks_cols, ones_diff_rows)))), ge(zeros_diff_rows, 3))
and_(and_(False, le(max_col_clue, 3)), ge(_if_then_else(or_(False, False), _if_then_else(True, 3, compare_blocks_rows), _if_then_else(False, 4, max_row_clue)), _if_then_else(and_(True, False), _if_then_else(True, compare_blocks_cols, zeros_diff_rows), _if_then_else(False, _if_then_else(True, max_col_clue, compare_blocks_rows), _if_then_else(True, compare_blocks_cols, 2)))))
VAL TREES:
mul(mul(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows)), add(add(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, ones_diff_cols))))
mul(add(mul(ones_diff_cols, zeros_diff_cols), mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, ones_diff_rows)))
mul(add(add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, ones_diff_cols)), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_rows, compare_blocks_rows))), add(add(add(compare_blocks_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_cols))))
mul(mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)), mul(add(ones_diff_cols, compare_blocks_rows), add(zeros_diff_rows, zeros_diff_cols)))
mul(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), mul(mul(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols)))
add(mul(add(ones_diff_cols, zeros_diff_cols), mul(ones_diff_cols, ones_diff_cols)), mul(mul(ones_diff_cols, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
or_(and_(le(_if_then_else(le(_if_then_else(ge(max_col_clue, 3), max_col_clue, max_row_clue), _if_then_else(False, zeros_diff_cols, zeros_diff_rows)), _if_then_else(True, ones_diff_rows, ones_diff_cols), _if_then_else(True, ones_diff_cols, _if_then_else(False, 0, ones_diff_cols))), max_col_clue), le(2, 0)), and_(le(1, max_col_clue), and_(False, False)))
or_(le(1, max_col_clue), and_(False, True))
le(_if_then_else(le(_if_then_else(True, ones_diff_rows, 4), zeros_diff_rows), _if_then_else(False, _if_then_else(False, 4, max_row_clue), 4), _if_then_else(False, zeros_diff_rows, _if_then_else(True, 1, _if_then_else(False, _if_then_else(False, _if_then_else(False, 4, max_row_clue), 4), _if_then_else(le(_if_then_else(True, ones_diff_rows, 4), zeros_diff_rows), _if_then_else(False, _if_then_else(False, _if_then_else(False, compare_blocks_cols, 1), max_row_clue), 4), _if_then_else(or_(True, False), zeros_diff_rows, max_row_clue)))))), _if_then_else(True, 3, 1))
or_(le(_if_then_else(True, compare_blocks_cols, _if_then_else(True, _if_then_else(True, zeros_diff_rows, 0), max_row_clue)), _if_then_else(False, 1, 2)), and_(le(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, max_col_clue, compare_blocks_cols)), or_(or_(False, False), le(_if_then_else(False, ones_diff_rows, 3), _if_then_else(False, zeros_diff_rows, compare_blocks_cols)))))
and_(and_(ge(_if_then_else(True, 4, max_row_clue), _if_then_else(True, compare_blocks_cols, 2)), le(4, 3)), ge(_if_then_else(or_(ge(_if_then_else(True, 0, 1), _if_then_else(True, compare_blocks_cols, 2)), False), _if_then_else(True, 3, compare_blocks_rows), _if_then_else(False, 4, max_row_clue)), _if_then_else(and_(True, False), _if_then_else(True, compare_blocks_cols, zeros_diff_rows), _if_then_else(False, max_row_clue, _if_then_else(and_(True, False), _if_then_else(False, 4, max_col_clue), _if_then_else(False, zeros_diff_rows, compare_blocks_rows))))))
VAL TREES:
mul(mul(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows)), add(add(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, ones_diff_cols))))
mul(add(mul(ones_diff_cols, zeros_diff_cols), mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, ones_diff_rows)))
mul(add(add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, ones_diff_cols)), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_rows, compare_blocks_rows))), add(add(add(compare_blocks_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_cols))))
mul(mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)), mul(add(ones_diff_cols, compare_blocks_rows), add(zeros_diff_rows, zeros_diff_cols)))
mul(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), mul(mul(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols)))
add(mul(add(ones_diff_cols, zeros_diff_cols), mul(ones_diff_cols, ones_diff_cols)), mul(mul(ones_diff_cols, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
ge(_if_then_else(and_(or_(True, False), or_(True, True)), _if_then_else(False, compare_blocks_rows, _if_then_else(True, ones_diff_rows, ones_diff_cols)), _if_then_else(le(max_col_clue, ones_diff_rows), _if_then_else(False, 2, 2), _if_then_else(False, ones_diff_cols, compare_blocks_cols))), _if_then_else(ge(_if_then_else(True, max_col_clue, compare_blocks_rows), _if_then_else(le(_if_then_else(True, max_col_clue, max_row_clue), _if_then_else(or_(True, True), compare_blocks_cols, 4)), max_row_clue, 1)), _if_then_else(and_(False, False), _if_then_else(False, zeros_diff_cols, compare_blocks_rows), _if_then_else(True, compare_blocks_rows, max_col_clue)), _if_then_else(ge(max_col_clue, zeros_diff_cols), _if_then_else(True, 1, 4), _if_then_else(True, compare_blocks_cols, max_row_clue))))
le(_if_then_else(le(zeros_diff_rows, 0), _if_then_else(or_(False, True), _if_then_else(False, compare_blocks_rows, _if_then_else(True, _if_then_else(False, 3, ones_diff_rows), max_row_clue)), zeros_diff_cols), _if_then_else(True, max_col_clue, 4)), _if_then_else(and_(False, True), _if_then_else(le(3, zeros_diff_rows), compare_blocks_cols, max_row_clue), _if_then_else(True, _if_then_else(or_(le(4, 2), or_(False, False)), 3, ones_diff_rows), max_row_clue)))
or_(and_(and_(le(_if_then_else(False, ones_diff_rows, 0), _if_then_else(False, 0, 3)), or_(le(zeros_diff_rows, 3), and_(True, False))), or_(and_(and_(True, False), ge(2, 2)), or_(ge(compare_blocks_rows, 0), and_(False, True)))), ge(_if_then_else(ge(_if_then_else(True, 0, 3), _if_then_else(False, max_col_clue, ones_diff_rows)), _if_then_else(and_(True, False), _if_then_else(False, 3, ones_diff_cols), _if_then_else(False, 4, 4)), 0), _if_then_else(or_(and_(True, False), le(3, ones_diff_cols)), _if_then_else(le(compare_blocks_rows, ones_diff_cols), _if_then_else(False, ones_diff_rows, 4), _if_then_else(True, 0, ones_diff_rows)), _if_then_else(or_(True, True), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(True, ones_diff_rows, ones_diff_cols)))))
le(_if_then_else(le(_if_then_else(ge(max_col_clue, 0), _if_then_else(False, zeros_diff_rows, compare_blocks_cols), _if_then_else(False, 0, max_row_clue)), _if_then_else(ge(3, 3), _if_then_else(False, ones_diff_rows, 2), _if_then_else(True, 1, ones_diff_cols))), _if_then_else(or_(and_(True, False), or_(True, False)), _if_then_else(ge(zeros_diff_cols, compare_blocks_rows), _if_then_else(False, 3, compare_blocks_rows), _if_then_else(False, zeros_diff_rows, 1)), _if_then_else(or_(False, False), _if_then_else(True, 1, compare_blocks_cols), _if_then_else(True, ones_diff_cols, ones_diff_cols))), _if_then_else(le(_if_then_else(False, ones_diff_cols, 0), _if_then_else(False, compare_blocks_rows, ones_diff_cols)), _if_then_else(and_(True, False), _if_then_else(True, ones_diff_cols, ones_diff_rows), _if_then_else(False, 1, 2)), _if_then_else(ge(3, zeros_diff_rows), _if_then_else(False, 0, compare_blocks_rows), _if_then_else(False, max_col_clue, ones_diff_rows)))), _if_then_else(or_(le(_if_then_else(True, compare_blocks_cols, compare_blocks_cols), _if_then_else(False, 3, compare_blocks_rows)), ge(_if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(True, 0, compare_blocks_rows))), _if_then_else(and_(le(max_row_clue, zeros_diff_rows), le(max_col_clue, 4)), _if_then_else(ge(2, 3), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(False, 4, ones_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, 0), _if_then_else(True, ones_diff_cols, 0))), _if_then_else(le(_if_then_else(False, ones_diff_rows, 0), _if_then_else(True, 3, ones_diff_cols)), _if_then_else(le(0, compare_blocks_rows), _if_then_else(True, 0, 0), _if_then_else(False, _if_then_else(le(zeros_diff_rows, 2), _if_then_else(True, 0, ones_diff_rows), _if_then_else(True, max_col_clue, 3)), compare_blocks_cols)), _if_then_else(le(max_row_clue, 3), _if_then_else(False, max_row_clue, zeros_diff_rows), _if_then_else(False, compare_blocks_rows, zeros_diff_cols)))))
ge(_if_then_else(or_(False, True), _if_then_else(False, ones_diff_rows, compare_blocks_cols), 2), _if_then_else(and_(True, True), _if_then_else(True, _if_then_else(True, compare_blocks_cols, 3), ones_diff_cols), _if_then_else(False, max_row_clue, 2)))
VAL TREES:
mul(add(mul(add(zeros_diff_rows, ones_diff_cols), zeros_diff_rows), add(add(ones_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))), mul(mul(mul(mul(zeros_diff_rows, ones_diff_cols), ones_diff_rows), mul(compare_blocks_rows, add(ones_diff_rows, zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_rows), add(zeros_diff_cols, zeros_diff_rows))))
add(add(add(add(mul(ones_diff_cols, zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_cols, compare_blocks_rows), compare_blocks_rows)), mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), add(ones_diff_cols, compare_blocks_cols)), ones_diff_cols), mul(ones_diff_rows, compare_blocks_cols)))
mul(add(compare_blocks_cols, mul(ones_diff_cols, ones_diff_cols)), mul(add(ones_diff_rows, compare_blocks_cols), add(zeros_diff_cols, ones_diff_cols)))
mul(add(add(ones_diff_cols, compare_blocks_rows), mul(compare_blocks_rows, compare_blocks_rows)), add(add(compare_blocks_rows, mul(add(compare_blocks_rows, ones_diff_cols), add(ones_diff_cols, ones_diff_rows))), add(zeros_diff_rows, ones_diff_cols)))
add(zeros_diff_cols, mul(zeros_diff_rows, mul(zeros_diff_rows, ones_diff_cols)))
add(mul(add(compare_blocks_cols, ones_diff_cols), mul(zeros_diff_rows, zeros_diff_rows)), mul(mul(compare_blocks_rows, ones_diff_cols), add(mul(mul(ones_diff_cols, ones_diff_rows), mul(compare_blocks_cols, zeros_diff_rows)), compare_blocks_cols)))
COND TREES:
ge(_if_then_else(and_(or_(True, False), or_(True, True)), _if_then_else(or_(False, True), _if_then_else(False, max_col_clue, 0), _if_then_else(True, ones_diff_rows, ones_diff_cols)), _if_then_else(le(max_col_clue, ones_diff_rows), _if_then_else(False, 2, 2), _if_then_else(False, _if_then_else(ge(ones_diff_cols, compare_blocks_cols), _if_then_else(True, zeros_diff_rows, max_row_clue), _if_then_else(True, max_col_clue, max_col_clue)), compare_blocks_cols))), _if_then_else(ge(_if_then_else(True, 1, _if_then_else(False, max_row_clue, 0)), _if_then_else(True, 4, compare_blocks_rows)), _if_then_else(and_(False, False), _if_then_else(False, zeros_diff_cols, compare_blocks_rows), _if_then_else(True, compare_blocks_rows, max_col_clue)), _if_then_else(False, _if_then_else(True, 1, 4), _if_then_else(True, compare_blocks_cols, max_row_clue))))
le(_if_then_else(le(zeros_diff_rows, 0), _if_then_else(or_(False, True), zeros_diff_rows, zeros_diff_cols), _if_then_else(True, _if_then_else(True, 2, max_row_clue), 4)), _if_then_else(and_(False, True), ones_diff_cols, _if_then_else(True, _if_then_else(False, 3, 0), max_row_clue)))
or_(and_(and_(le(_if_then_else(False, max_col_clue, 0), _if_then_else(False, 0, 3)), or_(le(zeros_diff_rows, 3), and_(True, False))), or_(and_(and_(True, False), ge(2, 2)), or_(ge(compare_blocks_rows, 0), and_(False, True)))), ge(_if_then_else(ge(_if_then_else(True, 0, 3), _if_then_else(False, max_col_clue, ones_diff_rows)), ones_diff_rows, _if_then_else(le(max_col_clue, zeros_diff_rows), _if_then_else(False, 4, max_row_clue), _if_then_else(True, 2, 3))), _if_then_else(or_(and_(True, False), le(3, ones_diff_cols)), _if_then_else(le(4, ones_diff_cols), _if_then_else(False, ones_diff_rows, 4), _if_then_else(True, 0, ones_diff_rows)), _if_then_else(or_(True, True), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(True, _if_then_else(True, 0, ones_diff_cols), ones_diff_cols)))))
le(_if_then_else(le(_if_then_else(ge(max_col_clue, 0), _if_then_else(False, zeros_diff_rows, compare_blocks_cols), _if_then_else(False, 0, max_row_clue)), _if_then_else(ge(3, 3), _if_then_else(True, ones_diff_rows, 2), _if_then_else(True, 1, ones_diff_cols))), _if_then_else(or_(and_(True, False), or_(True, False)), _if_then_else(ge(zeros_diff_cols, compare_blocks_rows), _if_then_else(or_(False, False), 3, compare_blocks_rows), _if_then_else(False, zeros_diff_rows, 1)), _if_then_else(or_(False, False), _if_then_else(True, 1, compare_blocks_cols), _if_then_else(True, ones_diff_cols, ones_diff_cols))), _if_then_else(le(_if_then_else(False, ones_diff_cols, 0), _if_then_else(False, compare_blocks_rows, ones_diff_cols)), _if_then_else(and_(True, False), _if_then_else(True, ones_diff_cols, ones_diff_rows), _if_then_else(False, 1, 2)), _if_then_else(ge(3, zeros_diff_rows), _if_then_else(False, 0, compare_blocks_rows), _if_then_else(False, max_col_clue, ones_diff_rows)))), _if_then_else(or_(le(_if_then_else(True, compare_blocks_cols, compare_blocks_cols), _if_then_else(False, 3, compare_blocks_rows)), ge(_if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(True, 0, compare_blocks_rows))), _if_then_else(and_(True, le(max_col_clue, 4)), _if_then_else(ge(2, 3), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(False, 4, ones_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, 0), _if_then_else(True, ones_diff_cols, 0))), _if_then_else(le(_if_then_else(False, ones_diff_rows, 0), _if_then_else(True, 3, ones_diff_cols)), _if_then_else(le(0, compare_blocks_rows), _if_then_else(True, 0, 0), _if_then_else(False, _if_then_else(False, 4, ones_diff_rows), compare_blocks_cols)), _if_then_else(le(max_row_clue, 3), _if_then_else(False, max_row_clue, zeros_diff_rows), _if_then_else(False, compare_blocks_rows, zeros_diff_cols)))))
ge(_if_then_else(or_(False, True), _if_then_else(True, 0, 0), _if_then_else(False, 4, max_col_clue)), _if_then_else(and_(or_(and_(or_(False, True), False), False), ge(_if_then_else(False, max_col_clue, ones_diff_cols), _if_then_else(False, 4, 0))), _if_then_else(True, 2, _if_then_else(le(4, compare_blocks_rows), _if_then_else(False, max_row_clue, zeros_diff_cols), _if_then_else(True, 3, 0))), _if_then_else(False, max_row_clue, 2)))
VAL TREES:
mul(add(compare_blocks_rows, add(add(ones_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, add(add(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols))))), mul(mul(mul(zeros_diff_cols, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), add(add(compare_blocks_cols, ones_diff_rows), add(zeros_diff_cols, zeros_diff_rows))))
add(add(add(add(mul(mul(compare_blocks_rows, zeros_diff_cols), zeros_diff_rows), mul(compare_blocks_cols, mul(ones_diff_cols, ones_diff_rows))), compare_blocks_rows), add(add(ones_diff_cols, compare_blocks_rows), compare_blocks_rows)), mul(mul(compare_blocks_rows, ones_diff_cols), mul(ones_diff_rows, compare_blocks_cols)))
add(mul(ones_diff_rows, zeros_diff_rows), mul(zeros_diff_rows, ones_diff_cols))
mul(mul(ones_diff_rows, ones_diff_cols), add(compare_blocks_rows, add(zeros_diff_rows, mul(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_cols, compare_blocks_rows)))))
mul(ones_diff_rows, add(add(add(ones_diff_rows, ones_diff_rows), mul(ones_diff_rows, zeros_diff_cols)), compare_blocks_rows))
add(zeros_diff_rows, ones_diff_cols)
COND TREES:
or_(and_(False, le(2, max_col_clue)), and_(and_(False, False), and_(False, False)))
and_(or_(True, True), True)
le(_if_then_else(True, _if_then_else(False, _if_then_else(False, 4, max_row_clue), 4), _if_then_else(le(zeros_diff_cols, 3), zeros_diff_rows, 2)), _if_then_else(or_(and_(True, le(_if_then_else(False, zeros_diff_cols, max_row_clue), _if_then_else(True, 2, 2))), True), _if_then_else(True, 2, 3), _if_then_else(True, _if_then_else(True, zeros_diff_cols, compare_blocks_rows), 0)))
or_(le(_if_then_else(True, compare_blocks_cols, 4), _if_then_else(and_(False, False), _if_then_else(False, max_col_clue, compare_blocks_cols), _if_then_else(True, _if_then_else(True, zeros_diff_rows, 4), _if_then_else(True, compare_blocks_cols, ones_diff_rows)))), and_(le(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, max_col_clue, compare_blocks_cols)), ge(_if_then_else(True, compare_blocks_rows, zeros_diff_cols), _if_then_else(True, zeros_diff_rows, 1))))
and_(and_(ge(_if_then_else(True, 0, 1), _if_then_else(True, compare_blocks_cols, 2)), le(4, 3)), ge(_if_then_else(or_(False, False), _if_then_else(True, 3, compare_blocks_rows), ones_diff_rows), _if_then_else(and_(True, False), 0, compare_blocks_cols)))
VAL TREES:
mul(mul(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows)), add(add(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, ones_diff_cols))))
mul(add(mul(ones_diff_cols, zeros_diff_cols), mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, ones_diff_rows)))
mul(add(add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, ones_diff_cols)), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_rows, compare_blocks_rows))), add(add(add(compare_blocks_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_cols))))
mul(mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)), mul(add(ones_diff_cols, compare_blocks_rows), add(zeros_diff_rows, zeros_diff_cols)))
mul(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), mul(mul(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols)))
add(mul(add(ones_diff_cols, zeros_diff_cols), mul(ones_diff_cols, ones_diff_cols)), mul(mul(ones_diff_cols, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
or_(and_(le(_if_then_else(le(_if_then_else(ge(max_col_clue, zeros_diff_cols), max_col_clue, max_row_clue), _if_then_else(le(4, zeros_diff_rows), max_row_clue, 4)), _if_then_else(True, ones_diff_rows, ones_diff_cols), _if_then_else(True, ones_diff_cols, _if_then_else(False, 0, ones_diff_cols))), _if_then_else(and_(False, True), _if_then_else(False, 1, max_row_clue), _if_then_else(True, compare_blocks_cols, compare_blocks_rows))), le(2, 0)), and_(le(1, max_col_clue), le(1, _if_then_else(le(0, 0), _if_then_else(False, max_row_clue, zeros_diff_rows), _if_then_else(False, 2, compare_blocks_rows)))))
or_(le(1, max_col_clue), le(_if_then_else(False, zeros_diff_rows, 0), _if_then_else(and_(ge(_if_then_else(True, max_col_clue, max_row_clue), 3), False), _if_then_else(False, compare_blocks_rows, 1), _if_then_else(False, max_row_clue, zeros_diff_cols))))
le(_if_then_else(le(_if_then_else(True, ones_diff_rows, 4), zeros_diff_rows), _if_then_else(False, _if_then_else(False, 4, max_row_clue), 4), _if_then_else(False, zeros_diff_rows, _if_then_else(True, 1, _if_then_else(True, zeros_diff_rows, zeros_diff_rows)))), _if_then_else(and_(True, False), _if_then_else(False, 2, 3), _if_then_else(True, 0, 4)))
or_(False, and_(le(_if_then_else(True, zeros_diff_rows, 0), _if_then_else(True, _if_then_else(True, zeros_diff_rows, 0), max_row_clue)), or_(or_(False, False), ge(max_row_clue, max_row_clue))))
and_(and_(ge(_if_then_else(True, 0, 1), ones_diff_rows), le(4, 3)), ge(_if_then_else(or_(False, False), _if_then_else(True, 3, compare_blocks_rows), _if_then_else(False, 4, max_row_clue)), _if_then_else(False, _if_then_else(True, compare_blocks_cols, zeros_diff_rows), _if_then_else(False, max_row_clue, _if_then_else(and_(True, False), _if_then_else(or_(False, True), 4, _if_then_else(ge(0, ones_diff_cols), _if_then_else(True, max_col_clue, compare_blocks_cols), _if_then_else(False, zeros_diff_cols, zeros_diff_rows))), _if_then_else(False, zeros_diff_rows, compare_blocks_rows))))))
VAL TREES:
mul(mul(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows)), add(add(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, ones_diff_cols))))
mul(add(mul(ones_diff_cols, zeros_diff_cols), mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, ones_diff_rows)))
mul(add(add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, ones_diff_cols)), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_rows, compare_blocks_rows))), add(add(add(compare_blocks_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_cols))))
mul(mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)), mul(add(ones_diff_cols, compare_blocks_rows), add(zeros_diff_rows, zeros_diff_cols)))
mul(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), mul(mul(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols)))
add(mul(add(ones_diff_cols, zeros_diff_cols), mul(ones_diff_cols, ones_diff_cols)), mul(mul(ones_diff_cols, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
or_(and_(False, le(2, 0)), and_(True, and_(False, False)))
or_(ge(_if_then_else(True, _if_then_else(ge(_if_then_else(True, zeros_diff_rows, 1), _if_then_else(True, zeros_diff_rows, 3)), 3, compare_blocks_cols), 1), _if_then_else(True, zeros_diff_rows, 3)), or_(le(4, 2), or_(False, False)))
le(_if_then_else(and_(True, le(_if_then_else(False, zeros_diff_cols, max_row_clue), _if_then_else(False, 2, 2))), _if_then_else(False, _if_then_else(False, 4, max_row_clue), 4), _if_then_else(False, 4, 2)), _if_then_else(or_(le(_if_then_else(True, ones_diff_rows, 4), zeros_diff_rows), False), _if_then_else(True, 2, 3), _if_then_else(True, _if_then_else(True, zeros_diff_cols, compare_blocks_rows), 0)))
or_(le(_if_then_else(le(max_col_clue, zeros_diff_rows), _if_then_else(or_(False, True), max_row_clue, compare_blocks_cols), _if_then_else(True, compare_blocks_cols, max_row_clue)), _if_then_else(ge(zeros_diff_cols, 4), _if_then_else(False, max_row_clue, compare_blocks_cols), _if_then_else(True, 4, max_col_clue))), and_(le(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, max_col_clue, compare_blocks_cols)), or_(or_(False, False), ge(max_row_clue, ones_diff_cols))))
and_(and_(or_(True, True), le(_if_then_else(False, max_col_clue, zeros_diff_cols), zeros_diff_cols)), ge(_if_then_else(or_(False, False), _if_then_else(True, 3, compare_blocks_rows), _if_then_else(False, 4, max_row_clue)), _if_then_else(and_(True, True), _if_then_else(True, ones_diff_rows, compare_blocks_cols), _if_then_else(False, max_row_clue, 0))))
VAL TREES:
mul(mul(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows)), add(add(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_cols, mul(ones_diff_cols, compare_blocks_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, zeros_diff_cols)))))
zeros_diff_cols
mul(add(add(add(mul(ones_diff_rows, zeros_diff_cols), zeros_diff_cols), add(add(compare_blocks_cols, ones_diff_cols), add(zeros_diff_cols, compare_blocks_rows))), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_rows, compare_blocks_rows))), add(add(add(compare_blocks_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_cols))))
mul(zeros_diff_rows, ones_diff_cols)
mul(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), mul(mul(compare_blocks_cols, mul(compare_blocks_cols, zeros_diff_cols)), add(mul(mul(compare_blocks_cols, compare_blocks_rows), add(compare_blocks_rows, zeros_diff_rows)), compare_blocks_cols)))
add(mul(add(ones_diff_cols, zeros_diff_cols), mul(ones_diff_cols, ones_diff_cols)), mul(mul(mul(ones_diff_cols, ones_diff_rows), add(ones_diff_cols, ones_diff_cols)), mul(zeros_diff_cols, add(mul(ones_diff_rows, compare_blocks_rows), add(ones_diff_cols, compare_blocks_cols)))))
COND TREES:
or_(and_(False, le(2, max_row_clue)), and_(True, and_(False, False)))
or_(ge(_if_then_else(True, _if_then_else(ge(_if_then_else(True, zeros_diff_rows, 1), _if_then_else(True, zeros_diff_rows, 3)), 3, compare_blocks_cols), 1), _if_then_else(or_(False, or_(False, True)), zeros_diff_rows, 3)), le(1, _if_then_else(False, ones_diff_rows, 4)))
le(_if_then_else(and_(True, le(_if_then_else(False, zeros_diff_cols, max_row_clue), _if_then_else(ge(4, max_row_clue), 2, 2))), _if_then_else(False, _if_then_else(False, 4, max_row_clue), 4), _if_then_else(ge(4, max_row_clue), 4, 2)), _if_then_else(or_(le(_if_then_else(True, ones_diff_rows, 4), zeros_diff_rows), False), _if_then_else(True, 2, 3), _if_then_else(True, _if_then_else(True, zeros_diff_cols, compare_blocks_rows), 0)))
or_(le(_if_then_else(le(max_col_clue, zeros_diff_rows), _if_then_else(or_(False, True), max_row_clue, compare_blocks_cols), _if_then_else(True, compare_blocks_cols, max_row_clue)), _if_then_else(and_(False, False), _if_then_else(True, max_row_clue, max_row_clue), _if_then_else(True, zeros_diff_cols, _if_then_else(True, 2, ones_diff_rows)))), and_(le(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, max_col_clue, compare_blocks_cols)), or_(or_(False, False), ge(max_row_clue, ones_diff_cols))))
and_(and_(or_(True, True), le(_if_then_else(True, 4, zeros_diff_rows), 3)), ge(_if_then_else(or_(False, False), _if_then_else(True, 3, compare_blocks_rows), _if_then_else(False, 4, max_row_clue)), _if_then_else(and_(True, True), _if_then_else(True, ones_diff_rows, compare_blocks_cols), _if_then_else(False, max_row_clue, 0))))
VAL TREES:
mul(mul(zeros_diff_cols, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_cols))
mul(add(mul(ones_diff_cols, zeros_diff_cols), mul(add(zeros_diff_cols, add(add(ones_diff_cols, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_rows))), add(zeros_diff_rows, zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, ones_diff_rows)))
mul(add(add(add(ones_diff_cols, zeros_diff_cols), add(add(compare_blocks_cols, ones_diff_cols), add(zeros_diff_cols, compare_blocks_rows))), add(add(ones_diff_rows, ones_diff_rows), add(add(compare_blocks_cols, zeros_diff_cols), mul(compare_blocks_cols, compare_blocks_rows)))), add(add(add(compare_blocks_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_cols))))
add(zeros_diff_rows, compare_blocks_cols)
mul(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(compare_blocks_rows, mul(add(zeros_diff_rows, ones_diff_rows), add(zeros_diff_rows, compare_blocks_rows)))), mul(mul(compare_blocks_cols, zeros_diff_rows), add(mul(mul(compare_blocks_cols, compare_blocks_rows), add(compare_blocks_rows, zeros_diff_rows)), compare_blocks_cols)))
add(mul(add(ones_diff_cols, zeros_diff_cols), mul(ones_diff_cols, ones_diff_cols)), mul(mul(mul(ones_diff_cols, ones_diff_rows), add(ones_diff_cols, ones_diff_cols)), add(ones_diff_cols, zeros_diff_cols)))
COND TREES:
or_(and_(False, le(2, max_col_clue)), and_(le(1, _if_then_else(False, _if_then_else(False, max_row_clue, zeros_diff_rows), _if_then_else(False, 2, compare_blocks_rows))), and_(False, False)))
and_(le(_if_then_else(False, zeros_diff_rows, 0), _if_then_else(False, ones_diff_rows, max_row_clue)), ge(compare_blocks_rows, 3))
le(_if_then_else(True, _if_then_else(False, _if_then_else(False, 4, max_row_clue), 4), _if_then_else(le(zeros_diff_cols, 3), zeros_diff_rows, 2)), _if_then_else(or_(True, False), _if_then_else(True, 2, 3), _if_then_else(True, _if_then_else(True, zeros_diff_cols, compare_blocks_rows), 0)))
or_(le(_if_then_else(True, compare_blocks_cols, 4), _if_then_else(and_(False, False), _if_then_else(True, _if_then_else(True, zeros_diff_rows, 0), max_row_clue), _if_then_else(True, _if_then_else(True, zeros_diff_rows, 4), _if_then_else(True, compare_blocks_cols, ones_diff_rows)))), and_(le(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, max_col_clue, compare_blocks_cols)), ge(_if_then_else(True, compare_blocks_rows, zeros_diff_cols), _if_then_else(True, zeros_diff_rows, 1))))
and_(and_(ge(_if_then_else(True, 0, 1), _if_then_else(True, compare_blocks_cols, 2)), and_(True, False)), ge(_if_then_else(or_(False, False), _if_then_else(True, 3, compare_blocks_rows), ones_diff_rows), _if_then_else(False, 0, compare_blocks_cols)))
VAL TREES:
mul(mul(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows)), add(add(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, ones_diff_cols))))
mul(add(mul(ones_diff_cols, zeros_diff_cols), mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, ones_diff_rows)))
mul(add(add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, ones_diff_cols)), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_rows, compare_blocks_rows))), add(add(add(compare_blocks_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_cols))))
mul(mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)), mul(add(ones_diff_cols, compare_blocks_rows), add(zeros_diff_rows, zeros_diff_cols)))
mul(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), mul(mul(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols)))
add(mul(add(ones_diff_cols, zeros_diff_cols), mul(ones_diff_cols, ones_diff_cols)), mul(mul(ones_diff_cols, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
or_(and_(le(_if_then_else(le(_if_then_else(ge(max_col_clue, zeros_diff_cols), max_col_clue, max_row_clue), _if_then_else(False, max_row_clue, 4)), _if_then_else(True, ones_diff_rows, ones_diff_cols), _if_then_else(True, ones_diff_cols, _if_then_else(le(0, 0), 0, ones_diff_cols))), max_col_clue), le(2, 0)), and_(le(1, max_col_clue), and_(False, False)))
or_(le(1, max_col_clue), or_(True, True))
le(_if_then_else(le(_if_then_else(True, ones_diff_rows, 4), zeros_diff_rows), _if_then_else(False, _if_then_else(False, 4, max_row_clue), 4), _if_then_else(False, zeros_diff_rows, _if_then_else(True, 1, zeros_diff_cols))), _if_then_else(or_(and_(True, le(_if_then_else(False, zeros_diff_cols, max_row_clue), _if_then_else(True, 2, 2))), False), _if_then_else(True, 2, 3), _if_then_else(True, 0, 4)))
or_(le(_if_then_else(True, compare_blocks_cols, 4), _if_then_else(False, 1, 2)), and_(le(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, max_col_clue, compare_blocks_cols)), or_(or_(False, False), ge(max_row_clue, max_row_clue))))
and_(and_(ge(_if_then_else(True, 0, 1), _if_then_else(True, compare_blocks_cols, 2)), le(4, 3)), ge(_if_then_else(or_(False, False), _if_then_else(True, 3, compare_blocks_rows), _if_then_else(False, 4, max_row_clue)), _if_then_else(le(4, 3), _if_then_else(True, compare_blocks_cols, zeros_diff_rows), _if_then_else(False, max_row_clue, _if_then_else(and_(True, False), _if_then_else(False, 4, max_col_clue), _if_then_else(False, zeros_diff_rows, compare_blocks_rows))))))
VAL TREES:
mul(mul(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows)), add(add(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, ones_diff_cols))))
mul(add(mul(ones_diff_cols, zeros_diff_cols), mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, ones_diff_rows)))
mul(add(add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, ones_diff_cols)), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_rows, compare_blocks_rows))), add(add(add(compare_blocks_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_cols))))
mul(mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)), mul(add(ones_diff_cols, compare_blocks_rows), add(zeros_diff_rows, zeros_diff_cols)))
mul(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), mul(mul(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols)))
add(mul(add(ones_diff_cols, zeros_diff_cols), mul(ones_diff_cols, ones_diff_cols)), mul(mul(ones_diff_cols, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
or_(and_(or_(or_(True, False), and_(False, True)), le(2, 0)), and_(and_(False, False), and_(False, False)))
or_(ge(_if_then_else(True, zeros_diff_rows, _if_then_else(or_(True, False), _if_then_else(False, zeros_diff_cols, max_col_clue), _if_then_else(False, compare_blocks_cols, zeros_diff_rows))), _if_then_else(True, zeros_diff_rows, 2)), ge(_if_then_else(True, 2, ones_diff_rows), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)))
le(_if_then_else(and_(False, True), _if_then_else(False, _if_then_else(False, 4, max_row_clue), 4), _if_then_else(or_(True, False), _if_then_else(True, _if_then_else(True, zeros_diff_cols, compare_blocks_rows), 0), 2)), _if_then_else(or_(and_(True, le(_if_then_else(False, zeros_diff_cols, max_row_clue), _if_then_else(True, 2, 2))), False), _if_then_else(True, 2, 3), 1))
or_(le(_if_then_else(True, compare_blocks_cols, 4), _if_then_else(and_(False, False), _if_then_else(True, _if_then_else(True, zeros_diff_rows, 0), max_row_clue), _if_then_else(True, _if_then_else(True, zeros_diff_rows, 4), _if_then_else(True, _if_then_else(False, max_col_clue, _if_then_else(True, 0, zeros_diff_rows)), ones_diff_rows)))), and_(le(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, max_col_clue, compare_blocks_cols)), or_(le(ones_diff_rows, zeros_diff_cols), ge(max_row_clue, ones_diff_cols))))
and_(and_(ge(_if_then_else(True, 0, 1), _if_then_else(True, compare_blocks_cols, 2)), le(4, 3)), ge(_if_then_else(or_(False, False), _if_then_else(True, 3, compare_blocks_rows), ones_diff_rows), _if_then_else(and_(True, False), _if_then_else(True, compare_blocks_cols, zeros_diff_rows), _if_then_else(False, max_row_clue, _if_then_else(or_(False, True), _if_then_else(False, 4, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols))))))
VAL TREES:
mul(mul(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows)), add(add(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, ones_diff_cols))))
mul(add(mul(ones_diff_cols, zeros_diff_cols), mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, ones_diff_rows)))
mul(add(add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, ones_diff_cols)), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_rows, compare_blocks_rows))), add(add(add(compare_blocks_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_cols))))
mul(mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)), mul(add(ones_diff_cols, compare_blocks_rows), add(zeros_diff_rows, zeros_diff_cols)))
mul(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), mul(mul(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols)))
add(mul(add(ones_diff_cols, zeros_diff_cols), mul(ones_diff_cols, ones_diff_cols)), mul(mul(ones_diff_cols, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
or_(and_(False, le(2, 0)), and_(True, le(1, max_col_clue)))
or_(ge(_if_then_else(True, _if_then_else(ge(_if_then_else(True, zeros_diff_rows, 1), _if_then_else(True, zeros_diff_rows, 3)), 3, compare_blocks_cols), 1), _if_then_else(or_(False, True), zeros_diff_rows, 3)), le(1, _if_then_else(False, ones_diff_rows, 4)))
le(_if_then_else(and_(True, le(_if_then_else(False, zeros_diff_cols, max_row_clue), _if_then_else(False, 2, 2))), _if_then_else(False, _if_then_else(False, 4, max_row_clue), 4), _if_then_else(ge(4, max_row_clue), 4, 2)), _if_then_else(or_(le(_if_then_else(True, ones_diff_rows, 4), zeros_diff_rows), False), _if_then_else(True, 2, 3), zeros_diff_rows))
or_(le(_if_then_else(le(max_col_clue, zeros_diff_rows), _if_then_else(or_(False, True), max_row_clue, compare_blocks_cols), _if_then_else(True, compare_blocks_cols, max_row_clue)), _if_then_else(and_(False, False), _if_then_else(True, max_row_clue, max_row_clue), _if_then_else(True, zeros_diff_cols, _if_then_else(True, 2, ones_diff_rows)))), and_(le(_if_then_else(True, zeros_diff_rows, 4), compare_blocks_cols), or_(or_(False, False), ge(max_row_clue, ones_diff_cols))))
and_(and_(or_(True, True), le(_if_then_else(True, 4, zeros_diff_rows), _if_then_else(False, max_col_clue, zeros_diff_cols))), ge(_if_then_else(or_(False, False), _if_then_else(True, 3, compare_blocks_rows), _if_then_else(False, 4, max_row_clue)), _if_then_else(le(2, 4), _if_then_else(True, ones_diff_rows, compare_blocks_cols), _if_then_else(False, max_row_clue, 0))))
VAL TREES:
mul(mul(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows)), add(add(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(mul(add(compare_blocks_cols, ones_diff_rows), mul(ones_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, zeros_diff_cols)))))
mul(add(add(mul(zeros_diff_cols, ones_diff_cols), add(zeros_diff_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, ones_diff_rows)))
mul(add(add(add(ones_diff_cols, zeros_diff_cols), add(mul(compare_blocks_cols, ones_diff_cols), add(zeros_diff_cols, compare_blocks_rows))), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_rows, compare_blocks_rows))), add(add(add(compare_blocks_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_cols))))
mul(mul(add(zeros_diff_cols, compare_blocks_cols), add(add(compare_blocks_cols, zeros_diff_cols), mul(compare_blocks_cols, zeros_diff_rows))), mul(compare_blocks_cols, add(zeros_diff_rows, zeros_diff_cols)))
mul(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), mul(mul(compare_blocks_cols, zeros_diff_rows), mul(mul(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_rows, compare_blocks_cols))))
add(mul(add(ones_diff_cols, zeros_diff_cols), mul(compare_blocks_rows, ones_diff_cols)), mul(mul(mul(ones_diff_cols, ones_diff_rows), add(ones_diff_cols, ones_diff_cols)), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
ge(_if_then_else(and_(or_(True, False), or_(True, False)), _if_then_else(or_(False, True), _if_then_else(False, max_col_clue, 0), _if_then_else(True, ones_diff_rows, ones_diff_cols)), _if_then_else(le(max_col_clue, ones_diff_rows), _if_then_else(False, 2, 2), _if_then_else(False, ones_diff_cols, compare_blocks_cols))), _if_then_else(ge(_if_then_else(True, max_col_clue, compare_blocks_cols), _if_then_else(le(_if_then_else(True, max_col_clue, max_row_clue), _if_then_else(or_(True, True), compare_blocks_cols, 4)), max_row_clue, 1)), _if_then_else(and_(False, False), _if_then_else(False, zeros_diff_cols, compare_blocks_rows), _if_then_else(True, compare_blocks_rows, max_col_clue)), _if_then_else(and_(le(1, max_col_clue), or_(True, True)), _if_then_else(True, 1, 4), _if_then_else(True, compare_blocks_cols, max_row_clue))))
le(_if_then_else(le(zeros_diff_rows, 0), _if_then_else(le(1, max_col_clue), zeros_diff_rows, zeros_diff_cols), _if_then_else(True, max_col_clue, 4)), _if_then_else(False, ones_diff_cols, _if_then_else(True, _if_then_else(False, 3, ones_diff_rows), max_row_clue)))
or_(and_(le(_if_then_else(True, ones_diff_rows, 4), zeros_diff_rows), or_(and_(and_(True, False), ge(2, 2)), or_(ge(compare_blocks_rows, 0), and_(False, True)))), ge(_if_then_else(ge(_if_then_else(True, 0, 3), _if_then_else(False, max_col_clue, ones_diff_rows)), _if_then_else(and_(True, False), _if_then_else(False, 3, ones_diff_cols), _if_then_else(False, 4, 4)), _if_then_else(le(max_col_clue, zeros_diff_rows), _if_then_else(False, 4, max_row_clue), _if_then_else(True, 4, 3))), _if_then_else(or_(and_(True, False), le(3, ones_diff_cols)), _if_then_else(le(4, ones_diff_cols), _if_then_else(False, ones_diff_rows, 4), _if_then_else(True, 0, ones_diff_rows)), _if_then_else(or_(True, True), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(True, ones_diff_rows, ones_diff_cols)))))
le(_if_then_else(le(_if_then_else(ge(max_col_clue, 0), _if_then_else(False, zeros_diff_rows, compare_blocks_cols), _if_then_else(False, 0, max_row_clue)), _if_then_else(ge(3, 3), _if_then_else(True, ones_diff_rows, 2), _if_then_else(True, 1, ones_diff_cols))), _if_then_else(or_(and_(True, False), or_(True, False)), _if_then_else(ge(zeros_diff_cols, compare_blocks_rows), _if_then_else(False, 3, compare_blocks_rows), _if_then_else(False, zeros_diff_rows, 1)), _if_then_else(True, compare_blocks_cols, 4)), _if_then_else(le(_if_then_else(False, ones_diff_cols, 0), _if_then_else(False, compare_blocks_rows, ones_diff_cols)), _if_then_else(ge(compare_blocks_cols, max_row_clue), _if_then_else(True, ones_diff_cols, ones_diff_rows), _if_then_else(False, 1, 2)), _if_then_else(ge(3, zeros_diff_rows), _if_then_else(False, 0, compare_blocks_rows), _if_then_else(False, max_col_clue, ones_diff_rows)))), _if_then_else(or_(le(_if_then_else(True, compare_blocks_cols, compare_blocks_cols), _if_then_else(False, 3, compare_blocks_rows)), le(zeros_diff_cols, 3)), _if_then_else(and_(le(zeros_diff_rows, zeros_diff_cols), or_(False, True)), _if_then_else(ge(2, 3), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(False, 4, ones_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, 0), _if_then_else(True, ones_diff_cols, 0))), _if_then_else(le(_if_then_else(False, ones_diff_rows, 0), _if_then_else(True, 3, ones_diff_cols)), _if_then_else(le(0, compare_blocks_rows), _if_then_else(True, 0, 0), _if_then_else(False, zeros_diff_rows, compare_blocks_cols)), _if_then_else(le(max_row_clue, 3), _if_then_else(False, max_row_clue, zeros_diff_rows), _if_then_else(False, compare_blocks_rows, zeros_diff_cols)))))
ge(_if_then_else(or_(True, True), _if_then_else(True, zeros_diff_cols, max_col_clue), compare_blocks_rows), _if_then_else(True, _if_then_else(True, 2, ones_diff_cols), _if_then_else(False, max_row_clue, 2)))
VAL TREES:
mul(add(mul(add(zeros_diff_rows, ones_diff_cols), mul(compare_blocks_rows, add(zeros_diff_cols, compare_blocks_rows))), add(add(ones_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))), mul(mul(mul(zeros_diff_cols, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), add(add(compare_blocks_cols, ones_diff_rows), add(zeros_diff_cols, zeros_diff_rows))))
add(add(add(add(mul(mul(compare_blocks_rows, zeros_diff_cols), zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), compare_blocks_rows), add(add(ones_diff_cols, compare_blocks_rows), compare_blocks_rows)), mul(mul(compare_blocks_rows, ones_diff_cols), mul(ones_diff_rows, compare_blocks_cols)))
mul(add(zeros_diff_cols, mul(ones_diff_cols, compare_blocks_cols)), add(mul(zeros_diff_rows, ones_diff_rows), add(zeros_diff_cols, compare_blocks_cols)))
mul(add(add(ones_diff_cols, compare_blocks_rows), ones_diff_rows), add(add(compare_blocks_rows, ones_diff_cols), add(zeros_diff_rows, mul(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_cols, compare_blocks_rows)))))
mul(ones_diff_rows, compare_blocks_cols)
add(mul(add(compare_blocks_cols, ones_diff_cols), mul(zeros_diff_rows, zeros_diff_rows)), mul(mul(compare_blocks_rows, ones_diff_cols), mul(mul(compare_blocks_cols, compare_blocks_rows), add(ones_diff_rows, compare_blocks_cols))))
COND TREES:
and_(ge(_if_then_else(True, max_col_clue, compare_blocks_cols), _if_then_else(le(_if_then_else(True, _if_then_else(False, ones_diff_rows, 0), max_row_clue), _if_then_else(and_(False, False), compare_blocks_cols, 4)), max_row_clue, 1)), le(_if_then_else(False, _if_then_else(or_(False, True), zeros_diff_cols, 3), max_row_clue), _if_then_else(le(_if_then_else(False, max_row_clue, compare_blocks_rows), _if_then_else(True, max_row_clue, ones_diff_cols)), _if_then_else(True, 0, compare_blocks_cols), ones_diff_cols)))
or_(le(_if_then_else(le(_if_then_else(True, ones_diff_rows, ones_diff_rows), _if_then_else(False, ones_diff_rows, 4)), _if_then_else(and_(False, False), _if_then_else(True, compare_blocks_cols, zeros_diff_cols), _if_then_else(False, max_col_clue, 2)), _if_then_else(ge(ones_diff_rows, compare_blocks_rows), _if_then_else(False, 1, compare_blocks_rows), _if_then_else(True, zeros_diff_rows, zeros_diff_rows))), _if_then_else(or_(le(4, 2), or_(False, False)), _if_then_else(and_(False, False), _if_then_else(False, zeros_diff_rows, 2), _if_then_else(True, zeros_diff_rows, 4)), _if_then_else(or_(True, True), _if_then_else(False, compare_blocks_rows, _if_then_else(ge(0, compare_blocks_cols), compare_blocks_rows, _if_then_else(True, 2, max_col_clue))), _if_then_else(False, compare_blocks_rows, 0)))), ge(_if_then_else(le(_if_then_else(False, 0, max_row_clue), _if_then_else(False, 2, 4)), _if_then_else(ge(3, _if_then_else(ge(zeros_diff_rows, zeros_diff_rows), _if_then_else(True, zeros_diff_rows, max_row_clue), _if_then_else(True, compare_blocks_rows, ones_diff_rows))), _if_then_else(True, 3, compare_blocks_cols), _if_then_else(False, 3, max_col_clue)), _if_then_else(le(max_col_clue, zeros_diff_rows), _if_then_else(False, 0, zeros_diff_rows), max_col_clue)), _if_then_else(ge(_if_then_else(False, zeros_diff_rows, 0), _if_then_else(True, max_col_clue, 2)), _if_then_else(and_(False, False), _if_then_else(False, zeros_diff_cols, 0), _if_then_else(False, 0, compare_blocks_rows)), _if_then_else(or_(False, True), _if_then_else(False, compare_blocks_cols, ones_diff_rows), _if_then_else(True, zeros_diff_rows, compare_blocks_cols)))))
True
and_(and_(ge(_if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(True, 0, compare_blocks_rows)), False), False)
le(_if_then_else(or_(or_(True, True), and_(False, True)), _if_then_else(le(_if_then_else(False, 1, ones_diff_cols), _if_then_else(False, ones_diff_cols, compare_blocks_rows)), _if_then_else(le(2, compare_blocks_cols), _if_then_else(False, 0, 1), _if_then_else(True, ones_diff_cols, zeros_diff_rows)), _if_then_else(ge(3, 3), _if_then_else(False, max_col_clue, ones_diff_rows), _if_then_else(False, max_col_clue, max_row_clue))), _if_then_else(or_(ge(compare_blocks_rows, zeros_diff_cols), le(max_row_clue, 1)), _if_then_else(le(3, ones_diff_cols), _if_then_else(False, 4, zeros_diff_rows), _if_then_else(or_(True, True), max_col_clue, 1)), _if_then_else(or_(False, False), _if_then_else(True, zeros_diff_rows, max_col_clue), _if_then_else(True, ones_diff_cols, 2)))), _if_then_else(True, _if_then_else(and_(le(zeros_diff_cols, _if_then_else(True, ones_diff_rows, 2)), or_(True, True)), _if_then_else(ge(ones_diff_rows, compare_blocks_cols), _if_then_else(True, 3, 1), _if_then_else(True, ones_diff_cols, max_row_clue)), _if_then_else(or_(True, True), _if_then_else(True, compare_blocks_cols, 3), _if_then_else(and_(True, True), _if_then_else(False, zeros_diff_cols, 3), _if_then_else(True, 3, zeros_diff_rows)))), _if_then_else(ge(_if_then_else(True, ones_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 0), _if_then_else(False, zeros_diff_rows, 0), _if_then_else(True, compare_blocks_cols, max_col_clue))), _if_then_else(le(1, max_row_clue), _if_then_else(True, 0, 0), _if_then_else(True, zeros_diff_rows, compare_blocks_rows)), _if_then_else(le(3, zeros_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_cols), _if_then_else(False, compare_blocks_rows, max_row_clue)))))
VAL TREES:
mul(mul(add(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, zeros_diff_cols)), add(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_cols, mul(compare_blocks_rows, ones_diff_cols)))), add(add(add(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_rows, ones_diff_cols)), mul(mul(compare_blocks_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_rows))))
mul(add(mul(add(ones_diff_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)), add(add(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, zeros_diff_cols))), mul(mul(add(ones_diff_rows, compare_blocks_cols), mul(ones_diff_cols, compare_blocks_cols)), add(add(zeros_diff_rows, zeros_diff_cols), add(compare_blocks_cols, ones_diff_cols))))
add(add(mul(add(mul(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_rows, compare_blocks_rows)), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_cols, zeros_diff_rows))), mul(add(add(compare_blocks_rows, ones_diff_rows), mul(ones_diff_cols, ones_diff_rows)), zeros_diff_cols)), mul(mul(mul(mul(ones_diff_rows, ones_diff_cols), add(ones_diff_cols, zeros_diff_cols)), mul(add(compare_blocks_cols, ones_diff_cols), add(ones_diff_rows, compare_blocks_cols))), mul(add(add(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, zeros_diff_cols)), mul(add(zeros_diff_cols, ones_diff_cols), add(compare_blocks_rows, zeros_diff_cols)))))
add(mul(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_rows, zeros_diff_rows)), add(mul(add(mul(compare_blocks_cols, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), ones_diff_cols), add(ones_diff_cols, ones_diff_rows)))
ones_diff_cols
add(add(add(mul(ones_diff_cols, compare_blocks_cols), add(zeros_diff_rows, ones_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows))), mul(mul(add(ones_diff_cols, zeros_diff_cols), add(ones_diff_cols, ones_diff_cols)), mul(mul(ones_diff_rows, ones_diff_rows), mul(zeros_diff_rows, compare_blocks_rows))))
COND TREES:
or_(and_(le(_if_then_else(le(_if_then_else(ge(max_col_clue, zeros_diff_cols), max_col_clue, max_row_clue), _if_then_else(le(4, zeros_diff_rows), max_row_clue, 4)), _if_then_else(True, ones_diff_rows, ones_diff_cols), _if_then_else(True, ones_diff_cols, _if_then_else(False, 0, ones_diff_cols))), max_col_clue), le(2, 0)), and_(le(1, max_col_clue), and_(False, False)))
or_(le(1, max_col_clue), le(_if_then_else(False, zeros_diff_rows, 0), _if_then_else(and_(False, False), _if_then_else(False, compare_blocks_rows, 1), _if_then_else(False, max_row_clue, zeros_diff_cols))))
le(_if_then_else(le(_if_then_else(True, ones_diff_rows, 4), zeros_diff_rows), _if_then_else(False, _if_then_else(False, 4, max_row_clue), 4), _if_then_else(False, zeros_diff_rows, _if_then_else(True, 1, zeros_diff_cols))), _if_then_else(and_(True, False), _if_then_else(True, 2, 3), _if_then_else(True, 0, 4)))
or_(le(_if_then_else(True, compare_blocks_cols, 4), _if_then_else(True, compare_blocks_cols, ones_diff_rows)), and_(le(_if_then_else(or_(le(_if_then_else(True, compare_blocks_cols, compare_blocks_cols), _if_then_else(False, 3, compare_blocks_rows)), ge(_if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(True, 3, zeros_diff_rows))), _if_then_else(and_(True, le(max_col_clue, 4)), _if_then_else(ge(2, 3), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(False, 4, ones_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, 0), _if_then_else(True, ones_diff_cols, 0))), _if_then_else(le(_if_then_else(False, ones_diff_rows, 0), _if_then_else(True, 3, ones_diff_cols)), _if_then_else(le(0, compare_blocks_rows), _if_then_else(True, 0, 0), _if_then_else(False, _if_then_else(False, 4, ones_diff_rows), compare_blocks_cols)), _if_then_else(le(max_row_clue, 3), _if_then_else(False, max_row_clue, zeros_diff_rows), _if_then_else(False, compare_blocks_rows, zeros_diff_cols)))), _if_then_else(False, max_col_clue, compare_blocks_cols)), or_(or_(False, False), ge(max_row_clue, max_row_clue))))
and_(and_(ge(_if_then_else(True, 0, 1), _if_then_else(True, compare_blocks_cols, 2)), le(4, 0)), ge(_if_then_else(or_(False, False), _if_then_else(True, 3, compare_blocks_rows), _if_then_else(False, 4, max_row_clue)), _if_then_else(and_(True, False), _if_then_else(True, compare_blocks_cols, zeros_diff_rows), _if_then_else(False, max_row_clue, _if_then_else(and_(True, False), _if_then_else(or_(False, True), 4, _if_then_else(ge(0, ones_diff_cols), _if_then_else(True, max_col_clue, compare_blocks_cols), _if_then_else(False, zeros_diff_cols, zeros_diff_rows))), _if_then_else(False, zeros_diff_rows, compare_blocks_rows))))))
VAL TREES:
mul(mul(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows)), add(add(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, ones_diff_cols))))
mul(add(mul(ones_diff_cols, zeros_diff_cols), mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, ones_diff_rows)))
mul(add(add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, ones_diff_cols)), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_rows, compare_blocks_rows))), add(add(add(compare_blocks_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_cols))))
mul(mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)), mul(add(ones_diff_cols, compare_blocks_rows), add(zeros_diff_rows, zeros_diff_cols)))
mul(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), mul(mul(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols)))
add(mul(add(ones_diff_cols, zeros_diff_cols), mul(ones_diff_cols, ones_diff_cols)), mul(mul(ones_diff_cols, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
ge(_if_then_else(and_(or_(True, False), or_(True, True)), _if_then_else(or_(False, True), _if_then_else(False, max_col_clue, 0), _if_then_else(True, ones_diff_rows, ones_diff_cols)), _if_then_else(le(max_col_clue, ones_diff_rows), _if_then_else(False, 2, 2), _if_then_else(False, _if_then_else(or_(True, True), _if_then_else(True, ones_diff_rows, max_col_clue), _if_then_else(True, zeros_diff_cols, zeros_diff_rows)), compare_blocks_cols))), _if_then_else(ge(_if_then_else(True, 1, _if_then_else(False, max_row_clue, 0)), _if_then_else(True, 4, compare_blocks_rows)), _if_then_else(and_(False, False), _if_then_else(False, zeros_diff_cols, compare_blocks_rows), _if_then_else(True, compare_blocks_rows, max_col_clue)), _if_then_else(False, _if_then_else(True, 1, 4), _if_then_else(True, compare_blocks_cols, max_row_clue))))
le(_if_then_else(le(2, 0), _if_then_else(or_(False, True), zeros_diff_rows, zeros_diff_cols), _if_then_else(True, _if_then_else(True, 2, max_row_clue), 4)), _if_then_else(and_(False, True), ones_diff_cols, _if_then_else(True, _if_then_else(True, 3, 0), max_row_clue)))
or_(and_(and_(le(_if_then_else(False, max_col_clue, 0), _if_then_else(False, 0, 3)), or_(le(zeros_diff_rows, 3), and_(True, False))), or_(and_(and_(True, False), ge(2, 2)), or_(ge(compare_blocks_rows, 0), and_(False, True)))), ge(_if_then_else(ge(_if_then_else(True, 0, 3), _if_then_else(False, max_col_clue, ones_diff_rows)), ones_diff_rows, _if_then_else(le(max_col_clue, zeros_diff_rows), _if_then_else(False, 4, max_row_clue), _if_then_else(True, 2, 3))), _if_then_else(or_(and_(True, False), le(3, ones_diff_cols)), 3, _if_then_else(or_(True, True), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(True, _if_then_else(and_(False, True), _if_then_else(True, compare_blocks_rows, 0), _if_then_else(False, max_row_clue, ones_diff_rows)), ones_diff_cols)))))
le(_if_then_else(le(_if_then_else(ge(max_col_clue, 0), _if_then_else(False, zeros_diff_rows, compare_blocks_cols), _if_then_else(False, 0, max_row_clue)), _if_then_else(ge(3, 3), _if_then_else(True, ones_diff_rows, 2), _if_then_else(True, 1, ones_diff_cols))), _if_then_else(or_(and_(True, False), or_(True, False)), _if_then_else(ge(zeros_diff_cols, compare_blocks_rows), _if_then_else(or_(False, False), 3, compare_blocks_rows), _if_then_else(False, zeros_diff_rows, 1)), _if_then_else(or_(False, False), _if_then_else(True, 1, compare_blocks_cols), _if_then_else(True, ones_diff_cols, ones_diff_cols))), _if_then_else(le(3, _if_then_else(False, compare_blocks_rows, ones_diff_cols)), _if_then_else(and_(True, False), _if_then_else(True, ones_diff_cols, ones_diff_rows), _if_then_else(False, 1, 2)), _if_then_else(ge(3, zeros_diff_rows), _if_then_else(False, 0, compare_blocks_rows), _if_then_else(False, max_col_clue, ones_diff_rows)))), _if_then_else(True, zeros_diff_rows, 0))
ge(_if_then_else(or_(False, True), _if_then_else(True, 0, 3), _if_then_else(False, 4, max_col_clue)), _if_then_else(and_(or_(and_(or_(False, True), False), False), ge(_if_then_else(False, max_col_clue, ones_diff_cols), _if_then_else(False, 4, 0))), _if_then_else(True, 2, _if_then_else(le(4, compare_blocks_rows), _if_then_else(False, max_row_clue, zeros_diff_cols), _if_then_else(True, 3, 0))), _if_then_else(False, max_row_clue, 2)))
VAL TREES:
mul(add(mul(add(zeros_diff_rows, ones_diff_cols), mul(compare_blocks_rows, add(zeros_diff_cols, compare_blocks_rows))), add(add(ones_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, add(add(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols))))), mul(mul(mul(zeros_diff_cols, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), add(add(compare_blocks_cols, ones_diff_rows), add(zeros_diff_cols, zeros_diff_rows))))
add(add(add(add(mul(mul(compare_blocks_rows, zeros_diff_cols), zeros_diff_rows), mul(compare_blocks_cols, ones_diff_cols)), compare_blocks_rows), add(add(ones_diff_cols, compare_blocks_rows), compare_blocks_rows)), mul(mul(compare_blocks_rows, ones_diff_cols), mul(ones_diff_rows, compare_blocks_cols)))
mul(add(zeros_diff_cols, mul(ones_diff_cols, compare_blocks_cols)), add(mul(zeros_diff_rows, ones_diff_rows), add(zeros_diff_cols, compare_blocks_cols)))
mul(mul(ones_diff_rows, ones_diff_cols), add(add(compare_blocks_rows, ones_diff_cols), add(zeros_diff_rows, mul(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_cols, compare_blocks_rows)))))
mul(ones_diff_rows, add(ones_diff_rows, compare_blocks_rows))
add(mul(add(compare_blocks_cols, ones_diff_cols), mul(zeros_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_rows, ones_diff_cols), mul(mul(compare_blocks_cols, compare_blocks_rows), add(ones_diff_rows, compare_blocks_cols))))
COND TREES:
ge(_if_then_else(and_(or_(True, False), or_(True, True)), _if_then_else(False, compare_blocks_rows, _if_then_else(True, ones_diff_rows, ones_diff_cols)), _if_then_else(le(max_col_clue, ones_diff_rows), _if_then_else(False, 2, 2), _if_then_else(False, ones_diff_cols, compare_blocks_cols))), 4)
le(_if_then_else(le(zeros_diff_rows, 0), _if_then_else(or_(False, True), _if_then_else(False, compare_blocks_rows, _if_then_else(True, _if_then_else(False, 3, ones_diff_rows), max_row_clue)), zeros_diff_cols), _if_then_else(True, max_col_clue, 4)), _if_then_else(and_(False, True), _if_then_else(le(3, zeros_diff_rows), compare_blocks_cols, max_row_clue), _if_then_else(True, _if_then_else(or_(le(4, 2), or_(False, False)), 3, ones_diff_rows), max_row_clue)))
or_(and_(and_(le(_if_then_else(False, ones_diff_rows, 0), _if_then_else(False, 0, 3)), or_(le(zeros_diff_rows, 3), and_(True, False))), or_(and_(and_(True, False), ge(2, 2)), or_(ge(compare_blocks_rows, 0), and_(False, True)))), ge(_if_then_else(ge(_if_then_else(True, 0, 3), _if_then_else(False, max_col_clue, ones_diff_rows)), _if_then_else(and_(True, False), _if_then_else(False, 3, ones_diff_cols), _if_then_else(False, 4, 4)), 0), _if_then_else(or_(and_(False, False), le(3, ones_diff_cols)), _if_then_else(le(compare_blocks_rows, ones_diff_cols), _if_then_else(False, ones_diff_rows, 4), _if_then_else(True, 0, ones_diff_rows)), _if_then_else(or_(True, True), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(True, ones_diff_rows, ones_diff_cols)))))
le(_if_then_else(le(_if_then_else(ge(max_col_clue, 0), _if_then_else(False, zeros_diff_rows, compare_blocks_cols), _if_then_else(False, 0, max_row_clue)), _if_then_else(ge(3, 3), _if_then_else(False, ones_diff_rows, 2), _if_then_else(True, 1, ones_diff_cols))), _if_then_else(or_(and_(True, False), or_(True, False)), _if_then_else(ge(zeros_diff_cols, compare_blocks_rows), _if_then_else(False, 3, compare_blocks_rows), _if_then_else(False, zeros_diff_rows, 1)), _if_then_else(or_(False, False), _if_then_else(True, 1, compare_blocks_cols), _if_then_else(True, ones_diff_cols, ones_diff_cols))), _if_then_else(le(_if_then_else(False, ones_diff_cols, 0), _if_then_else(False, compare_blocks_rows, ones_diff_cols)), _if_then_else(and_(True, False), _if_then_else(True, ones_diff_cols, ones_diff_rows), _if_then_else(False, 1, 2)), _if_then_else(ge(3, zeros_diff_rows), _if_then_else(False, 0, compare_blocks_rows), _if_then_else(False, max_col_clue, ones_diff_rows)))), _if_then_else(or_(le(_if_then_else(True, compare_blocks_cols, compare_blocks_cols), _if_then_else(False, 3, compare_blocks_rows)), ge(_if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(True, 0, compare_blocks_rows))), _if_then_else(True, _if_then_else(ge(2, 3), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(False, 4, ones_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, 0), _if_then_else(True, ones_diff_cols, 0))), _if_then_else(le(_if_then_else(False, ones_diff_rows, 0), _if_then_else(True, 3, ones_diff_cols)), _if_then_else(le(0, compare_blocks_rows), _if_then_else(True, 0, 0), _if_then_else(False, _if_then_else(le(zeros_diff_rows, 2), _if_then_else(True, 0, ones_diff_rows), _if_then_else(True, max_col_clue, 3)), compare_blocks_cols)), _if_then_else(le(max_row_clue, 3), _if_then_else(False, max_row_clue, zeros_diff_rows), _if_then_else(False, compare_blocks_rows, zeros_diff_cols)))))
ge(_if_then_else(or_(False, True), _if_then_else(False, ones_diff_rows, compare_blocks_cols), 2), _if_then_else(and_(True, True), _if_then_else(True, _if_then_else(True, compare_blocks_cols, 3), ones_diff_cols), _if_then_else(False, _if_then_else(False, 4, max_col_clue), 2)))
VAL TREES:
mul(add(mul(add(zeros_diff_rows, ones_diff_cols), zeros_diff_rows), add(add(ones_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))), mul(mul(mul(zeros_diff_cols, ones_diff_rows), mul(compare_blocks_rows, add(ones_diff_rows, zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_rows), add(zeros_diff_cols, zeros_diff_rows))))
add(add(add(add(mul(compare_blocks_rows, zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_cols, compare_blocks_rows), compare_blocks_rows)), mul(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), add(ones_diff_cols, compare_blocks_cols)), ones_diff_cols), mul(ones_diff_rows, compare_blocks_cols)))
mul(add(compare_blocks_cols, mul(ones_diff_cols, ones_diff_cols)), add(mul(zeros_diff_rows, ones_diff_rows), add(zeros_diff_cols, compare_blocks_cols)))
mul(add(add(ones_diff_cols, compare_blocks_rows), mul(compare_blocks_rows, compare_blocks_rows)), add(add(compare_blocks_rows, zeros_diff_cols), add(zeros_diff_rows, ones_diff_cols)))
add(zeros_diff_cols, mul(add(ones_diff_cols, mul(mul(zeros_diff_cols, zeros_diff_rows), mul(zeros_diff_cols, compare_blocks_rows))), mul(zeros_diff_rows, ones_diff_cols)))
add(mul(add(compare_blocks_cols, ones_diff_cols), mul(zeros_diff_rows, zeros_diff_rows)), mul(mul(compare_blocks_rows, ones_diff_cols), add(mul(mul(ones_diff_cols, ones_diff_rows), mul(compare_blocks_cols, ones_diff_rows)), compare_blocks_cols)))
COND TREES:
or_(and_(le(_if_then_else(or_(False, True), _if_then_else(True, compare_blocks_rows, compare_blocks_cols), _if_then_else(True, ones_diff_cols, max_row_clue)), max_col_clue), le(2, 0)), and_(le(1, max_col_clue), le(_if_then_else(ge(_if_then_else(True, max_col_clue, compare_blocks_rows), _if_then_else(le(_if_then_else(True, max_col_clue, max_row_clue), _if_then_else(or_(True, True), compare_blocks_cols, 4)), max_row_clue, 1)), _if_then_else(and_(False, False), _if_then_else(False, zeros_diff_cols, compare_blocks_rows), _if_then_else(True, compare_blocks_rows, max_col_clue)), _if_then_else(ge(max_col_clue, zeros_diff_cols), _if_then_else(True, 1, 4), _if_then_else(True, compare_blocks_cols, max_row_clue))), zeros_diff_cols)))
or_(ge(_if_then_else(True, zeros_diff_cols, compare_blocks_cols), _if_then_else(False, zeros_diff_rows, zeros_diff_cols)), le(_if_then_else(False, _if_then_else(True, ones_diff_cols, 3), ones_diff_rows), _if_then_else(False, ones_diff_rows, compare_blocks_rows)))
le(_if_then_else(le(_if_then_else(True, _if_then_else(False, 4, 4), 4), zeros_diff_rows), _if_then_else(True, _if_then_else(False, 4, max_row_clue), 4), _if_then_else(or_(True, False), zeros_diff_rows, _if_then_else(True, 1, zeros_diff_cols))), _if_then_else(or_(True, False), _if_then_else(False, 3, 1), _if_then_else(True, _if_then_else(True, zeros_diff_cols, compare_blocks_rows), 0)))
or_(le(_if_then_else(and_(le(max_row_clue, zeros_diff_rows), le(max_col_clue, 4)), compare_blocks_cols, 4), _if_then_else(and_(False, False), _if_then_else(True, _if_then_else(True, zeros_diff_rows, 0), max_row_clue), _if_then_else(True, zeros_diff_cols, 0))), and_(or_(False, False), or_(or_(ge(max_row_clue, ones_diff_cols), False), ge(max_row_clue, ones_diff_cols))))
and_(and_(ge(_if_then_else(True, 0, 1), max_row_clue), False), True)
VAL TREES:
mul(mul(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows)), add(add(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(mul(add(ones_diff_cols, mul(mul(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols))), mul(ones_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, ones_diff_cols))))
mul(add(mul(ones_diff_cols, zeros_diff_cols), mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_rows))), add(add(compare_blocks_cols, compare_blocks_cols), add(zeros_diff_rows, ones_diff_rows)))
mul(add(add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, ones_diff_cols)), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_rows, compare_blocks_rows))), add(add(add(compare_blocks_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), mul(ones_diff_cols, add(zeros_diff_cols, zeros_diff_cols))))
mul(mul(add(zeros_diff_cols, compare_blocks_cols), mul(mul(ones_diff_cols, ones_diff_cols), add(ones_diff_cols, ones_diff_cols))), mul(add(ones_diff_cols, compare_blocks_rows), add(zeros_diff_rows, zeros_diff_cols)))
mul(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), mul(mul(zeros_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols)))
add(mul(add(ones_diff_cols, zeros_diff_cols), mul(zeros_diff_cols, zeros_diff_rows)), mul(mul(ones_diff_cols, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
or_(and_(le(_if_then_else(le(_if_then_else(ge(max_col_clue, zeros_diff_cols), max_col_clue, max_row_clue), _if_then_else(False, max_row_clue, 4)), _if_then_else(True, 0, ones_diff_cols), _if_then_else(True, ones_diff_cols, _if_then_else(False, 0, ones_diff_cols))), max_col_clue), le(2, 0)), and_(le(1, max_col_clue), and_(False, False)))
or_(le(1, max_col_clue), le(_if_then_else(False, zeros_diff_rows, 0), _if_then_else(False, ones_diff_rows, max_row_clue)))
le(_if_then_else(le(_if_then_else(True, ones_diff_rows, 4), zeros_diff_rows), _if_then_else(False, _if_then_else(or_(True, False), 4, max_row_clue), 4), _if_then_else(False, zeros_diff_rows, _if_then_else(True, 1, zeros_diff_cols))), _if_then_else(or_(True, False), _if_then_else(True, 2, 3), _if_then_else(True, 0, 4)))
or_(le(_if_then_else(True, compare_blocks_cols, 4), _if_then_else(False, 1, 2)), and_(le(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, max_col_clue, compare_blocks_cols)), or_(ge(0, 4), ge(max_row_clue, max_row_clue))))
and_(and_(ge(_if_then_else(True, 0, 1), _if_then_else(True, compare_blocks_cols, 2)), le(4, 3)), ge(_if_then_else(or_(False, False), _if_then_else(True, 3, compare_blocks_rows), _if_then_else(False, 4, max_row_clue)), _if_then_else(and_(True, False), _if_then_else(True, compare_blocks_cols, zeros_diff_rows), _if_then_else(False, max_row_clue, _if_then_else(and_(True, False), _if_then_else(or_(False, False), 4, max_col_clue), _if_then_else(False, zeros_diff_rows, compare_blocks_rows))))))
VAL TREES:
mul(mul(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows)), add(add(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)), zeros_diff_rows))
mul(add(mul(ones_diff_cols, mul(add(zeros_diff_rows, ones_diff_cols), add(compare_blocks_cols, compare_blocks_cols))), mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, ones_diff_rows)))
mul(add(add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, ones_diff_cols)), add(add(ones_diff_rows, add(ones_diff_rows, compare_blocks_rows)), add(ones_diff_rows, compare_blocks_rows))), add(add(add(compare_blocks_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_cols))))
mul(zeros_diff_cols, mul(add(ones_diff_cols, compare_blocks_rows), add(zeros_diff_rows, zeros_diff_cols)))
mul(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), mul(mul(compare_blocks_cols, zeros_diff_rows), add(zeros_diff_cols, ones_diff_rows)))
mul(compare_blocks_rows, compare_blocks_rows)
COND TREES:
or_(and_(le(_if_then_else(or_(False, True), _if_then_else(True, 0, compare_blocks_cols), _if_then_else(True, ones_diff_cols, max_row_clue)), max_col_clue), le(2, 0)), and_(le(1, max_col_clue), and_(False, False)))
or_(ge(_if_then_else(True, zeros_diff_rows, 1), _if_then_else(True, zeros_diff_rows, 3)), le(_if_then_else(True, ones_diff_rows, ones_diff_rows), compare_blocks_cols))
le(_if_then_else(le(_if_then_else(True, ones_diff_rows, 4), zeros_diff_rows), _if_then_else(False, _if_then_else(False, 4, max_row_clue), 4), _if_then_else(or_(True, False), zeros_diff_rows, _if_then_else(False, 1, zeros_diff_cols))), _if_then_else(or_(True, False), _if_then_else(True, 2, 3), _if_then_else(True, _if_then_else(True, zeros_diff_cols, compare_blocks_rows), 0)))
or_(le(_if_then_else(True, compare_blocks_cols, 4), _if_then_else(and_(False, False), _if_then_else(le(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, max_col_clue, compare_blocks_cols)), _if_then_else(True, zeros_diff_rows, 0), max_row_clue), _if_then_else(True, zeros_diff_cols, _if_then_else(True, compare_blocks_cols, ones_diff_rows)))), and_(le(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, max_col_clue, compare_blocks_cols)), or_(or_(False, False), ge(max_row_clue, ones_diff_cols))))
and_(and_(ge(_if_then_else(True, 0, 1), _if_then_else(True, compare_blocks_cols, 2)), le(4, 3)), ge(_if_then_else(or_(False, False), _if_then_else(True, 3, compare_blocks_rows), _if_then_else(False, 4, max_row_clue)), _if_then_else(and_(True, False), _if_then_else(True, compare_blocks_cols, zeros_diff_rows), _if_then_else(False, max_row_clue, _if_then_else(le(2, 4), _if_then_else(True, 3, 4), _if_then_else(False, zeros_diff_rows, compare_blocks_rows))))))
VAL TREES:
mul(mul(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows)), add(add(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)), add(zeros_diff_cols, add(zeros_diff_cols, ones_diff_cols))))
mul(add(mul(ones_diff_cols, zeros_diff_cols), mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, add(zeros_diff_rows, compare_blocks_rows))))
mul(add(add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, ones_diff_cols)), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_rows, compare_blocks_rows))), add(add(add(compare_blocks_rows, mul(add(compare_blocks_rows, compare_blocks_cols), add(compare_blocks_rows, compare_blocks_cols))), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_cols))))
mul(mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)), mul(add(ones_diff_cols, compare_blocks_rows), add(compare_blocks_rows, ones_diff_cols)))
mul(mul(add(ones_diff_rows, ones_diff_cols), mul(compare_blocks_rows, zeros_diff_cols)), mul(mul(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols)))
add(mul(add(ones_diff_cols, zeros_diff_cols), mul(ones_diff_cols, ones_diff_cols)), mul(mul(add(add(ones_diff_rows, ones_diff_cols), add(zeros_diff_rows, zeros_diff_rows)), compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
ge(_if_then_else(and_(or_(True, False), or_(True, True)), _if_then_else(True, ones_diff_cols, compare_blocks_rows), _if_then_else(le(max_col_clue, ones_diff_rows), _if_then_else(False, 2, 2), _if_then_else(False, ones_diff_cols, compare_blocks_cols))), _if_then_else(ge(_if_then_else(True, max_col_clue, compare_blocks_cols), _if_then_else(le(_if_then_else(True, max_col_clue, max_row_clue), _if_then_else(or_(True, True), compare_blocks_cols, 4)), max_row_clue, 1)), _if_then_else(and_(False, False), _if_then_else(False, zeros_diff_cols, compare_blocks_rows), _if_then_else(True, compare_blocks_rows, max_col_clue)), _if_then_else(False, _if_then_else(True, 1, 4), _if_then_else(True, compare_blocks_cols, compare_blocks_cols))))
le(_if_then_else(le(zeros_diff_rows, 0), _if_then_else(or_(False, True), zeros_diff_rows, zeros_diff_cols), _if_then_else(False, ones_diff_rows, max_col_clue)), _if_then_else(le(_if_then_else(False, ones_diff_rows, 4), _if_then_else(False, _if_then_else(True, _if_then_else(False, 0, 1), max_col_clue), _if_then_else(or_(False, False), 0, compare_blocks_cols))), ones_diff_cols, _if_then_else(True, _if_then_else(False, 3, ones_diff_rows), max_row_clue)))
or_(and_(and_(le(_if_then_else(False, max_col_clue, 0), _if_then_else(False, 0, 3)), or_(le(zeros_diff_rows, 3), and_(True, False))), or_(and_(and_(True, False), ge(2, 2)), or_(ge(compare_blocks_rows, 0), and_(False, True)))), ge(_if_then_else(ge(_if_then_else(True, 0, 3), _if_then_else(False, max_col_clue, ones_diff_rows)), ones_diff_rows, _if_then_else(le(max_col_clue, zeros_diff_rows), _if_then_else(False, 4, max_row_clue), _if_then_else(True, 2, 3))), _if_then_else(or_(and_(True, False), le(_if_then_else(and_(False, True), _if_then_else(False, ones_diff_cols, max_row_clue), _if_then_else(True, zeros_diff_cols, zeros_diff_cols)), _if_then_else(and_(False, False), _if_then_else(False, 1, 3), _if_then_else(False, max_row_clue, 2)))), _if_then_else(le(4, ones_diff_cols), _if_then_else(False, ones_diff_rows, 4), _if_then_else(ge(4, 1), _if_then_else(True, compare_blocks_rows, 0), _if_then_else(True, compare_blocks_cols, ones_diff_cols))), _if_then_else(or_(or_(False, True), and_(True, False)), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(True, ones_diff_rows, ones_diff_cols)))))
le(_if_then_else(le(_if_then_else(ge(max_col_clue, 0), _if_then_else(False, zeros_diff_rows, compare_blocks_cols), _if_then_else(False, 0, max_row_clue)), _if_then_else(ge(3, 3), _if_then_else(True, ones_diff_rows, 2), _if_then_else(True, 1, ones_diff_cols))), _if_then_else(le(_if_then_else(True, max_col_clue, ones_diff_cols), _if_then_else(True, ones_diff_cols, 0)), _if_then_else(ge(zeros_diff_cols, compare_blocks_rows), _if_then_else(False, 3, compare_blocks_rows), _if_then_else(False, zeros_diff_rows, 1)), _if_then_else(or_(False, False), _if_then_else(True, 1, compare_blocks_cols), _if_then_else(True, ones_diff_cols, ones_diff_cols))), _if_then_else(le(_if_then_else(False, ones_diff_cols, 0), _if_then_else(False, compare_blocks_rows, ones_diff_cols)), _if_then_else(and_(True, False), _if_then_else(True, ones_diff_cols, ones_diff_rows), _if_then_else(False, 1, 2)), _if_then_else(ge(3, zeros_diff_rows), _if_then_else(False, 0, compare_blocks_rows), _if_then_else(False, max_col_clue, ones_diff_rows)))), _if_then_else(or_(le(_if_then_else(True, compare_blocks_cols, compare_blocks_cols), _if_then_else(and_(and_(True, True), or_(True, False)), 3, compare_blocks_rows)), ge(_if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(True, 0, compare_blocks_rows))), _if_then_else(and_(True, le(max_col_clue, 4)), _if_then_else(ge(2, 3), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(False, 4, ones_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, 0), _if_then_else(True, ones_diff_cols, 0))), _if_then_else(le(_if_then_else(False, ones_diff_rows, 0), _if_then_else(True, 3, ones_diff_cols)), _if_then_else(le(0, compare_blocks_rows), _if_then_else(True, 0, 0), _if_then_else(False, 4, compare_blocks_cols)), _if_then_else(le(max_row_clue, 3), _if_then_else(False, max_row_clue, zeros_diff_rows), _if_then_else(False, compare_blocks_rows, zeros_diff_cols)))))
ge(_if_then_else(or_(False, True), _if_then_else(True, 0, 0), _if_then_else(False, 4, max_col_clue)), _if_then_else(and_(or_(and_(True, False), and_(False, False)), ge(3, compare_blocks_cols)), _if_then_else(True, 2, ones_diff_cols), _if_then_else(False, max_row_clue, 2)))
VAL TREES:
mul(add(mul(add(zeros_diff_rows, ones_diff_cols), mul(compare_blocks_rows, add(zeros_diff_cols, compare_blocks_rows))), add(add(ones_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, add(add(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_rows, compare_blocks_cols))))), mul(mul(mul(zeros_diff_cols, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), add(add(compare_blocks_cols, ones_diff_rows), add(zeros_diff_cols, zeros_diff_rows))))
add(add(add(add(mul(mul(compare_blocks_rows, zeros_diff_cols), zeros_diff_rows), mul(compare_blocks_cols, ones_diff_cols)), compare_blocks_rows), add(add(ones_diff_cols, compare_blocks_rows), compare_blocks_rows)), mul(mul(compare_blocks_rows, ones_diff_cols), mul(ones_diff_rows, compare_blocks_cols)))
mul(add(zeros_diff_cols, mul(ones_diff_cols, compare_blocks_cols)), add(mul(zeros_diff_rows, ones_diff_rows), add(zeros_diff_cols, compare_blocks_cols)))
mul(mul(ones_diff_rows, ones_diff_cols), add(add(compare_blocks_rows, ones_diff_cols), add(zeros_diff_rows, mul(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_cols, compare_blocks_rows)))))
mul(ones_diff_rows, add(ones_diff_rows, compare_blocks_rows))
add(mul(add(compare_blocks_cols, ones_diff_cols), mul(zeros_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_rows, ones_diff_cols), mul(mul(compare_blocks_cols, compare_blocks_rows), add(ones_diff_rows, compare_blocks_cols))))
COND TREES:
ge(_if_then_else(and_(or_(True, False), or_(True, False)), _if_then_else(or_(False, True), _if_then_else(False, max_col_clue, 0), _if_then_else(True, ones_diff_rows, ones_diff_cols)), _if_then_else(le(max_col_clue, ones_diff_rows), _if_then_else(False, 2, 2), _if_then_else(False, ones_diff_cols, compare_blocks_cols))), _if_then_else(ge(_if_then_else(True, max_col_clue, compare_blocks_cols), _if_then_else(le(_if_then_else(True, max_col_clue, max_row_clue), _if_then_else(or_(True, True), compare_blocks_cols, 4)), max_row_clue, 1)), _if_then_else(and_(False, False), _if_then_else(False, zeros_diff_cols, compare_blocks_rows), _if_then_else(True, compare_blocks_rows, max_col_clue)), _if_then_else(and_(le(1, max_col_clue), and_(False, False)), _if_then_else(True, 1, 4), _if_then_else(True, compare_blocks_cols, max_row_clue))))
le(_if_then_else(le(zeros_diff_rows, 0), _if_then_else(le(1, max_col_clue), zeros_diff_rows, zeros_diff_cols), _if_then_else(True, max_col_clue, 4)), _if_then_else(False, ones_diff_cols, _if_then_else(True, _if_then_else(False, 3, ones_diff_rows), max_row_clue)))
or_(and_(le(_if_then_else(True, ones_diff_rows, 4), zeros_diff_rows), or_(and_(and_(True, False), ge(2, 2)), or_(ge(compare_blocks_rows, 0), and_(False, True)))), ge(_if_then_else(ge(_if_then_else(True, 0, 3), _if_then_else(False, max_col_clue, ones_diff_rows)), _if_then_else(and_(True, False), _if_then_else(False, 3, ones_diff_cols), _if_then_else(False, 4, 4)), _if_then_else(le(max_col_clue, zeros_diff_rows), _if_then_else(False, 4, max_row_clue), _if_then_else(True, 4, 3))), _if_then_else(or_(and_(True, False), le(3, ones_diff_cols)), _if_then_else(le(4, ones_diff_cols), _if_then_else(False, ones_diff_rows, 4), _if_then_else(True, 0, ones_diff_rows)), _if_then_else(or_(True, True), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(True, ones_diff_rows, ones_diff_cols)))))
le(_if_then_else(le(_if_then_else(ge(max_col_clue, 0), _if_then_else(False, zeros_diff_rows, compare_blocks_cols), _if_then_else(False, 0, max_row_clue)), _if_then_else(ge(3, 3), _if_then_else(True, ones_diff_rows, 2), _if_then_else(True, 1, ones_diff_cols))), _if_then_else(or_(and_(True, False), or_(True, False)), _if_then_else(ge(zeros_diff_cols, compare_blocks_rows), _if_then_else(False, 3, compare_blocks_rows), _if_then_else(False, zeros_diff_rows, 1)), _if_then_else(True, compare_blocks_cols, 4)), _if_then_else(le(_if_then_else(False, ones_diff_cols, 0), _if_then_else(False, compare_blocks_rows, ones_diff_cols)), _if_then_else(ge(compare_blocks_cols, max_row_clue), _if_then_else(True, ones_diff_cols, ones_diff_rows), _if_then_else(False, 1, 2)), _if_then_else(ge(3, zeros_diff_rows), _if_then_else(False, 0, compare_blocks_rows), _if_then_else(False, max_col_clue, ones_diff_rows)))), _if_then_else(or_(le(_if_then_else(True, compare_blocks_cols, compare_blocks_cols), _if_then_else(False, 3, compare_blocks_rows)), ge(_if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(True, 0, compare_blocks_rows))), _if_then_else(and_(le(zeros_diff_rows, zeros_diff_cols), or_(False, True)), _if_then_else(ge(2, 3), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(False, 4, ones_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, 0), _if_then_else(True, ones_diff_cols, 0))), _if_then_else(le(_if_then_else(False, ones_diff_rows, 0), _if_then_else(True, 3, ones_diff_cols)), _if_then_else(le(0, compare_blocks_rows), _if_then_else(True, 0, 0), _if_then_else(False, zeros_diff_rows, compare_blocks_cols)), _if_then_else(le(max_row_clue, 3), _if_then_else(False, max_row_clue, zeros_diff_rows), _if_then_else(False, compare_blocks_rows, zeros_diff_cols)))))
ge(_if_then_else(or_(True, True), _if_then_else(True, 0, 0), compare_blocks_rows), _if_then_else(True, _if_then_else(True, 2, ones_diff_cols), _if_then_else(False, max_row_clue, 2)))
VAL TREES:
mul(add(mul(add(zeros_diff_rows, ones_diff_cols), mul(compare_blocks_rows, add(zeros_diff_cols, compare_blocks_rows))), add(add(ones_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))), mul(mul(mul(zeros_diff_cols, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), add(add(compare_blocks_cols, ones_diff_rows), add(zeros_diff_cols, zeros_diff_rows))))
add(add(add(add(mul(mul(compare_blocks_rows, zeros_diff_cols), zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), compare_blocks_rows), add(add(ones_diff_cols, compare_blocks_rows), compare_blocks_rows)), mul(mul(compare_blocks_rows, ones_diff_cols), mul(ones_diff_rows, compare_blocks_cols)))
mul(add(zeros_diff_cols, mul(ones_diff_cols, compare_blocks_cols)), add(mul(zeros_diff_rows, ones_diff_rows), add(zeros_diff_cols, compare_blocks_cols)))
mul(add(add(ones_diff_cols, compare_blocks_rows), ones_diff_rows), add(add(compare_blocks_rows, ones_diff_cols), add(zeros_diff_rows, mul(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_cols, compare_blocks_rows)))))
mul(ones_diff_rows, compare_blocks_cols)
add(mul(add(compare_blocks_cols, ones_diff_cols), mul(zeros_diff_rows, zeros_diff_rows)), mul(mul(compare_blocks_rows, ones_diff_cols), mul(mul(compare_blocks_cols, compare_blocks_rows), add(ones_diff_rows, compare_blocks_cols))))
COND TREES:
ge(_if_then_else(and_(or_(True, False), or_(True, False)), _if_then_else(or_(False, True), _if_then_else(False, max_col_clue, 0), _if_then_else(True, ones_diff_rows, ones_diff_cols)), _if_then_else(le(max_col_clue, ones_diff_rows), _if_then_else(False, 2, 2), _if_then_else(False, ones_diff_cols, compare_blocks_cols))), _if_then_else(ge(_if_then_else(True, max_col_clue, compare_blocks_cols), _if_then_else(le(_if_then_else(True, max_col_clue, max_row_clue), _if_then_else(or_(True, True), compare_blocks_cols, 4)), max_row_clue, 1)), _if_then_else(and_(False, False), _if_then_else(False, zeros_diff_cols, compare_blocks_rows), _if_then_else(le(2, 0), compare_blocks_rows, max_col_clue)), _if_then_else(and_(le(1, max_col_clue), and_(False, False)), _if_then_else(True, 1, 4), _if_then_else(True, compare_blocks_cols, max_row_clue))))
le(_if_then_else(le(zeros_diff_rows, 0), _if_then_else(le(1, max_col_clue), zeros_diff_rows, zeros_diff_cols), _if_then_else(True, max_col_clue, 4)), _if_then_else(False, ones_diff_cols, _if_then_else(True, 1, max_row_clue)))
or_(and_(le(_if_then_else(True, ones_diff_rows, 4), zeros_diff_rows), or_(and_(and_(True, False), ge(2, 2)), or_(ge(compare_blocks_rows, 0), and_(False, True)))), ge(_if_then_else(ge(_if_then_else(True, 0, 3), _if_then_else(False, max_col_clue, ones_diff_rows)), _if_then_else(and_(True, False), _if_then_else(False, 3, ones_diff_cols), _if_then_else(False, 4, 4)), _if_then_else(le(max_col_clue, zeros_diff_rows), _if_then_else(False, 4, max_row_clue), _if_then_else(True, 4, 3))), _if_then_else(or_(and_(True, False), le(3, ones_diff_cols)), _if_then_else(le(4, ones_diff_cols), _if_then_else(False, ones_diff_rows, 4), _if_then_else(True, 0, ones_diff_rows)), _if_then_else(or_(True, False), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(True, ones_diff_rows, ones_diff_cols)))))
le(_if_then_else(le(_if_then_else(ge(max_col_clue, 0), _if_then_else(False, zeros_diff_rows, compare_blocks_cols), _if_then_else(False, 0, max_row_clue)), _if_then_else(ge(3, 3), _if_then_else(True, ones_diff_rows, 2), _if_then_else(True, 1, ones_diff_cols))), _if_then_else(or_(and_(True, False), or_(True, False)), _if_then_else(ge(zeros_diff_cols, compare_blocks_rows), _if_then_else(False, 3, compare_blocks_rows), _if_then_else(False, zeros_diff_rows, 1)), _if_then_else(True, compare_blocks_cols, 4)), _if_then_else(le(_if_then_else(False, ones_diff_cols, 0), _if_then_else(False, compare_blocks_rows, ones_diff_cols)), _if_then_else(ge(compare_blocks_cols, max_row_clue), _if_then_else(True, ones_diff_cols, ones_diff_rows), _if_then_else(False, 1, 2)), _if_then_else(ge(3, zeros_diff_rows), _if_then_else(False, 0, compare_blocks_rows), _if_then_else(False, max_col_clue, ones_diff_rows)))), _if_then_else(or_(le(_if_then_else(True, compare_blocks_cols, compare_blocks_cols), _if_then_else(False, 3, compare_blocks_rows)), ge(_if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(True, 0, compare_blocks_rows))), _if_then_else(and_(le(zeros_diff_rows, zeros_diff_cols), or_(False, True)), _if_then_else(ge(2, 3), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(False, 4, ones_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, 0), _if_then_else(True, ones_diff_cols, 0))), _if_then_else(le(_if_then_else(False, ones_diff_rows, 0), _if_then_else(True, 3, ones_diff_cols)), _if_then_else(le(0, compare_blocks_rows), _if_then_else(True, 0, 0), _if_then_else(False, zeros_diff_rows, compare_blocks_cols)), _if_then_else(le(max_row_clue, 3), _if_then_else(False, max_row_clue, zeros_diff_rows), _if_then_else(False, compare_blocks_rows, 0)))))
ge(_if_then_else(or_(True, True), _if_then_else(True, 0, 0), compare_blocks_rows), _if_then_else(True, 3, 4))
VAL TREES:
mul(add(mul(add(zeros_diff_rows, ones_diff_cols), mul(compare_blocks_rows, add(zeros_diff_cols, compare_blocks_rows))), add(add(add(zeros_diff_rows, compare_blocks_cols), zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))), mul(mul(mul(zeros_diff_cols, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), add(add(compare_blocks_cols, ones_diff_rows), add(zeros_diff_cols, zeros_diff_rows))))
add(add(add(add(mul(mul(compare_blocks_rows, zeros_diff_cols), zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), compare_blocks_rows), add(add(mul(ones_diff_cols, zeros_diff_cols), compare_blocks_rows), compare_blocks_rows)), mul(mul(compare_blocks_rows, ones_diff_cols), mul(ones_diff_rows, compare_blocks_cols)))
mul(add(zeros_diff_cols, mul(ones_diff_cols, compare_blocks_cols)), add(mul(zeros_diff_rows, ones_diff_rows), add(ones_diff_rows, compare_blocks_cols)))
mul(add(add(ones_diff_cols, compare_blocks_rows), ones_diff_rows), add(add(compare_blocks_rows, add(mul(zeros_diff_rows, ones_diff_cols), add(ones_diff_cols, compare_blocks_cols))), add(zeros_diff_rows, mul(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_cols, compare_blocks_rows)))))
mul(add(compare_blocks_rows, ones_diff_cols), compare_blocks_cols)
add(mul(add(add(mul(zeros_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, zeros_diff_cols)), ones_diff_cols), mul(zeros_diff_rows, zeros_diff_rows)), mul(mul(compare_blocks_rows, ones_diff_cols), mul(mul(compare_blocks_cols, compare_blocks_rows), add(ones_diff_rows, compare_blocks_cols))))
COND TREES:
or_(and_(le(_if_then_else(or_(False, True), _if_then_else(True, compare_blocks_rows, compare_blocks_cols), _if_then_else(True, ones_diff_cols, max_row_clue)), max_col_clue), le(2, 0)), and_(le(1, max_col_clue), and_(False, False)))
or_(ge(_if_then_else(True, zeros_diff_rows, 1), _if_then_else(True, _if_then_else(True, 3, compare_blocks_cols), 1)), le(_if_then_else(True, ones_diff_rows, ones_diff_rows), _if_then_else(False, ones_diff_rows, compare_blocks_rows)))
le(_if_then_else(and_(True, le(_if_then_else(False, zeros_diff_cols, max_row_clue), _if_then_else(False, 2, 2))), _if_then_else(False, _if_then_else(False, 4, max_row_clue), 4), _if_then_else(or_(True, False), zeros_diff_rows, _if_then_else(True, 1, zeros_diff_cols))), _if_then_else(or_(True, False), _if_then_else(True, 2, 3), _if_then_else(True, _if_then_else(True, zeros_diff_cols, compare_blocks_rows), 0)))
or_(le(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(and_(False, False), _if_then_else(True, _if_then_else(True, zeros_diff_rows, 0), max_row_clue), _if_then_else(True, zeros_diff_cols, _if_then_else(True, compare_blocks_cols, ones_diff_rows)))), and_(le(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, max_col_clue, compare_blocks_cols)), or_(or_(False, False), ge(max_row_clue, ones_diff_cols))))
and_(and_(ge(_if_then_else(True, 0, 1), _if_then_else(True, compare_blocks_cols, 2)), le(4, 3)), ge(_if_then_else(or_(False, False), _if_then_else(True, 3, compare_blocks_rows), _if_then_else(False, 4, max_row_clue)), _if_then_else(and_(True, False), _if_then_else(True, compare_blocks_cols, zeros_diff_rows), _if_then_else(False, max_row_clue, _if_then_else(le(2, 4), _if_then_else(True, 3, 4), _if_then_else(False, zeros_diff_rows, compare_blocks_rows))))))
VAL TREES:
mul(mul(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows)), add(add(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, mul(ones_diff_rows, ones_diff_cols)))))
mul(add(mul(ones_diff_cols, zeros_diff_cols), mul(add(add(compare_blocks_cols, compare_blocks_rows), add(ones_diff_rows, compare_blocks_rows)), add(compare_blocks_cols, zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, ones_diff_rows)))
mul(add(add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, ones_diff_cols)), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_rows, compare_blocks_rows))), add(add(add(compare_blocks_rows, ones_diff_rows), add(compare_blocks_cols, zeros_diff_rows)), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_cols))))
mul(mul(add(zeros_diff_cols, compare_blocks_cols), compare_blocks_rows), mul(add(ones_diff_cols, compare_blocks_rows), add(zeros_diff_rows, zeros_diff_cols)))
mul(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(add(mul(ones_diff_rows, ones_diff_cols), mul(compare_blocks_cols, compare_blocks_cols)), zeros_diff_cols)), mul(mul(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols)))
add(mul(add(ones_diff_cols, zeros_diff_cols), mul(ones_diff_cols, ones_diff_cols)), mul(mul(ones_diff_cols, compare_blocks_cols), add(ones_diff_rows, zeros_diff_rows)))
COND TREES:
or_(and_(le(_if_then_else(or_(False, True), _if_then_else(and_(False, False), compare_blocks_rows, compare_blocks_cols), _if_then_else(True, ones_diff_cols, max_row_clue)), max_col_clue), le(2, 0)), False)
or_(ge(_if_then_else(True, 2, ones_diff_rows), _if_then_else(False, compare_blocks_rows, _if_then_else(or_(False, False), _if_then_else(True, ones_diff_cols, 1), _if_then_else(False, 3, zeros_diff_cols)))), le(_if_then_else(True, ones_diff_rows, ones_diff_rows), _if_then_else(False, ones_diff_rows, compare_blocks_rows)))
le(_if_then_else(le(_if_then_else(le(_if_then_else(False, zeros_diff_rows, max_row_clue), _if_then_else(True, max_col_clue, 4)), ones_diff_rows, 4), zeros_diff_rows), _if_then_else(False, _if_then_else(False, 4, max_row_clue), 4), _if_then_else(or_(True, False), zeros_diff_rows, max_row_clue)), _if_then_else(or_(True, False), _if_then_else(True, 2, 3), _if_then_else(True, _if_then_else(True, zeros_diff_cols, compare_blocks_rows), 0)))
or_(le(_if_then_else(True, compare_blocks_cols, 4), _if_then_else(or_(False, False), zeros_diff_rows, 4)), False)
and_(True, ge(_if_then_else(or_(False, False), _if_then_else(True, 3, compare_blocks_rows), _if_then_else(False, 4, max_row_clue)), _if_then_else(and_(True, False), _if_then_else(True, compare_blocks_cols, zeros_diff_rows), _if_then_else(False, max_row_clue, _if_then_else(True, _if_then_else(True, max_row_clue, 4), _if_then_else(False, zeros_diff_rows, compare_blocks_rows))))))
VAL TREES:
mul(mul(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows)), add(add(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, ones_diff_cols))))
mul(add(mul(ones_diff_cols, zeros_diff_cols), mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, ones_diff_rows)))
mul(add(add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, ones_diff_cols)), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_rows, compare_blocks_rows))), add(add(add(compare_blocks_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_cols))))
mul(mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)), mul(add(ones_diff_cols, compare_blocks_rows), add(zeros_diff_rows, zeros_diff_cols)))
mul(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), mul(mul(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols)))
add(mul(add(ones_diff_cols, zeros_diff_cols), mul(ones_diff_cols, ones_diff_cols)), mul(mul(ones_diff_cols, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
ge(_if_then_else(and_(or_(True, False), or_(True, True)), _if_then_else(or_(False, True), _if_then_else(False, max_col_clue, 0), _if_then_else(True, ones_diff_rows, ones_diff_cols)), _if_then_else(le(max_col_clue, ones_diff_rows), _if_then_else(or_(False, True), _if_then_else(le(1, max_col_clue), compare_blocks_rows, compare_blocks_cols), _if_then_else(True, ones_diff_cols, max_row_clue)), _if_then_else(le(_if_then_else(False, ones_diff_cols, ones_diff_rows), _if_then_else(False, 1, max_col_clue)), ones_diff_cols, compare_blocks_cols))), _if_then_else(ge(_if_then_else(False, max_col_clue, compare_blocks_cols), _if_then_else(le(_if_then_else(True, max_col_clue, max_row_clue), _if_then_else(or_(True, True), compare_blocks_cols, 4)), max_row_clue, 1)), _if_then_else(and_(False, False), _if_then_else(False, zeros_diff_cols, compare_blocks_rows), _if_then_else(True, compare_blocks_rows, max_col_clue)), 1))
le(_if_then_else(le(zeros_diff_rows, 0), _if_then_else(or_(False, True), zeros_diff_rows, zeros_diff_cols), _if_then_else(le(compare_blocks_rows, compare_blocks_rows), _if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(True, max_col_clue, ones_diff_rows))), _if_then_else(and_(False, True), _if_then_else(ge(_if_then_else(True, zeros_diff_rows, 1), _if_then_else(True, zeros_diff_rows, zeros_diff_rows)), compare_blocks_cols, max_row_clue), _if_then_else(True, _if_then_else(False, 3, ones_diff_rows), max_row_clue)))
or_(and_(and_(le(_if_then_else(False, max_col_clue, 0), _if_then_else(False, 0, 3)), or_(le(zeros_diff_rows, 3), and_(True, False))), or_(and_(and_(True, False), ge(2, 2)), or_(ge(compare_blocks_rows, 0), and_(False, True)))), ge(_if_then_else(ge(_if_then_else(True, 0, 3), _if_then_else(False, max_col_clue, ones_diff_rows)), _if_then_else(and_(True, or_(and_(False, True), and_(True, False))), _if_then_else(False, 3, ones_diff_cols), _if_then_else(False, 4, 4)), _if_then_else(le(max_col_clue, zeros_diff_rows), _if_then_else(False, 4, max_row_clue), _if_then_else(True, 2, 3))), _if_then_else(or_(and_(True, False), le(3, ones_diff_cols)), _if_then_else(le(compare_blocks_rows, ones_diff_cols), _if_then_else(False, ones_diff_rows, 4), _if_then_else(True, 0, ones_diff_rows)), _if_then_else(or_(True, False), zeros_diff_rows, _if_then_else(True, 1, zeros_diff_cols)))))
le(_if_then_else(le(_if_then_else(ge(max_col_clue, 0), _if_then_else(True, zeros_diff_rows, compare_blocks_cols), _if_then_else(False, 0, max_row_clue)), _if_then_else(ge(3, 3), _if_then_else(True, ones_diff_rows, 2), _if_then_else(True, 1, ones_diff_cols))), _if_then_else(or_(and_(True, False), or_(True, False)), _if_then_else(ge(zeros_diff_cols, compare_blocks_rows), _if_then_else(False, 3, compare_blocks_rows), _if_then_else(False, zeros_diff_rows, 1)), _if_then_else(or_(False, False), _if_then_else(True, 1, compare_blocks_cols), _if_then_else(True, ones_diff_cols, ones_diff_cols))), _if_then_else(le(_if_then_else(False, ones_diff_cols, 0), _if_then_else(False, compare_blocks_rows, ones_diff_cols)), _if_then_else(and_(True, False), _if_then_else(True, ones_diff_cols, ones_diff_rows), _if_then_else(False, 1, 2)), _if_then_else(ge(3, zeros_diff_rows), _if_then_else(False, 0, compare_blocks_rows), _if_then_else(False, max_col_clue, ones_diff_rows)))), _if_then_else(or_(le(_if_then_else(True, compare_blocks_cols, compare_blocks_cols), _if_then_else(False, 3, compare_blocks_rows)), ge(_if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(True, 0, compare_blocks_rows))), _if_then_else(and_(le(max_row_clue, zeros_diff_rows), le(max_col_clue, 4)), _if_then_else(ge(2, 3), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(False, 4, ones_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, 0), _if_then_else(True, ones_diff_cols, 0))), _if_then_else(le(_if_then_else(False, ones_diff_rows, 0), _if_then_else(True, 3, ones_diff_cols)), _if_then_else(le(0, _if_then_else(or_(True, False), _if_then_else(False, zeros_diff_rows, zeros_diff_rows), _if_then_else(False, ones_diff_rows, 2))), _if_then_else(True, 0, 0), _if_then_else(False, zeros_diff_rows, compare_blocks_cols)), _if_then_else(le(max_row_clue, 3), _if_then_else(False, max_row_clue, zeros_diff_rows), _if_then_else(True, zeros_diff_cols, _if_then_else(True, compare_blocks_cols, ones_diff_rows))))))
ge(_if_then_else(or_(False, True), _if_then_else(False, 4, 3), _if_then_else(False, 4, max_col_clue)), _if_then_else(False, _if_then_else(True, 2, ones_diff_cols), _if_then_else(False, max_row_clue, 2)))
VAL TREES:
mul(add(mul(add(zeros_diff_rows, ones_diff_cols), zeros_diff_rows), add(add(ones_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))), mul(mul(mul(zeros_diff_cols, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), add(add(compare_blocks_cols, zeros_diff_rows), add(zeros_diff_cols, zeros_diff_rows))))
add(add(add(add(mul(compare_blocks_rows, zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_cols, compare_blocks_rows), compare_blocks_rows)), mul(mul(compare_blocks_rows, ones_diff_cols), mul(ones_diff_rows, compare_blocks_cols)))
mul(add(add(ones_diff_cols, mul(zeros_diff_rows, compare_blocks_cols)), mul(ones_diff_cols, ones_diff_cols)), add(mul(zeros_diff_rows, ones_diff_rows), add(zeros_diff_cols, compare_blocks_cols)))
mul(add(add(ones_diff_cols, compare_blocks_rows), mul(compare_blocks_rows, compare_blocks_rows)), add(add(compare_blocks_rows, ones_diff_cols), add(zeros_diff_rows, ones_diff_cols)))
add(zeros_diff_cols, mul(add(ones_diff_cols, mul(mul(zeros_diff_cols, zeros_diff_rows), mul(zeros_diff_cols, compare_blocks_rows))), mul(zeros_diff_rows, add(compare_blocks_rows, compare_blocks_rows))))
add(mul(add(compare_blocks_cols, ones_diff_cols), mul(zeros_diff_rows, zeros_diff_rows)), mul(mul(compare_blocks_rows, ones_diff_cols), add(mul(mul(ones_diff_cols, ones_diff_rows), mul(compare_blocks_cols, ones_diff_rows)), compare_blocks_cols)))
COND TREES:
or_(and_(le(_if_then_else(or_(False, le(1, max_col_clue)), _if_then_else(True, compare_blocks_rows, compare_blocks_cols), _if_then_else(True, ones_diff_cols, _if_then_else(False, 0, max_row_clue))), max_col_clue), le(2, 0)), and_(le(2, max_col_clue), and_(False, False)))
or_(True, le(_if_then_else(False, zeros_diff_rows, 0), _if_then_else(False, _if_then_else(True, 2, 0), compare_blocks_rows)))
le(_if_then_else(True, _if_then_else(False, _if_then_else(False, 4, max_row_clue), 4), _if_then_else(and_(False, le(ones_diff_rows, 3)), zeros_diff_rows, _if_then_else(True, 1, _if_then_else(True, zeros_diff_cols, compare_blocks_cols)))), _if_then_else(or_(True, False), _if_then_else(True, 2, 3), _if_then_else(and_(True, True), _if_then_else(True, zeros_diff_cols, compare_blocks_rows), 0)))
or_(le(_if_then_else(and_(True, True), _if_then_else(False, ones_diff_rows, 2), _if_then_else(True, 3, max_col_clue)), _if_then_else(and_(False, False), _if_then_else(True, _if_then_else(True, zeros_diff_rows, 0), max_row_clue), _if_then_else(or_(False, False), _if_then_else(True, max_row_clue, ones_diff_rows), _if_then_else(True, ones_diff_cols, 1)))), and_(le(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, max_col_clue, compare_blocks_cols)), or_(or_(False, False), ge(max_row_clue, max_row_clue))))
and_(and_(ge(_if_then_else(True, 0, 1), _if_then_else(True, compare_blocks_cols, 2)), True), ge(_if_then_else(or_(False, False), _if_then_else(True, 3, compare_blocks_rows), _if_then_else(False, 4, max_row_clue)), _if_then_else(and_(True, False), _if_then_else(True, compare_blocks_cols, zeros_diff_rows), _if_then_else(le(_if_then_else(True, compare_blocks_cols, compare_blocks_cols), _if_then_else(False, ones_diff_cols, 1)), max_row_clue, _if_then_else(and_(False, False), _if_then_else(True, 3, 4), _if_then_else(False, zeros_diff_rows, compare_blocks_rows))))))
VAL TREES:
mul(mul(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows)), add(add(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, ones_diff_cols))))
mul(add(mul(ones_diff_cols, zeros_diff_cols), mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, ones_diff_rows)))
mul(add(add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, ones_diff_cols)), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_rows, compare_blocks_rows))), add(add(add(compare_blocks_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_cols))))
mul(mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)), mul(add(ones_diff_cols, compare_blocks_rows), add(zeros_diff_rows, zeros_diff_cols)))
mul(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), mul(mul(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols)))
add(mul(add(ones_diff_cols, zeros_diff_cols), mul(ones_diff_cols, ones_diff_cols)), mul(mul(ones_diff_cols, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
and_(ge(_if_then_else(True, max_col_clue, compare_blocks_cols), _if_then_else(le(_if_then_else(True, _if_then_else(False, ones_diff_rows, 0), max_row_clue), _if_then_else(or_(True, True), compare_blocks_cols, 4)), max_row_clue, 1)), le(_if_then_else(False, _if_then_else(or_(False, True), zeros_diff_cols, 3), max_row_clue), _if_then_else(le(_if_then_else(False, max_row_clue, compare_blocks_rows), _if_then_else(True, max_row_clue, ones_diff_cols)), _if_then_else(True, 0, compare_blocks_cols), ones_diff_cols)))
or_(le(_if_then_else(le(_if_then_else(True, ones_diff_rows, ones_diff_rows), _if_then_else(False, ones_diff_rows, 4)), _if_then_else(and_(False, False), _if_then_else(True, compare_blocks_cols, zeros_diff_cols), _if_then_else(False, max_col_clue, 2)), _if_then_else(ge(ones_diff_rows, compare_blocks_rows), _if_then_else(False, 1, compare_blocks_rows), _if_then_else(True, zeros_diff_rows, zeros_diff_rows))), _if_then_else(or_(le(4, 2), or_(False, False)), _if_then_else(and_(False, False), _if_then_else(False, zeros_diff_rows, 2), _if_then_else(True, zeros_diff_rows, 4)), _if_then_else(or_(True, True), _if_then_else(False, compare_blocks_rows, _if_then_else(ge(0, compare_blocks_cols), compare_blocks_rows, _if_then_else(True, 2, max_col_clue))), _if_then_else(False, compare_blocks_rows, 0)))), ge(_if_then_else(le(_if_then_else(False, 0, max_row_clue), _if_then_else(False, 2, 4)), _if_then_else(ge(3, _if_then_else(ge(zeros_diff_rows, zeros_diff_rows), _if_then_else(True, zeros_diff_rows, max_row_clue), _if_then_else(True, compare_blocks_rows, ones_diff_rows))), _if_then_else(True, 3, compare_blocks_cols), _if_then_else(False, 3, max_col_clue)), _if_then_else(le(max_col_clue, zeros_diff_rows), _if_then_else(False, 0, zeros_diff_rows), max_col_clue)), _if_then_else(ge(_if_then_else(False, zeros_diff_rows, 0), _if_then_else(True, max_col_clue, 2)), _if_then_else(and_(False, False), _if_then_else(False, zeros_diff_cols, 0), _if_then_else(False, 0, compare_blocks_rows)), _if_then_else(or_(False, True), _if_then_else(False, compare_blocks_cols, ones_diff_rows), _if_then_else(True, zeros_diff_rows, compare_blocks_cols)))))
True
and_(and_(le(zeros_diff_cols, 3), False), False)
le(_if_then_else(or_(or_(True, True), and_(False, True)), _if_then_else(le(_if_then_else(False, 1, ones_diff_cols), _if_then_else(False, ones_diff_cols, compare_blocks_rows)), _if_then_else(le(2, compare_blocks_cols), _if_then_else(False, 0, 1), _if_then_else(True, ones_diff_cols, zeros_diff_rows)), _if_then_else(ge(3, 3), _if_then_else(False, max_col_clue, ones_diff_rows), _if_then_else(False, max_col_clue, max_row_clue))), _if_then_else(or_(ge(compare_blocks_rows, zeros_diff_cols), le(max_row_clue, 1)), _if_then_else(le(3, ones_diff_cols), _if_then_else(False, 4, zeros_diff_rows), _if_then_else(or_(True, True), max_col_clue, 1)), _if_then_else(or_(False, False), _if_then_else(True, zeros_diff_rows, max_col_clue), _if_then_else(True, ones_diff_cols, 2)))), _if_then_else(True, _if_then_else(and_(le(zeros_diff_cols, _if_then_else(True, ones_diff_rows, 2)), or_(True, True)), _if_then_else(ge(ones_diff_rows, compare_blocks_cols), _if_then_else(True, 3, 1), _if_then_else(True, ones_diff_cols, max_row_clue)), _if_then_else(or_(True, True), _if_then_else(True, compare_blocks_cols, 3), _if_then_else(and_(True, True), _if_then_else(False, zeros_diff_cols, 3), _if_then_else(True, 3, zeros_diff_rows)))), _if_then_else(ge(_if_then_else(True, ones_diff_cols, max_row_clue), _if_then_else(le(max_col_clue, 0), _if_then_else(False, zeros_diff_rows, 0), _if_then_else(True, compare_blocks_cols, max_col_clue))), _if_then_else(le(1, max_row_clue), _if_then_else(True, zeros_diff_cols, max_col_clue), _if_then_else(True, zeros_diff_rows, compare_blocks_rows)), _if_then_else(le(3, zeros_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_cols), _if_then_else(False, compare_blocks_rows, max_row_clue)))))
VAL TREES:
mul(mul(add(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, zeros_diff_cols)), add(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_cols, mul(compare_blocks_rows, ones_diff_cols)))), add(add(add(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_rows, ones_diff_cols)), mul(mul(compare_blocks_rows, ones_diff_rows), add(compare_blocks_rows, mul(ones_diff_cols, zeros_diff_cols)))))
mul(add(mul(add(ones_diff_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)), add(add(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, zeros_diff_cols))), mul(mul(add(ones_diff_rows, compare_blocks_cols), mul(ones_diff_cols, compare_blocks_cols)), add(add(zeros_diff_rows, zeros_diff_cols), add(compare_blocks_cols, ones_diff_cols))))
add(add(mul(add(mul(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_rows, mul(add(zeros_diff_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_cols)))), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_cols, zeros_diff_rows))), mul(add(add(compare_blocks_rows, ones_diff_rows), mul(ones_diff_cols, ones_diff_rows)), zeros_diff_cols)), mul(mul(mul(mul(ones_diff_rows, ones_diff_cols), add(ones_diff_cols, zeros_diff_cols)), mul(add(compare_blocks_cols, ones_diff_cols), add(ones_diff_rows, compare_blocks_cols))), mul(add(add(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, zeros_diff_cols)), mul(add(zeros_diff_cols, ones_diff_cols), add(compare_blocks_rows, zeros_diff_cols)))))
add(mul(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_rows, zeros_diff_rows)), add(mul(add(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_rows, compare_blocks_rows)), add(ones_diff_cols, ones_diff_rows)))
add(ones_diff_cols, ones_diff_cols)
add(add(add(mul(ones_diff_cols, compare_blocks_cols), add(zeros_diff_rows, ones_diff_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows))), mul(mul(add(ones_diff_cols, zeros_diff_cols), add(ones_diff_cols, ones_diff_cols)), mul(mul(ones_diff_rows, mul(add(ones_diff_cols, zeros_diff_rows), add(ones_diff_rows, ones_diff_cols))), mul(zeros_diff_rows, compare_blocks_rows))))
COND TREES:
or_(and_(le(_if_then_else(or_(False, True), _if_then_else(True, compare_blocks_rows, compare_blocks_cols), _if_then_else(True, ones_diff_cols, _if_then_else(False, 0, ones_diff_cols))), _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), le(2, 0)), and_(le(max_row_clue, max_col_clue), and_(False, False)))
or_(ge(_if_then_else(le(1, max_col_clue), zeros_diff_rows, 1), _if_then_else(True, zeros_diff_rows, 3)), le(_if_then_else(or_(True, False), zeros_diff_rows, 0), _if_then_else(False, ones_diff_rows, compare_blocks_rows)))
le(_if_then_else(le(_if_then_else(True, ones_diff_rows, 4), zeros_diff_rows), _if_then_else(False, _if_then_else(False, 4, max_row_clue), 4), _if_then_else(and_(False, le(ones_diff_rows, 3)), zeros_diff_rows, _if_then_else(True, ones_diff_rows, zeros_diff_cols))), _if_then_else(or_(True, False), _if_then_else(or_(and_(True, False), le(3, ones_diff_cols)), _if_then_else(le(compare_blocks_rows, ones_diff_cols), _if_then_else(False, ones_diff_rows, 4), _if_then_else(True, 0, ones_diff_rows)), _if_then_else(or_(True, True), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(True, ones_diff_rows, ones_diff_cols))), _if_then_else(True, _if_then_else(True, zeros_diff_cols, compare_blocks_rows), 0)))
or_(le(_if_then_else(True, max_row_clue, compare_blocks_cols), _if_then_else(and_(False, False), _if_then_else(True, _if_then_else(True, zeros_diff_rows, 0), max_row_clue), _if_then_else(True, zeros_diff_cols, _if_then_else(True, compare_blocks_cols, ones_diff_rows)))), and_(le(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, max_col_clue, compare_blocks_cols)), or_(True, ge(max_row_clue, max_row_clue))))
and_(and_(ge(_if_then_else(True, 0, 1), _if_then_else(True, _if_then_else(True, 2, ones_diff_cols), 2)), le(4, 3)), ge(_if_then_else(or_(False, False), _if_then_else(True, 3, compare_blocks_rows), _if_then_else(False, 4, max_row_clue)), _if_then_else(and_(True, False), _if_then_else(True, compare_blocks_cols, zeros_diff_rows), _if_then_else(False, max_row_clue, _if_then_else(and_(True, False), _if_then_else(True, 3, 4), _if_then_else(False, zeros_diff_cols, 2))))))
VAL TREES:
mul(mul(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows)), add(add(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, ones_diff_cols))))
mul(add(mul(ones_diff_cols, zeros_diff_cols), mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, ones_diff_rows)))
mul(add(add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, ones_diff_cols)), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_rows, compare_blocks_rows))), add(add(add(compare_blocks_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_cols))))
mul(mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)), mul(add(ones_diff_cols, compare_blocks_rows), add(zeros_diff_rows, zeros_diff_cols)))
mul(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), mul(mul(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols)))
add(mul(add(ones_diff_cols, zeros_diff_cols), mul(ones_diff_cols, ones_diff_cols)), mul(mul(ones_diff_cols, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
or_(and_(le(_if_then_else(le(_if_then_else(ge(max_col_clue, zeros_diff_cols), max_col_clue, max_row_clue), _if_then_else(le(4, zeros_diff_rows), max_row_clue, 4)), _if_then_else(True, ones_diff_rows, ones_diff_cols), _if_then_else(True, ones_diff_cols, _if_then_else(False, 0, ones_diff_cols))), max_col_clue), le(2, 0)), and_(le(1, max_col_clue), or_(False, True)))
or_(True, le(_if_then_else(False, _if_then_else(False, 2, zeros_diff_rows), 0), _if_then_else(and_(True, False), _if_then_else(False, compare_blocks_rows, 1), _if_then_else(False, max_row_clue, zeros_diff_cols))))
le(_if_then_else(le(_if_then_else(True, 1, 4), zeros_diff_rows), _if_then_else(False, _if_then_else(False, 4, max_row_clue), 4), _if_then_else(False, zeros_diff_rows, _if_then_else(True, 1, zeros_diff_cols))), _if_then_else(True, _if_then_else(True, 2, 3), _if_then_else(True, 0, 4)))
or_(le(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(True, compare_blocks_cols, ones_diff_rows)), and_(le(_if_then_else(True, zeros_diff_rows, 0), _if_then_else(False, max_col_clue, 4)), or_(or_(False, False), ge(max_row_clue, max_row_clue))))
and_(and_(ge(_if_then_else(True, 0, 1), _if_then_else(True, compare_blocks_cols, 2)), le(4, 3)), ge(_if_then_else(or_(False, False), _if_then_else(True, 3, compare_blocks_rows), _if_then_else(ge(_if_then_else(False, ones_diff_rows, compare_blocks_rows), _if_then_else(False, zeros_diff_cols, compare_blocks_cols)), 4, max_row_clue)), _if_then_else(and_(True, False), _if_then_else(True, compare_blocks_cols, zeros_diff_rows), _if_then_else(False, max_row_clue, _if_then_else(and_(True, False), _if_then_else(or_(False, True), 4, _if_then_else(ge(0, ones_diff_cols), _if_then_else(True, max_col_clue, compare_blocks_cols), _if_then_else(False, zeros_diff_cols, zeros_diff_rows))), _if_then_else(False, zeros_diff_rows, compare_blocks_rows))))))
VAL TREES:
mul(mul(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows)), add(add(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, ones_diff_cols))))
mul(add(mul(ones_diff_cols, zeros_diff_cols), mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, ones_diff_rows)))
mul(add(add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, ones_diff_cols)), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_rows, compare_blocks_rows))), add(add(add(compare_blocks_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_cols))))
mul(mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)), mul(add(ones_diff_cols, compare_blocks_rows), add(zeros_diff_rows, zeros_diff_cols)))
mul(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), mul(mul(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols)))
add(mul(add(ones_diff_cols, zeros_diff_cols), mul(ones_diff_cols, ones_diff_cols)), mul(mul(ones_diff_cols, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
or_(and_(le(_if_then_else(le(_if_then_else(le(2, 0), max_col_clue, max_row_clue), _if_then_else(False, max_row_clue, 4)), _if_then_else(True, 0, ones_diff_cols), _if_then_else(True, ones_diff_cols, _if_then_else(False, 0, ones_diff_cols))), max_col_clue), le(2, 0)), and_(le(1, max_col_clue), and_(le(_if_then_else(False, ones_diff_rows, compare_blocks_cols), _if_then_else(True, 1, zeros_diff_cols)), False)))
or_(le(1, max_col_clue), le(_if_then_else(False, ones_diff_rows, 4), _if_then_else(False, ones_diff_rows, max_row_clue)))
le(_if_then_else(le(_if_then_else(True, ones_diff_rows, 4), zeros_diff_rows), _if_then_else(False, _if_then_else(le(_if_then_else(False, zeros_diff_cols, max_row_clue), _if_then_else(False, 2, 2)), 4, _if_then_else(ge(ones_diff_rows, compare_blocks_cols), _if_then_else(False, 3, 2), _if_then_else(True, 1, 0))), 4), _if_then_else(False, zeros_diff_rows, _if_then_else(True, 1, zeros_diff_cols))), _if_then_else(or_(True, False), _if_then_else(True, 2, 3), _if_then_else(True, 0, 4)))
or_(le(_if_then_else(True, compare_blocks_cols, 4), _if_then_else(False, 1, 2)), and_(le(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, max_col_clue, compare_blocks_cols)), le(_if_then_else(le(_if_then_else(ge(1, 3), _if_then_else(False, 2, 0), _if_then_else(False, compare_blocks_rows, ones_diff_rows)), zeros_diff_rows), _if_then_else(or_(False, True), max_row_clue, compare_blocks_cols), _if_then_else(True, compare_blocks_cols, max_row_clue)), _if_then_else(and_(False, False), _if_then_else(True, max_row_clue, max_row_clue), _if_then_else(True, zeros_diff_cols, _if_then_else(True, 2, ones_diff_rows))))))
and_(and_(ge(_if_then_else(True, 0, 1), _if_then_else(True, compare_blocks_cols, 2)), le(4, 3)), ge(_if_then_else(False, 0, zeros_diff_rows), _if_then_else(and_(True, False), _if_then_else(True, compare_blocks_cols, zeros_diff_rows), _if_then_else(False, max_row_clue, _if_then_else(and_(True, False), _if_then_else(or_(False, False), 4, max_col_clue), _if_then_else(or_(False, False), _if_then_else(True, 3, compare_blocks_rows), _if_then_else(False, 4, max_row_clue)))))))
VAL TREES:
mul(mul(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows)), add(add(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)), zeros_diff_rows))
mul(add(mul(ones_diff_cols, mul(add(zeros_diff_rows, ones_diff_cols), add(compare_blocks_cols, compare_blocks_cols))), mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, ones_diff_rows)))
mul(add(add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, ones_diff_cols)), add(add(ones_diff_rows, add(ones_diff_rows, compare_blocks_rows)), add(ones_diff_rows, compare_blocks_rows))), add(add(add(compare_blocks_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_cols))))
mul(zeros_diff_cols, mul(add(ones_diff_cols, compare_blocks_rows), add(zeros_diff_rows, zeros_diff_cols)))
mul(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), mul(mul(compare_blocks_cols, zeros_diff_rows), add(zeros_diff_cols, ones_diff_rows)))
mul(compare_blocks_rows, compare_blocks_rows)
COND TREES:
or_(and_(False, ge(max_col_clue, zeros_diff_cols)), and_(True, and_(False, False)))
or_(ge(_if_then_else(True, _if_then_else(ge(_if_then_else(True, zeros_diff_rows, 1), _if_then_else(True, zeros_diff_rows, 3)), 3, compare_blocks_cols), 1), _if_then_else(or_(False, True), zeros_diff_rows, 3)), le(1, _if_then_else(False, zeros_diff_rows, 0)))
le(_if_then_else(and_(True, or_(True, False)), _if_then_else(False, _if_then_else(False, 4, max_row_clue), 4), _if_then_else(ge(4, max_row_clue), 4, 2)), _if_then_else(or_(le(_if_then_else(True, ones_diff_rows, 4), zeros_diff_rows), False), _if_then_else(True, 2, 3), _if_then_else(True, _if_then_else(True, zeros_diff_cols, compare_blocks_rows), 0)))
or_(or_(ge(0, 4), ge(max_row_clue, max_row_clue)), and_(le(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, max_col_clue, compare_blocks_cols)), or_(or_(False, False), ge(max_row_clue, ones_diff_cols))))
and_(and_(or_(True, True), le(_if_then_else(True, 4, zeros_diff_rows), _if_then_else(False, max_col_clue, zeros_diff_cols))), ge(_if_then_else(False, zeros_diff_rows, compare_blocks_rows), _if_then_else(and_(True, True), _if_then_else(True, ones_diff_rows, compare_blocks_cols), _if_then_else(False, max_row_clue, 0))))
VAL TREES:
mul(mul(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, mul(ones_diff_cols, compare_blocks_cols))), add(add(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, zeros_diff_cols)))))
mul(add(mul(ones_diff_cols, zeros_diff_cols), mul(compare_blocks_cols, zeros_diff_rows)), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, ones_diff_rows)))
mul(add(add(add(ones_diff_cols, zeros_diff_cols), add(add(compare_blocks_cols, ones_diff_cols), add(mul(zeros_diff_rows, ones_diff_rows), compare_blocks_rows))), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_rows, compare_blocks_rows))), add(add(add(compare_blocks_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_cols))))
mul(mul(compare_blocks_cols, ones_diff_rows), mul(ones_diff_cols, zeros_diff_cols))
mul(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), mul(mul(compare_blocks_cols, zeros_diff_rows), add(mul(mul(compare_blocks_cols, mul(add(compare_blocks_cols, zeros_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), add(compare_blocks_rows, zeros_diff_rows)), compare_blocks_cols)))
add(mul(add(ones_diff_cols, zeros_diff_cols), mul(ones_diff_cols, mul(ones_diff_cols, ones_diff_cols))), mul(mul(mul(ones_diff_cols, ones_diff_rows), add(ones_diff_cols, ones_diff_cols)), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(ge(ones_diff_rows, zeros_diff_rows), _if_then_else(False, ones_diff_rows, max_row_clue), _if_then_else(True, ones_diff_rows, zeros_diff_cols)), _if_then_else(ge(_if_then_else(True, 4, 3), _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(le(ones_diff_rows, zeros_diff_cols), max_row_clue, ones_diff_cols), _if_then_else(and_(le(1, max_col_clue), and_(False, False)), _if_then_else(True, 3, ones_diff_cols), zeros_diff_cols)))
or_(le(max_col_clue, _if_then_else(True, 0, 0)), le(_if_then_else(False, zeros_diff_cols, ones_diff_rows), _if_then_else(False, zeros_diff_rows, _if_then_else(True, _if_then_else(False, zeros_diff_cols, ones_diff_rows), _if_then_else(True, zeros_diff_rows, 0)))))
and_(or_(True, False), True)
False
and_(or_(and_(or_(True, False), le(ones_diff_cols, 3)), or_(False, le(4, 3))), le(compare_blocks_rows, 0))
VAL TREES:
mul(add(zeros_diff_rows, mul(compare_blocks_rows, ones_diff_cols)), mul(mul(compare_blocks_rows, ones_diff_cols), add(zeros_diff_cols, zeros_diff_rows)))
add(add(add(compare_blocks_cols, ones_diff_cols), mul(ones_diff_cols, compare_blocks_cols)), add(ones_diff_cols, add(compare_blocks_cols, zeros_diff_rows)))
mul(add(add(add(ones_diff_cols, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), mul(add(compare_blocks_rows, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_cols))), mul(mul(mul(compare_blocks_rows, ones_diff_rows), mul(ones_diff_cols, zeros_diff_cols)), mul(add(zeros_diff_rows, ones_diff_cols), mul(zeros_diff_cols, compare_blocks_cols))))
mul(mul(mul(ones_diff_rows, ones_diff_cols), mul(zeros_diff_cols, zeros_diff_rows)), mul(ones_diff_rows, ones_diff_cols))
add(add(add(add(mul(compare_blocks_cols, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_cols)), add(add(zeros_diff_cols, compare_blocks_rows), mul(zeros_diff_rows, zeros_diff_cols))), add(add(mul(zeros_diff_cols, zeros_diff_rows), mul(zeros_diff_cols, zeros_diff_cols)), add(mul(ones_diff_cols, ones_diff_cols), mul(compare_blocks_cols, ones_diff_cols)))), mul(mul(mul(mul(zeros_diff_rows, compare_blocks_rows), add(compare_blocks_cols, compare_blocks_rows)), add(add(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_cols, compare_blocks_cols))), add(mul(add(ones_diff_rows, compare_blocks_rows), add(zeros_diff_cols, zeros_diff_cols)), add(mul(compare_blocks_cols, ones_diff_cols), add(zeros_diff_rows, compare_blocks_rows)))))
add(mul(add(mul(ones_diff_rows, compare_blocks_rows), add(compare_blocks_cols, compare_blocks_cols)), mul(compare_blocks_rows, compare_blocks_rows)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(zeros_diff_rows, zeros_diff_rows)))
COND TREES:
or_(le(2, 0), and_(True, and_(False, False)))
or_(ge(_if_then_else(True, _if_then_else(ge(_if_then_else(True, zeros_diff_rows, 1), _if_then_else(True, zeros_diff_rows, 3)), 3, compare_blocks_cols), 1), ones_diff_rows), le(1, _if_then_else(False, ones_diff_rows, 4)))
le(_if_then_else(and_(True, le(_if_then_else(False, zeros_diff_cols, max_row_clue), _if_then_else(False, 2, 2))), _if_then_else(False, _if_then_else(False, 4, max_row_clue), 4), _if_then_else(le(_if_then_else(True, ones_diff_rows, 4), zeros_diff_rows), 4, 2)), _if_then_else(or_(le(_if_then_else(True, ones_diff_rows, 4), zeros_diff_rows), False), _if_then_else(True, 2, 3), _if_then_else(True, _if_then_else(True, zeros_diff_cols, compare_blocks_rows), 0)))
or_(le(_if_then_else(le(max_col_clue, zeros_diff_rows), _if_then_else(or_(False, True), max_row_clue, compare_blocks_cols), _if_then_else(True, compare_blocks_cols, max_row_clue)), _if_then_else(and_(False, False), _if_then_else(True, max_row_clue, max_row_clue), _if_then_else(True, zeros_diff_cols, _if_then_else(True, 2, ones_diff_rows)))), le(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, max_col_clue, compare_blocks_cols)))
and_(and_(or_(True, True), le(_if_then_else(True, 4, zeros_diff_rows), _if_then_else(False, max_col_clue, zeros_diff_cols))), ge(_if_then_else(or_(False, False), _if_then_else(True, 3, compare_blocks_rows), _if_then_else(True, compare_blocks_cols, zeros_diff_rows)), _if_then_else(and_(True, True), _if_then_else(True, ones_diff_rows, compare_blocks_cols), _if_then_else(False, max_row_clue, 0))))
VAL TREES:
mul(mul(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows)), add(add(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, zeros_diff_cols)))))
mul(add(mul(ones_diff_cols, zeros_diff_cols), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, ones_diff_rows)))
mul(add(add(add(ones_diff_cols, zeros_diff_cols), add(add(compare_blocks_cols, ones_diff_cols), add(zeros_diff_cols, compare_blocks_rows))), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_rows, compare_blocks_rows))), add(add(add(compare_blocks_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_cols))))
mul(mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)), mul(compare_blocks_cols, add(zeros_diff_rows, zeros_diff_cols)))
mul(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), mul(mul(compare_blocks_cols, zeros_diff_rows), add(mul(mul(compare_blocks_cols, compare_blocks_rows), add(compare_blocks_rows, zeros_diff_rows)), compare_blocks_cols)))
add(mul(add(ones_diff_cols, zeros_diff_cols), mul(ones_diff_cols, ones_diff_cols)), mul(mul(mul(ones_diff_cols, ones_diff_rows), add(ones_diff_cols, ones_diff_cols)), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
ge(_if_then_else(and_(or_(True, False), or_(True, True)), _if_then_else(or_(False, True), _if_then_else(False, max_col_clue, 0), _if_then_else(True, ones_diff_rows, ones_diff_cols)), _if_then_else(le(max_col_clue, ones_diff_rows), _if_then_else(False, 2, 2), _if_then_else(False, ones_diff_cols, compare_blocks_cols))), _if_then_else(ge(_if_then_else(False, max_col_clue, compare_blocks_cols), _if_then_else(le(_if_then_else(True, max_col_clue, max_row_clue), _if_then_else(or_(True, True), compare_blocks_cols, 4)), max_row_clue, 1)), _if_then_else(and_(False, False), _if_then_else(False, zeros_diff_cols, compare_blocks_rows), _if_then_else(True, compare_blocks_rows, max_col_clue)), _if_then_else(ge(max_col_clue, zeros_diff_cols), _if_then_else(ge(_if_then_else(False, 1, max_row_clue), _if_then_else(True, 2, zeros_diff_rows)), 1, 4), _if_then_else(True, compare_blocks_cols, max_row_clue))))
le(_if_then_else(le(zeros_diff_rows, 0), _if_then_else(or_(False, True), zeros_diff_rows, zeros_diff_cols), _if_then_else(True, max_col_clue, 4)), 2)
or_(and_(and_(le(_if_then_else(False, max_col_clue, 0), _if_then_else(False, 0, 3)), or_(le(zeros_diff_rows, 3), and_(True, False))), or_(and_(and_(True, False), ge(2, 2)), or_(ge(compare_blocks_rows, 0), and_(False, True)))), ge(_if_then_else(ge(_if_then_else(False, 0, 3), _if_then_else(False, max_col_clue, ones_diff_rows)), _if_then_else(and_(True, False), _if_then_else(False, 3, ones_diff_cols), _if_then_else(False, 4, 4)), _if_then_else(le(max_col_clue, zeros_diff_rows), _if_then_else(False, 4, max_row_clue), _if_then_else(True, 2, 3))), _if_then_else(or_(and_(True, False), le(3, ones_diff_cols)), _if_then_else(le(compare_blocks_rows, ones_diff_cols), _if_then_else(False, ones_diff_rows, 4), _if_then_else(True, 0, ones_diff_rows)), _if_then_else(or_(or_(False, False), True), _if_then_else(True, zeros_diff_cols, max_row_clue), 3))))
le(_if_then_else(le(_if_then_else(ge(max_col_clue, 0), _if_then_else(True, zeros_diff_rows, compare_blocks_cols), _if_then_else(False, 0, max_row_clue)), _if_then_else(ge(3, 3), _if_then_else(True, ones_diff_rows, 2), _if_then_else(True, 1, ones_diff_cols))), _if_then_else(or_(and_(True, False), or_(True, False)), _if_then_else(ge(_if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(True, 0, compare_blocks_rows)), _if_then_else(False, 3, compare_blocks_rows), _if_then_else(False, zeros_diff_rows, 1)), _if_then_else(or_(False, False), _if_then_else(True, 1, compare_blocks_cols), _if_then_else(True, ones_diff_cols, ones_diff_cols))), _if_then_else(le(_if_then_else(False, ones_diff_cols, 0), _if_then_else(False, compare_blocks_rows, ones_diff_cols)), _if_then_else(and_(True, False), _if_then_else(True, ones_diff_cols, ones_diff_rows), _if_then_else(False, 1, 2)), _if_then_else(ge(3, zeros_diff_rows), _if_then_else(False, 0, compare_blocks_rows), _if_then_else(False, max_col_clue, ones_diff_rows)))), _if_then_else(or_(le(_if_then_else(True, compare_blocks_cols, compare_blocks_cols), _if_then_else(False, 3, compare_blocks_rows)), ge(_if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(True, 0, compare_blocks_rows))), _if_then_else(and_(le(max_row_clue, zeros_diff_rows), le(max_col_clue, _if_then_else(ge(compare_blocks_rows, zeros_diff_rows), _if_then_else(True, zeros_diff_rows, 1), _if_then_else(False, 1, 4)))), _if_then_else(ge(2, 3), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(False, 4, ones_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, 0), _if_then_else(True, ones_diff_cols, 0))), _if_then_else(le(_if_then_else(False, ones_diff_rows, 0), _if_then_else(True, 3, ones_diff_cols)), _if_then_else(le(0, compare_blocks_rows), _if_then_else(True, 0, 0), _if_then_else(False, zeros_diff_rows, compare_blocks_cols)), _if_then_else(le(max_row_clue, 3), _if_then_else(False, max_row_clue, zeros_diff_rows), _if_then_else(False, compare_blocks_rows, zeros_diff_cols)))))
ge(_if_then_else(or_(False, True), _if_then_else(True, 0, 0), _if_then_else(False, 4, max_col_clue)), _if_then_else(and_(True, False), _if_then_else(True, 2, ones_diff_cols), _if_then_else(False, max_row_clue, 2)))
VAL TREES:
mul(add(mul(add(zeros_diff_rows, ones_diff_cols), zeros_diff_rows), add(add(ones_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))), mul(mul(mul(zeros_diff_cols, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), add(add(compare_blocks_cols, zeros_diff_rows), add(zeros_diff_cols, zeros_diff_rows))))
add(add(add(add(mul(compare_blocks_rows, zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_cols, compare_blocks_rows), compare_blocks_rows)), mul(mul(compare_blocks_rows, ones_diff_cols), mul(ones_diff_rows, compare_blocks_cols)))
mul(add(add(ones_diff_cols, mul(zeros_diff_rows, compare_blocks_cols)), mul(ones_diff_cols, ones_diff_cols)), add(mul(zeros_diff_rows, ones_diff_rows), add(zeros_diff_cols, compare_blocks_cols)))
mul(add(add(ones_diff_cols, compare_blocks_rows), mul(compare_blocks_rows, compare_blocks_rows)), add(add(compare_blocks_rows, ones_diff_cols), add(zeros_diff_rows, ones_diff_cols)))
add(zeros_diff_cols, mul(add(ones_diff_cols, mul(mul(zeros_diff_cols, zeros_diff_rows), mul(zeros_diff_cols, compare_blocks_rows))), mul(zeros_diff_rows, add(compare_blocks_rows, compare_blocks_rows))))
add(mul(add(compare_blocks_cols, ones_diff_cols), mul(zeros_diff_rows, zeros_diff_rows)), mul(mul(compare_blocks_rows, ones_diff_cols), add(mul(mul(ones_diff_cols, ones_diff_rows), mul(compare_blocks_cols, ones_diff_rows)), compare_blocks_cols)))
COND TREES:
or_(and_(le(_if_then_else(le(_if_then_else(ge(max_col_clue, zeros_diff_cols), max_col_clue, max_row_clue), _if_then_else(False, max_row_clue, 4)), _if_then_else(True, compare_blocks_cols, max_row_clue), _if_then_else(True, ones_diff_cols, _if_then_else(False, 0, ones_diff_cols))), max_col_clue), le(2, 0)), and_(le(1, max_col_clue), and_(False, False)))
or_(le(1, max_col_clue), le(_if_then_else(False, zeros_diff_rows, 0), _if_then_else(and_(False, True), max_col_clue, 4)))
le(_if_then_else(False, _if_then_else(False, _if_then_else(False, 4, max_row_clue), 4), _if_then_else(True, zeros_diff_rows, _if_then_else(True, 1, zeros_diff_cols))), _if_then_else(or_(True, False), _if_then_else(True, 2, 3), _if_then_else(True, 0, 4)))
or_(le(_if_then_else(True, compare_blocks_cols, 4), _if_then_else(False, 1, 2)), and_(or_(le(_if_then_else(True, compare_blocks_cols, compare_blocks_cols), _if_then_else(False, 3, compare_blocks_rows)), ge(zeros_diff_cols, compare_blocks_rows)), or_(or_(False, False), ge(max_row_clue, max_row_clue))))
and_(and_(ge(_if_then_else(True, 0, 1), _if_then_else(True, compare_blocks_cols, 2)), le(4, 3)), ge(_if_then_else(or_(False, False), _if_then_else(True, 3, compare_blocks_rows), _if_then_else(False, max_row_clue, 2)), _if_then_else(and_(True, False), _if_then_else(True, compare_blocks_cols, zeros_diff_rows), _if_then_else(False, max_row_clue, _if_then_else(and_(True, False), _if_then_else(False, 4, max_col_clue), _if_then_else(False, zeros_diff_rows, compare_blocks_rows))))))
VAL TREES:
mul(mul(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows)), add(add(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, ones_diff_cols))))
mul(add(mul(ones_diff_cols, zeros_diff_cols), mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, ones_diff_rows)))
mul(add(add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, ones_diff_cols)), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_rows, compare_blocks_rows))), add(add(add(compare_blocks_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_cols))))
mul(mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)), mul(add(ones_diff_cols, compare_blocks_rows), add(zeros_diff_rows, zeros_diff_cols)))
mul(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), mul(mul(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols)))
add(mul(add(ones_diff_cols, zeros_diff_cols), mul(ones_diff_cols, ones_diff_cols)), mul(mul(ones_diff_cols, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
and_(ge(_if_then_else(True, max_col_clue, compare_blocks_cols), _if_then_else(le(_if_then_else(True, max_col_clue, max_row_clue), _if_then_else(or_(True, True), compare_blocks_cols, 4)), max_row_clue, 1)), le(_if_then_else(False, _if_then_else(le(_if_then_else(ge(max_col_clue, zeros_diff_cols), max_col_clue, max_row_clue), _if_then_else(False, max_row_clue, 4)), zeros_diff_cols, 3), max_row_clue), _if_then_else(True, _if_then_else(True, 0, compare_blocks_cols), ones_diff_cols)))
or_(le(_if_then_else(le(_if_then_else(True, ones_diff_rows, ones_diff_rows), _if_then_else(False, ones_diff_rows, 4)), _if_then_else(and_(False, False), _if_then_else(True, compare_blocks_cols, zeros_diff_cols), _if_then_else(False, max_col_clue, 2)), _if_then_else(ge(ones_diff_rows, compare_blocks_rows), _if_then_else(False, 1, compare_blocks_rows), _if_then_else(True, zeros_diff_rows, zeros_diff_rows))), _if_then_else(or_(le(4, 2), or_(False, False)), _if_then_else(and_(False, False), _if_then_else(False, zeros_diff_rows, 2), _if_then_else(True, zeros_diff_rows, 4)), _if_then_else(or_(True, True), _if_then_else(False, max_row_clue, _if_then_else(ge(0, compare_blocks_cols), _if_then_else(False, zeros_diff_cols, zeros_diff_cols), _if_then_else(True, 2, max_col_clue))), _if_then_else(True, compare_blocks_rows, 0)))), ge(_if_then_else(le(_if_then_else(False, 0, max_row_clue), _if_then_else(False, 2, 4)), _if_then_else(ge(3, _if_then_else(ge(zeros_diff_rows, zeros_diff_rows), _if_then_else(True, zeros_diff_rows, max_row_clue), _if_then_else(True, compare_blocks_rows, ones_diff_rows))), _if_then_else(True, 3, compare_blocks_cols), _if_then_else(False, 3, max_col_clue)), _if_then_else(le(max_col_clue, zeros_diff_rows), _if_then_else(False, 0, zeros_diff_rows), max_col_clue)), _if_then_else(ge(_if_then_else(False, zeros_diff_rows, 0), _if_then_else(True, max_col_clue, 2)), _if_then_else(and_(False, False), _if_then_else(False, zeros_diff_cols, 0), _if_then_else(False, 0, compare_blocks_rows)), _if_then_else(or_(False, True), _if_then_else(False, compare_blocks_cols, ones_diff_rows), _if_then_else(True, zeros_diff_rows, compare_blocks_cols)))))
or_(le(_if_then_else(True, 3, _if_then_else(True, 1, 1)), _if_then_else(True, 0, 4)), le(_if_then_else(or_(False, False), _if_then_else(and_(False, False), _if_then_else(False, 3, ones_diff_cols), 4), _if_then_else(False, zeros_diff_rows, compare_blocks_rows)), zeros_diff_rows))
and_(True, False)
le(_if_then_else(or_(or_(True, True), and_(False, True)), _if_then_else(le(_if_then_else(False, 1, ones_diff_cols), _if_then_else(False, ones_diff_cols, compare_blocks_rows)), _if_then_else(le(2, compare_blocks_cols), _if_then_else(False, 0, 1), _if_then_else(True, ones_diff_cols, zeros_diff_rows)), _if_then_else(ge(3, 3), _if_then_else(False, max_col_clue, ones_diff_rows), _if_then_else(False, max_col_clue, max_row_clue))), _if_then_else(or_(ge(compare_blocks_rows, zeros_diff_cols), le(max_row_clue, 1)), _if_then_else(le(3, ones_diff_cols), _if_then_else(False, 4, zeros_diff_rows), _if_then_else(or_(True, True), max_col_clue, 1)), _if_then_else(or_(False, False), _if_then_else(True, zeros_diff_rows, max_col_clue), _if_then_else(True, ones_diff_cols, 2)))), _if_then_else(True, _if_then_else(and_(le(zeros_diff_cols, max_col_clue), or_(True, True)), _if_then_else(ge(ones_diff_rows, compare_blocks_cols), _if_then_else(True, 3, 1), _if_then_else(True, ones_diff_cols, max_row_clue)), _if_then_else(or_(True, True), _if_then_else(True, compare_blocks_cols, 3), _if_then_else(and_(True, True), _if_then_else(False, zeros_diff_cols, 3), _if_then_else(True, 3, zeros_diff_rows)))), _if_then_else(ge(_if_then_else(True, 2, max_row_clue), _if_then_else(le(max_col_clue, 0), _if_then_else(False, zeros_diff_rows, 0), _if_then_else(True, compare_blocks_cols, max_col_clue))), _if_then_else(le(1, max_row_clue), _if_then_else(True, zeros_diff_cols, max_col_clue), _if_then_else(True, zeros_diff_rows, compare_blocks_rows)), _if_then_else(le(3, zeros_diff_cols), _if_then_else(False, ones_diff_rows, ones_diff_cols), _if_then_else(False, compare_blocks_rows, max_row_clue)))))
VAL TREES:
mul(mul(add(add(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, zeros_diff_cols)), add(add(ones_diff_rows, zeros_diff_rows), add(zeros_diff_cols, mul(compare_blocks_rows, ones_diff_cols)))), add(add(add(compare_blocks_rows, zeros_diff_rows), mul(zeros_diff_cols, ones_diff_cols)), mul(mul(compare_blocks_rows, ones_diff_rows), mul(add(compare_blocks_cols, ones_diff_cols), mul(compare_blocks_cols, ones_diff_cols)))))
mul(add(mul(add(ones_diff_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_rows, zeros_diff_cols))), mul(mul(add(ones_diff_rows, compare_blocks_cols), ones_diff_cols), add(add(zeros_diff_rows, zeros_diff_cols), add(compare_blocks_cols, ones_diff_cols))))
add(add(mul(add(mul(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_rows, compare_blocks_rows)), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_cols, zeros_diff_rows))), mul(add(add(compare_blocks_rows, ones_diff_rows), mul(mul(add(compare_blocks_rows, compare_blocks_rows), mul(compare_blocks_cols, zeros_diff_rows)), ones_diff_rows)), zeros_diff_cols)), mul(mul(mul(mul(ones_diff_rows, ones_diff_cols), mul(compare_blocks_rows, ones_diff_rows)), mul(add(compare_blocks_cols, ones_diff_cols), add(ones_diff_rows, compare_blocks_cols))), mul(add(add(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, zeros_diff_cols)), mul(add(zeros_diff_cols, ones_diff_cols), add(compare_blocks_rows, zeros_diff_cols)))))
add(mul(ones_diff_rows, ones_diff_cols), zeros_diff_cols)
compare_blocks_cols
add(add(add(mul(ones_diff_cols, compare_blocks_cols), add(zeros_diff_rows, ones_diff_rows)), add(add(mul(mul(compare_blocks_cols, zeros_diff_rows), mul(ones_diff_cols, ones_diff_cols)), zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows))), mul(mul(add(ones_diff_cols, zeros_diff_cols), add(ones_diff_cols, ones_diff_cols)), mul(mul(ones_diff_rows, ones_diff_rows), mul(zeros_diff_rows, add(compare_blocks_cols, compare_blocks_cols)))))
COND TREES:
or_(and_(le(_if_then_else(or_(False, le(1, max_col_clue)), _if_then_else(True, compare_blocks_rows, compare_blocks_cols), _if_then_else(True, ones_diff_cols, _if_then_else(False, 0, max_row_clue))), max_col_clue), le(2, 0)), and_(le(1, max_col_clue), and_(False, False)))
or_(True, le(_if_then_else(False, zeros_diff_rows, 0), _if_then_else(False, ones_diff_rows, compare_blocks_rows)))
le(_if_then_else(True, _if_then_else(False, _if_then_else(False, 4, max_row_clue), 4), _if_then_else(and_(False, le(ones_diff_rows, _if_then_else(le(4, ones_diff_cols), _if_then_else(False, ones_diff_rows, 4), _if_then_else(True, 0, ones_diff_rows)))), zeros_diff_rows, _if_then_else(True, 1, zeros_diff_cols))), _if_then_else(or_(True, False), _if_then_else(True, 2, 3), _if_then_else(and_(True, True), _if_then_else(True, zeros_diff_cols, compare_blocks_rows), 0)))
or_(le(_if_then_else(and_(True, True), _if_then_else(False, ones_diff_rows, 2), _if_then_else(True, _if_then_else(False, ones_diff_cols, 0), max_col_clue)), _if_then_else(and_(False, False), _if_then_else(True, _if_then_else(True, zeros_diff_rows, 0), max_row_clue), _if_then_else(True, zeros_diff_cols, _if_then_else(True, compare_blocks_cols, ones_diff_rows)))), and_(le(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, max_col_clue, compare_blocks_cols)), or_(or_(False, False), ge(max_row_clue, max_row_clue))))
and_(and_(ge(_if_then_else(True, 0, 1), _if_then_else(True, compare_blocks_cols, 2)), le(4, 3)), ge(_if_then_else(or_(False, False), _if_then_else(True, 3, compare_blocks_rows), _if_then_else(False, 4, max_row_clue)), _if_then_else(and_(True, False), _if_then_else(True, compare_blocks_cols, zeros_diff_rows), _if_then_else(le(_if_then_else(True, compare_blocks_cols, compare_blocks_cols), _if_then_else(False, ones_diff_cols, 1)), max_row_clue, _if_then_else(and_(False, False), _if_then_else(True, 3, 4), _if_then_else(False, zeros_diff_rows, compare_blocks_rows))))))
VAL TREES:
mul(mul(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows)), add(add(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, ones_diff_cols))))
mul(add(mul(ones_diff_cols, zeros_diff_cols), mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, ones_diff_rows)))
mul(add(add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, ones_diff_cols)), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_rows, compare_blocks_rows))), add(add(add(compare_blocks_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_cols))))
mul(mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)), mul(add(ones_diff_cols, compare_blocks_rows), add(zeros_diff_rows, zeros_diff_cols)))
mul(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), mul(mul(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols)))
add(mul(add(ones_diff_cols, zeros_diff_cols), mul(ones_diff_cols, ones_diff_cols)), mul(mul(ones_diff_cols, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
or_(and_(le(_if_then_else(le(_if_then_else(True, max_col_clue, max_row_clue), _if_then_else(or_(True, True), compare_blocks_cols, 4)), max_row_clue, 1), max_col_clue), le(2, 0)), and_(le(1, max_col_clue), and_(le(compare_blocks_cols, ones_diff_rows), False)))
or_(ge(_if_then_else(le(max_row_clue, 4), _if_then_else(False, 3, ones_diff_rows), _if_then_else(True, 1, zeros_diff_rows)), _if_then_else(False, _if_then_else(False, 0, zeros_diff_rows), _if_then_else(True, 3, compare_blocks_rows))), True)
le(_if_then_else(or_(True, True), _if_then_else(False, _if_then_else(False, 4, max_row_clue), 4), _if_then_else(le(_if_then_else(True, ones_diff_rows, 4), zeros_diff_rows), _if_then_else(False, _if_then_else(False, _if_then_else(le(4, ones_diff_cols), _if_then_else(False, ones_diff_rows, 4), _if_then_else(True, 0, ones_diff_rows)), max_row_clue), 4), _if_then_else(or_(True, False), zeros_diff_rows, max_row_clue))), _if_then_else(or_(True, False), _if_then_else(True, 2, 3), _if_then_else(True, _if_then_else(True, zeros_diff_cols, compare_blocks_rows), 0)))
or_(le(_if_then_else(True, compare_blocks_cols, 4), _if_then_else(and_(and_(ge(0, 4), or_(False, False)), False), _if_then_else(True, _if_then_else(False, 1, 2), max_row_clue), _if_then_else(True, zeros_diff_cols, _if_then_else(True, compare_blocks_cols, ones_diff_rows)))), ge(3, 3))
and_(and_(ge(_if_then_else(True, 0, 1), _if_then_else(True, compare_blocks_cols, 2)), le(max_col_clue, 3)), ge(_if_then_else(or_(and_(True, True), False), _if_then_else(True, 3, compare_blocks_rows), _if_then_else(False, 4, max_row_clue)), _if_then_else(and_(True, False), _if_then_else(True, compare_blocks_cols, zeros_diff_rows), _if_then_else(False, _if_then_else(True, max_col_clue, compare_blocks_rows), _if_then_else(True, compare_blocks_cols, 2)))))
VAL TREES:
mul(mul(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows)), add(add(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, ones_diff_cols))))
mul(add(mul(ones_diff_cols, zeros_diff_cols), mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, ones_diff_rows)))
mul(add(add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, ones_diff_cols)), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_rows, compare_blocks_rows))), add(add(add(compare_blocks_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_cols))))
mul(mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)), mul(add(ones_diff_cols, compare_blocks_rows), add(zeros_diff_rows, zeros_diff_cols)))
mul(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), mul(mul(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols)))
add(mul(add(ones_diff_cols, zeros_diff_cols), mul(ones_diff_cols, ones_diff_cols)), mul(mul(ones_diff_cols, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
ge(_if_then_else(and_(or_(True, False), or_(True, True)), _if_then_else(or_(False, True), _if_then_else(False, max_col_clue, 0), _if_then_else(True, ones_diff_rows, ones_diff_cols)), _if_then_else(le(max_col_clue, ones_diff_rows), _if_then_else(False, 2, 2), _if_then_else(False, ones_diff_cols, compare_blocks_cols))), _if_then_else(ge(_if_then_else(False, max_col_clue, compare_blocks_cols), _if_then_else(False, zeros_diff_cols, zeros_diff_rows)), _if_then_else(and_(False, False), _if_then_else(False, zeros_diff_cols, compare_blocks_rows), _if_then_else(True, compare_blocks_rows, max_col_clue)), _if_then_else(ge(max_col_clue, zeros_diff_cols), _if_then_else(True, 1, 4), _if_then_else(True, compare_blocks_cols, max_row_clue))))
le(_if_then_else(le(zeros_diff_rows, 0), _if_then_else(or_(and_(False, True), True), zeros_diff_rows, zeros_diff_cols), _if_then_else(True, max_col_clue, 4)), _if_then_else(and_(False, True), _if_then_else(le(3, zeros_diff_rows), compare_blocks_cols, max_row_clue), _if_then_else(True, _if_then_else(False, 3, ones_diff_rows), max_row_clue)))
or_(and_(and_(le(_if_then_else(False, max_col_clue, 0), _if_then_else(False, 0, 3)), or_(le(zeros_diff_rows, 3), and_(True, False))), or_(and_(and_(True, False), ge(2, 2)), or_(ge(compare_blocks_rows, 0), and_(False, True)))), ge(_if_then_else(ge(_if_then_else(True, 0, 3), _if_then_else(False, max_col_clue, ones_diff_rows)), _if_then_else(and_(True, False), _if_then_else(False, 3, ones_diff_cols), _if_then_else(False, 4, 4)), _if_then_else(le(max_col_clue, zeros_diff_rows), _if_then_else(False, 4, max_row_clue), _if_then_else(True, 2, 3))), _if_then_else(or_(and_(True, False), le(3, ones_diff_cols)), _if_then_else(le(compare_blocks_rows, ones_diff_cols), _if_then_else(False, ones_diff_rows, 4), _if_then_else(True, 0, ones_diff_rows)), _if_then_else(or_(True, True), _if_then_else(True, zeros_diff_cols, max_row_clue), 3))))
le(_if_then_else(le(_if_then_else(ge(max_col_clue, 0), _if_then_else(True, zeros_diff_rows, compare_blocks_cols), _if_then_else(False, 0, max_row_clue)), _if_then_else(ge(3, 3), _if_then_else(True, ones_diff_rows, 2), _if_then_else(True, 1, ones_diff_cols))), _if_then_else(or_(and_(True, False), or_(True, False)), _if_then_else(ge(zeros_diff_cols, compare_blocks_rows), _if_then_else(False, 3, compare_blocks_rows), _if_then_else(False, zeros_diff_rows, 1)), _if_then_else(or_(False, False), _if_then_else(True, 1, compare_blocks_cols), _if_then_else(True, ones_diff_cols, ones_diff_cols))), _if_then_else(le(_if_then_else(False, ones_diff_cols, 0), _if_then_else(False, compare_blocks_rows, ones_diff_cols)), _if_then_else(and_(True, False), _if_then_else(True, ones_diff_cols, ones_diff_rows), _if_then_else(False, 1, 2)), _if_then_else(ge(3, zeros_diff_rows), _if_then_else(False, 0, compare_blocks_rows), _if_then_else(False, max_col_clue, ones_diff_rows)))), _if_then_else(or_(le(_if_then_else(True, compare_blocks_cols, compare_blocks_cols), _if_then_else(False, 3, compare_blocks_rows)), ge(_if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(True, 0, compare_blocks_rows))), _if_then_else(and_(le(max_row_clue, zeros_diff_rows), le(max_col_clue, 4)), _if_then_else(ge(2, 3), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(False, 4, ones_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, 0), _if_then_else(True, ones_diff_cols, 0))), _if_then_else(le(_if_then_else(False, ones_diff_rows, 0), _if_then_else(True, 3, ones_diff_cols)), _if_then_else(le(0, compare_blocks_rows), _if_then_else(True, 0, 0), _if_then_else(False, zeros_diff_rows, compare_blocks_cols)), _if_then_else(le(max_row_clue, 3), _if_then_else(False, max_row_clue, zeros_diff_rows), _if_then_else(False, compare_blocks_rows, zeros_diff_cols)))))
ge(_if_then_else(or_(False, True), _if_then_else(True, 0, 0), _if_then_else(False, 4, max_col_clue)), _if_then_else(False, _if_then_else(True, 2, ones_diff_cols), _if_then_else(False, max_row_clue, 2)))
VAL TREES:
mul(add(mul(add(zeros_diff_rows, ones_diff_cols), zeros_diff_rows), add(add(ones_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))), mul(mul(mul(zeros_diff_cols, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), add(add(compare_blocks_rows, zeros_diff_rows), add(zeros_diff_cols, zeros_diff_rows))))
add(add(add(add(mul(compare_blocks_rows, zeros_diff_rows), add(ones_diff_rows, add(ones_diff_rows, zeros_diff_rows))), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_cols, compare_blocks_rows), compare_blocks_rows)), mul(mul(compare_blocks_rows, ones_diff_cols), mul(ones_diff_rows, compare_blocks_cols)))
mul(add(add(ones_diff_cols, mul(zeros_diff_rows, zeros_diff_cols)), mul(ones_diff_cols, ones_diff_cols)), add(mul(zeros_diff_rows, ones_diff_rows), add(zeros_diff_cols, compare_blocks_cols)))
mul(add(add(ones_diff_cols, compare_blocks_rows), mul(compare_blocks_rows, compare_blocks_rows)), add(mul(compare_blocks_rows, ones_diff_cols), add(zeros_diff_rows, ones_diff_cols)))
add(zeros_diff_cols, mul(add(ones_diff_cols, mul(mul(zeros_diff_cols, ones_diff_cols), mul(zeros_diff_cols, compare_blocks_rows))), mul(zeros_diff_rows, add(compare_blocks_rows, compare_blocks_rows))))
add(mul(add(compare_blocks_cols, ones_diff_cols), mul(zeros_diff_rows, zeros_diff_rows)), mul(mul(compare_blocks_rows, ones_diff_cols), add(mul(mul(ones_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows)), compare_blocks_cols)))
COND TREES:
or_(and_(and_(False, le(2, 0)), le(2, 0)), and_(le(1, max_col_clue), and_(False, False)))
or_(ge(_if_then_else(True, zeros_diff_rows, 1), _if_then_else(True, zeros_diff_rows, 3)), le(_if_then_else(or_(False, True), zeros_diff_rows, 3), _if_then_else(False, ones_diff_rows, compare_blocks_rows)))
le(_if_then_else(le(_if_then_else(True, ones_diff_rows, 4), zeros_diff_rows), _if_then_else(False, _if_then_else(False, 4, max_row_clue), 4), _if_then_else(or_(True, False), zeros_diff_rows, _if_then_else(True, 1, zeros_diff_cols))), _if_then_else(or_(True, False), _if_then_else(or_(le(_if_then_else(True, ones_diff_rows, 4), zeros_diff_rows), False), _if_then_else(True, 2, 3), _if_then_else(True, _if_then_else(True, zeros_diff_cols, compare_blocks_rows), 0)), _if_then_else(True, 4, 0)))
or_(le(_if_then_else(True, compare_blocks_cols, 4), _if_then_else(le(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, max_col_clue, compare_blocks_cols)), _if_then_else(True, _if_then_else(True, zeros_diff_rows, 0), max_row_clue), _if_then_else(True, zeros_diff_cols, _if_then_else(True, compare_blocks_cols, ones_diff_rows)))), and_(le(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, max_col_clue, compare_blocks_cols)), or_(or_(False, False), ge(max_row_clue, ones_diff_cols))))
and_(and_(ge(_if_then_else(True, 0, 1), _if_then_else(or_(ge(0, 3), ge(max_row_clue, 4)), compare_blocks_cols, 2)), le(4, 3)), ge(_if_then_else(or_(False, False), _if_then_else(True, 3, compare_blocks_rows), _if_then_else(False, 4, max_row_clue)), _if_then_else(and_(True, False), _if_then_else(True, compare_blocks_cols, zeros_diff_rows), _if_then_else(False, max_row_clue, _if_then_else(le(2, 4), _if_then_else(True, 3, 4), _if_then_else(False, zeros_diff_rows, compare_blocks_rows))))))
VAL TREES:
mul(mul(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows)), add(add(add(ones_diff_cols, ones_diff_rows), ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, mul(add(zeros_diff_rows, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_cols))))))
mul(add(mul(ones_diff_cols, zeros_diff_cols), mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_rows))), add(add(compare_blocks_cols, mul(ones_diff_rows, ones_diff_cols)), zeros_diff_rows))
mul(compare_blocks_rows, mul(zeros_diff_cols, ones_diff_cols))
mul(mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)), mul(add(ones_diff_cols, add(mul(zeros_diff_cols, zeros_diff_cols), mul(compare_blocks_rows, compare_blocks_rows))), add(mul(add(ones_diff_rows, zeros_diff_rows), add(compare_blocks_cols, ones_diff_cols)), zeros_diff_cols)))
mul(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(add(add(ones_diff_cols, zeros_diff_rows), compare_blocks_cols), zeros_diff_cols)), mul(mul(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols)))
mul(zeros_diff_cols, ones_diff_rows)
COND TREES:
or_(le(_if_then_else(or_(False, True), _if_then_else(or_(False, True), _if_then_else(True, compare_blocks_rows, compare_blocks_cols), _if_then_else(True, ones_diff_cols, max_row_clue)), _if_then_else(True, ones_diff_cols, max_row_clue)), max_col_clue), and_(True, and_(False, False)))
or_(ge(_if_then_else(True, _if_then_else(ge(_if_then_else(True, zeros_diff_rows, 1), _if_then_else(True, zeros_diff_rows, 3)), 3, compare_blocks_cols), 1), _if_then_else(True, ones_diff_rows, ones_diff_rows)), le(1, _if_then_else(False, ones_diff_rows, 4)))
le(_if_then_else(and_(True, le(_if_then_else(False, zeros_diff_cols, max_row_clue), _if_then_else(False, 2, 2))), _if_then_else(False, _if_then_else(False, 4, max_row_clue), 4), _if_then_else(ge(4, max_row_clue), 4, 2)), _if_then_else(True, 2, 3))
or_(le(_if_then_else(le(max_col_clue, zeros_diff_rows), _if_then_else(or_(False, True), max_row_clue, compare_blocks_cols), _if_then_else(True, compare_blocks_cols, max_row_clue)), _if_then_else(and_(False, False), _if_then_else(True, max_row_clue, max_row_clue), _if_then_else(True, zeros_diff_cols, _if_then_else(True, 2, ones_diff_rows)))), and_(and_(False, False), or_(or_(False, False), ge(max_row_clue, ones_diff_cols))))
and_(and_(or_(True, True), le(_if_then_else(True, 4, zeros_diff_rows), _if_then_else(False, max_col_clue, zeros_diff_cols))), ge(_if_then_else(or_(False, False), _if_then_else(True, 3, compare_blocks_rows), _if_then_else(False, 4, max_row_clue)), _if_then_else(and_(True, True), _if_then_else(True, ones_diff_rows, compare_blocks_cols), _if_then_else(False, max_row_clue, 0))))
VAL TREES:
mul(mul(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows)), add(add(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, zeros_diff_cols)))))
mul(add(mul(ones_diff_cols, zeros_diff_cols), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, ones_diff_rows)))
mul(add(add(add(ones_diff_cols, zeros_diff_cols), add(add(compare_blocks_cols, ones_diff_cols), add(zeros_diff_cols, compare_blocks_rows))), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_rows, compare_blocks_rows))), add(add(add(compare_blocks_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_cols))))
mul(mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)), mul(compare_blocks_cols, add(zeros_diff_rows, zeros_diff_cols)))
mul(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), mul(mul(compare_blocks_cols, zeros_diff_rows), add(mul(mul(compare_blocks_cols, compare_blocks_rows), add(compare_blocks_rows, zeros_diff_rows)), compare_blocks_cols)))
add(mul(add(ones_diff_cols, zeros_diff_cols), mul(ones_diff_cols, ones_diff_cols)), mul(mul(mul(ones_diff_cols, ones_diff_rows), add(ones_diff_cols, ones_diff_cols)), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
le(_if_then_else(ge(ones_diff_rows, zeros_diff_rows), _if_then_else(False, ones_diff_rows, max_row_clue), _if_then_else(True, ones_diff_rows, zeros_diff_cols)), _if_then_else(ge(_if_then_else(True, 4, 3), _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(le(ones_diff_rows, zeros_diff_cols), max_row_clue, ones_diff_cols), _if_then_else(and_(le(1, max_col_clue), and_(False, False)), _if_then_else(True, 3, ones_diff_cols), zeros_diff_cols)))
or_(le(max_col_clue, _if_then_else(True, 0, 0)), le(_if_then_else(False, zeros_diff_cols, ones_diff_rows), _if_then_else(False, zeros_diff_rows, _if_then_else(True, _if_then_else(False, zeros_diff_cols, ones_diff_rows), _if_then_else(True, zeros_diff_rows, 0)))))
and_(or_(True, False), True)
False
and_(or_(and_(or_(True, False), le(ones_diff_cols, 3)), or_(False, le(4, 3))), le(compare_blocks_rows, 0))
VAL TREES:
mul(add(zeros_diff_rows, mul(compare_blocks_rows, ones_diff_cols)), mul(ones_diff_rows, add(zeros_diff_cols, zeros_diff_rows)))
mul(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_rows))
mul(mul(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_rows, ones_diff_cols))
mul(mul(add(add(compare_blocks_cols, ones_diff_cols), add(ones_diff_rows, ones_diff_cols)), mul(zeros_diff_cols, zeros_diff_rows)), mul(ones_diff_rows, ones_diff_cols))
add(add(add(add(mul(compare_blocks_cols, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_cols)), add(add(zeros_diff_cols, compare_blocks_rows), mul(zeros_diff_rows, zeros_diff_cols))), add(add(mul(zeros_diff_cols, zeros_diff_rows), mul(zeros_diff_cols, zeros_diff_cols)), add(mul(ones_diff_cols, ones_diff_cols), mul(compare_blocks_cols, ones_diff_cols)))), mul(mul(mul(mul(zeros_diff_rows, compare_blocks_rows), add(mul(zeros_diff_rows, ones_diff_rows), compare_blocks_rows)), add(add(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_cols, compare_blocks_cols))), add(mul(add(ones_diff_rows, compare_blocks_rows), add(zeros_diff_cols, zeros_diff_cols)), add(mul(compare_blocks_cols, ones_diff_cols), add(zeros_diff_rows, compare_blocks_rows)))))
ones_diff_rows
COND TREES:
ge(_if_then_else(and_(or_(True, False), or_(True, True)), _if_then_else(False, compare_blocks_rows, _if_then_else(True, ones_diff_rows, ones_diff_cols)), _if_then_else(le(max_col_clue, ones_diff_rows), _if_then_else(False, 2, 2), _if_then_else(False, ones_diff_cols, compare_blocks_cols))), _if_then_else(ge(_if_then_else(True, max_col_clue, compare_blocks_rows), _if_then_else(le(_if_then_else(True, max_col_clue, max_row_clue), _if_then_else(or_(True, True), compare_blocks_cols, 4)), max_row_clue, 1)), _if_then_else(and_(le(_if_then_else(le(_if_then_else(ge(max_col_clue, zeros_diff_cols), max_col_clue, max_row_clue), _if_then_else(False, max_row_clue, 4)), _if_then_else(True, ones_diff_rows, ones_diff_cols), _if_then_else(True, ones_diff_cols, _if_then_else(False, 0, ones_diff_cols))), max_col_clue), le(2, 0)), _if_then_else(False, zeros_diff_cols, compare_blocks_rows), _if_then_else(True, compare_blocks_rows, max_col_clue)), _if_then_else(ge(max_col_clue, zeros_diff_cols), _if_then_else(True, 1, 4), _if_then_else(True, compare_blocks_cols, max_row_clue))))
le(_if_then_else(le(zeros_diff_rows, 0), _if_then_else(or_(False, True), _if_then_else(False, compare_blocks_rows, _if_then_else(False, zeros_diff_rows, 0)), zeros_diff_cols), _if_then_else(True, max_col_clue, 4)), _if_then_else(and_(False, True), _if_then_else(le(3, zeros_diff_rows), compare_blocks_cols, max_row_clue), _if_then_else(True, _if_then_else(or_(le(4, 2), or_(False, False)), 3, ones_diff_rows), max_row_clue)))
or_(and_(and_(le(_if_then_else(False, ones_diff_rows, 0), _if_then_else(False, 0, 3)), or_(le(zeros_diff_rows, 3), and_(True, False))), or_(and_(and_(True, False), ge(2, 2)), or_(ge(compare_blocks_rows, 0), and_(False, True)))), ge(_if_then_else(ge(_if_then_else(True, 0, 3), _if_then_else(False, max_col_clue, ones_diff_rows)), _if_then_else(and_(le(_if_then_else(True, ones_diff_rows, 4), zeros_diff_rows), False), _if_then_else(False, 3, ones_diff_cols), _if_then_else(False, 4, 4)), 0), _if_then_else(or_(and_(True, False), le(3, ones_diff_cols)), _if_then_else(le(compare_blocks_rows, ones_diff_cols), _if_then_else(False, ones_diff_rows, 4), _if_then_else(True, 0, ones_diff_rows)), _if_then_else(or_(True, True), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(True, ones_diff_rows, ones_diff_cols)))))
le(_if_then_else(le(_if_then_else(or_(or_(False, False), ge(max_row_clue, max_row_clue)), _if_then_else(False, zeros_diff_rows, compare_blocks_cols), _if_then_else(False, 0, max_row_clue)), _if_then_else(ge(3, 3), _if_then_else(False, ones_diff_rows, 2), _if_then_else(True, 1, ones_diff_cols))), _if_then_else(or_(and_(True, False), or_(True, False)), _if_then_else(ge(zeros_diff_cols, compare_blocks_rows), _if_then_else(False, 3, compare_blocks_rows), _if_then_else(False, zeros_diff_rows, 1)), _if_then_else(or_(False, False), _if_then_else(True, 1, compare_blocks_cols), _if_then_else(True, ones_diff_cols, ones_diff_cols))), _if_then_else(le(_if_then_else(False, ones_diff_cols, 0), _if_then_else(False, compare_blocks_rows, ones_diff_cols)), _if_then_else(and_(True, False), _if_then_else(True, ones_diff_cols, ones_diff_rows), _if_then_else(False, 1, 2)), _if_then_else(ge(3, zeros_diff_rows), _if_then_else(False, 0, compare_blocks_rows), _if_then_else(False, max_col_clue, ones_diff_rows)))), _if_then_else(or_(le(_if_then_else(True, compare_blocks_cols, compare_blocks_cols), _if_then_else(False, 3, compare_blocks_rows)), ge(_if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(True, 0, compare_blocks_rows))), _if_then_else(and_(le(max_row_clue, zeros_diff_rows), le(max_col_clue, 4)), _if_then_else(ge(2, 3), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(False, 4, ones_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, 0), _if_then_else(True, ones_diff_cols, 0))), _if_then_else(le(_if_then_else(False, ones_diff_rows, 0), _if_then_else(True, 3, ones_diff_cols)), _if_then_else(le(0, compare_blocks_rows), _if_then_else(True, 0, 0), _if_then_else(False, _if_then_else(le(zeros_diff_rows, 2), _if_then_else(True, 0, ones_diff_rows), _if_then_else(True, max_col_clue, 3)), compare_blocks_cols)), _if_then_else(le(max_row_clue, 3), _if_then_else(False, max_row_clue, zeros_diff_rows), _if_then_else(False, compare_blocks_rows, zeros_diff_cols)))))
ge(_if_then_else(le(4, 3), _if_then_else(False, ones_diff_rows, compare_blocks_cols), 2), _if_then_else(and_(True, True), _if_then_else(True, _if_then_else(True, compare_blocks_cols, 3), ones_diff_cols), _if_then_else(False, max_row_clue, 2)))
VAL TREES:
mul(add(mul(add(zeros_diff_rows, add(mul(add(zeros_diff_rows, ones_diff_cols), zeros_diff_cols), mul(compare_blocks_cols, ones_diff_rows))), zeros_diff_rows), add(add(ones_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))), mul(mul(mul(zeros_diff_cols, ones_diff_rows), mul(compare_blocks_rows, add(ones_diff_rows, zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_rows), add(zeros_diff_cols, zeros_diff_rows))))
add(add(add(add(mul(mul(compare_blocks_cols, zeros_diff_rows), mul(ones_diff_cols, ones_diff_rows)), add(ones_diff_rows, zeros_diff_rows)), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_cols, compare_blocks_rows), compare_blocks_rows)), mul(add(mul(zeros_diff_cols, ones_diff_rows), add(compare_blocks_rows, zeros_diff_cols)), mul(ones_diff_rows, compare_blocks_cols)))
mul(add(compare_blocks_cols, mul(ones_diff_cols, ones_diff_cols)), add(mul(zeros_diff_rows, ones_diff_rows), add(mul(mul(ones_diff_rows, compare_blocks_cols), compare_blocks_cols), compare_blocks_cols)))
mul(add(add(ones_diff_cols, compare_blocks_rows), add(zeros_diff_rows, add(ones_diff_rows, ones_diff_cols))), add(add(compare_blocks_rows, zeros_diff_cols), add(zeros_diff_rows, ones_diff_cols)))
add(zeros_diff_cols, mul(add(ones_diff_cols, mul(mul(zeros_diff_cols, zeros_diff_rows), mul(zeros_diff_cols, compare_blocks_rows))), ones_diff_cols))
add(mul(add(add(ones_diff_rows, ones_diff_rows), mul(ones_diff_rows, zeros_diff_rows)), mul(zeros_diff_rows, zeros_diff_rows)), mul(add(zeros_diff_cols, ones_diff_rows), add(mul(mul(ones_diff_cols, ones_diff_rows), mul(compare_blocks_cols, ones_diff_rows)), compare_blocks_cols)))
COND TREES:
or_(and_(le(_if_then_else(le(_if_then_else(ge(max_col_clue, zeros_diff_cols), max_col_clue, max_row_clue), _if_then_else(and_(or_(True, False), or_(True, False)), _if_then_else(or_(False, True), _if_then_else(False, max_col_clue, 0), _if_then_else(True, ones_diff_rows, ones_diff_cols)), _if_then_else(le(max_col_clue, ones_diff_rows), _if_then_else(False, 2, 2), _if_then_else(False, ones_diff_cols, compare_blocks_cols)))), _if_then_else(True, compare_blocks_cols, max_row_clue), _if_then_else(True, ones_diff_cols, _if_then_else(False, 0, ones_diff_cols))), max_col_clue), le(2, 0)), and_(le(1, max_col_clue), and_(False, False)))
or_(le(zeros_diff_rows, 0), le(_if_then_else(False, zeros_diff_rows, 0), _if_then_else(True, max_col_clue, 4)))
le(_if_then_else(False, _if_then_else(False, _if_then_else(False, 4, max_row_clue), 4), _if_then_else(False, max_col_clue, ones_diff_rows)), _if_then_else(or_(True, False), _if_then_else(True, 2, 3), _if_then_else(True, 0, 4)))
or_(le(_if_then_else(True, compare_blocks_cols, 4), _if_then_else(False, 1, 2)), and_(or_(le(_if_then_else(True, compare_blocks_cols, compare_blocks_cols), _if_then_else(False, 3, compare_blocks_rows)), ge(_if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(True, 0, compare_blocks_rows))), or_(or_(False, False), ge(max_row_clue, max_row_clue))))
and_(and_(ge(_if_then_else(True, 0, 1), _if_then_else(True, compare_blocks_cols, 2)), le(4, 3)), ge(_if_then_else(or_(False, False), _if_then_else(True, 3, compare_blocks_rows), _if_then_else(False, max_row_clue, 2)), _if_then_else(and_(True, False), _if_then_else(True, compare_blocks_cols, zeros_diff_rows), _if_then_else(False, max_row_clue, _if_then_else(and_(True, False), _if_then_else(False, 4, max_col_clue), _if_then_else(False, zeros_diff_rows, compare_blocks_rows))))))
VAL TREES:
mul(mul(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows)), add(add(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, ones_diff_cols))))
mul(add(mul(ones_diff_cols, zeros_diff_cols), mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, ones_diff_rows)))
mul(add(add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, ones_diff_cols)), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_rows, compare_blocks_rows))), add(add(add(compare_blocks_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_cols))))
mul(mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)), mul(add(ones_diff_cols, compare_blocks_rows), add(zeros_diff_rows, zeros_diff_cols)))
mul(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), mul(mul(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols)))
add(mul(add(ones_diff_cols, zeros_diff_cols), mul(ones_diff_cols, ones_diff_cols)), mul(mul(ones_diff_cols, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
ge(_if_then_else(False, max_row_clue, 4), _if_then_else(ge(_if_then_else(True, max_col_clue, compare_blocks_cols), _if_then_else(le(_if_then_else(True, max_col_clue, max_row_clue), _if_then_else(or_(True, True), compare_blocks_cols, 4)), max_row_clue, 1)), _if_then_else(and_(False, False), _if_then_else(False, zeros_diff_cols, compare_blocks_rows), _if_then_else(le(2, 0), compare_blocks_rows, max_col_clue)), _if_then_else(and_(le(1, max_col_clue), and_(False, False)), _if_then_else(True, 1, 4), _if_then_else(True, compare_blocks_cols, max_row_clue))))
le(_if_then_else(le(1, max_col_clue), _if_then_else(le(1, max_col_clue), zeros_diff_rows, zeros_diff_cols), _if_then_else(True, max_col_clue, 4)), _if_then_else(False, ones_diff_cols, _if_then_else(True, 1, max_row_clue)))
or_(and_(le(_if_then_else(True, ones_diff_rows, 4), zeros_diff_rows), or_(and_(and_(True, False), ge(2, 2)), or_(ge(compare_blocks_rows, 0), and_(False, True)))), ge(_if_then_else(ge(_if_then_else(True, 0, 3), _if_then_else(False, zeros_diff_rows, _if_then_else(True, 1, zeros_diff_cols))), _if_then_else(and_(True, False), _if_then_else(False, 3, ones_diff_cols), _if_then_else(False, 4, 4)), _if_then_else(le(max_col_clue, zeros_diff_rows), _if_then_else(False, 4, max_row_clue), _if_then_else(True, 4, 3))), _if_then_else(or_(and_(True, False), le(3, ones_diff_cols)), _if_then_else(le(4, ones_diff_cols), _if_then_else(False, ones_diff_rows, 4), _if_then_else(True, 0, ones_diff_rows)), _if_then_else(or_(True, False), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(True, ones_diff_rows, ones_diff_cols)))))
le(_if_then_else(le(_if_then_else(ge(max_col_clue, 0), _if_then_else(False, zeros_diff_rows, compare_blocks_cols), _if_then_else(False, 0, max_row_clue)), _if_then_else(ge(3, 3), _if_then_else(True, ones_diff_rows, 2), _if_then_else(True, 1, ones_diff_cols))), _if_then_else(or_(and_(True, False), or_(True, False)), _if_then_else(ge(zeros_diff_cols, compare_blocks_rows), _if_then_else(False, 3, compare_blocks_rows), _if_then_else(False, zeros_diff_rows, 1)), _if_then_else(True, compare_blocks_cols, 4)), _if_then_else(le(_if_then_else(False, ones_diff_cols, 0), _if_then_else(False, compare_blocks_rows, ones_diff_cols)), _if_then_else(ge(compare_blocks_cols, max_row_clue), _if_then_else(True, ones_diff_cols, ones_diff_rows), _if_then_else(False, 1, 2)), _if_then_else(ge(3, zeros_diff_rows), _if_then_else(False, 0, compare_blocks_rows), _if_then_else(False, max_col_clue, ones_diff_rows)))), _if_then_else(or_(le(_if_then_else(True, compare_blocks_cols, compare_blocks_cols), _if_then_else(False, 3, compare_blocks_rows)), ge(_if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(True, 0, compare_blocks_rows))), _if_then_else(and_(le(zeros_diff_rows, zeros_diff_cols), or_(False, True)), _if_then_else(ge(2, 3), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(False, 4, ones_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, 0), _if_then_else(True, ones_diff_cols, 0))), _if_then_else(le(_if_then_else(False, ones_diff_rows, 0), _if_then_else(True, 3, ones_diff_cols)), _if_then_else(le(0, compare_blocks_rows), _if_then_else(True, 0, 0), _if_then_else(False, zeros_diff_rows, compare_blocks_cols)), _if_then_else(le(max_row_clue, 3), _if_then_else(False, max_row_clue, zeros_diff_rows), _if_then_else(False, compare_blocks_rows, 0)))))
ge(_if_then_else(or_(True, True), _if_then_else(True, 0, 0), compare_blocks_rows), _if_then_else(True, 3, 4))
VAL TREES:
mul(add(mul(add(zeros_diff_rows, ones_diff_cols), mul(compare_blocks_rows, add(zeros_diff_cols, compare_blocks_rows))), add(add(ones_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, mul(compare_blocks_cols, zeros_diff_rows)))), mul(mul(mul(zeros_diff_cols, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), add(add(compare_blocks_cols, ones_diff_rows), add(zeros_diff_cols, zeros_diff_rows))))
add(add(add(add(mul(mul(compare_blocks_rows, zeros_diff_cols), zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), compare_blocks_rows), add(add(ones_diff_cols, compare_blocks_rows), compare_blocks_rows)), mul(ones_diff_cols, mul(ones_diff_rows, compare_blocks_cols)))
mul(compare_blocks_cols, ones_diff_cols)
mul(add(add(ones_diff_cols, compare_blocks_rows), ones_diff_rows), add(add(compare_blocks_rows, ones_diff_cols), add(add(ones_diff_cols, zeros_diff_cols), mul(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_cols, compare_blocks_rows)))))
add(zeros_diff_rows, ones_diff_cols)
add(mul(add(add(zeros_diff_cols, ones_diff_rows), ones_diff_cols), mul(zeros_diff_rows, zeros_diff_rows)), mul(mul(compare_blocks_rows, ones_diff_cols), mul(mul(compare_blocks_cols, compare_blocks_rows), add(ones_diff_rows, compare_blocks_cols))))
COND TREES:
or_(and_(False, True), and_(False, True))
le(_if_then_else(le(zeros_diff_rows, 0), _if_then_else(or_(False, True), zeros_diff_rows, zeros_diff_cols), _if_then_else(True, max_col_clue, 4)), _if_then_else(and_(False, True), _if_then_else(le(3, zeros_diff_rows), compare_blocks_cols, max_row_clue), _if_then_else(or_(False, True), _if_then_else(False, zeros_diff_rows, 4), _if_then_else(True, zeros_diff_rows, _if_then_else(False, zeros_diff_cols, 1)))))
or_(and_(and_(le(_if_then_else(False, max_col_clue, 0), _if_then_else(False, 0, 3)), or_(and_(False, True), and_(ge(2, 2), False))), or_(and_(and_(True, False), ge(2, 2)), or_(ge(compare_blocks_rows, 0), and_(False, True)))), ge(_if_then_else(ge(_if_then_else(True, 0, 3), _if_then_else(False, max_col_clue, ones_diff_rows)), _if_then_else(and_(True, False), _if_then_else(False, 3, ones_diff_cols), _if_then_else(False, 4, 4)), _if_then_else(le(max_col_clue, zeros_diff_rows), _if_then_else(False, 4, max_row_clue), _if_then_else(True, 2, 3))), _if_then_else(True, 2, 3)))
le(_if_then_else(le(_if_then_else(ge(max_col_clue, 0), _if_then_else(False, zeros_diff_rows, compare_blocks_cols), _if_then_else(False, 0, max_row_clue)), _if_then_else(ge(3, 3), _if_then_else(True, ones_diff_rows, 2), _if_then_else(True, 1, ones_diff_cols))), _if_then_else(or_(and_(True, False), or_(True, False)), _if_then_else(ge(zeros_diff_cols, compare_blocks_rows), _if_then_else(False, 3, compare_blocks_rows), _if_then_else(False, zeros_diff_rows, 1)), _if_then_else(or_(False, False), _if_then_else(True, 1, compare_blocks_cols), _if_then_else(or_(False, False), ones_diff_cols, ones_diff_cols))), _if_then_else(le(_if_then_else(False, ones_diff_cols, 0), _if_then_else(False, compare_blocks_rows, ones_diff_cols)), _if_then_else(True, 0, 0), _if_then_else(ge(3, zeros_diff_rows), _if_then_else(False, 0, compare_blocks_rows), _if_then_else(False, max_col_clue, ones_diff_rows)))), _if_then_else(or_(le(_if_then_else(True, compare_blocks_cols, compare_blocks_cols), _if_then_else(False, 3, compare_blocks_rows)), ge(_if_then_else(and_(True, False), _if_then_else(False, zeros_diff_cols, max_row_clue), _if_then_else(True, ones_diff_cols, 0)), _if_then_else(True, 0, compare_blocks_rows))), _if_then_else(and_(le(max_row_clue, zeros_diff_rows), le(max_col_clue, 4)), _if_then_else(ge(2, 3), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(False, 4, ones_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, 0), _if_then_else(True, ones_diff_cols, 0))), _if_then_else(le(_if_then_else(False, ones_diff_rows, 0), _if_then_else(True, 3, ones_diff_cols)), _if_then_else(le(0, compare_blocks_rows), _if_then_else(True, 0, 0), _if_then_else(False, zeros_diff_rows, compare_blocks_cols)), _if_then_else(le(max_row_clue, 3), _if_then_else(False, max_row_clue, zeros_diff_rows), _if_then_else(False, compare_blocks_rows, zeros_diff_cols)))))
ge(_if_then_else(or_(False, True), _if_then_else(True, 0, 1), _if_then_else(False, 4, max_col_clue)), _if_then_else(and_(True, True), compare_blocks_cols, _if_then_else(True, max_row_clue, 2)))
VAL TREES:
mul(add(mul(add(zeros_diff_rows, ones_diff_cols), zeros_diff_rows), add(add(ones_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))), mul(mul(mul(zeros_diff_cols, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), add(mul(compare_blocks_cols, zeros_diff_rows), mul(ones_diff_rows, ones_diff_cols))))
add(add(add(add(add(compare_blocks_rows, ones_diff_rows), mul(ones_diff_cols, zeros_diff_cols)), mul(compare_blocks_cols, compare_blocks_cols)), add(add(add(ones_diff_cols, compare_blocks_rows), compare_blocks_rows), compare_blocks_rows)), mul(mul(compare_blocks_rows, ones_diff_cols), mul(ones_diff_rows, compare_blocks_cols)))
mul(add(zeros_diff_rows, ones_diff_cols), add(ones_diff_rows, compare_blocks_rows))
mul(add(mul(compare_blocks_cols, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), add(add(compare_blocks_rows, ones_diff_cols), ones_diff_cols))
add(zeros_diff_cols, mul(add(ones_diff_cols, mul(mul(zeros_diff_cols, zeros_diff_rows), mul(zeros_diff_cols, compare_blocks_rows))), mul(zeros_diff_rows, mul(add(zeros_diff_cols, ones_diff_rows), add(ones_diff_cols, ones_diff_rows)))))
add(mul(add(compare_blocks_cols, ones_diff_cols), mul(zeros_diff_rows, mul(ones_diff_cols, zeros_diff_rows))), mul(mul(compare_blocks_rows, ones_diff_cols), add(mul(compare_blocks_rows, zeros_diff_rows), compare_blocks_cols)))
COND TREES:
ge(_if_then_else(and_(or_(True, False), or_(True, False)), _if_then_else(or_(False, True), _if_then_else(False, max_col_clue, 0), _if_then_else(True, ones_diff_rows, ones_diff_cols)), _if_then_else(le(max_col_clue, ones_diff_rows), _if_then_else(False, 2, 2), _if_then_else(False, ones_diff_cols, compare_blocks_cols))), _if_then_else(ge(_if_then_else(True, max_col_clue, compare_blocks_cols), _if_then_else(le(_if_then_else(True, max_col_clue, max_row_clue), _if_then_else(or_(True, True), compare_blocks_cols, 4)), max_row_clue, 1)), _if_then_else(and_(False, False), _if_then_else(False, zeros_diff_cols, compare_blocks_rows), _if_then_else(True, compare_blocks_rows, max_col_clue)), _if_then_else(and_(le(1, max_col_clue), and_(False, False)), _if_then_else(True, 1, 4), _if_then_else(True, compare_blocks_cols, max_row_clue))))
le(_if_then_else(le(zeros_diff_rows, 0), _if_then_else(le(1, max_col_clue), zeros_diff_rows, zeros_diff_cols), _if_then_else(True, max_col_clue, 4)), _if_then_else(False, ones_diff_cols, _if_then_else(True, _if_then_else(False, 3, ones_diff_rows), max_row_clue)))
or_(and_(le(_if_then_else(True, ones_diff_rows, 4), zeros_diff_rows), or_(and_(and_(True, False), True), or_(ge(compare_blocks_rows, 0), and_(False, True)))), ge(_if_then_else(ge(_if_then_else(True, 0, 3), _if_then_else(False, max_col_clue, ones_diff_rows)), _if_then_else(and_(True, False), _if_then_else(False, 3, ones_diff_cols), _if_then_else(False, 4, 4)), _if_then_else(le(max_col_clue, zeros_diff_rows), _if_then_else(False, 4, max_row_clue), _if_then_else(True, 4, 3))), _if_then_else(or_(and_(True, False), le(3, ones_diff_cols)), _if_then_else(le(4, ones_diff_cols), _if_then_else(False, ones_diff_rows, 4), _if_then_else(True, 0, ones_diff_rows)), _if_then_else(or_(True, True), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(True, ones_diff_rows, ones_diff_cols)))))
le(_if_then_else(le(_if_then_else(ge(max_col_clue, 0), _if_then_else(False, zeros_diff_rows, compare_blocks_cols), _if_then_else(False, 0, max_row_clue)), _if_then_else(ge(3, 3), _if_then_else(True, ones_diff_rows, 2), _if_then_else(True, 1, ones_diff_cols))), _if_then_else(or_(and_(True, False), or_(True, False)), _if_then_else(ge(zeros_diff_cols, compare_blocks_rows), _if_then_else(False, 3, compare_blocks_rows), _if_then_else(False, zeros_diff_rows, 1)), _if_then_else(True, compare_blocks_cols, 4)), _if_then_else(le(_if_then_else(False, ones_diff_cols, 0), _if_then_else(False, compare_blocks_rows, ones_diff_cols)), _if_then_else(ge(compare_blocks_cols, max_row_clue), _if_then_else(True, ones_diff_cols, ones_diff_rows), _if_then_else(False, 1, 2)), _if_then_else(ge(3, zeros_diff_rows), _if_then_else(False, 0, compare_blocks_rows), _if_then_else(False, max_col_clue, ones_diff_rows)))), _if_then_else(or_(le(_if_then_else(True, compare_blocks_cols, compare_blocks_cols), _if_then_else(False, 3, compare_blocks_rows)), ge(_if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(True, 0, compare_blocks_rows))), _if_then_else(and_(le(zeros_diff_rows, zeros_diff_cols), or_(False, True)), _if_then_else(ge(2, 3), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(False, 4, ones_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, 0), _if_then_else(True, ones_diff_cols, 0))), _if_then_else(le(_if_then_else(False, ones_diff_rows, 0), _if_then_else(True, 3, ones_diff_cols)), _if_then_else(le(0, compare_blocks_rows), _if_then_else(and_(True, False), _if_then_else(True, ones_diff_cols, ones_diff_rows), _if_then_else(False, 1, 2)), _if_then_else(False, zeros_diff_rows, compare_blocks_cols)), _if_then_else(le(max_row_clue, 3), _if_then_else(False, max_row_clue, zeros_diff_rows), _if_then_else(False, compare_blocks_rows, zeros_diff_cols)))))
ge(_if_then_else(or_(True, False), _if_then_else(True, 0, 0), compare_blocks_rows), _if_then_else(True, _if_then_else(True, 2, ones_diff_cols), _if_then_else(False, max_row_clue, 2)))
VAL TREES:
mul(add(mul(add(zeros_diff_rows, ones_diff_cols), mul(compare_blocks_rows, add(zeros_diff_cols, compare_blocks_rows))), add(add(ones_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))), mul(mul(mul(zeros_diff_cols, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), add(add(compare_blocks_cols, ones_diff_rows), add(zeros_diff_cols, zeros_diff_rows))))
add(add(add(add(mul(mul(compare_blocks_rows, zeros_diff_cols), zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), compare_blocks_rows), add(add(ones_diff_cols, compare_blocks_rows), compare_blocks_rows)), mul(mul(compare_blocks_rows, ones_diff_cols), mul(ones_diff_rows, compare_blocks_cols)))
mul(add(zeros_diff_cols, mul(ones_diff_cols, compare_blocks_cols)), add(mul(zeros_diff_rows, ones_diff_rows), add(zeros_diff_cols, compare_blocks_cols)))
mul(add(add(ones_diff_cols, compare_blocks_rows), ones_diff_rows), add(add(compare_blocks_rows, ones_diff_cols), add(zeros_diff_rows, mul(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_cols, compare_blocks_rows)))))
mul(ones_diff_rows, compare_blocks_cols)
add(mul(add(compare_blocks_cols, ones_diff_cols), mul(zeros_diff_rows, zeros_diff_rows)), mul(mul(compare_blocks_rows, ones_diff_cols), mul(mul(compare_blocks_cols, compare_blocks_rows), add(ones_diff_rows, compare_blocks_cols))))
COND TREES:
or_(and_(False, le(2, 0)), and_(le(1, max_col_clue), and_(False, False)))
or_(ge(_if_then_else(True, zeros_diff_rows, 1), _if_then_else(True, zeros_diff_rows, 2)), ge(_if_then_else(True, 2, ones_diff_rows), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)))
le(_if_then_else(and_(False, True), _if_then_else(False, _if_then_else(False, 4, max_row_clue), 4), _if_then_else(or_(True, False), zeros_diff_rows, 2)), _if_then_else(or_(and_(True, le(_if_then_else(False, zeros_diff_cols, max_row_clue), _if_then_else(True, 2, 2))), False), _if_then_else(True, 2, 3), _if_then_else(True, _if_then_else(True, zeros_diff_cols, compare_blocks_rows), 0)))
or_(le(_if_then_else(True, compare_blocks_cols, 4), _if_then_else(and_(False, False), _if_then_else(True, _if_then_else(True, zeros_diff_rows, 0), max_row_clue), _if_then_else(True, _if_then_else(True, zeros_diff_rows, 4), _if_then_else(True, compare_blocks_cols, ones_diff_rows)))), and_(le(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, max_col_clue, compare_blocks_cols)), or_(le(ones_diff_rows, zeros_diff_cols), ge(max_row_clue, ones_diff_cols))))
and_(and_(ge(_if_then_else(True, 0, 1), _if_then_else(True, compare_blocks_cols, 2)), le(4, 3)), ge(_if_then_else(or_(False, False), _if_then_else(True, 3, compare_blocks_rows), ones_diff_rows), _if_then_else(and_(True, False), _if_then_else(True, compare_blocks_cols, zeros_diff_rows), _if_then_else(False, max_row_clue, _if_then_else(le(2, 4), _if_then_else(True, compare_blocks_rows, 4), _if_then_else(False, zeros_diff_rows, compare_blocks_rows))))))
VAL TREES:
mul(mul(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows)), add(add(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, ones_diff_cols))))
mul(add(mul(ones_diff_cols, zeros_diff_cols), mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, ones_diff_rows)))
mul(add(add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, ones_diff_cols)), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_rows, compare_blocks_rows))), add(add(add(compare_blocks_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_cols))))
mul(mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)), mul(add(ones_diff_cols, compare_blocks_rows), add(zeros_diff_rows, zeros_diff_cols)))
mul(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), mul(mul(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols)))
add(mul(add(ones_diff_cols, zeros_diff_cols), mul(ones_diff_cols, ones_diff_cols)), mul(mul(ones_diff_cols, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols)))
COND TREES:
or_(and_(False, le(2, 0)), and_(le(_if_then_else(or_(False, False), _if_then_else(False, zeros_diff_rows, 0), _if_then_else(False, compare_blocks_cols, 0)), max_col_clue), and_(False, False)))
or_(ge(0, _if_then_else(True, zeros_diff_rows, 2)), ge(_if_then_else(True, 0, ones_diff_rows), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)))
le(_if_then_else(and_(False, True), _if_then_else(False, _if_then_else(False, _if_then_else(False, compare_blocks_cols, max_row_clue), compare_blocks_rows), 4), _if_then_else(or_(True, False), zeros_diff_rows, 2)), _if_then_else(or_(and_(True, False), False), _if_then_else(True, 2, 3), _if_then_else(True, _if_then_else(True, zeros_diff_cols, compare_blocks_rows), 0)))
or_(le(_if_then_else(or_(False, False), compare_blocks_cols, 4), _if_then_else(and_(False, False), _if_then_else(True, _if_then_else(True, zeros_diff_rows, compare_blocks_cols), max_row_clue), _if_then_else(True, _if_then_else(True, zeros_diff_rows, 4), _if_then_else(True, compare_blocks_cols, ones_diff_rows)))), and_(le(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, max_col_clue, compare_blocks_cols)), or_(le(ones_diff_rows, zeros_diff_cols), ge(max_row_clue, ones_diff_cols))))
and_(and_(ge(_if_then_else(True, 0, _if_then_else(False, max_row_clue, zeros_diff_rows)), _if_then_else(True, compare_blocks_cols, 2)), le(4, 3)), ge(_if_then_else(or_(False, False), _if_then_else(True, 3, compare_blocks_rows), ones_diff_rows), _if_then_else(and_(True, False), _if_then_else(True, compare_blocks_cols, zeros_diff_rows), _if_then_else(False, max_row_clue, _if_then_else(ge(_if_then_else(or_(False, False), _if_then_else(True, 3, compare_blocks_rows), ones_diff_rows), _if_then_else(and_(True, False), _if_then_else(True, compare_blocks_cols, zeros_diff_rows), _if_then_else(False, max_row_clue, _if_then_else(le(2, 4), _if_then_else(True, compare_blocks_rows, 4), _if_then_else(False, zeros_diff_rows, compare_blocks_rows))))), _if_then_else(True, compare_blocks_rows, 4), _if_then_else(False, zeros_diff_rows, compare_blocks_rows))))))
VAL TREES:
mul(mul(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows)), add(add(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(mul(ones_diff_rows, mul(ones_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, ones_diff_cols))))
mul(add(mul(ones_diff_cols, zeros_diff_cols), mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_cols)))
mul(add(add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, ones_diff_cols)), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_rows, compare_blocks_rows))), add(add(add(compare_blocks_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), compare_blocks_cols)))
mul(mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)), mul(add(mul(zeros_diff_cols, ones_diff_rows), add(zeros_diff_rows, compare_blocks_rows)), add(zeros_diff_rows, zeros_diff_cols)))
mul(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(compare_blocks_rows, compare_blocks_cols)), mul(mul(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols)))
add(mul(add(ones_diff_cols, zeros_diff_cols), mul(ones_diff_cols, ones_diff_cols)), mul(mul(ones_diff_cols, compare_blocks_cols), mul(add(add(zeros_diff_cols, ones_diff_rows), add(zeros_diff_rows, ones_diff_rows)), ones_diff_cols)))
COND TREES:
ge(_if_then_else(and_(or_(True, False), or_(True, True)), _if_then_else(or_(False, True), _if_then_else(False, max_col_clue, 0), _if_then_else(True, ones_diff_cols, ones_diff_cols)), _if_then_else(le(max_col_clue, ones_diff_rows), max_col_clue, _if_then_else(False, ones_diff_cols, compare_blocks_cols))), _if_then_else(ge(_if_then_else(True, max_col_clue, compare_blocks_cols), _if_then_else(le(_if_then_else(True, max_col_clue, max_row_clue), _if_then_else(False, compare_blocks_cols, 4)), max_row_clue, 1)), _if_then_else(and_(False, False), _if_then_else(False, zeros_diff_cols, compare_blocks_rows), _if_then_else(True, compare_blocks_rows, max_col_clue)), _if_then_else(ge(max_col_clue, zeros_diff_cols), _if_then_else(True, 1, 4), _if_then_else(True, compare_blocks_cols, max_row_clue))))
le(_if_then_else(le(zeros_diff_rows, 0), _if_then_else(True, zeros_diff_rows, 3), _if_then_else(True, max_col_clue, 4)), _if_then_else(and_(False, False), zeros_diff_rows, _if_then_else(True, _if_then_else(False, 3, ones_diff_rows), max_row_clue)))
or_(and_(and_(le(_if_then_else(False, max_col_clue, 0), _if_then_else(False, 0, 3)), or_(le(zeros_diff_rows, 3), and_(True, False))), or_(and_(and_(True, False), ge(2, 2)), or_(ge(compare_blocks_rows, 0), and_(False, True)))), ge(_if_then_else(ge(_if_then_else(True, 0, 3), _if_then_else(False, max_col_clue, ones_diff_rows)), _if_then_else(and_(True, False), _if_then_else(False, 3, ones_diff_cols), ones_diff_rows), _if_then_else(le(max_col_clue, zeros_diff_rows), _if_then_else(False, 4, max_row_clue), _if_then_else(True, max_row_clue, 3))), _if_then_else(or_(and_(True, False), le(3, ones_diff_cols)), _if_then_else(le(compare_blocks_rows, ones_diff_cols), _if_then_else(False, ones_diff_rows, 4), _if_then_else(True, 0, ones_diff_rows)), _if_then_else(or_(True, True), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(ge(1, max_row_clue), _if_then_else(False, 2, 1), _if_then_else(False, 2, 2))))))
le(_if_then_else(le(_if_then_else(ge(max_col_clue, 0), _if_then_else(False, zeros_diff_rows, compare_blocks_cols), _if_then_else(False, 0, max_row_clue)), _if_then_else(ge(3, 3), _if_then_else(True, ones_diff_rows, 2), _if_then_else(True, 1, ones_diff_cols))), _if_then_else(or_(and_(True, False), or_(True, False)), _if_then_else(ge(zeros_diff_cols, compare_blocks_rows), _if_then_else(False, 3, 2), _if_then_else(False, zeros_diff_rows, 1)), _if_then_else(or_(False, False), _if_then_else(True, 1, compare_blocks_cols), _if_then_else(True, ones_diff_cols, ones_diff_cols))), _if_then_else(le(_if_then_else(False, ones_diff_cols, 0), _if_then_else(False, compare_blocks_rows, ones_diff_cols)), _if_then_else(and_(True, False), _if_then_else(True, ones_diff_cols, ones_diff_rows), _if_then_else(False, 1, 2)), _if_then_else(ge(3, zeros_diff_rows), _if_then_else(False, 0, compare_blocks_rows), _if_then_else(False, max_col_clue, ones_diff_rows)))), _if_then_else(or_(le(_if_then_else(True, compare_blocks_cols, compare_blocks_cols), _if_then_else(False, 3, compare_blocks_rows)), ge(_if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(True, 0, compare_blocks_rows))), _if_then_else(and_(le(max_row_clue, zeros_diff_rows), le(max_col_clue, 4)), _if_then_else(ge(2, 3), _if_then_else(True, zeros_diff_rows, ones_diff_cols), _if_then_else(True, 4, ones_diff_cols)), _if_then_else(le(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, max_col_clue, compare_blocks_cols)), _if_then_else(False, max_col_clue, 0), _if_then_else(True, ones_diff_cols, 0))), _if_then_else(le(_if_then_else(False, ones_diff_rows, 0), _if_then_else(True, 3, ones_diff_cols)), _if_then_else(le(0, compare_blocks_rows), _if_then_else(True, 0, 0), _if_then_else(False, zeros_diff_rows, compare_blocks_cols)), _if_then_else(le(max_row_clue, 3), _if_then_else(False, max_row_clue, zeros_diff_rows), _if_then_else(False, compare_blocks_rows, zeros_diff_cols)))))
ge(_if_then_else(True, _if_then_else(True, 0, 0), _if_then_else(True, compare_blocks_cols, 2)), _if_then_else(and_(False, True), _if_then_else(True, 2, ones_diff_cols), 4))
VAL TREES:
mul(add(mul(add(zeros_diff_rows, ones_diff_cols), zeros_diff_rows), add(add(ones_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))), mul(mul(mul(zeros_diff_cols, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), add(add(compare_blocks_cols, zeros_diff_rows), add(zeros_diff_cols, zeros_diff_rows))))
add(add(add(add(mul(compare_blocks_rows, zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), mul(compare_blocks_cols, compare_blocks_cols)), add(add(ones_diff_cols, compare_blocks_rows), compare_blocks_rows)), mul(mul(compare_blocks_rows, ones_diff_cols), mul(add(zeros_diff_rows, ones_diff_cols), compare_blocks_cols)))
mul(add(add(ones_diff_cols, mul(zeros_diff_rows, compare_blocks_cols)), mul(ones_diff_cols, ones_diff_cols)), add(mul(zeros_diff_rows, mul(compare_blocks_cols, compare_blocks_cols)), add(zeros_diff_cols, compare_blocks_cols)))
mul(add(add(ones_diff_cols, compare_blocks_rows), mul(compare_blocks_rows, compare_blocks_rows)), add(add(compare_blocks_rows, ones_diff_cols), add(zeros_diff_rows, mul(ones_diff_cols, ones_diff_cols))))
mul(compare_blocks_cols, ones_diff_cols)
add(mul(add(compare_blocks_cols, ones_diff_cols), mul(zeros_diff_cols, compare_blocks_cols)), mul(mul(compare_blocks_rows, ones_diff_cols), add(mul(mul(ones_diff_cols, ones_diff_rows), mul(compare_blocks_cols, ones_diff_rows)), compare_blocks_cols)))
COND TREES:
or_(and_(False, le(2, 0)), and_(le(1, max_col_clue), and_(False, False)))
or_(ge(_if_then_else(True, zeros_diff_rows, 1), _if_then_else(True, zeros_diff_rows, 2)), ge(_if_then_else(True, 2, ones_diff_rows), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)))
le(_if_then_else(and_(False, True), _if_then_else(False, _if_then_else(False, 4, max_row_clue), 4), _if_then_else(or_(True, False), zeros_diff_rows, 2)), _if_then_else(or_(and_(True, le(_if_then_else(False, zeros_diff_cols, max_row_clue), _if_then_else(True, 2, 2))), False), _if_then_else(True, 2, 3), _if_then_else(True, _if_then_else(True, zeros_diff_cols, compare_blocks_rows), 0)))
or_(le(_if_then_else(True, compare_blocks_cols, 4), _if_then_else(and_(False, False), _if_then_else(True, _if_then_else(True, zeros_diff_rows, 0), max_row_clue), _if_then_else(True, _if_then_else(True, zeros_diff_rows, 4), _if_then_else(True, compare_blocks_cols, ones_diff_rows)))), and_(le(_if_then_else(True, zeros_diff_rows, 4), _if_then_else(False, max_col_clue, compare_blocks_cols)), or_(le(ones_diff_rows, zeros_diff_cols), ge(max_row_clue, ones_diff_cols))))
and_(and_(ge(_if_then_else(True, 0, 1), _if_then_else(True, compare_blocks_cols, 2)), le(4, 3)), ge(_if_then_else(or_(False, False), _if_then_else(True, 3, compare_blocks_rows), ones_diff_rows), _if_then_else(and_(True, False), _if_then_else(True, compare_blocks_cols, zeros_diff_rows), _if_then_else(False, max_row_clue, _if_then_else(le(2, 4), _if_then_else(True, compare_blocks_rows, 4), _if_then_else(False, zeros_diff_rows, compare_blocks_rows))))))
VAL TREES:
mul(mul(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows)), add(add(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_cols, ones_diff_cols))))
mul(add(mul(ones_diff_cols, zeros_diff_cols), mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_rows))), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, ones_diff_rows)))
mul(add(add(add(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, ones_diff_cols)), add(add(ones_diff_rows, ones_diff_rows), add(ones_diff_rows, compare_blocks_rows))), add(add(add(compare_blocks_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_cols))))
mul(mul(add(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)), mul(add(ones_diff_cols, compare_blocks_rows), add(zeros_diff_rows, zeros_diff_cols)))
mul(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), mul(mul(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_cols)))
add(mul(add(ones_diff_cols, zeros_diff_cols), mul(ones_diff_cols, ones_diff_cols)), mul(mul(ones_diff_cols, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols)))


INFO:root:hof: COND TREES:
ge(_if_then_else(or_(and_(True, False), ge(compare_blocks_rows, max_row_clue)), _if_then_else(or_(False, False), _if_then_else(True, 1, 3), _if_then_else(True, compare_blocks_cols, 4)), _if_then_else(ge(max_col_clue, ones_diff_rows), _if_then_else(True, 2, 0), _if_then_else(True, compare_blocks_cols, 3))), _if_then_else(le(_if_then_else(True, ones_diff_cols, compare_blocks_cols), _if_then_else(True, 2, max_row_clue)), _if_then_else(ge(4, compare_blocks_cols), _if_then_else(False, zeros_diff_cols, 0), _if_then_else(True, 1, max_col_clue)), _if_then_else(and_(False, False), _if_then_else(True, compare_blocks_rows, 3), _if_then_else(True, ones_diff_cols, ones_diff_rows))))
and_(le(_if_then_else(or_(False, False), _if_then_else(False, 0, compare_blocks_cols), max_row_clue), _if_then_else(False, 2, _if_then_else(False, compare_blocks_cols, compare_blocks_cols))), or_(ge(max_row_clue, zeros_diff_cols), le(_if_then_else(False, zeros_diff_cols, zeros_diff_cols), max_col_clue)))
and_(or_(and_(ge(_if_then_else(False, max_col_clue, max_col_clue), _if_then_else(False, compare_blocks_cols, max_col_clue)), or_(ge(0, 3), or_(True, False))), or_(or_(ge(max_col_clue, ones_diff_cols), ge(0, 2)), ge(_if_then_else(True, 2, zeros_diff_cols), _if_then_else(True, compare_blocks_rows, compare_blocks_cols)))), ge(_if_then_else(and_(ge(2, max_row_clue), or_(True, False)), _if_then_else(le(compare_blocks_rows, compare_blocks_cols), _if_then_else(True, compare_blocks_cols, ones_diff_cols), _if_then_else(False, zeros_diff_rows, compare_blocks_cols)), _if_then_else(ge(max_col_clue, max_col_clue), _if_then_else(False, zeros_diff_cols, 4), _if_then_else(False, 0, max_col_clue))), _if_then_else(and_(or_(True, True), ge(ones_diff_cols, compare_blocks_rows)), _if_then_else(and_(True, False), _if_then_else(False, ones_diff_cols, ones_diff_cols), _if_then_else(False, max_col_clue, 0)), _if_then_else(ge(2, max_row_clue), _if_then_else(False, max_row_clue, compare_blocks_cols), _if_then_else(True, max_col_clue, 4)))))
or_(ge(_if_then_else(False, 0, zeros_diff_cols), _if_then_else(True, 0, ones_diff_rows)), and_(and_(ge(1, 1), True), ge(0, zeros_diff_rows)))
ge(_if_then_else(or_(False, False), _if_then_else(False, 2, 1), _if_then_else(False, 0, zeros_diff_rows)), _if_then_else(le(compare_blocks_rows, compare_blocks_rows), _if_then_else(True, 3, 0), _if_then_else(True, compare_blocks_rows, 1)))
VAL TREES:
mul(mul(add(add(compare_blocks_rows, zeros_diff_cols), zeros_diff_cols), add(mul(ones_diff_cols, compare_blocks_cols), ones_diff_rows)), add(mul(zeros_diff_cols, add(compare_blocks_cols, zeros_diff_rows)), mul(compare_blocks_rows, ones_diff_cols)))
mul(mul(add(add(ones_diff_rows, ones_diff_cols), ones_diff_rows), mul(add(compare_blocks_cols, compare_blocks_cols), compare_blocks_rows)), mul(mul(add(compare_blocks_rows, ones_diff_cols), ones_diff_rows), add(ones_diff_cols, ones_diff_rows)))
add(mul(add(add(ones_diff_cols, add(zeros_diff_cols, ones_diff_rows)), mul(mul(compare_blocks_rows, ones_diff_rows), ones_diff_cols)), mul(ones_diff_cols, ones_diff_rows)), add(mul(add(zeros_diff_cols, zeros_diff_cols), add(zeros_diff_cols, mul(compare_blocks_rows, ones_diff_cols))), add(zeros_diff_cols, compare_blocks_cols)))
mul(mul(mul(ones_diff_rows, zeros_diff_cols), add(ones_diff_cols, compare_blocks_rows)), add(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, compare_blocks_rows)))
mul(add(mul(compare_blocks_rows, ones_diff_cols), add(zeros_diff_cols, ones_diff_cols)), add(mul(compare_blocks_rows, mul(compare_blocks_rows, ones_diff_rows)), add(compare_blocks_rows, zeros_diff_cols)))
add(mul(add(mul(ones_diff_rows, add(ones_diff_rows, compare_blocks_rows)), add(zeros_diff_cols, mul(ones_diff_cols, ones_diff_cols))), mul(compare_blocks_rows, zeros_diff_cols)), add(add(add(mul(ones_diff_cols, ones_diff_cols), ones_diff_rows), compare_blocks_cols), add(mul(zeros_diff_rows, ones_diff_rows), add(zeros_diff_cols, ones_diff_cols))))


INFO:root:stats: {'fitness': <deap.tools.support.Statistics object at 0x000001E5C33A8978>, 'size': <deap.tools.support.Statistics object at 0x000001E5C33A89B0>}

