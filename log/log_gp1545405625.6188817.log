INFO:root:

*******STARTING!!!******


INFO:root:

*******Configuration******


INFO:root:# NUM_ROWS = 20


INFO:root:NUM_ROWS = 5


INFO:root:# NUM_COLS = 20


INFO:root:NUM_COLS = 5


INFO:root:empty_in_split = '\xa0'


INFO:root:


INFO:root:pickle_unsolved_file_path = 'data/%dx%d_nonograms.pkl' % (NUM_ROWS, NUM_COLS)


INFO:root:pickle_solved_file_path = 'data/%dx%d_nonograms_solved.pkl' % (NUM_ROWS, NUM_COLS)


INFO:root:pickle_row_options_path = 'data/%dx%d_row_options.pkl' % (NUM_ROWS, NUM_ROWS)


INFO:root:should_run_in_parallel = False


INFO:root:


INFO:root:NUM_COND_TREES = 5


INFO:root:NUM_VAL_TREES = NUM_COND_TREES + 1


INFO:root:prob_crossover_global = 0.7  # global probability for cx


INFO:root:prob_crossover_individual_cond = 0.8  # probability to cx a specific cond tree in an individual


INFO:root:prob_crossover_individual_val = 0.8  # probability to cx a specific cond tree in an individual


INFO:root:prob_mutate_global = 0.3


INFO:root:prob_mutate_individual_cond = 0.7


INFO:root:prob_mutate_individual_val = 0.7


INFO:root:


INFO:root:points_correct_box = 5


INFO:root:points_incorrect_box = 0


INFO:root:# points_incorrect_box = -2


INFO:root:pop_size = 10


INFO:root:hof_size = 1


INFO:root:# num_gen = 40


INFO:root:num_gen = 10


INFO:root:train_size = 3


INFO:root:

*******DONE!!!******


INFO:root:run time: 26 sec

INFO:root:max possible fitness for the nonograms ran: %d

INFO:root:log:    	      	                              fitness                              	                  size                  
   	      	-------------------------------------------------------------------	----------------------------------------
gen	nevals	avg     	max     	min     	size	std        	avg	max	min	size	std     
0  	10    	0.682667	0.682667	0.682667	10  	1.11022e-16	7.5	8  	7  	10  	0.5     
1  	8     	0.682667	0.682667	0.682667	10  	1.11022e-16	7.8	10 	7  	10  	1.07703 
2  	6     	0.682667	0.682667	0.682667	10  	1.11022e-16	8.4	11 	7  	10  	1.28062 
3  	7     	0.682667	0.682667	0.682667	10  	1.11022e-16	8.2	10 	7  	10  	1.07703 
4  	7     	0.682667	0.682667	0.682667	10  	1.11022e-16	8.5	11 	7  	10  	1.36015 
5  	9     	0.682667	0.682667	0.682667	10  	1.11022e-16	8.9	12 	7  	10  	1.51327 
6  	7     	0.682667	0.682667	0.682667	10  	1.11022e-16	9  	11 	8  	10  	1       
7  	8     	0.682667	0.682667	0.682667	10  	1.11022e-16	9.2	11 	8  	10  	0.979796
8  	8     	0.682667	0.682667	0.682667	10  	1.11022e-16	9.3	11 	8  	10  	0.9     
9  	10    	0.682667	0.682667	0.682667	10  	1.11022e-16	9.9	12 	8  	10  	1.44568 
10 	6     	0.682667	0.682667	0.682667	10  	1.11022e-16	9.6	12 	8  	10  	1.42829 

INFO:root:pop: COND TREES:
ge(_if_then_else(le(_if_then_else(True, max_col_clue, ones_diff_rows), _if_then_else(True, ones_diff_rows, 3)), _if_then_else(False, _if_then_else(and_(or_(True, True), and_(True, False)), _if_then_else(and_(False, False), _if_then_else(True, zeros_diff_cols, 3), _if_then_else(False, zeros_diff_cols, 1)), _if_then_else(or_(True, False), _if_then_else(True, compare_blocks_rows, compare_blocks_cols), _if_then_else(True, compare_blocks_cols, 0))), 0), _if_then_else(le(3, 0), _if_then_else(False, max_col_clue, ones_diff_rows), _if_then_else(False, zeros_diff_cols, max_row_clue))), _if_then_else(le(_if_then_else(False, 0, ones_diff_cols), _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(le(_if_then_else(True, max_col_clue, ones_diff_rows), _if_then_else(True, ones_diff_rows, 3)), _if_then_else(True, _if_then_else(False, 2, compare_blocks_rows), 3), _if_then_else(False, 0, 1)), _if_then_else(ge(compare_blocks_rows, 0), _if_then_else(False, zeros_diff_cols, 0), _if_then_else(False, 3, max_col_clue))))
and_(or_(or_(and_(ge(_if_then_else(True, zeros_diff_rows, _if_then_else(True, compare_blocks_rows, max_row_clue)), _if_then_else(False, _if_then_else(True, 0, zeros_diff_rows), compare_blocks_rows)), False), True), or_(True, False)), False)
ge(_if_then_else(or_(False, False), _if_then_else(False, _if_then_else(False, 2, compare_blocks_rows), compare_blocks_cols), _if_then_else(False, 3, ones_diff_cols)), _if_then_else(and_(True, False), _if_then_else(False, compare_blocks_rows, ones_diff_cols), _if_then_else(and_(ge(_if_then_else(le(max_row_clue, 2), _if_then_else(True, max_row_clue, zeros_diff_rows), _if_then_else(False, compare_blocks_cols, 4)), _if_then_else(le(max_col_clue, 4), _if_then_else(False, 2, ones_diff_rows), _if_then_else(False, compare_blocks_rows, zeros_diff_cols))), or_(and_(or_(True, True), le(ones_diff_rows, 3)), ge(_if_then_else(False, 0, ones_diff_cols), _if_then_else(True, 4, 4)))), _if_then_else(ge(_if_then_else(ge(max_row_clue, compare_blocks_rows), _if_then_else(False, 0, 2), _if_then_else(True, max_row_clue, ones_diff_rows)), _if_then_else(ge(max_col_clue, compare_blocks_rows), _if_then_else(False, 0, compare_blocks_cols), _if_then_else(True, compare_blocks_rows, compare_blocks_rows))), _if_then_else(and_(or_(False, True), or_(True, True)), _if_then_else(or_(True, False), _if_then_else(False, zeros_diff_rows, max_col_clue), _if_then_else(True, zeros_diff_rows, ones_diff_cols)), _if_then_else(le(zeros_diff_rows, 1), _if_then_else(True, 3, zeros_diff_rows), _if_then_else(True, ones_diff_rows, max_col_clue))), _if_then_else(ge(_if_then_else(True, zeros_diff_cols, zeros_diff_rows), _if_then_else(True, zeros_diff_cols, 1)), _if_then_else(and_(False, True), _if_then_else(True, ones_diff_rows, compare_blocks_rows), _if_then_else(False, zeros_diff_cols, 4)), _if_then_else(and_(True, False), _if_then_else(False, zeros_diff_cols, zeros_diff_rows), _if_then_else(True, zeros_diff_cols, compare_blocks_cols)))), _if_then_else(and_(le(_if_then_else(True, max_row_clue, ones_diff_cols), _if_then_else(True, 3, 1)), le(_if_then_else(False, max_col_clue, compare_blocks_rows), _if_then_else(False, 4, 4))), _if_then_else(or_(le(ones_diff_cols, zeros_diff_rows), or_(False, True)), _if_then_else(ge(3, max_col_clue), _if_then_else(True, 3, max_col_clue), _if_then_else(False, max_col_clue, 1)), _if_then_else(le(2, 3), _if_then_else(False, zeros_diff_rows, 0), _if_then_else(False, max_col_clue, ones_diff_rows))), _if_then_else(or_(le(4, ones_diff_rows), or_(False, False)), _if_then_else(ge(max_col_clue, 3), _if_then_else(False, 0, max_col_clue), _if_then_else(False, 4, 2)), _if_then_else(ge(compare_blocks_cols, max_row_clue), _if_then_else(False, zeros_diff_rows, ones_diff_rows), _if_then_else(False, max_col_clue, ones_diff_cols)))))))
and_(ge(_if_then_else(or_(and_(or_(True, True), or_(True, False)), ge(_if_then_else(True, 1, max_col_clue), _if_then_else(True, 1, max_row_clue))), _if_then_else(ge(_if_then_else(False, ones_diff_cols, zeros_diff_rows), _if_then_else(True, ones_diff_cols, compare_blocks_cols)), _if_then_else(ge(zeros_diff_rows, max_row_clue), _if_then_else(False, zeros_diff_rows, 0), _if_then_else(False, ones_diff_rows, compare_blocks_cols)), _if_then_else(le(0, 4), _if_then_else(False, 0, max_col_clue), _if_then_else(False, 2, compare_blocks_rows))), _if_then_else(or_(and_(True, True), le(max_row_clue, ones_diff_cols)), _if_then_else(le(zeros_diff_cols, ones_diff_rows), _if_then_else(False, zeros_diff_rows, max_row_clue), _if_then_else(False, max_col_clue, zeros_diff_rows)), _if_then_else(ge(zeros_diff_rows, ones_diff_cols), _if_then_else(False, compare_blocks_rows, 3), _if_then_else(True, max_col_clue, max_col_clue)))), _if_then_else(and_(or_(le(zeros_diff_cols, zeros_diff_rows), or_(True, True)), le(_if_then_else(True, compare_blocks_rows, 0), _if_then_else(False, max_col_clue, max_col_clue))), _if_then_else(le(_if_then_else(True, compare_blocks_cols, 0), _if_then_else(False, max_row_clue, max_col_clue)), _if_then_else(le(max_row_clue, ones_diff_cols), _if_then_else(False, 4, compare_blocks_cols), _if_then_else(True, ones_diff_cols, compare_blocks_cols)), _if_then_else(and_(True, False), _if_then_else(False, compare_blocks_rows, ones_diff_cols), _if_then_else(False, ones_diff_cols, 2))), _if_then_else(ge(_if_then_else(False, compare_blocks_cols, 2), _if_then_else(True, compare_blocks_rows, 0)), _if_then_else(or_(True, True), _if_then_else(True, zeros_diff_cols, ones_diff_cols), _if_then_else(True, compare_blocks_cols, 4)), _if_then_else(and_(True, False), _if_then_else(False, 2, 4), _if_then_else(True, compare_blocks_cols, compare_blocks_rows))))), False)
or_(ge(_if_then_else(or_(False, True), _if_then_else(True, max_col_clue, compare_blocks_rows), _if_then_else(True, max_row_clue, zeros_diff_rows)), _if_then_else(and_(False, False), _if_then_else(False, max_row_clue, max_row_clue), _if_then_else(and_(ge(_if_then_else(False, 4, zeros_diff_cols), _if_then_else(True, compare_blocks_rows, zeros_diff_cols)), le(_if_then_else(True, zeros_diff_rows, max_col_clue), _if_then_else(True, ones_diff_rows, 1))), 2, max_col_clue))), or_(ge(zeros_diff_rows, _if_then_else(False, 4, max_row_clue)), ge(_if_then_else(True, compare_blocks_cols, compare_blocks_cols), _if_then_else(False, _if_then_else(le(_if_then_else(False, 4, zeros_diff_rows), _if_then_else(False, max_row_clue, ones_diff_cols)), _if_then_else(ge(compare_blocks_cols, 0), _if_then_else(True, compare_blocks_rows, max_col_clue), 4), _if_then_else(and_(True, True), _if_then_else(True, max_col_clue, 0), _if_then_else(False, max_col_clue, 1))), 4))))
VAL TREES:
mul(add(add(compare_blocks_cols, compare_blocks_cols), add(ones_diff_rows, zeros_diff_rows)), add(mul(zeros_diff_rows, zeros_diff_cols), add(compare_blocks_rows, zeros_diff_rows)))
mul(mul(add(compare_blocks_rows, zeros_diff_cols), mul(compare_blocks_rows, zeros_diff_rows)), add(mul(ones_diff_cols, compare_blocks_cols), add(mul(mul(add(mul(compare_blocks_rows, compare_blocks_rows), add(compare_blocks_cols, ones_diff_rows)), mul(mul(compare_blocks_rows, compare_blocks_cols), add(ones_diff_cols, compare_blocks_cols))), add(mul(add(compare_blocks_cols, compare_blocks_rows), add(ones_diff_rows, compare_blocks_rows)), mul(add(zeros_diff_cols, zeros_diff_cols), add(compare_blocks_rows, compare_blocks_cols)))), add(add(add(add(zeros_diff_rows, zeros_diff_cols), add(ones_diff_cols, zeros_diff_rows)), mul(add(ones_diff_cols, zeros_diff_rows), mul(zeros_diff_cols, zeros_diff_cols))), add(add(mul(compare_blocks_cols, compare_blocks_cols), add(compare_blocks_rows, compare_blocks_cols)), add(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_rows, compare_blocks_cols)))))))
add(mul(add(add(compare_blocks_cols, zeros_diff_cols), ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(compare_blocks_rows, mul(ones_diff_cols, ones_diff_cols))), mul(add(compare_blocks_cols, zeros_diff_rows), mul(compare_blocks_rows, ones_diff_cols))))
add(add(add(add(add(ones_diff_rows, ones_diff_rows), mul(ones_diff_cols, compare_blocks_rows)), add(add(compare_blocks_rows, compare_blocks_cols), add(compare_blocks_cols, ones_diff_rows))), mul(mul(mul(compare_blocks_rows, ones_diff_cols), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(ones_diff_rows, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)))), mul(add(mul(mul(ones_diff_cols, zeros_diff_rows), add(zeros_diff_cols, zeros_diff_cols)), add(add(add(ones_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_cols)), add(mul(ones_diff_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_rows)))), add(add(add(zeros_diff_rows, compare_blocks_rows), add(zeros_diff_cols, zeros_diff_cols)), add(add(compare_blocks_cols, ones_diff_rows), mul(compare_blocks_cols, compare_blocks_rows)))))
mul(add(add(ones_diff_rows, ones_diff_rows), mul(compare_blocks_cols, ones_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), mul(zeros_diff_rows, compare_blocks_cols)))
mul(add(add(zeros_diff_rows, zeros_diff_rows), add(zeros_diff_cols, ones_diff_cols)), add(mul(zeros_diff_rows, ones_diff_rows), add(compare_blocks_cols, add(mul(mul(add(add(zeros_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, compare_blocks_cols)), mul(add(compare_blocks_cols, zeros_diff_rows), mul(ones_diff_rows, ones_diff_rows))), add(mul(mul(ones_diff_rows, ones_diff_rows), mul(zeros_diff_cols, zeros_diff_rows)), add(mul(compare_blocks_cols, zeros_diff_cols), add(ones_diff_cols, compare_blocks_cols)))), add(add(add(mul(zeros_diff_rows, ones_diff_cols), add(zeros_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_rows, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows))), add(add(add(zeros_diff_rows, compare_blocks_rows), add(ones_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_cols, ones_diff_rows), add(ones_diff_cols, compare_blocks_rows))))))))
COND TREES:
ge(_if_then_else(le(ones_diff_cols, max_row_clue), _if_then_else(False, zeros_diff_cols, 0), _if_then_else(le(3, 0), _if_then_else(False, max_col_clue, ones_diff_rows), _if_then_else(False, zeros_diff_cols, max_row_clue))), _if_then_else(le(_if_then_else(False, 0, ones_diff_cols), _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(True, _if_then_else(True, max_row_clue, 3), _if_then_else(False, 0, 1)), _if_then_else(ge(compare_blocks_rows, 0), _if_then_else(False, zeros_diff_cols, 0), _if_then_else(False, 3, max_col_clue))))
and_(or_(or_(and_(True, False), True), or_(True, True)), le(_if_then_else(True, max_row_clue, 0), 4))
ge(_if_then_else(or_(False, True), _if_then_else(False, _if_then_else(False, 2, compare_blocks_rows), compare_blocks_cols), _if_then_else(and_(ge(max_row_clue, 2), ge(max_col_clue, max_col_clue)), _if_then_else(True, 0, ones_diff_cols), 1)), _if_then_else(and_(True, False), _if_then_else(True, _if_then_else(True, 0, ones_diff_cols), 1), _if_then_else(False, 1, _if_then_else(False, compare_blocks_cols, compare_blocks_rows))))
and_(le(_if_then_else(True, _if_then_else(True, ones_diff_rows, 3), _if_then_else(True, compare_blocks_cols, zeros_diff_cols)), _if_then_else(le(ones_diff_rows, ones_diff_rows), 0, _if_then_else(False, zeros_diff_cols, compare_blocks_rows))), or_(le(_if_then_else(True, 3, 0), _if_then_else(False, ones_diff_rows, _if_then_else(True, zeros_diff_cols, ones_diff_rows))), le(_if_then_else(False, compare_blocks_rows, 1), _if_then_else(or_(le(_if_then_else(True, 3, 0), _if_then_else(False, ones_diff_rows, zeros_diff_rows)), le(_if_then_else(False, compare_blocks_rows, 1), _if_then_else(False, compare_blocks_rows, zeros_diff_rows))), compare_blocks_rows, zeros_diff_rows))))
or_(ge(_if_then_else(or_(False, True), _if_then_else(or_(and_(True, le(compare_blocks_cols, 1)), le(4, 1)), max_col_clue, compare_blocks_rows), _if_then_else(True, max_row_clue, zeros_diff_rows)), _if_then_else(and_(False, False), _if_then_else(False, max_row_clue, max_col_clue), _if_then_else(and_(True, le(4, 1)), 2, max_col_clue))), True)
VAL TREES:
add(mul(mul(add(mul(ones_diff_cols, compare_blocks_cols), mul(zeros_diff_rows, compare_blocks_rows)), mul(add(ones_diff_cols, ones_diff_cols), add(zeros_diff_rows, compare_blocks_rows))), add(add(add(zeros_diff_cols, ones_diff_cols), mul(zeros_diff_cols, ones_diff_cols)), mul(add(ones_diff_cols, zeros_diff_cols), mul(ones_diff_rows, zeros_diff_rows)))), mul(add(mul(mul(zeros_diff_rows, ones_diff_rows), add(zeros_diff_cols, ones_diff_rows)), mul(mul(compare_blocks_rows, ones_diff_cols), mul(ones_diff_cols, ones_diff_cols))), add(mul(mul(zeros_diff_cols, zeros_diff_cols), mul(ones_diff_cols, ones_diff_rows)), mul(mul(zeros_diff_rows, ones_diff_cols), mul(zeros_diff_rows, zeros_diff_rows)))))
mul(mul(add(compare_blocks_rows, zeros_diff_cols), mul(compare_blocks_rows, mul(add(add(ones_diff_cols, ones_diff_cols), add(zeros_diff_rows, ones_diff_rows)), mul(mul(zeros_diff_cols, ones_diff_rows), mul(zeros_diff_rows, compare_blocks_cols))))), add(mul(ones_diff_cols, compare_blocks_cols), add(ones_diff_rows, compare_blocks_cols)))
add(mul(add(add(add(add(compare_blocks_rows, zeros_diff_cols), add(ones_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(ones_diff_cols, compare_blocks_rows))), ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), add(mul(compare_blocks_cols, zeros_diff_rows), add(add(ones_diff_rows, zeros_diff_cols), ones_diff_rows)))
add(add(add(add(add(ones_diff_rows, ones_diff_rows), mul(add(add(add(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, zeros_diff_rows)), add(mul(ones_diff_rows, mul(zeros_diff_rows, compare_blocks_rows)), add(ones_diff_rows, compare_blocks_cols))), compare_blocks_rows)), add(add(compare_blocks_rows, compare_blocks_cols), add(compare_blocks_cols, ones_diff_rows))), mul(mul(mul(compare_blocks_rows, ones_diff_cols), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(ones_diff_rows, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)))), mul(add(mul(mul(ones_diff_cols, zeros_diff_rows), add(zeros_diff_cols, zeros_diff_cols)), mul(mul(zeros_diff_cols, ones_diff_cols), mul(zeros_diff_cols, compare_blocks_cols))), add(add(add(zeros_diff_rows, compare_blocks_rows), add(zeros_diff_cols, zeros_diff_cols)), add(add(compare_blocks_cols, ones_diff_rows), mul(compare_blocks_cols, compare_blocks_rows)))))
mul(add(add(ones_diff_rows, ones_diff_rows), mul(compare_blocks_cols, ones_diff_cols)), add(mul(mul(mul(add(ones_diff_cols, zeros_diff_cols), add(zeros_diff_cols, zeros_diff_rows)), mul(mul(ones_diff_cols, zeros_diff_cols), add(compare_blocks_cols, ones_diff_rows))), compare_blocks_rows), mul(zeros_diff_rows, compare_blocks_cols)))
mul(add(add(zeros_diff_rows, zeros_diff_rows), add(zeros_diff_cols, ones_diff_cols)), add(mul(zeros_diff_rows, ones_diff_rows), add(compare_blocks_cols, add(add(mul(add(zeros_diff_rows, compare_blocks_rows), compare_blocks_rows), mul(add(zeros_diff_cols, compare_blocks_rows), zeros_diff_rows)), mul(mul(add(ones_diff_rows, zeros_diff_cols), mul(ones_diff_cols, compare_blocks_rows)), add(zeros_diff_rows, ones_diff_rows))))))
COND TREES:
or_(le(_if_then_else(ge(max_row_clue, compare_blocks_cols), _if_then_else(True, compare_blocks_cols, 3), _if_then_else(False, compare_blocks_rows, 0)), _if_then_else(and_(True, True), _if_then_else(False, 0, zeros_diff_cols), _if_then_else(True, 2, zeros_diff_rows))), True)
or_(False, and_(ge(1, compare_blocks_rows), ge(_if_then_else(le(_if_then_else(or_(True, ge(1, _if_then_else(False, compare_blocks_rows, max_row_clue))), _if_then_else(True, 3, max_col_clue), _if_then_else(True, zeros_diff_rows, zeros_diff_cols)), _if_then_else(or_(True, False), _if_then_else(False, ones_diff_cols, 3), _if_then_else(False, ones_diff_cols, 3))), 0, 2), max_row_clue)))
and_(ge(_if_then_else(or_(ge(_if_then_else(True, ones_diff_cols, compare_blocks_rows), _if_then_else(True, max_row_clue, zeros_diff_rows)), False), 1, ones_diff_rows), _if_then_else(False, ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(ge(_if_then_else(True, ones_diff_cols, compare_blocks_rows), _if_then_else(True, ones_diff_rows, zeros_diff_rows)), ones_diff_cols, compare_blocks_rows), _if_then_else(False, max_row_clue, zeros_diff_rows)))
ge(_if_then_else(le(3, max_row_clue), _if_then_else(le(max_row_clue, _if_then_else(False, ones_diff_cols, ones_diff_rows)), _if_then_else(True, ones_diff_cols, zeros_diff_cols), zeros_diff_cols), _if_then_else(False, max_row_clue, compare_blocks_cols)), _if_then_else(True, _if_then_else(True, ones_diff_cols, zeros_diff_cols), _if_then_else(False, zeros_diff_cols, ones_diff_rows)))
or_(le(_if_then_else(False, 1, zeros_diff_rows), _if_then_else(False, 2, _if_then_else(and_(or_(and_(and_(False, False), or_(True, False)), ge(_if_then_else(False, 4, ones_diff_rows), _if_then_else(True, 2, max_col_clue))), ge(_if_then_else(and_(True, True), _if_then_else(False, 3, ones_diff_cols), _if_then_else(True, max_row_clue, compare_blocks_cols)), _if_then_else(le(zeros_diff_rows, compare_blocks_cols), _if_then_else(False, compare_blocks_rows, compare_blocks_rows), _if_then_else(False, 3, ones_diff_rows)))), _if_then_else(and_(le(_if_then_else(False, 2, ones_diff_cols), _if_then_else(True, compare_blocks_rows, 1)), or_(ge(max_row_clue, max_col_clue), ge(max_row_clue, 1))), _if_then_else(ge(_if_then_else(False, 2, 2), _if_then_else(False, max_row_clue, max_col_clue)), _if_then_else(ge(compare_blocks_rows, 3), _if_then_else(True, compare_blocks_rows, zeros_diff_cols), _if_then_else(False, 3, max_row_clue)), _if_then_else(le(max_col_clue, max_col_clue), _if_then_else(True, 4, compare_blocks_rows), _if_then_else(True, zeros_diff_rows, compare_blocks_cols))), _if_then_else(ge(_if_then_else(True, compare_blocks_cols, zeros_diff_cols), _if_then_else(True, ones_diff_cols, ones_diff_rows)), _if_then_else(le(ones_diff_cols, max_row_clue), _if_then_else(False, 3, 2), _if_then_else(False, 1, 2)), _if_then_else(ge(2, zeros_diff_cols), _if_then_else(False, 4, max_col_clue), _if_then_else(True, 1, 1)))), _if_then_else(or_(ge(_if_then_else(False, zeros_diff_rows, ones_diff_cols), _if_then_else(False, ones_diff_rows, max_col_clue)), or_(le(max_row_clue, ones_diff_cols), and_(False, True))), _if_then_else(ge(_if_then_else(True, max_col_clue, 3), _if_then_else(True, max_row_clue, compare_blocks_cols)), _if_then_else(le(compare_blocks_rows, 0), _if_then_else(False, max_col_clue, ones_diff_cols), _if_then_else(True, max_row_clue, ones_diff_rows)), _if_then_else(le(max_row_clue, 2), _if_then_else(True, zeros_diff_rows, zeros_diff_cols), _if_then_else(True, 3, max_col_clue))), _if_then_else(ge(_if_then_else(True, 0, 2), _if_then_else(False, 4, compare_blocks_cols)), _if_then_else(ge(max_col_clue, 0), _if_then_else(False, max_col_clue, ones_diff_rows), _if_then_else(False, 4, ones_diff_rows)), _if_then_else(or_(True, False), _if_then_else(False, 2, max_row_clue), _if_then_else(False, zeros_diff_cols, 1))))))), or_(ge(_if_then_else(or_(False, True), _if_then_else(True, _if_then_else(and_(True, True), _if_then_else(False, ones_diff_cols, max_row_clue), _if_then_else(False, max_col_clue, max_col_clue)), compare_blocks_rows), _if_then_else(True, max_row_clue, zeros_diff_rows)), _if_then_else(False, _if_then_else(False, max_row_clue, max_col_clue), _if_then_else(True, 2, max_col_clue))), False))
VAL TREES:
mul(add(mul(zeros_diff_rows, zeros_diff_cols), add(compare_blocks_cols, compare_blocks_cols)), add(mul(compare_blocks_cols, compare_blocks_rows), mul(mul(add(mul(zeros_diff_rows, ones_diff_cols), zeros_diff_cols), mul(compare_blocks_cols, ones_diff_cols)), mul(add(ones_diff_rows, compare_blocks_cols), add(add(add(ones_diff_cols, zeros_diff_cols), zeros_diff_cols), mul(mul(zeros_diff_rows, zeros_diff_rows), add(zeros_diff_rows, ones_diff_rows)))))))
mul(add(add(ones_diff_cols, ones_diff_rows), add(zeros_diff_rows, mul(add(mul(add(mul(zeros_diff_rows, ones_diff_cols), mul(ones_diff_rows, zeros_diff_rows)), mul(add(zeros_diff_cols, compare_blocks_rows), add(zeros_diff_rows, ones_diff_rows))), mul(add(add(zeros_diff_rows, zeros_diff_rows), mul(zeros_diff_rows, ones_diff_rows)), add(add(ones_diff_cols, ones_diff_rows), mul(zeros_diff_cols, ones_diff_cols)))), mul(mul(add(mul(ones_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, zeros_diff_cols)), mul(add(zeros_diff_cols, ones_diff_cols), mul(ones_diff_rows, zeros_diff_cols))), add(mul(mul(ones_diff_rows, ones_diff_rows), mul(compare_blocks_cols, zeros_diff_cols)), mul(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_rows, compare_blocks_cols))))))), add(add(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, compare_blocks_rows)))
add(mul(mul(mul(mul(mul(ones_diff_rows, mul(ones_diff_rows, compare_blocks_rows)), mul(ones_diff_cols, add(ones_diff_cols, compare_blocks_cols))), mul(mul(mul(compare_blocks_rows, compare_blocks_rows), compare_blocks_rows), mul(compare_blocks_cols, ones_diff_cols))), mul(mul(ones_diff_rows, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_rows))), mul(add(add(ones_diff_cols, ones_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(mul(zeros_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)))), mul(add(mul(mul(ones_diff_cols, ones_diff_cols), add(compare_blocks_rows, compare_blocks_cols)), add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows))), mul(add(add(ones_diff_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(compare_blocks_cols, ones_diff_rows), add(ones_diff_rows, ones_diff_cols)))))
add(add(add(mul(ones_diff_rows, zeros_diff_cols), add(compare_blocks_cols, zeros_diff_rows)), add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_rows, zeros_diff_rows))), add(add(mul(compare_blocks_rows, compare_blocks_cols), add(compare_blocks_rows, compare_blocks_cols)), mul(mul(ones_diff_cols, compare_blocks_rows), add(zeros_diff_cols, zeros_diff_rows))))
add(add(mul(compare_blocks_cols, zeros_diff_rows), mul(zeros_diff_cols, zeros_diff_cols)), mul(add(zeros_diff_cols, ones_diff_rows), add(ones_diff_rows, compare_blocks_rows)))
mul(mul(add(mul(mul(zeros_diff_cols, ones_diff_rows), add(zeros_diff_rows, compare_blocks_cols)), add(mul(ones_diff_rows, ones_diff_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(mul(mul(ones_diff_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)), add(add(ones_diff_rows, zeros_diff_cols), add(zeros_diff_rows, compare_blocks_cols)))), add(add(mul(mul(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, zeros_diff_cols)), add(mul(mul(add(compare_blocks_rows, compare_blocks_cols), mul(zeros_diff_cols, zeros_diff_rows)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows))), add(ones_diff_cols, ones_diff_cols))), mul(mul(add(compare_blocks_cols, ones_diff_cols), mul(ones_diff_rows, ones_diff_cols)), mul(mul(zeros_diff_rows, zeros_diff_rows), add(compare_blocks_cols, ones_diff_cols)))))
COND TREES:
ge(_if_then_else(le(_if_then_else(True, max_col_clue, ones_diff_rows), _if_then_else(True, ones_diff_rows, 3)), _if_then_else(False, zeros_diff_cols, 0), _if_then_else(le(3, 0), _if_then_else(False, max_col_clue, ones_diff_rows), _if_then_else(False, zeros_diff_cols, max_row_clue))), _if_then_else(le(_if_then_else(False, 0, ones_diff_cols), _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(le(ones_diff_cols, max_row_clue), _if_then_else(True, max_row_clue, 3), _if_then_else(False, 0, _if_then_else(le(_if_then_else(False, ones_diff_cols, 1), _if_then_else(False, zeros_diff_cols, 2)), _if_then_else(or_(False, False), _if_then_else(True, 2, 3), _if_then_else(False, zeros_diff_cols, 2)), _if_then_else(le(zeros_diff_cols, 0), _if_then_else(True, zeros_diff_cols, 0), _if_then_else(False, max_col_clue, compare_blocks_rows))))), _if_then_else(ge(compare_blocks_rows, 0), _if_then_else(False, zeros_diff_cols, 0), _if_then_else(False, 3, max_col_clue))))
and_(or_(or_(and_(True, ge(_if_then_else(True, zeros_diff_rows, _if_then_else(le(_if_then_else(False, max_row_clue, compare_blocks_rows), 4), _if_then_else(True, 0, zeros_diff_rows), max_row_clue)), 0)), True), True), le(_if_then_else(False, max_row_clue, compare_blocks_rows), 4))
ge(_if_then_else(ge(_if_then_else(True, 0, ones_diff_rows), _if_then_else(False, ones_diff_rows, compare_blocks_cols)), _if_then_else(False, _if_then_else(False, 2, compare_blocks_rows), compare_blocks_cols), _if_then_else(False, 3, ones_diff_cols)), _if_then_else(and_(True, False), _if_then_else(and_(ge(max_row_clue, 2), ge(max_col_clue, max_col_clue)), _if_then_else(True, 0, ones_diff_cols), 1), _if_then_else(False, 1, _if_then_else(False, compare_blocks_cols, 3))))
and_(le(_if_then_else(True, _if_then_else(True, ones_diff_rows, 3), _if_then_else(True, compare_blocks_cols, zeros_diff_cols)), _if_then_else(le(ones_diff_rows, ones_diff_rows), _if_then_else(True, 1, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows))), or_(le(_if_then_else(True, 3, _if_then_else(True, 1, 4)), _if_then_else(True, ones_diff_rows, zeros_diff_rows)), le(3, max_row_clue)))
or_(or_(ge(zeros_diff_rows, _if_then_else(False, 4, max_row_clue)), ge(_if_then_else(True, compare_blocks_cols, compare_blocks_cols), _if_then_else(False, compare_blocks_cols, 4))), True)
VAL TREES:
mul(add(add(compare_blocks_cols, compare_blocks_cols), add(ones_diff_rows, zeros_diff_rows)), add(mul(zeros_diff_rows, zeros_diff_cols), add(compare_blocks_rows, zeros_diff_rows)))
mul(mul(add(compare_blocks_rows, zeros_diff_cols), mul(compare_blocks_rows, zeros_diff_rows)), add(mul(ones_diff_cols, compare_blocks_cols), add(ones_diff_rows, compare_blocks_cols)))
add(mul(add(add(compare_blocks_cols, zeros_diff_cols), ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), add(mul(compare_blocks_cols, zeros_diff_rows), add(add(ones_diff_rows, zeros_diff_cols), ones_diff_rows)))
add(add(add(add(add(ones_diff_rows, ones_diff_rows), mul(ones_diff_cols, compare_blocks_rows)), add(add(compare_blocks_rows, compare_blocks_cols), add(compare_blocks_cols, ones_diff_rows))), mul(mul(mul(compare_blocks_rows, ones_diff_cols), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(ones_diff_rows, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)))), mul(add(mul(mul(ones_diff_cols, zeros_diff_rows), add(zeros_diff_cols, zeros_diff_cols)), mul(mul(zeros_diff_cols, ones_diff_cols), mul(zeros_diff_cols, compare_blocks_cols))), add(add(add(zeros_diff_rows, compare_blocks_rows), add(zeros_diff_cols, zeros_diff_cols)), add(add(compare_blocks_cols, ones_diff_rows), mul(compare_blocks_cols, compare_blocks_rows)))))
mul(add(add(ones_diff_rows, ones_diff_rows), mul(compare_blocks_cols, ones_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), mul(zeros_diff_rows, compare_blocks_cols)))
mul(add(add(zeros_diff_rows, zeros_diff_rows), add(zeros_diff_cols, ones_diff_cols)), add(mul(zeros_diff_rows, ones_diff_rows), add(compare_blocks_cols, zeros_diff_cols)))
COND TREES:
or_(ge(_if_then_else(le(_if_then_else(False, compare_blocks_cols, max_col_clue), _if_then_else(False, 2, 3)), _if_then_else(and_(True, True), _if_then_else(True, ones_diff_cols, 0), _if_then_else(False, compare_blocks_rows, 1)), _if_then_else(and_(True, False), _if_then_else(True, max_row_clue, ones_diff_cols), max_row_clue)), _if_then_else(le(_if_then_else(False, ones_diff_cols, 1), _if_then_else(False, zeros_diff_cols, 2)), _if_then_else(or_(False, False), _if_then_else(True, 2, 3), _if_then_else(False, zeros_diff_cols, 2)), _if_then_else(le(zeros_diff_cols, 0), _if_then_else(True, zeros_diff_cols, 0), _if_then_else(False, max_col_clue, compare_blocks_rows)))), ge(_if_then_else(and_(or_(False, False), ge(compare_blocks_cols, compare_blocks_rows)), _if_then_else(or_(False, False), _if_then_else(True, compare_blocks_rows, 2), _if_then_else(False, 3, 2)), _if_then_else(or_(False, False), _if_then_else(False, 2, ones_diff_rows), _if_then_else(False, 3, 2))), _if_then_else(ge(_if_then_else(and_(True, True), _if_then_else(True, ones_diff_cols, 0), _if_then_else(False, compare_blocks_rows, 1)), _if_then_else(ge(compare_blocks_rows, 0), 2, zeros_diff_cols)), _if_then_else(le(compare_blocks_cols, 1), _if_then_else(True, compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 2, ones_diff_cols)), _if_then_else(ge(4, 0), _if_then_else(True, 1, 4), _if_then_else(False, max_col_clue, 0)))))
or_(True, and_(ge(1, _if_then_else(False, compare_blocks_rows, max_row_clue)), ge(_if_then_else(or_(True, False), 0, _if_then_else(True, zeros_diff_rows, _if_then_else(True, compare_blocks_rows, max_row_clue))), max_row_clue)))
and_(ge(_if_then_else(True, 1, ones_diff_rows), _if_then_else(False, ones_diff_rows, compare_blocks_cols)), ge(_if_then_else(True, ones_diff_cols, compare_blocks_rows), _if_then_else(False, max_row_clue, zeros_diff_rows)))
ge(_if_then_else(True, _if_then_else(le(max_row_clue, _if_then_else(le(ones_diff_rows, ones_diff_rows), ones_diff_cols, ones_diff_rows)), _if_then_else(le(ones_diff_rows, ones_diff_rows), ones_diff_cols, zeros_diff_cols), zeros_diff_cols), _if_then_else(False, max_row_clue, compare_blocks_cols)), _if_then_else(ge(zeros_diff_cols, ones_diff_cols), _if_then_else(True, ones_diff_cols, zeros_diff_cols), _if_then_else(True, zeros_diff_cols, ones_diff_rows)))
or_(le(_if_then_else(False, 1, zeros_diff_rows), _if_then_else(False, 2, max_col_clue)), or_(ge(zeros_diff_rows, _if_then_else(False, max_col_clue, max_row_clue)), le(4, 1)))
VAL TREES:
mul(add(mul(zeros_diff_rows, zeros_diff_cols), add(compare_blocks_cols, compare_blocks_cols)), add(mul(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_rows, compare_blocks_rows)))
mul(add(add(ones_diff_cols, ones_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, compare_blocks_rows)))
add(mul(mul(mul(add(ones_diff_cols, add(mul(mul(ones_diff_rows, ones_diff_cols), mul(ones_diff_cols, zeros_diff_rows)), add(add(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_cols, ones_diff_rows)))), add(compare_blocks_rows, zeros_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_rows))), mul(add(add(ones_diff_cols, ones_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(mul(zeros_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)))), mul(add(mul(mul(ones_diff_cols, ones_diff_cols), add(compare_blocks_rows, compare_blocks_cols)), add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows))), mul(add(add(ones_diff_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(compare_blocks_cols, ones_diff_rows), add(ones_diff_rows, ones_diff_cols)))))
add(add(add(mul(ones_diff_rows, zeros_diff_cols), add(compare_blocks_cols, zeros_diff_rows)), add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_rows, zeros_diff_rows))), mul(mul(mul(compare_blocks_cols, compare_blocks_cols), add(zeros_diff_cols, compare_blocks_rows)), mul(mul(zeros_diff_cols, zeros_diff_cols), add(ones_diff_cols, compare_blocks_cols))))
add(add(mul(compare_blocks_cols, zeros_diff_rows), add(mul(mul(compare_blocks_cols, compare_blocks_cols), add(zeros_diff_cols, ones_diff_rows)), add(mul(ones_diff_cols, compare_blocks_cols), add(compare_blocks_cols, ones_diff_cols)))), mul(add(zeros_diff_cols, ones_diff_rows), add(ones_diff_rows, compare_blocks_rows)))
mul(mul(add(mul(mul(zeros_diff_cols, ones_diff_rows), add(zeros_diff_rows, compare_blocks_cols)), add(mul(ones_diff_rows, ones_diff_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(mul(mul(ones_diff_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)), add(add(ones_diff_rows, zeros_diff_cols), add(zeros_diff_rows, compare_blocks_cols)))), add(add(mul(mul(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, zeros_diff_cols)), add(add(zeros_diff_rows, compare_blocks_cols), add(ones_diff_cols, ones_diff_cols))), mul(mul(add(compare_blocks_cols, ones_diff_cols), mul(ones_diff_rows, ones_diff_cols)), mul(mul(zeros_diff_rows, zeros_diff_rows), add(compare_blocks_cols, ones_diff_cols)))))
COND TREES:
ge(_if_then_else(le(_if_then_else(True, max_col_clue, ones_diff_rows), _if_then_else(True, ones_diff_rows, 3)), _if_then_else(False, zeros_diff_cols, 0), _if_then_else(le(3, 0), _if_then_else(False, max_col_clue, ones_diff_rows), _if_then_else(False, zeros_diff_cols, max_row_clue))), _if_then_else(True, _if_then_else(le(ones_diff_cols, max_row_clue), _if_then_else(True, max_row_clue, 3), _if_then_else(False, 0, 1)), _if_then_else(ge(compare_blocks_rows, 0), _if_then_else(False, zeros_diff_cols, 0), _if_then_else(False, 3, max_col_clue))))
and_(or_(or_(and_(True, ge(2, 0)), True), or_(True, False)), le(2, 4))
ge(_if_then_else(or_(ge(_if_then_else(ge(_if_then_else(True, ones_diff_cols, compare_blocks_rows), _if_then_else(False, max_row_clue, zeros_diff_rows)), ones_diff_cols, compare_blocks_rows), _if_then_else(True, max_row_clue, zeros_diff_rows)), False), _if_then_else(False, 1, compare_blocks_cols), _if_then_else(False, 3, ones_diff_cols)), _if_then_else(and_(True, False), _if_then_else(and_(ge(max_row_clue, 2), ge(max_col_clue, max_col_clue)), _if_then_else(True, 0, ones_diff_cols), 1), _if_then_else(False, 1, _if_then_else(False, compare_blocks_cols, compare_blocks_rows))))
and_(le(_if_then_else(True, _if_then_else(True, ones_diff_rows, 3), _if_then_else(True, compare_blocks_cols, zeros_diff_cols)), _if_then_else(True, _if_then_else(True, 1, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows))), or_(le(4, _if_then_else(True, ones_diff_rows, zeros_diff_rows)), le(_if_then_else(le(_if_then_else(True, _if_then_else(True, ones_diff_rows, 3), _if_then_else(True, compare_blocks_cols, zeros_diff_cols)), _if_then_else(False, _if_then_else(True, 1, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows))), compare_blocks_rows, 1), zeros_diff_cols)))
or_(False, or_(and_(True, le(4, 1)), ge(_if_then_else(False, compare_blocks_cols, compare_blocks_cols), _if_then_else(False, compare_blocks_cols, 4))))
VAL TREES:
mul(add(add(compare_blocks_cols, compare_blocks_cols), add(ones_diff_rows, zeros_diff_rows)), add(mul(zeros_diff_rows, zeros_diff_cols), add(compare_blocks_rows, zeros_diff_rows)))
mul(mul(add(compare_blocks_rows, zeros_diff_cols), mul(compare_blocks_rows, zeros_diff_rows)), add(mul(ones_diff_cols, compare_blocks_cols), add(ones_diff_rows, compare_blocks_cols)))
add(mul(add(add(compare_blocks_cols, zeros_diff_cols), ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), add(mul(compare_blocks_cols, zeros_diff_rows), add(add(ones_diff_rows, zeros_diff_cols), ones_diff_rows)))
add(add(add(add(add(ones_diff_rows, ones_diff_rows), mul(ones_diff_cols, compare_blocks_rows)), add(add(compare_blocks_rows, compare_blocks_cols), add(compare_blocks_cols, ones_diff_rows))), mul(mul(mul(compare_blocks_rows, ones_diff_cols), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(ones_diff_rows, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)))), mul(add(mul(mul(ones_diff_cols, zeros_diff_rows), add(zeros_diff_cols, zeros_diff_cols)), mul(mul(zeros_diff_cols, ones_diff_cols), mul(zeros_diff_cols, compare_blocks_cols))), add(add(add(zeros_diff_rows, compare_blocks_rows), add(zeros_diff_cols, zeros_diff_cols)), add(add(compare_blocks_cols, ones_diff_rows), mul(compare_blocks_cols, compare_blocks_rows)))))
mul(add(add(ones_diff_rows, ones_diff_rows), mul(compare_blocks_cols, ones_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), mul(zeros_diff_rows, compare_blocks_cols)))
mul(add(add(zeros_diff_rows, zeros_diff_rows), add(zeros_diff_cols, ones_diff_cols)), add(mul(zeros_diff_rows, ones_diff_rows), add(compare_blocks_cols, zeros_diff_cols)))
COND TREES:
or_(ge(_if_then_else(le(_if_then_else(False, compare_blocks_cols, max_col_clue), _if_then_else(False, 2, 3)), _if_then_else(and_(True, True), _if_then_else(True, ones_diff_cols, 0), _if_then_else(False, compare_blocks_rows, 1)), _if_then_else(and_(True, False), _if_then_else(True, max_row_clue, ones_diff_cols), max_row_clue)), _if_then_else(le(_if_then_else(False, ones_diff_cols, 1), _if_then_else(False, zeros_diff_cols, 2)), _if_then_else(or_(False, False), _if_then_else(True, 2, 3), _if_then_else(False, zeros_diff_cols, 2)), _if_then_else(le(zeros_diff_cols, 0), _if_then_else(True, zeros_diff_cols, 0), _if_then_else(False, max_col_clue, compare_blocks_rows)))), ge(_if_then_else(and_(or_(False, False), ge(compare_blocks_cols, compare_blocks_rows)), _if_then_else(or_(False, False), _if_then_else(True, compare_blocks_rows, 2), _if_then_else(False, 3, 2)), _if_then_else(or_(False, False), _if_then_else(False, 2, ones_diff_rows), _if_then_else(False, 3, 2))), _if_then_else(ge(_if_then_else(and_(True, True), _if_then_else(True, ones_diff_cols, 0), _if_then_else(False, compare_blocks_rows, 1)), _if_then_else(True, 2, _if_then_else(False, max_col_clue, compare_blocks_rows))), _if_then_else(le(compare_blocks_cols, 1), _if_then_else(True, compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 2, ones_diff_cols)), _if_then_else(ge(4, 0), _if_then_else(True, 1, 4), _if_then_else(False, max_col_clue, 0)))))
or_(True, and_(ge(1, _if_then_else(True, compare_blocks_rows, max_row_clue)), ge(_if_then_else(or_(True, False), 0, 2), max_row_clue)))
and_(ge(_if_then_else(True, 1, ones_diff_rows), _if_then_else(False, zeros_diff_rows, compare_blocks_cols)), ge(_if_then_else(True, ones_diff_cols, compare_blocks_rows), _if_then_else(False, max_row_clue, zeros_diff_rows)))
ge(_if_then_else(True, _if_then_else(le(max_row_clue, _if_then_else(le(ones_diff_rows, ones_diff_rows), ones_diff_cols, ones_diff_rows)), _if_then_else(True, ones_diff_cols, zeros_diff_cols), zeros_diff_cols), _if_then_else(False, max_row_clue, compare_blocks_cols)), _if_then_else(ge(zeros_diff_cols, ones_diff_cols), _if_then_else(True, ones_diff_cols, max_row_clue), _if_then_else(True, zeros_diff_cols, ones_diff_rows)))
or_(le(_if_then_else(False, 1, zeros_diff_rows), _if_then_else(False, 2, max_col_clue)), or_(and_(True, le(4, 1)), le(4, 1)))
VAL TREES:
mul(add(mul(zeros_diff_rows, zeros_diff_cols), add(compare_blocks_cols, compare_blocks_cols)), add(mul(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_rows, compare_blocks_rows)))
mul(add(add(ones_diff_cols, ones_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, compare_blocks_rows)))
add(mul(mul(mul(add(ones_diff_cols, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_rows))), mul(add(add(ones_diff_cols, ones_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(mul(zeros_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)))), mul(add(mul(mul(ones_diff_cols, ones_diff_cols), add(compare_blocks_rows, compare_blocks_cols)), add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows))), mul(add(add(ones_diff_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(compare_blocks_cols, ones_diff_rows), add(ones_diff_rows, ones_diff_cols)))))
add(add(add(mul(ones_diff_rows, zeros_diff_cols), add(compare_blocks_cols, zeros_diff_rows)), add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_rows, zeros_diff_rows))), mul(mul(mul(compare_blocks_cols, compare_blocks_cols), add(zeros_diff_cols, compare_blocks_rows)), mul(mul(zeros_diff_cols, zeros_diff_cols), add(ones_diff_cols, compare_blocks_cols))))
add(add(mul(compare_blocks_cols, zeros_diff_rows), mul(zeros_diff_cols, zeros_diff_cols)), mul(add(zeros_diff_cols, ones_diff_rows), add(ones_diff_rows, compare_blocks_rows)))
mul(mul(add(mul(mul(zeros_diff_cols, ones_diff_rows), add(zeros_diff_rows, compare_blocks_cols)), add(mul(ones_diff_rows, ones_diff_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(mul(mul(ones_diff_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)), add(add(ones_diff_rows, zeros_diff_cols), add(zeros_diff_rows, compare_blocks_cols)))), add(add(mul(mul(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, zeros_diff_cols)), add(add(zeros_diff_rows, compare_blocks_cols), add(ones_diff_cols, ones_diff_cols))), mul(mul(add(compare_blocks_cols, ones_diff_cols), mul(ones_diff_rows, ones_diff_cols)), mul(mul(zeros_diff_rows, zeros_diff_rows), add(compare_blocks_cols, ones_diff_cols)))))
COND TREES:
or_(ge(_if_then_else(le(_if_then_else(False, compare_blocks_cols, max_col_clue), _if_then_else(False, 2, 3)), _if_then_else(and_(True, True), _if_then_else(True, ones_diff_cols, 0), _if_then_else(False, compare_blocks_rows, 1)), _if_then_else(and_(True, False), _if_then_else(or_(le(_if_then_else(True, max_row_clue, ones_diff_rows), _if_then_else(True, zeros_diff_rows, max_row_clue)), or_(or_(False, True), or_(True, False))), max_row_clue, ones_diff_cols), max_row_clue)), _if_then_else(le(_if_then_else(False, ones_diff_cols, 1), _if_then_else(False, zeros_diff_cols, 2)), _if_then_else(or_(False, False), _if_then_else(True, 2, 3), _if_then_else(False, zeros_diff_cols, 2)), _if_then_else(le(zeros_diff_cols, 0), _if_then_else(True, zeros_diff_cols, 0), zeros_diff_cols))), ge(_if_then_else(and_(or_(False, False), ge(compare_blocks_cols, compare_blocks_rows)), _if_then_else(or_(False, False), _if_then_else(True, compare_blocks_rows, 2), _if_then_else(False, 3, 2)), _if_then_else(or_(False, False), _if_then_else(False, 2, ones_diff_rows), _if_then_else(False, 3, 2))), _if_then_else(ge(_if_then_else(and_(True, True), _if_then_else(True, ones_diff_cols, 0), _if_then_else(False, compare_blocks_rows, 1)), _if_then_else(True, 2, zeros_diff_cols)), _if_then_else(le(compare_blocks_cols, 1), _if_then_else(True, compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 2, ones_diff_cols)), _if_then_else(ge(4, 0), _if_then_else(True, 1, 4), _if_then_else(False, max_col_clue, 0)))))
or_(True, and_(True, ge(_if_then_else(False, 0, 2), max_row_clue)))
and_(ge(_if_then_else(True, 1, ones_diff_rows), _if_then_else(False, max_row_clue, compare_blocks_cols)), ge(_if_then_else(True, ones_diff_cols, compare_blocks_rows), _if_then_else(False, max_row_clue, ones_diff_rows)))
ge(_if_then_else(True, _if_then_else(le(zeros_diff_cols, _if_then_else(le(ones_diff_rows, ones_diff_rows), ones_diff_cols, ones_diff_rows)), _if_then_else(True, ones_diff_cols, zeros_diff_cols), zeros_diff_cols), _if_then_else(False, max_row_clue, compare_blocks_cols)), _if_then_else(ge(zeros_diff_cols, ones_diff_cols), _if_then_else(True, ones_diff_cols, zeros_diff_cols), _if_then_else(True, zeros_diff_cols, ones_diff_rows)))
or_(le(_if_then_else(and_(False, False), 1, zeros_diff_rows), _if_then_else(False, 2, max_col_clue)), or_(and_(True, le(4, 1)), le(4, 1)))
VAL TREES:
mul(add(mul(zeros_diff_rows, zeros_diff_cols), add(compare_blocks_cols, compare_blocks_cols)), add(mul(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_rows, compare_blocks_rows)))
mul(add(add(ones_diff_cols, ones_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, compare_blocks_rows)))
add(mul(mul(mul(add(ones_diff_cols, ones_diff_cols), add(compare_blocks_rows, zeros_diff_rows)), mul(mul(ones_diff_rows, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_rows))), mul(add(add(ones_diff_cols, ones_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)), add(mul(zeros_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_cols)))), mul(add(mul(mul(ones_diff_cols, ones_diff_cols), add(compare_blocks_rows, compare_blocks_cols)), add(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows))), mul(add(add(ones_diff_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_rows)), add(mul(compare_blocks_cols, ones_diff_rows), add(ones_diff_rows, ones_diff_cols)))))
add(add(add(mul(ones_diff_rows, zeros_diff_cols), add(compare_blocks_cols, zeros_diff_rows)), add(add(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_rows, zeros_diff_rows))), mul(mul(mul(compare_blocks_cols, compare_blocks_cols), add(zeros_diff_cols, compare_blocks_rows)), mul(mul(zeros_diff_cols, zeros_diff_cols), add(ones_diff_cols, compare_blocks_cols))))
add(add(mul(compare_blocks_cols, zeros_diff_rows), mul(zeros_diff_cols, zeros_diff_cols)), mul(add(zeros_diff_cols, ones_diff_rows), add(ones_diff_rows, compare_blocks_rows)))
mul(mul(add(mul(mul(zeros_diff_cols, ones_diff_rows), add(zeros_diff_rows, compare_blocks_cols)), add(mul(ones_diff_rows, ones_diff_rows), mul(ones_diff_cols, zeros_diff_cols))), mul(mul(mul(ones_diff_cols, ones_diff_rows), mul(zeros_diff_rows, ones_diff_cols)), add(add(ones_diff_rows, zeros_diff_cols), add(zeros_diff_rows, compare_blocks_cols)))), add(add(mul(mul(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, zeros_diff_cols)), add(add(zeros_diff_rows, compare_blocks_cols), add(ones_diff_cols, ones_diff_cols))), mul(mul(add(compare_blocks_cols, ones_diff_cols), mul(ones_diff_rows, ones_diff_cols)), mul(mul(zeros_diff_rows, zeros_diff_rows), add(compare_blocks_cols, ones_diff_cols)))))
COND TREES:
ge(_if_then_else(le(_if_then_else(True, max_col_clue, ones_diff_rows), _if_then_else(True, ones_diff_rows, 3)), _if_then_else(False, zeros_diff_cols, 0), _if_then_else(le(3, 0), _if_then_else(False, max_col_clue, ones_diff_rows), _if_then_else(False, zeros_diff_cols, max_row_clue))), _if_then_else(ge(compare_blocks_rows, 0), _if_then_else(le(ones_diff_cols, max_row_clue), _if_then_else(True, max_row_clue, 3), _if_then_else(False, 0, 1)), _if_then_else(ge(compare_blocks_rows, 0), _if_then_else(False, zeros_diff_cols, 0), _if_then_else(False, 3, max_col_clue))))
and_(or_(or_(and_(True, ge(_if_then_else(True, zeros_diff_rows, _if_then_else(True, compare_blocks_rows, max_row_clue)), 0)), True), or_(True, False)), le(2, 4))
ge(_if_then_else(or_(ge(_if_then_else(ge(_if_then_else(True, ones_diff_cols, compare_blocks_rows), _if_then_else(False, max_row_clue, zeros_diff_rows)), ones_diff_cols, compare_blocks_rows), _if_then_else(True, max_row_clue, zeros_diff_rows)), False), _if_then_else(False, 1, compare_blocks_cols), _if_then_else(False, 3, ones_diff_cols)), _if_then_else(and_(True, False), _if_then_else(and_(ge(max_row_clue, 2), ge(max_col_clue, max_col_clue)), _if_then_else(True, 0, ones_diff_cols), 1), _if_then_else(False, 1, _if_then_else(False, compare_blocks_cols, compare_blocks_rows))))
and_(le(_if_then_else(True, _if_then_else(True, ones_diff_rows, 3), _if_then_else(True, compare_blocks_cols, zeros_diff_cols)), _if_then_else(le(ones_diff_rows, ones_diff_rows), _if_then_else(True, 1, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows))), or_(le(4, _if_then_else(True, ones_diff_rows, zeros_diff_rows)), le(_if_then_else(le(_if_then_else(True, _if_then_else(True, ones_diff_rows, 3), _if_then_else(True, compare_blocks_cols, zeros_diff_cols)), _if_then_else(False, _if_then_else(True, 1, 4), _if_then_else(False, zeros_diff_cols, compare_blocks_rows))), compare_blocks_rows, 1), zeros_diff_cols)))
or_(False, or_(ge(zeros_diff_rows, _if_then_else(False, max_col_clue, max_row_clue)), ge(_if_then_else(False, compare_blocks_cols, compare_blocks_cols), _if_then_else(False, compare_blocks_cols, 4))))
VAL TREES:
mul(add(add(compare_blocks_cols, compare_blocks_cols), add(ones_diff_rows, zeros_diff_rows)), add(mul(zeros_diff_rows, zeros_diff_cols), add(compare_blocks_rows, zeros_diff_rows)))
mul(mul(add(compare_blocks_rows, zeros_diff_cols), mul(compare_blocks_rows, zeros_diff_rows)), add(mul(ones_diff_cols, compare_blocks_cols), add(ones_diff_rows, compare_blocks_cols)))
add(mul(add(add(compare_blocks_cols, zeros_diff_cols), ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), add(mul(compare_blocks_cols, zeros_diff_rows), add(add(ones_diff_rows, zeros_diff_cols), ones_diff_rows)))
add(add(add(add(add(ones_diff_rows, ones_diff_rows), mul(ones_diff_cols, compare_blocks_rows)), add(add(compare_blocks_rows, compare_blocks_cols), add(compare_blocks_cols, ones_diff_rows))), mul(mul(mul(compare_blocks_rows, ones_diff_cols), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(ones_diff_rows, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)))), mul(add(mul(mul(ones_diff_cols, zeros_diff_rows), add(zeros_diff_cols, zeros_diff_cols)), mul(mul(zeros_diff_cols, ones_diff_cols), mul(zeros_diff_cols, compare_blocks_cols))), add(add(add(zeros_diff_rows, compare_blocks_rows), add(zeros_diff_cols, zeros_diff_cols)), add(add(compare_blocks_cols, ones_diff_rows), mul(compare_blocks_cols, compare_blocks_rows)))))
mul(add(add(ones_diff_rows, ones_diff_rows), mul(compare_blocks_cols, ones_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), mul(zeros_diff_rows, compare_blocks_cols)))
mul(add(add(zeros_diff_rows, zeros_diff_rows), add(zeros_diff_cols, ones_diff_cols)), add(mul(zeros_diff_rows, ones_diff_rows), add(compare_blocks_cols, zeros_diff_cols)))
COND TREES:
ge(_if_then_else(le(_if_then_else(True, max_col_clue, ones_diff_rows), _if_then_else(True, ones_diff_rows, 3)), _if_then_else(False, zeros_diff_cols, 0), _if_then_else(le(3, 0), _if_then_else(False, max_col_clue, ones_diff_rows), _if_then_else(False, zeros_diff_cols, max_row_clue))), _if_then_else(le(_if_then_else(False, 0, ones_diff_cols), _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(le(ones_diff_cols, max_row_clue), _if_then_else(True, _if_then_else(False, 2, compare_blocks_rows), 3), _if_then_else(False, 0, 1)), _if_then_else(ge(compare_blocks_rows, 0), _if_then_else(False, zeros_diff_cols, 0), _if_then_else(False, 3, max_col_clue))))
and_(or_(or_(and_(ge(_if_then_else(True, zeros_diff_rows, _if_then_else(True, compare_blocks_rows, max_row_clue)), _if_then_else(False, _if_then_else(True, 0, zeros_diff_rows), compare_blocks_rows)), False), True), or_(True, False)), False)
ge(_if_then_else(or_(False, False), _if_then_else(False, _if_then_else(False, 2, compare_blocks_rows), compare_blocks_cols), _if_then_else(False, 3, ones_diff_cols)), _if_then_else(and_(True, False), _if_then_else(and_(ge(max_row_clue, 2), ge(max_col_clue, max_col_clue)), _if_then_else(True, 0, ones_diff_cols), 1), _if_then_else(True, _if_then_else(False, 2, compare_blocks_rows), _if_then_else(False, compare_blocks_cols, compare_blocks_rows))))
and_(le(_if_then_else(True, _if_then_else(True, ones_diff_rows, 3), _if_then_else(True, compare_blocks_cols, zeros_diff_cols)), _if_then_else(False, _if_then_else(True, ones_diff_cols, _if_then_else(True, 3, 0)), _if_then_else(False, zeros_diff_cols, compare_blocks_rows))), False)
or_(ge(_if_then_else(or_(False, True), _if_then_else(True, max_col_clue, compare_blocks_rows), _if_then_else(True, max_row_clue, zeros_diff_rows)), _if_then_else(and_(False, False), _if_then_else(False, max_row_clue, max_row_clue), _if_then_else(True, 2, max_col_clue))), or_(ge(zeros_diff_rows, _if_then_else(False, 4, max_row_clue)), ge(_if_then_else(True, compare_blocks_cols, compare_blocks_cols), _if_then_else(False, _if_then_else(le(_if_then_else(False, compare_blocks_cols, zeros_diff_rows), _if_then_else(False, max_row_clue, ones_diff_cols)), _if_then_else(ge(compare_blocks_cols, 0), _if_then_else(True, compare_blocks_rows, max_col_clue), 4), _if_then_else(and_(True, True), _if_then_else(True, max_col_clue, 0), _if_then_else(False, max_col_clue, 1))), 4))))
VAL TREES:
mul(add(add(compare_blocks_cols, compare_blocks_cols), add(ones_diff_rows, zeros_diff_rows)), add(mul(zeros_diff_rows, zeros_diff_cols), add(compare_blocks_rows, zeros_diff_rows)))
mul(mul(add(compare_blocks_rows, zeros_diff_cols), mul(compare_blocks_rows, zeros_diff_rows)), add(mul(ones_diff_cols, compare_blocks_cols), add(mul(mul(add(mul(compare_blocks_rows, compare_blocks_rows), add(compare_blocks_cols, ones_diff_rows)), mul(mul(compare_blocks_rows, compare_blocks_cols), add(ones_diff_cols, compare_blocks_cols))), add(mul(add(compare_blocks_cols, compare_blocks_rows), add(ones_diff_rows, compare_blocks_rows)), mul(add(zeros_diff_cols, zeros_diff_cols), add(compare_blocks_rows, compare_blocks_cols)))), add(add(add(add(zeros_diff_rows, zeros_diff_cols), add(ones_diff_cols, zeros_diff_rows)), mul(add(ones_diff_cols, zeros_diff_rows), mul(zeros_diff_cols, zeros_diff_cols))), add(add(mul(compare_blocks_cols, compare_blocks_cols), add(compare_blocks_rows, compare_blocks_cols)), add(mul(ones_diff_rows, compare_blocks_rows), mul(zeros_diff_rows, compare_blocks_cols)))))))
add(mul(add(add(compare_blocks_cols, zeros_diff_cols), ones_diff_rows), add(compare_blocks_rows, ones_diff_cols)), add(add(mul(ones_diff_rows, compare_blocks_rows), mul(compare_blocks_rows, mul(ones_diff_cols, ones_diff_cols))), mul(add(compare_blocks_cols, zeros_diff_rows), mul(compare_blocks_rows, ones_diff_cols))))
add(add(add(add(add(ones_diff_rows, ones_diff_rows), mul(ones_diff_cols, compare_blocks_rows)), add(add(compare_blocks_rows, compare_blocks_cols), add(compare_blocks_cols, ones_diff_rows))), mul(mul(mul(compare_blocks_rows, ones_diff_cols), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(ones_diff_rows, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)))), mul(add(mul(mul(ones_diff_cols, zeros_diff_rows), add(zeros_diff_cols, zeros_diff_cols)), add(add(add(ones_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_cols)), add(mul(ones_diff_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_rows)))), add(add(add(zeros_diff_rows, compare_blocks_rows), add(zeros_diff_cols, zeros_diff_cols)), add(add(compare_blocks_cols, ones_diff_rows), mul(compare_blocks_cols, compare_blocks_rows)))))
mul(add(add(ones_diff_rows, ones_diff_rows), mul(compare_blocks_cols, ones_diff_cols)), add(mul(zeros_diff_cols, compare_blocks_rows), mul(zeros_diff_rows, compare_blocks_cols)))
mul(add(add(zeros_diff_rows, zeros_diff_rows), add(zeros_diff_cols, ones_diff_cols)), add(mul(zeros_diff_rows, ones_diff_rows), add(compare_blocks_cols, add(mul(mul(add(add(zeros_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, compare_blocks_cols)), mul(add(compare_blocks_cols, zeros_diff_rows), mul(ones_diff_rows, ones_diff_rows))), add(mul(mul(ones_diff_rows, ones_diff_rows), mul(zeros_diff_cols, zeros_diff_rows)), add(mul(compare_blocks_cols, zeros_diff_cols), add(ones_diff_cols, compare_blocks_cols)))), add(add(add(mul(zeros_diff_rows, ones_diff_cols), add(zeros_diff_cols, zeros_diff_cols)), add(mul(zeros_diff_rows, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows))), add(add(add(zeros_diff_rows, compare_blocks_rows), add(ones_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_cols, ones_diff_rows), add(ones_diff_cols, compare_blocks_rows))))))))


INFO:root:hof: COND TREES:
or_(and_(or_(and_(False, True), and_(False, False)), or_(le(4, zeros_diff_rows), and_(True, False))), le(_if_then_else(le(max_row_clue, 2), _if_then_else(False, max_row_clue, 3), _if_then_else(True, 1, compare_blocks_rows)), _if_then_else(ge(0, zeros_diff_cols), _if_then_else(False, ones_diff_rows, zeros_diff_cols), _if_then_else(False, max_col_clue, 3))))
and_(ge(_if_then_else(and_(True, False), _if_then_else(False, 2, compare_blocks_cols), _if_then_else(True, zeros_diff_cols, max_col_clue)), _if_then_else(ge(max_col_clue, max_row_clue), _if_then_else(False, ones_diff_cols, compare_blocks_cols), _if_then_else(True, 1, max_row_clue))), ge(_if_then_else(or_(False, False), _if_then_else(False, 4, zeros_diff_rows), _if_then_else(True, 3, zeros_diff_rows)), _if_then_else(ge(3, ones_diff_rows), _if_then_else(True, max_row_clue, ones_diff_rows), _if_then_else(True, ones_diff_rows, zeros_diff_rows))))
ge(_if_then_else(or_(False, or_(True, False)), _if_then_else(True, _if_then_else(True, zeros_diff_cols, ones_diff_cols), _if_then_else(False, 0, zeros_diff_rows)), _if_then_else(False, 2, _if_then_else(False, max_row_clue, 1))), _if_then_else(le(max_col_clue, 3), _if_then_else(or_(False, False), 3, _if_then_else(True, 4, compare_blocks_rows)), _if_then_else(True, _if_then_else(False, compare_blocks_rows, zeros_diff_rows), zeros_diff_cols)))
or_(le(_if_then_else(or_(and_(True, True), and_(True, False)), _if_then_else(or_(False, True), _if_then_else(True, compare_blocks_cols, zeros_diff_rows), _if_then_else(True, zeros_diff_rows, zeros_diff_rows)), _if_then_else(ge(max_row_clue, 3), _if_then_else(True, zeros_diff_cols, 3), _if_then_else(False, ones_diff_rows, zeros_diff_rows))), _if_then_else(ge(_if_then_else(True, 1, compare_blocks_cols), _if_then_else(False, 4, max_row_clue)), _if_then_else(ge(compare_blocks_cols, ones_diff_cols), _if_then_else(True, ones_diff_cols, compare_blocks_rows), _if_then_else(True, compare_blocks_cols, ones_diff_rows)), _if_then_else(and_(True, False), _if_then_else(True, zeros_diff_rows, compare_blocks_rows), _if_then_else(False, 4, max_row_clue)))), le(_if_then_else(le(_if_then_else(False, ones_diff_rows, ones_diff_rows), _if_then_else(True, compare_blocks_rows, 3)), _if_then_else(le(4, ones_diff_rows), _if_then_else(False, compare_blocks_rows, ones_diff_rows), _if_then_else(True, compare_blocks_rows, 1)), _if_then_else(ge(2, compare_blocks_cols), _if_then_else(True, max_col_clue, 0), _if_then_else(True, compare_blocks_rows, 1))), _if_then_else(or_(or_(True, False), or_(False, False)), _if_then_else(le(max_col_clue, compare_blocks_cols), _if_then_else(True, max_col_clue, 3), _if_then_else(True, max_row_clue, max_row_clue)), _if_then_else(ge(compare_blocks_rows, 0), _if_then_else(False, ones_diff_cols, 4), _if_then_else(False, ones_diff_cols, max_col_clue)))))
ge(_if_then_else(ge(_if_then_else(False, compare_blocks_rows, zeros_diff_rows), _if_then_else(False, 3, max_row_clue)), _if_then_else(and_(True, True), _if_then_else(True, zeros_diff_cols, compare_blocks_cols), _if_then_else(True, ones_diff_rows, 1)), _if_then_else(or_(False, False), _if_then_else(True, ones_diff_rows, ones_diff_cols), _if_then_else(False, 1, zeros_diff_rows))), _if_then_else(and_(ge(ones_diff_rows, compare_blocks_cols), or_(True, True)), _if_then_else(or_(True, True), _if_then_else(False, 0, ones_diff_cols), _if_then_else(True, max_row_clue, 1)), _if_then_else(ge(1, 0), _if_then_else(False, 0, compare_blocks_cols), _if_then_else(True, compare_blocks_rows, max_row_clue))))
VAL TREES:
add(mul(add(zeros_diff_rows, ones_diff_rows), mul(compare_blocks_rows, ones_diff_rows)), add(mul(ones_diff_rows, compare_blocks_cols), mul(ones_diff_rows, zeros_diff_rows)))
add(add(add(ones_diff_cols, compare_blocks_cols), mul(mul(zeros_diff_rows, zeros_diff_rows), mul(compare_blocks_rows, compare_blocks_rows))), add(mul(ones_diff_rows, mul(zeros_diff_cols, compare_blocks_rows)), mul(zeros_diff_rows, ones_diff_cols)))
add(mul(mul(mul(ones_diff_cols, zeros_diff_cols), compare_blocks_cols), mul(compare_blocks_rows, mul(ones_diff_cols, ones_diff_rows))), mul(add(compare_blocks_cols, compare_blocks_rows), add(add(zeros_diff_cols, ones_diff_cols), compare_blocks_rows)))
add(add(add(zeros_diff_rows, add(ones_diff_cols, zeros_diff_cols)), add(add(compare_blocks_cols, add(ones_diff_cols, compare_blocks_cols)), ones_diff_rows)), mul(add(mul(compare_blocks_cols, zeros_diff_rows), mul(add(zeros_diff_cols, zeros_diff_rows), mul(zeros_diff_rows, zeros_diff_rows))), mul(add(add(zeros_diff_cols, ones_diff_cols), add(ones_diff_rows, zeros_diff_cols)), compare_blocks_rows)))
mul(mul(add(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_cols, mul(ones_diff_rows, ones_diff_cols))), add(mul(zeros_diff_cols, ones_diff_cols), add(zeros_diff_cols, ones_diff_cols)))
add(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, zeros_diff_cols)), add(mul(ones_diff_rows, ones_diff_rows), add(zeros_diff_cols, compare_blocks_cols)))


INFO:root:stats: {'fitness': <deap.tools.support.Statistics object at 0x000001E3A90B1358>, 'size': <deap.tools.support.Statistics object at 0x000001E3A90B1390>}

