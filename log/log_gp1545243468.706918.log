INFO:root:

*******STARTING!!!******


INFO:root:

*******Configuration******


INFO:root:# NUM_ROWS = 20


INFO:root:NUM_ROWS = 5


INFO:root:# NUM_COLS = 20


INFO:root:NUM_COLS = 5


INFO:root:empty_in_split = '\xa0'


INFO:root:


INFO:root:pickle_unsolved_file_path = 'data/%dx%d_nonograms.pkl' % (NUM_ROWS, NUM_COLS)


INFO:root:pickle_solved_file_path = 'data/%dx%d_nonograms_solved.pkl' % (NUM_ROWS, NUM_COLS)


INFO:root:should_run_in_parallel = True


INFO:root:


INFO:root:NUM_COND_TREES = 5


INFO:root:NUM_VAL_TREES = NUM_COND_TREES + 1


INFO:root:prob_crossover_global = 0.6  # global probability for cx


INFO:root:prob_crossover_individual_cond = 0.8  # probability to cx a specific cond tree in an individual


INFO:root:prob_crossover_individual_val = 0.8  # probability to cx a specific cond tree in an individual


INFO:root:prob_mutate_global = 0.4


INFO:root:prob_mutate_individual_cond = 0.5


INFO:root:prob_mutate_individual_val = 0.5


INFO:root:


INFO:root:points_correct_box = 5


INFO:root:points_incorrect_box = 0


INFO:root:# points_incorrect_box = -2


INFO:root:pop_size = 10


INFO:root:hof_size = 1


INFO:root:# num_gen = 40


INFO:root:num_gen = 10


INFO:root:train_size = 3


INFO:root:

*******DONE!!!******


INFO:root:run time: 17 sec

INFO:root:max possible fitness for the nonograms ran: 73

INFO:root:log:    	      	            fitness            	              size              
   	      	-------------------------------	--------------------------------
gen	nevals	avg    	max    	min    	std    	avg	max	min	std     
0  	10    	53.3333	53.3333	53.3333	0      	7  	8  	6  	0.447214
1  	5     	51.3333	53.3333	45     	3.14466	7.2	8  	7  	0.4     
2  	10    	48.1667	53.3333	46.6667	1.89297	7.3	8  	7  	0.458258
3  	9     	50.3333	53.3333	48.3333	2.44949	7.2	8  	6  	0.6     
4  	7     	50.8333	53.3333	48.3333	2.5    	7.3	9  	6  	0.9     
5  	8     	51.6667	53.3333	46.6667	2.58199	7.8	9  	6  	0.748331
6  	8     	52.3333	53.3333	48.3333	2      	7.9	9  	7  	0.538516
7  	6     	52.6667	53.3333	46.6667	2      	8.1	9  	7  	0.7     
8  	6     	52.5   	53.3333	45     	2.5    	7.9	8  	7  	0.3     
9  	10    	53.3333	53.3333	53.3333	0      	8.1	9  	7  	0.538516
10 	10    	52.8333	53.3333	48.3333	1.5    	8.1	9  	7  	0.538516

INFO:root:pop: COND TREES:
ge(_if_then_else(le(1, ones_diff_cols), _if_then_else(False, _if_then_else(True, 2, 0), _if_then_else(False, max_col_clue, zeros_diff_rows)), _if_then_else(True, max_row_clue, zeros_diff_cols)), _if_then_else(le(compare_blocks_rows, ones_diff_cols), _if_then_else(True, max_col_clue, _if_then_else(and_(and_(True, True), True), _if_then_else(False, 4, compare_blocks_cols), _if_then_else(True, _if_then_else(False, 3, 0), compare_blocks_cols))), _if_then_else(ge(_if_then_else(False, 3, max_col_clue), 4), max_row_clue, max_row_clue)))
and_(le(_if_then_else(ge(4, max_col_clue), ones_diff_cols, _if_then_else(False, 0, zeros_diff_rows)), _if_then_else(ge(compare_blocks_rows, compare_blocks_rows), compare_blocks_cols, compare_blocks_rows)), and_(ge(4, max_col_clue), or_(or_(False, False), le(3, zeros_diff_cols))))
and_(le(_if_then_else(ge(_if_then_else(False, 3, zeros_diff_cols), _if_then_else(False, 1, max_col_clue)), _if_then_else(and_(or_(or_(False, False), and_(False, False)), False), compare_blocks_rows, _if_then_else(True, 3, max_row_clue)), _if_then_else(le(compare_blocks_rows, 2), _if_then_else(True, 3, zeros_diff_rows), _if_then_else(True, zeros_diff_rows, 4))), _if_then_else(ge(_if_then_else(True, 0, max_col_clue), _if_then_else(True, 2, 3)), _if_then_else(or_(False, True), _if_then_else(True, 2, 2), _if_then_else(False, 2, ones_diff_cols)), _if_then_else(ge(0, zeros_diff_rows), _if_then_else(False, 4, 1), _if_then_else(False, ones_diff_rows, 0)))), ge(_if_then_else(or_(or_(False, False), and_(False, False)), _if_then_else(and_(False, False), _if_then_else(True, compare_blocks_cols, 3), _if_then_else(True, 1, max_col_clue)), _if_then_else(or_(True, True), _if_then_else(False, 0, ones_diff_rows), _if_then_else(False, compare_blocks_cols, 2))), _if_then_else(and_(and_(True, True), ge(3, 4)), _if_then_else(le(3, 4), _if_then_else(False, 3, 0), _if_then_else(True, 2, compare_blocks_cols)), _if_then_else(and_(False, False), _if_then_else(le(zeros_diff_cols, ones_diff_cols), 2, 0), _if_then_else(False, max_col_clue, 1)))))
le(_if_then_else(ge(_if_then_else(ge(2, ones_diff_rows), _if_then_else(True, 1, zeros_diff_rows), _if_then_else(True, compare_blocks_cols, zeros_diff_cols)), _if_then_else(or_(True, True), _if_then_else(True, ones_diff_rows, max_col_clue), _if_then_else(False, ones_diff_cols, 0))), _if_then_else(le(_if_then_else(True, max_row_clue, ones_diff_cols), _if_then_else(True, 2, zeros_diff_cols)), _if_then_else(le(1, ones_diff_cols), _if_then_else(True, 1, max_row_clue), _if_then_else(True, ones_diff_cols, zeros_diff_cols)), _if_then_else(and_(False, True), _if_then_else(True, 4, ones_diff_rows), _if_then_else(False, ones_diff_rows, 4))), _if_then_else(and_(ge(compare_blocks_rows, 2), or_(False, True)), _if_then_else(le(max_col_clue, max_row_clue), _if_then_else(False, ones_diff_rows, ones_diff_rows), _if_then_else(False, 4, 0)), _if_then_else(ge(2, 4), _if_then_else(True, max_col_clue, compare_blocks_cols), _if_then_else(True, compare_blocks_cols, compare_blocks_cols)))), _if_then_else(or_(or_(or_(False, False), or_(False, True)), or_(le(compare_blocks_cols, zeros_diff_cols), or_(True, True))), _if_then_else(ge(_if_then_else(True, 2, compare_blocks_cols), _if_then_else(True, zeros_diff_rows, 4)), _if_then_else(ge(zeros_diff_cols, compare_blocks_cols), _if_then_else(False, max_col_clue, ones_diff_rows), _if_then_else(False, ones_diff_cols, compare_blocks_cols)), _if_then_else(le(4, zeros_diff_rows), _if_then_else(False, zeros_diff_rows, zeros_diff_cols), _if_then_else(False, compare_blocks_cols, 1))), _if_then_else(ge(_if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(False, 2, max_col_clue)), _if_then_else(le(0, 3), _if_then_else(True, 3, 0), _if_then_else(False, zeros_diff_cols, zeros_diff_rows)), _if_then_else(le(ones_diff_rows, ones_diff_rows), _if_then_else(True, 1, 1), _if_then_else(True, 3, max_col_clue)))))
ge(_if_then_else(ge(zeros_diff_cols, ones_diff_rows), _if_then_else(False, ones_diff_cols, 1), _if_then_else(and_(True, True), _if_then_else(False, compare_blocks_rows, compare_blocks_rows), _if_then_else(True, 4, 3))), _if_then_else(False, compare_blocks_cols, _if_then_else(False, ones_diff_rows, zeros_diff_cols)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_cols, compare_blocks_cols)), add(add(zeros_diff_cols, ones_diff_cols), add(zeros_diff_cols, ones_diff_cols)))
add(zeros_diff_cols, compare_blocks_rows)
mul(add(mul(mul(add(compare_blocks_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(ones_diff_cols, zeros_diff_cols), add(zeros_diff_cols, zeros_diff_rows))), add(add(add(ones_diff_rows, ones_diff_cols), mul(zeros_diff_cols, compare_blocks_cols)), mul(mul(compare_blocks_rows, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)))), mul(add(ones_diff_rows, compare_blocks_cols), mul(add(mul(ones_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(zeros_diff_rows, ones_diff_rows)))))
add(add(add(compare_blocks_cols, zeros_diff_cols), add(compare_blocks_rows, ones_diff_cols)), mul(mul(add(zeros_diff_rows, zeros_diff_rows), ones_diff_rows), add(ones_diff_rows, mul(ones_diff_cols, compare_blocks_cols))))
add(add(mul(compare_blocks_cols, ones_diff_rows), add(zeros_diff_rows, compare_blocks_rows)), add(mul(zeros_diff_rows, zeros_diff_cols), mul(ones_diff_rows, compare_blocks_rows)))
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), mul(zeros_diff_rows, compare_blocks_rows)), mul(add(add(compare_blocks_cols, compare_blocks_cols), ones_diff_rows), compare_blocks_rows))
COND TREES:
ge(_if_then_else(le(1, ones_diff_cols), _if_then_else(False, _if_then_else(True, 2, 0), _if_then_else(False, max_col_clue, zeros_diff_rows)), _if_then_else(True, max_row_clue, zeros_diff_cols)), _if_then_else(True, _if_then_else(True, max_col_clue, _if_then_else(True, _if_then_else(False, 4, compare_blocks_cols), _if_then_else(True, ones_diff_rows, compare_blocks_cols))), _if_then_else(ge(_if_then_else(False, 3, max_col_clue), 4), max_row_clue, max_row_clue)))
and_(le(_if_then_else(or_(False, False), ones_diff_cols, 4), _if_then_else(or_(False, False), compare_blocks_cols, compare_blocks_rows)), and_(le(1, 2), or_(or_(False, False), le(3, zeros_diff_cols))))
and_(le(_if_then_else(True, 3, compare_blocks_rows), _if_then_else(ge(_if_then_else(True, 0, max_col_clue), _if_then_else(True, 2, 3)), _if_then_else(or_(False, True), _if_then_else(True, 2, 2), _if_then_else(False, 2, ones_diff_cols)), _if_then_else(ge(0, zeros_diff_rows), _if_then_else(True, compare_blocks_cols, zeros_diff_cols), _if_then_else(False, ones_diff_rows, 0)))), ge(_if_then_else(True, _if_then_else(and_(False, False), _if_then_else(True, compare_blocks_cols, 3), _if_then_else(True, 1, max_col_clue)), 3), _if_then_else(and_(and_(True, True), ge(3, 4)), _if_then_else(le(3, 4), _if_then_else(False, 3, 0), _if_then_else(True, 2, compare_blocks_cols)), _if_then_else(and_(False, False), _if_then_else(False, 2, 0), _if_then_else(False, max_col_clue, 1)))))
le(_if_then_else(ge(_if_then_else(ge(2, zeros_diff_rows), _if_then_else(True, 1, zeros_diff_rows), _if_then_else(True, compare_blocks_cols, zeros_diff_cols)), _if_then_else(or_(True, True), _if_then_else(True, zeros_diff_rows, max_col_clue), _if_then_else(False, ones_diff_cols, 0))), _if_then_else(le(_if_then_else(True, max_row_clue, ones_diff_cols), _if_then_else(True, 2, zeros_diff_cols)), _if_then_else(le(1, ones_diff_cols), _if_then_else(True, 1, max_row_clue), ones_diff_cols), _if_then_else(and_(False, True), _if_then_else(True, 4, ones_diff_rows), _if_then_else(False, ones_diff_rows, 4))), _if_then_else(and_(ge(compare_blocks_rows, 2), or_(False, True)), _if_then_else(le(max_col_clue, max_row_clue), _if_then_else(False, ones_diff_rows, ones_diff_rows), _if_then_else(False, 4, 0)), _if_then_else(ge(2, 4), _if_then_else(True, max_col_clue, compare_blocks_cols), _if_then_else(True, compare_blocks_cols, compare_blocks_cols)))), _if_then_else(or_(or_(or_(False, False), or_(False, True)), or_(le(compare_blocks_cols, zeros_diff_cols), or_(True, True))), _if_then_else(ge(_if_then_else(True, 2, compare_blocks_cols), _if_then_else(True, zeros_diff_rows, 4)), _if_then_else(ge(zeros_diff_cols, compare_blocks_cols), _if_then_else(False, max_col_clue, ones_diff_rows), _if_then_else(False, ones_diff_cols, compare_blocks_cols)), _if_then_else(le(4, zeros_diff_rows), _if_then_else(False, zeros_diff_rows, zeros_diff_cols), _if_then_else(False, compare_blocks_cols, 1))), _if_then_else(ge(_if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(False, 2, max_col_clue)), _if_then_else(le(0, 3), _if_then_else(True, 3, 0), _if_then_else(False, zeros_diff_cols, zeros_diff_rows)), _if_then_else(le(ones_diff_rows, ones_diff_rows), _if_then_else(True, 1, 1), _if_then_else(True, 3, max_col_clue)))))
ge(_if_then_else(ge(zeros_diff_cols, ones_diff_rows), _if_then_else(False, ones_diff_cols, 1), _if_then_else(or_(False, le(3, ones_diff_cols)), 4, 0)), _if_then_else(le(compare_blocks_rows, ones_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_cols), _if_then_else(True, ones_diff_rows, zeros_diff_cols)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_cols, compare_blocks_cols)), add(add(zeros_diff_cols, ones_diff_cols), add(zeros_diff_cols, ones_diff_cols)))
add(zeros_diff_cols, compare_blocks_rows)
mul(add(mul(mul(add(compare_blocks_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(ones_diff_cols, zeros_diff_cols), add(zeros_diff_cols, zeros_diff_rows))), add(add(add(ones_diff_rows, ones_diff_cols), mul(zeros_diff_cols, compare_blocks_cols)), mul(mul(compare_blocks_rows, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)))), mul(add(ones_diff_rows, compare_blocks_cols), mul(add(mul(ones_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(zeros_diff_rows, ones_diff_rows)))))
add(add(add(compare_blocks_cols, zeros_diff_cols), add(compare_blocks_rows, ones_diff_cols)), mul(mul(add(zeros_diff_rows, zeros_diff_rows), ones_diff_rows), add(ones_diff_rows, mul(ones_diff_cols, compare_blocks_cols))))
add(add(mul(compare_blocks_cols, ones_diff_rows), add(zeros_diff_rows, compare_blocks_rows)), add(mul(zeros_diff_rows, zeros_diff_cols), mul(ones_diff_rows, compare_blocks_rows)))
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), mul(zeros_diff_rows, compare_blocks_rows)), mul(add(add(compare_blocks_cols, compare_blocks_cols), ones_diff_rows), compare_blocks_rows))
COND TREES:
ge(_if_then_else(le(1, ones_diff_cols), _if_then_else(False, _if_then_else(True, 2, 2), _if_then_else(le(_if_then_else(False, zeros_diff_cols, 0), _if_then_else(True, max_row_clue, 0)), max_col_clue, zeros_diff_rows)), _if_then_else(True, max_row_clue, zeros_diff_cols)), _if_then_else(True, _if_then_else(True, max_col_clue, _if_then_else(and_(and_(True, True), True), _if_then_else(False, 4, ones_diff_cols), _if_then_else(True, ones_diff_rows, compare_blocks_cols))), _if_then_else(False, max_col_clue, 0)))
and_(le(_if_then_else(or_(ge(max_row_clue, max_row_clue), ge(4, max_col_clue)), ones_diff_cols, 4), _if_then_else(or_(False, False), compare_blocks_cols, compare_blocks_rows)), and_(True, ge(4, max_col_clue)))
and_(le(_if_then_else(False, _if_then_else(and_(True, False), _if_then_else(True, ones_diff_cols, 3), _if_then_else(True, 3, max_row_clue)), _if_then_else(le(compare_blocks_rows, 2), _if_then_else(True, 3, zeros_diff_rows), _if_then_else(True, zeros_diff_rows, 4))), _if_then_else(ge(_if_then_else(True, 0, max_col_clue), _if_then_else(True, 2, 3)), _if_then_else(or_(False, True), _if_then_else(True, 2, 2), _if_then_else(False, 2, ones_diff_cols)), _if_then_else(ge(_if_then_else(False, compare_blocks_cols, 2), zeros_diff_rows), ones_diff_rows, _if_then_else(False, ones_diff_rows, 0)))), ge(_if_then_else(or_(or_(False, False), and_(False, False)), _if_then_else(and_(False, False), _if_then_else(True, compare_blocks_cols, 3), _if_then_else(True, 1, max_col_clue)), _if_then_else(or_(True, True), _if_then_else(False, 0, ones_diff_rows), _if_then_else(False, compare_blocks_cols, 2))), _if_then_else(and_(and_(True, True), ge(3, 4)), _if_then_else(le(3, 4), _if_then_else(False, 3, 0), _if_then_else(True, 2, compare_blocks_cols)), _if_then_else(and_(False, False), _if_then_else(False, 2, 0), _if_then_else(False, max_col_clue, 1)))))
le(_if_then_else(ge(_if_then_else(ge(2, zeros_diff_rows), _if_then_else(True, 1, zeros_diff_rows), _if_then_else(False, zeros_diff_rows, zeros_diff_cols)), _if_then_else(or_(True, True), _if_then_else(True, ones_diff_rows, max_col_clue), _if_then_else(False, ones_diff_cols, 0))), _if_then_else(le(_if_then_else(True, max_row_clue, ones_diff_cols), _if_then_else(True, 2, zeros_diff_cols)), _if_then_else(le(1, ones_diff_cols), _if_then_else(True, 1, max_row_clue), _if_then_else(True, ones_diff_cols, zeros_diff_cols)), _if_then_else(and_(False, True), _if_then_else(True, 4, ones_diff_rows), _if_then_else(False, ones_diff_rows, 4))), _if_then_else(and_(ge(compare_blocks_rows, 2), or_(False, True)), _if_then_else(le(max_col_clue, max_row_clue), _if_then_else(False, ones_diff_rows, ones_diff_rows), _if_then_else(False, 4, 0)), _if_then_else(ge(zeros_diff_rows, _if_then_else(le(zeros_diff_rows, 0), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(False, compare_blocks_rows, max_col_clue))), _if_then_else(True, max_col_clue, compare_blocks_cols), _if_then_else(True, compare_blocks_cols, compare_blocks_cols)))), _if_then_else(or_(or_(or_(False, False), or_(False, True)), or_(le(compare_blocks_cols, zeros_diff_cols), or_(True, True))), _if_then_else(ge(_if_then_else(True, 2, compare_blocks_cols), _if_then_else(True, zeros_diff_rows, 4)), _if_then_else(ge(zeros_diff_cols, compare_blocks_cols), _if_then_else(False, max_col_clue, ones_diff_rows), _if_then_else(False, ones_diff_cols, compare_blocks_cols)), _if_then_else(ge(_if_then_else(False, zeros_diff_rows, ones_diff_rows), _if_then_else(False, max_row_clue, 4)), _if_then_else(False, zeros_diff_rows, zeros_diff_cols), _if_then_else(False, compare_blocks_cols, 1))), _if_then_else(ge(_if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(False, 2, max_col_clue)), _if_then_else(le(0, 3), _if_then_else(True, 3, 0), _if_then_else(False, zeros_diff_cols, zeros_diff_rows)), _if_then_else(le(ones_diff_rows, ones_diff_rows), _if_then_else(True, 1, 1), _if_then_else(True, 3, max_col_clue)))))
ge(_if_then_else(ge(zeros_diff_cols, ones_diff_rows), _if_then_else(False, ones_diff_cols, 1), _if_then_else(True, 1, 0)), _if_then_else(ge(ones_diff_cols, ones_diff_rows), _if_then_else(True, 3, max_row_clue), _if_then_else(False, ones_diff_rows, ones_diff_cols)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_cols, compare_blocks_cols)), add(add(zeros_diff_cols, ones_diff_cols), add(zeros_diff_cols, ones_diff_cols)))
mul(ones_diff_rows, ones_diff_rows)
mul(add(mul(mul(add(compare_blocks_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(ones_diff_cols, zeros_diff_cols), add(zeros_diff_cols, zeros_diff_rows))), add(add(add(ones_diff_rows, ones_diff_cols), mul(zeros_diff_cols, compare_blocks_cols)), mul(mul(compare_blocks_rows, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)))), mul(add(ones_diff_rows, compare_blocks_cols), mul(add(mul(ones_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(zeros_diff_rows, ones_diff_rows)))))
add(add(add(compare_blocks_cols, zeros_diff_cols), add(compare_blocks_rows, ones_diff_cols)), mul(mul(add(zeros_diff_rows, zeros_diff_rows), ones_diff_rows), add(ones_diff_rows, mul(ones_diff_cols, compare_blocks_cols))))
add(add(mul(compare_blocks_cols, ones_diff_rows), add(zeros_diff_rows, compare_blocks_rows)), add(mul(zeros_diff_rows, zeros_diff_cols), mul(ones_diff_rows, compare_blocks_rows)))
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), mul(zeros_diff_rows, compare_blocks_rows)), mul(add(add(compare_blocks_cols, compare_blocks_cols), ones_diff_rows), compare_blocks_rows))
COND TREES:
ge(_if_then_else(le(1, ones_diff_cols), _if_then_else(False, _if_then_else(True, 2, 0), _if_then_else(False, max_col_clue, zeros_diff_rows)), _if_then_else(True, max_row_clue, zeros_diff_cols)), _if_then_else(True, _if_then_else(True, max_col_clue, _if_then_else(and_(True, True), _if_then_else(False, 4, compare_blocks_cols), _if_then_else(True, ones_diff_rows, compare_blocks_cols))), _if_then_else(ge(_if_then_else(False, 3, max_col_clue), 4), max_row_clue, max_row_clue)))
and_(le(_if_then_else(or_(False, False), ones_diff_cols, 4), compare_blocks_cols), and_(le(1, 2), or_(or_(False, False), le(3, zeros_diff_cols))))
and_(le(_if_then_else(True, 3, compare_blocks_rows), _if_then_else(ge(_if_then_else(True, 0, max_col_clue), _if_then_else(True, 2, 3)), _if_then_else(or_(False, True), _if_then_else(True, 2, 2), _if_then_else(False, 2, ones_diff_cols)), _if_then_else(ge(0, zeros_diff_rows), _if_then_else(True, compare_blocks_cols, zeros_diff_cols), _if_then_else(False, ones_diff_rows, 0)))), ge(_if_then_else(True, _if_then_else(and_(False, False), _if_then_else(True, compare_blocks_cols, 3), _if_then_else(True, 1, max_col_clue)), 3), _if_then_else(and_(and_(True, True), ge(3, 4)), _if_then_else(le(3, 4), _if_then_else(False, 3, 0), _if_then_else(le(_if_then_else(True, 0, 1), _if_then_else(False, 0, compare_blocks_rows)), 2, compare_blocks_cols)), _if_then_else(and_(False, False), _if_then_else(False, 2, 0), _if_then_else(False, max_col_clue, 1)))))
le(_if_then_else(ge(_if_then_else(ge(2, zeros_diff_rows), _if_then_else(True, 1, zeros_diff_rows), _if_then_else(True, compare_blocks_cols, zeros_diff_cols)), _if_then_else(or_(True, True), _if_then_else(True, ones_diff_rows, max_col_clue), _if_then_else(False, ones_diff_cols, 0))), _if_then_else(le(_if_then_else(True, max_row_clue, ones_diff_cols), _if_then_else(True, 2, zeros_diff_cols)), _if_then_else(le(1, ones_diff_cols), _if_then_else(True, 1, max_row_clue), ones_diff_cols), _if_then_else(and_(False, True), _if_then_else(True, 4, ones_diff_rows), _if_then_else(False, ones_diff_rows, 4))), _if_then_else(and_(ge(compare_blocks_rows, 2), or_(False, True)), _if_then_else(le(max_col_clue, max_row_clue), _if_then_else(False, ones_diff_rows, ones_diff_rows), _if_then_else(False, 4, 0)), _if_then_else(ge(2, 4), _if_then_else(True, max_col_clue, compare_blocks_cols), _if_then_else(True, compare_blocks_cols, compare_blocks_cols)))), _if_then_else(or_(or_(or_(False, False), or_(False, True)), or_(le(compare_blocks_cols, zeros_diff_cols), or_(True, True))), _if_then_else(ge(_if_then_else(True, 2, compare_blocks_cols), _if_then_else(True, zeros_diff_rows, 4)), _if_then_else(ge(zeros_diff_cols, compare_blocks_cols), _if_then_else(False, max_col_clue, ones_diff_rows), _if_then_else(False, ones_diff_cols, compare_blocks_cols)), _if_then_else(le(4, zeros_diff_rows), _if_then_else(False, zeros_diff_rows, zeros_diff_cols), _if_then_else(False, compare_blocks_cols, 1))), _if_then_else(ge(_if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(False, 2, max_col_clue)), _if_then_else(le(0, 3), _if_then_else(True, 3, 0), _if_then_else(False, zeros_diff_cols, zeros_diff_rows)), _if_then_else(le(ones_diff_rows, ones_diff_rows), _if_then_else(True, 1, 1), _if_then_else(True, 3, max_col_clue)))))
ge(_if_then_else(ge(zeros_diff_cols, ones_diff_rows), _if_then_else(False, ones_diff_cols, 1), _if_then_else(False, 4, 0)), _if_then_else(le(compare_blocks_rows, ones_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_cols), _if_then_else(True, ones_diff_rows, zeros_diff_cols)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_cols, compare_blocks_cols)), add(add(zeros_diff_cols, ones_diff_cols), add(zeros_diff_cols, ones_diff_cols)))
add(zeros_diff_cols, compare_blocks_rows)
mul(add(mul(mul(add(compare_blocks_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(ones_diff_cols, zeros_diff_cols), add(zeros_diff_cols, zeros_diff_rows))), add(add(add(ones_diff_rows, ones_diff_cols), mul(zeros_diff_cols, compare_blocks_cols)), mul(mul(compare_blocks_rows, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)))), mul(add(ones_diff_rows, compare_blocks_cols), mul(add(mul(ones_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(zeros_diff_rows, ones_diff_rows)))))
add(add(add(compare_blocks_cols, zeros_diff_cols), add(compare_blocks_rows, ones_diff_cols)), mul(mul(add(zeros_diff_rows, zeros_diff_rows), ones_diff_rows), add(ones_diff_rows, mul(ones_diff_cols, compare_blocks_cols))))
add(add(mul(compare_blocks_cols, ones_diff_rows), add(zeros_diff_rows, compare_blocks_rows)), add(mul(zeros_diff_rows, zeros_diff_cols), mul(ones_diff_rows, compare_blocks_rows)))
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), mul(zeros_diff_rows, compare_blocks_rows)), mul(add(add(compare_blocks_cols, compare_blocks_cols), ones_diff_rows), compare_blocks_rows))
COND TREES:
ge(_if_then_else(le(1, ones_diff_cols), _if_then_else(False, _if_then_else(True, 2, 0), _if_then_else(False, max_col_clue, zeros_diff_rows)), _if_then_else(True, max_row_clue, zeros_diff_cols)), _if_then_else(True, _if_then_else(True, max_col_clue, _if_then_else(and_(True, True), _if_then_else(False, 4, compare_blocks_cols), _if_then_else(True, ones_diff_rows, compare_blocks_cols))), _if_then_else(False, max_row_clue, max_row_clue)))
and_(le(_if_then_else(ge(compare_blocks_rows, compare_blocks_rows), ones_diff_cols, 4), _if_then_else(or_(False, False), compare_blocks_cols, compare_blocks_rows)), and_(le(1, 2), or_(or_(False, False), le(3, zeros_diff_cols))))
and_(le(_if_then_else(True, 3, compare_blocks_rows), _if_then_else(ge(_if_then_else(True, 0, max_col_clue), _if_then_else(True, 2, 3)), _if_then_else(or_(False, True), _if_then_else(True, 2, 2), _if_then_else(False, 2, ones_diff_cols)), _if_then_else(ge(0, zeros_diff_rows), _if_then_else(True, compare_blocks_cols, zeros_diff_cols), _if_then_else(False, ones_diff_rows, 0)))), ge(_if_then_else(or_(or_(False, False), and_(False, False)), _if_then_else(and_(False, False), _if_then_else(True, compare_blocks_cols, 3), _if_then_else(True, 1, max_col_clue)), 3), _if_then_else(and_(and_(True, True), ge(3, 4)), _if_then_else(le(3, 4), _if_then_else(False, 3, 0), _if_then_else(True, 2, compare_blocks_cols)), _if_then_else(and_(False, False), _if_then_else(False, 2, 0), _if_then_else(False, _if_then_else(or_(True, True), _if_then_else(False, 0, ones_diff_rows), _if_then_else(False, compare_blocks_cols, 2)), 1)))))
le(_if_then_else(ge(_if_then_else(ge(2, zeros_diff_rows), _if_then_else(True, 1, zeros_diff_rows), _if_then_else(True, compare_blocks_cols, zeros_diff_cols)), _if_then_else(or_(True, True), _if_then_else(True, ones_diff_rows, max_col_clue), _if_then_else(False, ones_diff_cols, 0))), _if_then_else(le(_if_then_else(True, max_row_clue, ones_diff_cols), _if_then_else(True, 2, zeros_diff_cols)), _if_then_else(le(1, ones_diff_cols), _if_then_else(True, 1, max_row_clue), ones_diff_cols), _if_then_else(and_(False, True), _if_then_else(True, 4, ones_diff_rows), _if_then_else(False, ones_diff_rows, 4))), _if_then_else(and_(ge(compare_blocks_rows, 2), or_(False, True)), _if_then_else(le(max_col_clue, max_row_clue), _if_then_else(False, ones_diff_rows, ones_diff_rows), _if_then_else(False, 4, 0)), _if_then_else(ge(2, 4), _if_then_else(True, max_col_clue, compare_blocks_cols), _if_then_else(True, compare_blocks_cols, compare_blocks_cols)))), _if_then_else(or_(or_(or_(False, False), or_(False, True)), or_(le(compare_blocks_cols, zeros_diff_cols), or_(True, True))), _if_then_else(ge(_if_then_else(True, 2, compare_blocks_cols), _if_then_else(True, zeros_diff_rows, 4)), _if_then_else(ge(zeros_diff_cols, compare_blocks_cols), _if_then_else(False, max_col_clue, ones_diff_rows), _if_then_else(False, ones_diff_cols, compare_blocks_cols)), _if_then_else(le(4, zeros_diff_rows), _if_then_else(False, zeros_diff_rows, zeros_diff_cols), _if_then_else(False, compare_blocks_cols, 1))), _if_then_else(ge(_if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(False, 2, max_col_clue)), _if_then_else(le(0, 3), _if_then_else(True, 3, 0), _if_then_else(False, zeros_diff_cols, zeros_diff_rows)), _if_then_else(le(ones_diff_rows, ones_diff_rows), _if_then_else(True, 1, 1), _if_then_else(True, 3, max_col_clue)))))
ge(_if_then_else(ge(zeros_diff_cols, ones_diff_rows), _if_then_else(False, ones_diff_cols, 1), _if_then_else(False, 4, 0)), _if_then_else(False, _if_then_else(True, ones_diff_rows, ones_diff_cols), _if_then_else(le(3, ones_diff_cols), ones_diff_rows, zeros_diff_cols)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, add(zeros_diff_cols, zeros_diff_rows)), mul(compare_blocks_cols, compare_blocks_cols)), add(add(zeros_diff_cols, ones_diff_cols), add(zeros_diff_cols, ones_diff_cols)))
add(zeros_diff_cols, compare_blocks_rows)
mul(add(mul(mul(add(compare_blocks_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(ones_diff_cols, zeros_diff_cols), add(zeros_diff_cols, zeros_diff_rows))), add(add(add(ones_diff_rows, ones_diff_cols), mul(zeros_diff_cols, compare_blocks_cols)), mul(mul(compare_blocks_rows, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)))), mul(add(ones_diff_rows, compare_blocks_cols), mul(add(mul(ones_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(zeros_diff_rows, ones_diff_rows)))))
add(ones_diff_cols, mul(mul(add(zeros_diff_rows, zeros_diff_rows), ones_diff_rows), add(ones_diff_rows, mul(ones_diff_cols, compare_blocks_cols))))
add(add(mul(compare_blocks_cols, ones_diff_rows), add(zeros_diff_rows, compare_blocks_rows)), add(mul(zeros_diff_rows, zeros_diff_cols), mul(ones_diff_rows, compare_blocks_rows)))
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), mul(zeros_diff_rows, compare_blocks_rows)), mul(add(add(compare_blocks_cols, compare_blocks_cols), ones_diff_rows), compare_blocks_rows))
COND TREES:
ge(max_col_clue, _if_then_else(le(compare_blocks_rows, ones_diff_cols), _if_then_else(True, max_col_clue, _if_then_else(and_(True, True), _if_then_else(False, 4, compare_blocks_cols), _if_then_else(True, _if_then_else(ge(_if_then_else(False, 3, max_col_clue), 4), 3, 0), compare_blocks_cols))), _if_then_else(ge(_if_then_else(False, 3, max_col_clue), 4), max_row_clue, max_row_clue)))
and_(le(0, _if_then_else(or_(False, False), compare_blocks_cols, compare_blocks_rows)), and_(ge(4, max_col_clue), or_(or_(False, False), le(3, _if_then_else(le(0, 1), _if_then_else(False, compare_blocks_rows, compare_blocks_rows), _if_then_else(True, max_row_clue, 2))))))
and_(le(_if_then_else(ge(_if_then_else(False, 3, zeros_diff_cols), _if_then_else(False, 1, max_col_clue)), _if_then_else(and_(True, False), compare_blocks_rows, _if_then_else(True, 3, max_row_clue)), _if_then_else(le(compare_blocks_rows, 2), _if_then_else(True, 3, zeros_diff_rows), _if_then_else(True, zeros_diff_rows, 4))), _if_then_else(ge(_if_then_else(True, 0, max_col_clue), _if_then_else(True, 2, 3)), _if_then_else(or_(False, True), _if_then_else(True, 2, 2), _if_then_else(False, 2, ones_diff_cols)), _if_then_else(ge(0, zeros_diff_rows), _if_then_else(False, 4, 1), _if_then_else(False, ones_diff_rows, 0)))), ge(_if_then_else(or_(or_(False, False), and_(False, False)), _if_then_else(and_(False, False), _if_then_else(True, compare_blocks_cols, 3), _if_then_else(True, 1, max_col_clue)), max_col_clue), _if_then_else(and_(and_(True, True), ge(3, 4)), _if_then_else(le(3, 4), _if_then_else(False, 3, 0), _if_then_else(True, 2, compare_blocks_cols)), _if_then_else(and_(False, False), _if_then_else(le(zeros_diff_cols, ones_diff_cols), 2, 0), _if_then_else(False, max_col_clue, 1)))))
le(_if_then_else(ge(_if_then_else(ge(2, zeros_diff_rows), _if_then_else(True, 1, zeros_diff_rows), _if_then_else(True, compare_blocks_cols, zeros_diff_cols)), _if_then_else(or_(True, True), _if_then_else(True, ones_diff_rows, max_col_clue), _if_then_else(False, ones_diff_cols, 0))), _if_then_else(le(_if_then_else(True, max_row_clue, ones_diff_cols), _if_then_else(True, 2, zeros_diff_cols)), _if_then_else(le(1, ones_diff_cols), _if_then_else(True, 1, max_row_clue), _if_then_else(True, ones_diff_cols, zeros_diff_cols)), _if_then_else(and_(False, True), _if_then_else(True, 4, ones_diff_rows), _if_then_else(False, ones_diff_rows, 4))), _if_then_else(and_(ge(compare_blocks_rows, 2), or_(False, True)), _if_then_else(le(max_col_clue, max_row_clue), _if_then_else(False, ones_diff_rows, ones_diff_rows), _if_then_else(False, 4, 0)), _if_then_else(ge(2, 4), _if_then_else(True, max_col_clue, compare_blocks_cols), _if_then_else(True, compare_blocks_cols, compare_blocks_cols)))), _if_then_else(or_(or_(or_(False, False), or_(False, True)), or_(le(compare_blocks_cols, zeros_diff_cols), or_(True, True))), _if_then_else(ge(_if_then_else(True, 2, compare_blocks_cols), _if_then_else(True, zeros_diff_rows, 4)), _if_then_else(ge(zeros_diff_cols, compare_blocks_cols), _if_then_else(False, max_col_clue, ones_diff_rows), _if_then_else(False, ones_diff_cols, compare_blocks_cols)), _if_then_else(le(4, zeros_diff_rows), _if_then_else(False, zeros_diff_rows, zeros_diff_cols), _if_then_else(False, compare_blocks_cols, 1))), _if_then_else(ge(_if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(False, 2, max_col_clue)), _if_then_else(le(0, 3), _if_then_else(True, 3, 0), _if_then_else(False, zeros_diff_cols, zeros_diff_rows)), _if_then_else(le(ones_diff_rows, ones_diff_rows), _if_then_else(True, 1, 1), _if_then_else(True, 3, max_col_clue)))))
ge(_if_then_else(ge(zeros_diff_cols, ones_diff_rows), _if_then_else(False, ones_diff_cols, 1), _if_then_else(and_(True, True), _if_then_else(False, compare_blocks_rows, compare_blocks_rows), _if_then_else(True, 4, 3))), _if_then_else(False, compare_blocks_cols, _if_then_else(or_(le(compare_blocks_rows, ones_diff_cols), True), ones_diff_rows, zeros_diff_cols)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_cols, compare_blocks_cols)), add(add(zeros_diff_cols, ones_diff_cols), add(zeros_diff_cols, ones_diff_cols)))
add(zeros_diff_cols, compare_blocks_rows)
mul(add(mul(mul(add(compare_blocks_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(ones_diff_cols, zeros_diff_cols), add(zeros_diff_cols, zeros_diff_rows))), add(add(add(ones_diff_rows, ones_diff_cols), mul(zeros_diff_cols, compare_blocks_cols)), mul(mul(compare_blocks_rows, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)))), mul(add(ones_diff_rows, compare_blocks_cols), mul(add(mul(ones_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(zeros_diff_rows, ones_diff_rows)))))
add(add(add(compare_blocks_cols, zeros_diff_cols), add(compare_blocks_rows, ones_diff_cols)), mul(mul(add(zeros_diff_rows, zeros_diff_rows), ones_diff_rows), add(ones_diff_rows, mul(ones_diff_cols, compare_blocks_cols))))
add(add(mul(compare_blocks_cols, ones_diff_rows), add(zeros_diff_rows, compare_blocks_rows)), add(mul(zeros_diff_rows, zeros_diff_cols), mul(ones_diff_rows, compare_blocks_rows)))
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), mul(zeros_diff_rows, compare_blocks_rows)), mul(add(add(compare_blocks_cols, compare_blocks_cols), ones_diff_rows), compare_blocks_rows))
COND TREES:
ge(_if_then_else(le(1, ones_diff_cols), _if_then_else(False, _if_then_else(True, 2, 0), _if_then_else(False, max_col_clue, zeros_diff_rows)), _if_then_else(True, max_row_clue, zeros_diff_cols)), _if_then_else(or_(False, True), _if_then_else(True, max_col_clue, _if_then_else(and_(True, True), _if_then_else(False, 4, compare_blocks_cols), _if_then_else(True, ones_diff_rows, compare_blocks_cols))), _if_then_else(ge(_if_then_else(False, 3, max_col_clue), 4), max_row_clue, max_row_clue)))
and_(le(_if_then_else(or_(False, False), ones_diff_cols, 4), _if_then_else(or_(False, False), compare_blocks_cols, compare_blocks_rows)), and_(le(1, 2), or_(or_(False, False), le(3, zeros_diff_cols))))
and_(le(_if_then_else(True, 3, compare_blocks_rows), _if_then_else(ge(_if_then_else(True, 0, max_col_clue), _if_then_else(True, 2, 3)), _if_then_else(or_(False, True), _if_then_else(True, 2, 2), _if_then_else(False, 2, ones_diff_cols)), _if_then_else(ge(0, zeros_diff_rows), _if_then_else(True, compare_blocks_cols, zeros_diff_cols), _if_then_else(False, ones_diff_rows, 0)))), ge(_if_then_else(True, _if_then_else(and_(False, False), _if_then_else(True, compare_blocks_cols, 3), _if_then_else(True, 1, max_col_clue)), 3), _if_then_else(and_(and_(True, True), ge(3, 4)), _if_then_else(le(3, 4), _if_then_else(False, 3, 0), _if_then_else(True, 2, compare_blocks_cols)), _if_then_else(and_(False, False), _if_then_else(False, 2, 0), _if_then_else(False, max_col_clue, 1)))))
le(_if_then_else(ge(_if_then_else(ge(2, zeros_diff_rows), _if_then_else(True, 1, zeros_diff_rows), _if_then_else(True, compare_blocks_cols, zeros_diff_cols)), _if_then_else(or_(True, True), _if_then_else(and_(and_(True, True), or_(False, False)), ones_diff_rows, max_col_clue), _if_then_else(False, ones_diff_cols, 0))), _if_then_else(le(_if_then_else(True, max_row_clue, ones_diff_cols), _if_then_else(True, 2, zeros_diff_cols)), _if_then_else(le(1, ones_diff_cols), _if_then_else(True, 1, max_row_clue), ones_diff_cols), _if_then_else(and_(False, True), _if_then_else(True, 4, ones_diff_rows), _if_then_else(False, ones_diff_rows, 4))), _if_then_else(and_(ge(compare_blocks_rows, 2), or_(False, True)), _if_then_else(le(max_col_clue, max_row_clue), _if_then_else(False, ones_diff_rows, ones_diff_rows), _if_then_else(False, 4, 0)), _if_then_else(ge(2, 4), _if_then_else(True, max_col_clue, compare_blocks_cols), _if_then_else(True, compare_blocks_cols, compare_blocks_cols)))), _if_then_else(or_(or_(or_(False, False), or_(False, True)), or_(le(compare_blocks_cols, zeros_diff_cols), or_(True, True))), _if_then_else(ge(_if_then_else(True, 2, compare_blocks_cols), _if_then_else(True, zeros_diff_rows, 4)), _if_then_else(ge(zeros_diff_cols, compare_blocks_cols), _if_then_else(False, max_col_clue, ones_diff_rows), _if_then_else(False, ones_diff_cols, compare_blocks_cols)), _if_then_else(le(4, zeros_diff_rows), _if_then_else(False, zeros_diff_rows, zeros_diff_cols), _if_then_else(False, compare_blocks_cols, 1))), _if_then_else(ge(_if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(False, 2, max_col_clue)), _if_then_else(le(0, 3), _if_then_else(True, 3, 0), _if_then_else(False, zeros_diff_cols, zeros_diff_rows)), _if_then_else(le(ones_diff_rows, ones_diff_rows), _if_then_else(True, 1, 1), _if_then_else(True, 3, max_col_clue)))))
ge(_if_then_else(ge(zeros_diff_cols, ones_diff_rows), _if_then_else(False, ones_diff_cols, 1), _if_then_else(False, ones_diff_rows, 0)), _if_then_else(le(compare_blocks_rows, ones_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_cols), _if_then_else(True, ones_diff_rows, zeros_diff_cols)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_cols, compare_blocks_cols)), add(add(zeros_diff_cols, ones_diff_cols), add(zeros_diff_cols, ones_diff_cols)))
add(zeros_diff_cols, compare_blocks_rows)
mul(add(mul(mul(add(compare_blocks_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(ones_diff_cols, zeros_diff_cols), add(zeros_diff_cols, zeros_diff_rows))), add(add(add(ones_diff_rows, ones_diff_cols), mul(zeros_diff_cols, compare_blocks_cols)), mul(mul(compare_blocks_rows, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)))), mul(add(ones_diff_rows, compare_blocks_cols), mul(add(mul(ones_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(zeros_diff_rows, ones_diff_rows)))))
add(add(add(compare_blocks_cols, zeros_diff_cols), add(compare_blocks_rows, ones_diff_cols)), mul(mul(add(zeros_diff_rows, zeros_diff_rows), ones_diff_rows), add(ones_diff_rows, mul(ones_diff_cols, compare_blocks_cols))))
add(add(mul(compare_blocks_cols, ones_diff_rows), add(zeros_diff_rows, compare_blocks_rows)), add(mul(zeros_diff_rows, zeros_diff_cols), mul(ones_diff_rows, compare_blocks_rows)))
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), mul(zeros_diff_rows, compare_blocks_rows)), mul(add(add(compare_blocks_cols, compare_blocks_cols), ones_diff_rows), compare_blocks_rows))
COND TREES:
ge(_if_then_else(le(1, ones_diff_cols), _if_then_else(False, _if_then_else(True, 2, 0), _if_then_else(False, max_col_clue, zeros_diff_rows)), _if_then_else(True, max_row_clue, zeros_diff_cols)), _if_then_else(True, _if_then_else(True, max_col_clue, _if_then_else(and_(True, True), _if_then_else(False, 4, compare_blocks_cols), _if_then_else(True, ones_diff_rows, compare_blocks_cols))), _if_then_else(ge(_if_then_else(False, 3, max_col_clue), 4), max_row_clue, max_row_clue)))
and_(le(_if_then_else(or_(False, False), ones_diff_cols, 4), _if_then_else(or_(False, False), compare_blocks_cols, compare_blocks_rows)), and_(le(1, 2), or_(or_(False, False), le(3, zeros_diff_cols))))
and_(le(_if_then_else(True, 3, compare_blocks_rows), _if_then_else(ge(_if_then_else(True, 0, max_col_clue), _if_then_else(True, 2, 3)), _if_then_else(or_(False, True), _if_then_else(True, 2, 2), _if_then_else(False, 2, ones_diff_cols)), _if_then_else(ge(0, zeros_diff_rows), _if_then_else(True, compare_blocks_cols, zeros_diff_cols), _if_then_else(False, ones_diff_rows, 0)))), ge(_if_then_else(True, _if_then_else(and_(False, False), _if_then_else(True, compare_blocks_cols, 3), _if_then_else(True, 1, max_col_clue)), 3), _if_then_else(and_(and_(True, True), ge(3, 4)), _if_then_else(le(3, 4), _if_then_else(False, 3, 0), _if_then_else(True, 2, compare_blocks_cols)), _if_then_else(and_(False, False), _if_then_else(False, 2, 0), _if_then_else(False, max_col_clue, 1)))))
le(_if_then_else(ge(_if_then_else(ge(2, zeros_diff_rows), _if_then_else(True, 1, zeros_diff_rows), _if_then_else(True, compare_blocks_cols, zeros_diff_cols)), _if_then_else(or_(True, True), _if_then_else(True, ones_diff_rows, max_col_clue), _if_then_else(False, ones_diff_cols, 0))), _if_then_else(le(_if_then_else(True, max_row_clue, ones_diff_cols), _if_then_else(True, 2, zeros_diff_cols)), _if_then_else(le(1, ones_diff_cols), _if_then_else(True, 1, max_row_clue), ones_diff_cols), _if_then_else(and_(False, True), _if_then_else(True, 4, ones_diff_rows), _if_then_else(False, ones_diff_rows, 4))), _if_then_else(and_(ge(compare_blocks_rows, 2), or_(False, True)), _if_then_else(le(max_col_clue, max_row_clue), _if_then_else(False, ones_diff_rows, ones_diff_rows), _if_then_else(False, 4, 0)), _if_then_else(ge(2, 4), _if_then_else(True, max_col_clue, compare_blocks_cols), _if_then_else(True, compare_blocks_cols, compare_blocks_cols)))), _if_then_else(or_(or_(or_(False, False), or_(False, True)), or_(le(compare_blocks_cols, zeros_diff_cols), or_(True, True))), _if_then_else(ge(_if_then_else(True, 2, compare_blocks_cols), _if_then_else(True, zeros_diff_rows, 4)), _if_then_else(ge(zeros_diff_cols, compare_blocks_cols), _if_then_else(False, max_col_clue, ones_diff_rows), _if_then_else(False, ones_diff_cols, compare_blocks_cols)), _if_then_else(le(4, zeros_diff_rows), _if_then_else(False, zeros_diff_rows, zeros_diff_cols), _if_then_else(False, compare_blocks_cols, 1))), _if_then_else(ge(_if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(False, 2, max_col_clue)), _if_then_else(le(0, 3), _if_then_else(True, 3, 0), _if_then_else(False, zeros_diff_cols, zeros_diff_rows)), _if_then_else(le(ones_diff_rows, ones_diff_rows), _if_then_else(True, 1, 1), _if_then_else(True, 3, max_col_clue)))))
ge(_if_then_else(ge(zeros_diff_cols, ones_diff_rows), _if_then_else(False, ones_diff_cols, 1), _if_then_else(False, 4, 0)), _if_then_else(le(compare_blocks_rows, ones_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_cols), _if_then_else(True, ones_diff_rows, zeros_diff_cols)))
VAL TREES:
mul(mul(mul(compare_blocks_rows, ones_diff_cols), mul(compare_blocks_cols, compare_blocks_cols)), add(add(zeros_diff_cols, ones_diff_cols), add(zeros_diff_cols, ones_diff_cols)))
add(ones_diff_rows, compare_blocks_rows)
mul(add(mul(mul(add(compare_blocks_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(ones_diff_cols, zeros_diff_cols), add(zeros_diff_cols, zeros_diff_rows))), add(add(add(ones_diff_rows, ones_diff_cols), mul(zeros_diff_cols, compare_blocks_cols)), mul(mul(compare_blocks_rows, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)))), mul(add(ones_diff_rows, compare_blocks_cols), mul(add(mul(ones_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(zeros_diff_rows, ones_diff_rows)))))
add(add(add(compare_blocks_cols, zeros_diff_cols), add(compare_blocks_rows, ones_diff_cols)), mul(mul(add(zeros_diff_rows, zeros_diff_rows), ones_diff_rows), add(ones_diff_rows, mul(ones_diff_cols, compare_blocks_cols))))
add(add(mul(compare_blocks_cols, ones_diff_rows), add(zeros_diff_rows, compare_blocks_rows)), add(mul(zeros_diff_rows, zeros_diff_cols), mul(ones_diff_rows, compare_blocks_rows)))
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), mul(zeros_diff_rows, compare_blocks_rows)), mul(add(add(compare_blocks_cols, compare_blocks_cols), ones_diff_rows), compare_blocks_rows))
COND TREES:
ge(_if_then_else(le(1, ones_diff_cols), _if_then_else(False, _if_then_else(True, _if_then_else(True, ones_diff_rows, compare_blocks_cols), 0), _if_then_else(False, max_col_clue, zeros_diff_rows)), _if_then_else(True, max_row_clue, zeros_diff_cols)), _if_then_else(True, _if_then_else(True, max_col_clue, _if_then_else(and_(True, True), _if_then_else(False, 4, compare_blocks_cols), _if_then_else(True, ones_diff_rows, compare_blocks_cols))), _if_then_else(ge(_if_then_else(False, 3, max_col_clue), 4), max_row_clue, _if_then_else(le(1, ones_diff_cols), _if_then_else(False, _if_then_else(True, _if_then_else(True, ones_diff_rows, compare_blocks_cols), 0), _if_then_else(False, max_col_clue, zeros_diff_rows)), _if_then_else(True, max_row_clue, zeros_diff_cols)))))
and_(le(_if_then_else(ge(compare_blocks_rows, compare_blocks_rows), ones_diff_cols, 4), _if_then_else(le(_if_then_else(or_(ge(max_row_clue, max_row_clue), ge(4, max_col_clue)), ones_diff_cols, 4), _if_then_else(or_(False, False), compare_blocks_cols, compare_blocks_rows)), compare_blocks_cols, compare_blocks_rows)), or_(False, or_(False, False)))
and_(le(_if_then_else(ge(_if_then_else(False, 3, zeros_diff_cols), _if_then_else(False, 1, max_col_clue)), _if_then_else(and_(True, False), _if_then_else(True, ones_diff_cols, 3), _if_then_else(True, 3, max_row_clue)), _if_then_else(le(compare_blocks_rows, 2), _if_then_else(True, 3, zeros_diff_rows), _if_then_else(True, zeros_diff_rows, 4))), _if_then_else(ge(_if_then_else(True, 0, max_col_clue), _if_then_else(True, 2, 3)), _if_then_else(or_(False, True), _if_then_else(True, 2, 2), _if_then_else(False, 2, ones_diff_cols)), _if_then_else(ge(0, zeros_diff_rows), _if_then_else(True, compare_blocks_cols, zeros_diff_cols), _if_then_else(False, ones_diff_rows, 0)))), ge(_if_then_else(or_(or_(False, False), and_(False, False)), _if_then_else(and_(False, False), _if_then_else(True, compare_blocks_cols, 3), _if_then_else(True, 1, max_col_clue)), 3), _if_then_else(and_(and_(True, True), ge(3, 4)), _if_then_else(le(3, 4), _if_then_else(False, 3, 0), _if_then_else(True, 2, compare_blocks_cols)), _if_then_else(and_(False, False), _if_then_else(False, 2, compare_blocks_rows), _if_then_else(False, max_col_clue, 1)))))
le(_if_then_else(ge(_if_then_else(ge(2, zeros_diff_rows), _if_then_else(True, 1, zeros_diff_rows), _if_then_else(True, compare_blocks_cols, zeros_diff_cols)), _if_then_else(or_(True, True), _if_then_else(True, ones_diff_rows, max_col_clue), _if_then_else(False, ones_diff_cols, 0))), _if_then_else(le(_if_then_else(True, max_row_clue, ones_diff_cols), _if_then_else(True, 2, zeros_diff_cols)), _if_then_else(le(1, ones_diff_cols), _if_then_else(True, 1, max_row_clue), ones_diff_cols), _if_then_else(and_(False, True), _if_then_else(True, 4, ones_diff_rows), _if_then_else(False, ones_diff_rows, 4))), _if_then_else(and_(ge(compare_blocks_rows, 2), or_(False, True)), _if_then_else(le(max_col_clue, max_row_clue), 1, _if_then_else(False, 4, 0)), _if_then_else(ge(2, 4), _if_then_else(True, max_col_clue, compare_blocks_cols), _if_then_else(True, compare_blocks_cols, compare_blocks_cols)))), _if_then_else(or_(or_(or_(False, False), or_(False, True)), or_(le(compare_blocks_cols, zeros_diff_cols), or_(True, True))), _if_then_else(ge(_if_then_else(True, 2, compare_blocks_cols), _if_then_else(True, zeros_diff_rows, 4)), _if_then_else(ge(zeros_diff_cols, compare_blocks_cols), _if_then_else(False, max_col_clue, ones_diff_rows), _if_then_else(False, ones_diff_cols, compare_blocks_cols)), _if_then_else(le(4, zeros_diff_rows), _if_then_else(False, zeros_diff_rows, zeros_diff_cols), _if_then_else(False, compare_blocks_cols, 1))), _if_then_else(ge(_if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(False, 2, max_col_clue)), _if_then_else(le(0, 3), _if_then_else(True, 3, 0), _if_then_else(False, zeros_diff_cols, zeros_diff_rows)), _if_then_else(le(ones_diff_rows, ones_diff_rows), _if_then_else(True, 1, 1), _if_then_else(True, 3, max_col_clue)))))
ge(_if_then_else(ge(zeros_diff_cols, ones_diff_rows), _if_then_else(False, ones_diff_cols, 1), _if_then_else(False, 4, 0)), _if_then_else(le(compare_blocks_rows, ones_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_cols), _if_then_else(False, ones_diff_rows, zeros_diff_cols)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_cols, compare_blocks_cols)), add(add(zeros_diff_cols, ones_diff_cols), add(zeros_diff_cols, add(mul(zeros_diff_cols, ones_diff_rows), add(zeros_diff_rows, ones_diff_cols)))))
add(zeros_diff_cols, compare_blocks_rows)
mul(add(mul(mul(add(compare_blocks_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(ones_diff_cols, zeros_diff_cols), add(zeros_diff_cols, zeros_diff_rows))), add(add(add(ones_diff_rows, ones_diff_cols), mul(zeros_diff_cols, compare_blocks_cols)), mul(mul(compare_blocks_rows, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)))), mul(add(ones_diff_rows, compare_blocks_cols), mul(add(mul(ones_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(zeros_diff_rows, ones_diff_rows)))))
add(add(add(compare_blocks_cols, zeros_diff_cols), add(compare_blocks_rows, ones_diff_cols)), mul(mul(add(zeros_diff_rows, zeros_diff_rows), ones_diff_rows), add(ones_diff_rows, mul(ones_diff_cols, compare_blocks_cols))))
add(add(mul(compare_blocks_cols, ones_diff_rows), add(zeros_diff_rows, compare_blocks_rows)), add(mul(zeros_diff_rows, zeros_diff_cols), mul(ones_diff_rows, compare_blocks_rows)))
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), mul(zeros_diff_rows, compare_blocks_rows)), mul(add(mul(mul(ones_diff_rows, ones_diff_cols), add(zeros_diff_rows, ones_diff_cols)), ones_diff_rows), compare_blocks_rows))
COND TREES:
ge(max_row_clue, _if_then_else(True, _if_then_else(True, max_col_clue, _if_then_else(and_(True, True), _if_then_else(False, 4, compare_blocks_cols), _if_then_else(True, ones_diff_rows, compare_blocks_cols))), _if_then_else(ge(_if_then_else(False, 3, max_col_clue), 4), max_row_clue, max_row_clue)))
and_(le(_if_then_else(ge(compare_blocks_rows, compare_blocks_rows), ones_diff_cols, 4), _if_then_else(le(_if_then_else(or_(ge(max_row_clue, max_row_clue), ge(4, max_col_clue)), ones_diff_cols, 4), _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), compare_blocks_cols, compare_blocks_rows)), or_(False, False))
and_(le(_if_then_else(ge(_if_then_else(False, 3, zeros_diff_cols), _if_then_else(False, 1, max_col_clue)), _if_then_else(and_(True, False), _if_then_else(True, ones_diff_cols, 3), _if_then_else(True, 3, max_row_clue)), _if_then_else(le(compare_blocks_rows, 2), _if_then_else(True, 3, zeros_diff_rows), _if_then_else(True, zeros_diff_rows, 4))), _if_then_else(ge(_if_then_else(True, 0, max_col_clue), _if_then_else(True, 2, 3)), _if_then_else(or_(False, True), _if_then_else(True, 2, 2), _if_then_else(False, 2, ones_diff_cols)), _if_then_else(ge(0, zeros_diff_rows), _if_then_else(True, compare_blocks_cols, zeros_diff_cols), _if_then_else(False, ones_diff_rows, 0)))), ge(_if_then_else(or_(or_(False, False), and_(False, False)), _if_then_else(and_(False, False), _if_then_else(True, compare_blocks_cols, 3), _if_then_else(True, 1, max_col_clue)), 3), _if_then_else(and_(and_(True, True), ge(3, 4)), _if_then_else(le(3, 4), _if_then_else(False, 3, 0), _if_then_else(True, 2, compare_blocks_cols)), _if_then_else(and_(False, False), _if_then_else(False, 2, compare_blocks_rows), _if_then_else(False, max_col_clue, 1)))))
le(_if_then_else(ge(_if_then_else(ge(2, zeros_diff_rows), _if_then_else(True, 1, zeros_diff_rows), _if_then_else(True, compare_blocks_cols, zeros_diff_cols)), _if_then_else(or_(True, True), _if_then_else(True, ones_diff_rows, max_col_clue), _if_then_else(False, ones_diff_cols, 0))), _if_then_else(le(_if_then_else(True, max_row_clue, ones_diff_cols), _if_then_else(True, 2, zeros_diff_cols)), _if_then_else(le(1, ones_diff_cols), _if_then_else(True, 1, max_row_clue), ones_diff_cols), _if_then_else(and_(False, True), _if_then_else(True, 4, ones_diff_rows), _if_then_else(False, ones_diff_rows, 4))), _if_then_else(and_(ge(compare_blocks_rows, 2), or_(False, True)), _if_then_else(le(max_col_clue, max_row_clue), 1, _if_then_else(False, 4, 0)), _if_then_else(ge(2, 4), _if_then_else(True, max_col_clue, compare_blocks_cols), _if_then_else(True, compare_blocks_cols, compare_blocks_cols)))), _if_then_else(or_(or_(or_(False, False), or_(False, True)), or_(le(compare_blocks_cols, zeros_diff_cols), or_(True, True))), _if_then_else(ge(_if_then_else(True, 2, compare_blocks_cols), _if_then_else(True, zeros_diff_rows, 4)), _if_then_else(ge(zeros_diff_cols, compare_blocks_cols), _if_then_else(False, max_col_clue, ones_diff_rows), _if_then_else(False, ones_diff_cols, compare_blocks_cols)), _if_then_else(le(4, zeros_diff_rows), _if_then_else(False, zeros_diff_rows, zeros_diff_cols), _if_then_else(False, compare_blocks_cols, 1))), _if_then_else(ge(_if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(False, 2, max_col_clue)), _if_then_else(le(0, 3), _if_then_else(True, 3, 0), _if_then_else(False, zeros_diff_cols, zeros_diff_rows)), _if_then_else(le(ones_diff_rows, ones_diff_rows), _if_then_else(True, 1, 1), _if_then_else(True, 3, max_col_clue)))))
ge(_if_then_else(ge(zeros_diff_cols, ones_diff_rows), _if_then_else(False, ones_diff_cols, 1), _if_then_else(False, 4, 0)), _if_then_else(le(compare_blocks_rows, ones_diff_cols), _if_then_else(True, ones_diff_rows, ones_diff_cols), _if_then_else(False, ones_diff_rows, zeros_diff_cols)))
VAL TREES:
mul(mul(mul(zeros_diff_cols, ones_diff_cols), mul(compare_blocks_cols, compare_blocks_cols)), add(add(zeros_diff_cols, ones_diff_cols), add(zeros_diff_cols, add(mul(zeros_diff_cols, ones_diff_rows), add(zeros_diff_rows, ones_diff_cols)))))
add(zeros_diff_cols, compare_blocks_rows)
mul(add(mul(mul(add(compare_blocks_rows, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(ones_diff_cols, zeros_diff_cols), add(zeros_diff_cols, zeros_diff_rows))), add(add(add(ones_diff_rows, ones_diff_cols), mul(zeros_diff_cols, compare_blocks_cols)), mul(mul(compare_blocks_rows, compare_blocks_cols), add(compare_blocks_rows, zeros_diff_cols)))), mul(add(ones_diff_rows, compare_blocks_cols), mul(add(mul(ones_diff_cols, zeros_diff_cols), add(ones_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_rows, ones_diff_cols), add(zeros_diff_rows, ones_diff_rows)))))
add(add(add(compare_blocks_cols, zeros_diff_cols), add(compare_blocks_rows, ones_diff_cols)), mul(mul(add(zeros_diff_rows, zeros_diff_rows), ones_diff_rows), add(ones_diff_rows, mul(ones_diff_cols, compare_blocks_cols))))
add(add(mul(compare_blocks_cols, ones_diff_rows), add(zeros_diff_rows, compare_blocks_rows)), add(mul(zeros_diff_rows, zeros_diff_cols), mul(ones_diff_rows, compare_blocks_rows)))
mul(mul(mul(zeros_diff_cols, zeros_diff_rows), mul(zeros_diff_rows, compare_blocks_rows)), mul(add(mul(mul(ones_diff_rows, ones_diff_cols), add(zeros_diff_rows, ones_diff_cols)), ones_diff_rows), compare_blocks_rows))


INFO:root:hof: COND TREES:
or_(or_(or_(le(0, ones_diff_rows), or_(True, True)), or_(or_(False, False), le(zeros_diff_cols, zeros_diff_cols))), le(_if_then_else(ge(2, 0), _if_then_else(False, ones_diff_cols, max_col_clue), _if_then_else(True, ones_diff_rows, zeros_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, zeros_diff_rows, zeros_diff_rows), _if_then_else(True, ones_diff_rows, zeros_diff_rows))))
le(_if_then_else(and_(True, True), _if_then_else(True, compare_blocks_rows, 2), _if_then_else(True, ones_diff_rows, 0)), _if_then_else(le(zeros_diff_cols, compare_blocks_cols), _if_then_else(False, 0, zeros_diff_rows), _if_then_else(False, 0, max_col_clue)))
and_(ge(_if_then_else(True, zeros_diff_rows, ones_diff_rows), _if_then_else(True, _if_then_else(False, compare_blocks_cols, compare_blocks_cols), _if_then_else(True, ones_diff_cols, zeros_diff_rows))), ge(_if_then_else(False, ones_diff_rows, 2), _if_then_else(True, ones_diff_rows, zeros_diff_rows)))
and_(ge(_if_then_else(or_(False, True), _if_then_else(True, ones_diff_rows, zeros_diff_rows), _if_then_else(True, 1, max_col_clue)), _if_then_else(or_(True, True), _if_then_else(False, zeros_diff_cols, max_row_clue), _if_then_else(True, 3, ones_diff_cols))), le(_if_then_else(le(compare_blocks_rows, compare_blocks_cols), _if_then_else(False, zeros_diff_rows, zeros_diff_cols), _if_then_else(True, max_row_clue, 3)), _if_then_else(or_(False, False), _if_then_else(True, max_row_clue, 0), _if_then_else(False, 4, ones_diff_cols))))
or_(ge(_if_then_else(or_(False, True), compare_blocks_cols, ones_diff_rows), _if_then_else(ge(ones_diff_cols, _if_then_else(False, compare_blocks_cols, max_row_clue)), _if_then_else(False, ones_diff_rows, 4), _if_then_else(False, _if_then_else(True, 1, compare_blocks_cols), _if_then_else(False, zeros_diff_cols, max_col_clue)))), le(_if_then_else(False, ones_diff_rows, ones_diff_cols), _if_then_else(True, 4, ones_diff_cols)))
VAL TREES:
add(add(mul(zeros_diff_cols, compare_blocks_rows), add(compare_blocks_rows, compare_blocks_rows)), add(mul(zeros_diff_rows, compare_blocks_rows), mul(ones_diff_rows, zeros_diff_cols)))
add(add(mul(ones_diff_cols, zeros_diff_cols), add(compare_blocks_rows, ones_diff_rows)), add(add(zeros_diff_rows, compare_blocks_cols), add(ones_diff_cols, compare_blocks_cols)))
mul(add(add(zeros_diff_rows, compare_blocks_rows), mul(compare_blocks_cols, ones_diff_rows)), add(mul(zeros_diff_cols, ones_diff_cols), add(zeros_diff_rows, zeros_diff_rows)))
mul(mul(mul(compare_blocks_cols, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_cols)), mul(mul(compare_blocks_rows, zeros_diff_cols), add(compare_blocks_rows, compare_blocks_cols)))
add(add(mul(zeros_diff_rows, ones_diff_rows), mul(ones_diff_cols, zeros_diff_cols)), mul(mul(zeros_diff_rows, ones_diff_cols), add(ones_diff_rows, ones_diff_cols)))
add(mul(add(zeros_diff_cols, zeros_diff_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(add(zeros_diff_cols, compare_blocks_rows), mul(compare_blocks_rows, compare_blocks_rows)))


INFO:root:stats: {'fitness': <deap.tools.support.Statistics object at 0x0000025CF9E4CA90>, 'size': <deap.tools.support.Statistics object at 0x0000025CF9E4CAC8>}

