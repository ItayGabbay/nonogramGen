INFO:root:

*******STARTING!!!******


INFO:root:

*******Configuration******


INFO:root:# NUM_ROWS = 20


INFO:root:NUM_ROWS = 5


INFO:root:# NUM_COLS = 20


INFO:root:NUM_COLS = 5


INFO:root:empty_in_split = '\xa0'


INFO:root:


INFO:root:pickle_unsolved_file_path = 'data/%dx%d_nonograms.pkl' % (NUM_ROWS, NUM_COLS)


INFO:root:pickle_solved_file_path = 'data/%dx%d_nonograms_solved.pkl' % (NUM_ROWS, NUM_COLS)


INFO:root:should_run_in_parallel = True


INFO:root:


INFO:root:NUM_COND_TREES = 5


INFO:root:NUM_VAL_TREES = NUM_COND_TREES + 1


INFO:root:prob_crossover_global = 0.7  # global probability for cx


INFO:root:prob_crossover_individual_cond = 0.8  # probability to cx a specific cond tree in an individual


INFO:root:prob_crossover_individual_val = 0.8  # probability to cx a specific cond tree in an individual


INFO:root:prob_mutate_global = 0.2


INFO:root:prob_mutate_individual_cond = 0.5


INFO:root:prob_mutate_individual_val = 0.5


INFO:root:


INFO:root:points_correct_box = 5


INFO:root:points_incorrect_box = 0


INFO:root:# points_incorrect_box = -2


INFO:root:pop_size = 2


INFO:root:hof_size = 1


INFO:root:# num_gen = 40


INFO:root:num_gen = 10


INFO:root:train_size = 3


INFO:root:

*******DONE!!!******


INFO:root:run time: 4 sec

INFO:root:max possible fitness for the nonograms ran: 80

INFO:root:log:    	      	          fitness          	            size           
   	      	---------------------------	---------------------------
gen	nevals	avg    	max    	min    	std	avg 	max	min	std
0  	2     	48.3333	48.3333	48.3333	0  	7   	7  	7  	0  
1  	2     	48.3333	48.3333	48.3333	0  	8   	9  	7  	1  
2  	2     	48.3333	48.3333	48.3333	0  	10  	11 	9  	1  
3  	2     	48.3333	48.3333	48.3333	0  	10  	11 	9  	1  
4  	2     	48.3333	48.3333	48.3333	0  	12  	12 	12 	0  
5  	0     	48.3333	48.3333	48.3333	0  	12  	12 	12 	0  
6  	1     	48.3333	48.3333	48.3333	0  	12  	12 	12 	0  
7  	2     	48.3333	48.3333	48.3333	0  	12.5	13 	12 	0.5
8  	2     	48.3333	48.3333	48.3333	0  	12.5	13 	12 	0.5
9  	0     	48.3333	48.3333	48.3333	0  	12  	12 	12 	0  
10 	2     	48.3333	48.3333	48.3333	0  	12.5	13 	12 	0.5

INFO:root:pop: COND TREES:
or_(ge(_if_then_else(False, _if_then_else(False, compare_blocks_cols, zeros_diff_cols), 4), _if_then_else(le(1, 3), _if_then_else(le(_if_then_else(True, _if_then_else(False, zeros_diff_cols, 3), _if_then_else(True, 0, ones_diff_rows)), _if_then_else(False, _if_then_else(False, compare_blocks_rows, compare_blocks_rows), compare_blocks_cols)), ones_diff_rows, 0), zeros_diff_cols)), le(_if_then_else(True, _if_then_else(False, zeros_diff_cols, 3), _if_then_else(True, 0, ones_diff_rows)), _if_then_else(False, _if_then_else(False, compare_blocks_rows, compare_blocks_rows), compare_blocks_cols)))
or_(or_(and_(False, True), and_(and_(ge(4, ones_diff_cols), True), ge(ones_diff_cols, 2))), and_(and_(True, False), and_(True, False)))
le(_if_then_else(or_(ge(max_col_clue, compare_blocks_cols), ge(4, 1)), _if_then_else(and_(True, False), _if_then_else(True, 2, compare_blocks_rows), _if_then_else(True, compare_blocks_cols, _if_then_else(or_(ge(max_col_clue, compare_blocks_cols), ge(4, _if_then_else(False, max_col_clue, ones_diff_cols))), _if_then_else(and_(True, False), _if_then_else(True, 2, compare_blocks_rows), _if_then_else(True, compare_blocks_cols, ones_diff_cols)), _if_then_else(or_(True, False), _if_then_else(False, zeros_diff_cols, 1), _if_then_else(True, 4, 1))))), _if_then_else(or_(True, False), _if_then_else(False, zeros_diff_cols, _if_then_else(or_(True, False), _if_then_else(False, zeros_diff_cols, 1), _if_then_else(True, 4, 1))), _if_then_else(True, 4, 1))), _if_then_else(or_(ge(ones_diff_rows, 1), ge(max_row_clue, 2)), _if_then_else(and_(False, True), _if_then_else(True, 1, max_row_clue), _if_then_else(False, zeros_diff_rows, ones_diff_rows)), _if_then_else(le(compare_blocks_rows, ones_diff_rows), _if_then_else(False, max_col_clue, ones_diff_cols), _if_then_else(True, ones_diff_rows, 4))))
le(_if_then_else(le(ones_diff_rows, compare_blocks_cols), _if_then_else(True, 2, max_col_clue), _if_then_else(True, zeros_diff_rows, max_row_clue)), 4)
le(_if_then_else(True, _if_then_else(ge(ones_diff_rows, max_row_clue), ones_diff_rows, 3), _if_then_else(False, compare_blocks_rows, max_row_clue)), _if_then_else(and_(False, True), _if_then_else(and_(False, True), zeros_diff_rows, compare_blocks_rows), _if_then_else(ge(ones_diff_rows, zeros_diff_rows), ones_diff_rows, zeros_diff_cols)))
VAL TREES:
mul(mul(mul(add(add(ones_diff_cols, ones_diff_cols), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(ones_diff_rows, ones_diff_rows), add(compare_blocks_cols, ones_diff_cols))), add(mul(add(zeros_diff_rows, compare_blocks_rows), add(zeros_diff_cols, compare_blocks_cols)), add(add(ones_diff_cols, ones_diff_rows), add(compare_blocks_rows, compare_blocks_rows)))), add(add(add(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, compare_blocks_rows)), mul(mul(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_rows, ones_diff_cols))), add(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(zeros_diff_cols, zeros_diff_rows)), add(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_cols)))))
mul(mul(mul(add(compare_blocks_cols, compare_blocks_cols), add(zeros_diff_rows, ones_diff_rows)), add(mul(ones_diff_rows, ones_diff_rows), mul(zeros_diff_cols, ones_diff_rows))), mul(add(mul(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)), mul(mul(compare_blocks_rows, mul(mul(add(ones_diff_rows, compare_blocks_cols), add(zeros_diff_cols, compare_blocks_cols)), add(mul(zeros_diff_rows, ones_diff_cols), mul(compare_blocks_rows, ones_diff_rows)))), mul(zeros_diff_cols, zeros_diff_rows))))
add(mul(add(add(add(ones_diff_rows, ones_diff_rows), add(zeros_diff_cols, ones_diff_cols)), add(add(zeros_diff_cols, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows))), mul(mul(add(zeros_diff_cols, ones_diff_rows), mul(compare_blocks_cols, zeros_diff_rows)), add(mul(compare_blocks_rows, compare_blocks_rows), add(compare_blocks_cols, ones_diff_cols)))), mul(add(mul(add(ones_diff_rows, ones_diff_rows), add(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(ones_diff_cols, compare_blocks_rows))), mul(add(mul(ones_diff_cols, zeros_diff_rows), mul(ones_diff_cols, zeros_diff_rows)), add(mul(ones_diff_rows, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))))
mul(add(mul(mul(add(ones_diff_cols, compare_blocks_cols), zeros_diff_cols), compare_blocks_rows), add(ones_diff_cols, ones_diff_rows)), add(mul(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_cols, mul(mul(mul(mul(mul(ones_diff_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), add(mul(ones_diff_cols, ones_diff_cols), mul(zeros_diff_rows, ones_diff_rows))), mul(add(add(zeros_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)), mul(mul(zeros_diff_rows, compare_blocks_rows), add(ones_diff_cols, compare_blocks_rows)))), mul(add(mul(add(compare_blocks_rows, ones_diff_cols), mul(compare_blocks_cols, compare_blocks_rows)), mul(mul(ones_diff_rows, ones_diff_rows), mul(compare_blocks_rows, ones_diff_rows))), mul(mul(add(zeros_diff_cols, zeros_diff_cols), add(add(add(compare_blocks_cols, add(ones_diff_rows, ones_diff_cols)), mul(add(mul(compare_blocks_cols, ones_diff_cols), ones_diff_cols), ones_diff_rows)), mul(add(compare_blocks_rows, compare_blocks_cols), add(ones_diff_rows, compare_blocks_rows)))), add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows))))))), mul(zeros_diff_cols, compare_blocks_cols)))
add(add(add(zeros_diff_cols, ones_diff_rows), mul(ones_diff_cols, add(add(mul(ones_diff_cols, ones_diff_rows), add(compare_blocks_rows, zeros_diff_rows)), add(mul(zeros_diff_cols, ones_diff_cols), mul(ones_diff_rows, compare_blocks_rows))))), add(mul(add(zeros_diff_cols, ones_diff_rows), mul(compare_blocks_cols, zeros_diff_rows)), add(add(ones_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols))))
mul(mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, ones_diff_cols)), mul(mul(mul(add(add(ones_diff_rows, add(add(add(compare_blocks_cols, compare_blocks_cols), mul(compare_blocks_rows, ones_diff_cols)), mul(mul(ones_diff_rows, compare_blocks_cols), mul(add(ones_diff_rows, zeros_diff_rows), compare_blocks_cols)))), add(zeros_diff_cols, zeros_diff_rows)), mul(add(zeros_diff_rows, mul(mul(add(ones_diff_cols, ones_diff_rows), add(zeros_diff_cols, zeros_diff_cols)), mul(mul(ones_diff_rows, ones_diff_cols), mul(add(mul(add(ones_diff_cols, zeros_diff_rows), add(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_rows, zeros_diff_rows), add(ones_diff_rows, mul(zeros_diff_rows, zeros_diff_rows)))), zeros_diff_rows)))), mul(ones_diff_cols, ones_diff_rows))), compare_blocks_cols), add(ones_diff_rows, ones_diff_rows)))
COND TREES:
or_(ge(_if_then_else(False, _if_then_else(False, compare_blocks_cols, zeros_diff_cols), 4), _if_then_else(le(1, 3), _if_then_else(le(_if_then_else(True, _if_then_else(False, zeros_diff_cols, 3), _if_then_else(True, 0, ones_diff_rows)), _if_then_else(False, _if_then_else(False, compare_blocks_rows, compare_blocks_rows), compare_blocks_cols)), ones_diff_rows, 0), zeros_diff_cols)), le(_if_then_else(True, _if_then_else(False, zeros_diff_cols, 3), _if_then_else(True, 0, ones_diff_rows)), _if_then_else(False, _if_then_else(False, compare_blocks_rows, compare_blocks_rows), compare_blocks_cols)))
or_(or_(and_(False, True), and_(and_(ge(4, ones_diff_cols), True), ge(ones_diff_cols, 2))), and_(and_(or_(False, or_(False, True)), False), and_(True, False)))
le(_if_then_else(or_(ge(max_col_clue, compare_blocks_cols), ge(4, 1)), _if_then_else(and_(True, False), _if_then_else(True, 2, compare_blocks_rows), _if_then_else(True, compare_blocks_cols, _if_then_else(or_(ge(max_col_clue, compare_blocks_cols), ge(4, 1)), _if_then_else(and_(True, False), _if_then_else(True, 2, compare_blocks_rows), _if_then_else(True, compare_blocks_cols, ones_diff_cols)), _if_then_else(or_(True, False), _if_then_else(False, zeros_diff_cols, 1), _if_then_else(True, 4, 1))))), _if_then_else(or_(True, False), _if_then_else(False, zeros_diff_cols, _if_then_else(or_(True, False), _if_then_else(False, zeros_diff_cols, 1), _if_then_else(True, 4, 1))), _if_then_else(True, 4, 1))), _if_then_else(or_(ge(ones_diff_rows, 1), ge(max_row_clue, 2)), _if_then_else(and_(False, True), _if_then_else(True, 1, max_row_clue), _if_then_else(False, zeros_diff_rows, ones_diff_rows)), _if_then_else(le(compare_blocks_rows, ones_diff_rows), 1, _if_then_else(True, ones_diff_rows, 4))))
le(_if_then_else(le(ones_diff_rows, compare_blocks_cols), _if_then_else(False, 2, max_col_clue), _if_then_else(False, zeros_diff_rows, max_row_clue)), 4)
le(_if_then_else(True, _if_then_else(ge(ones_diff_rows, max_row_clue), zeros_diff_rows, 3), _if_then_else(False, compare_blocks_rows, max_row_clue)), _if_then_else(and_(False, True), _if_then_else(and_(False, True), zeros_diff_rows, compare_blocks_rows), _if_then_else(ge(ones_diff_rows, zeros_diff_rows), zeros_diff_rows, zeros_diff_cols)))
VAL TREES:
mul(mul(mul(add(add(ones_diff_cols, ones_diff_cols), mul(compare_blocks_rows, compare_blocks_cols)), mul(add(ones_diff_rows, ones_diff_rows), add(compare_blocks_cols, ones_diff_cols))), add(mul(add(zeros_diff_rows, compare_blocks_rows), add(zeros_diff_cols, compare_blocks_cols)), add(add(ones_diff_cols, ones_diff_rows), add(compare_blocks_rows, compare_blocks_rows)))), add(add(add(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_cols, compare_blocks_rows)), mul(mul(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_rows, ones_diff_cols))), add(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(zeros_diff_cols, zeros_diff_rows)), add(mul(compare_blocks_rows, zeros_diff_cols), mul(zeros_diff_rows, ones_diff_cols)))))
mul(mul(mul(add(compare_blocks_cols, compare_blocks_cols), add(zeros_diff_rows, ones_diff_rows)), add(mul(ones_diff_rows, ones_diff_rows), mul(zeros_diff_cols, ones_diff_rows))), mul(add(mul(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)), mul(mul(compare_blocks_rows, ones_diff_cols), mul(zeros_diff_cols, zeros_diff_rows))))
add(mul(add(add(add(ones_diff_rows, ones_diff_rows), add(zeros_diff_cols, ones_diff_cols)), add(add(zeros_diff_cols, ones_diff_cols), mul(ones_diff_cols, ones_diff_rows))), mul(mul(add(zeros_diff_cols, ones_diff_rows), mul(compare_blocks_cols, zeros_diff_rows)), add(mul(compare_blocks_rows, compare_blocks_rows), add(compare_blocks_cols, ones_diff_cols)))), mul(add(mul(add(ones_diff_rows, ones_diff_rows), add(ones_diff_cols, zeros_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_cols), mul(ones_diff_cols, compare_blocks_rows))), mul(add(mul(ones_diff_cols, zeros_diff_rows), mul(ones_diff_cols, zeros_diff_rows)), add(mul(ones_diff_rows, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_cols)))))
mul(add(mul(mul(add(ones_diff_cols, compare_blocks_cols), zeros_diff_cols), compare_blocks_rows), add(ones_diff_cols, ones_diff_rows)), add(mul(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_cols, mul(mul(mul(mul(mul(ones_diff_rows, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_rows)), add(mul(ones_diff_cols, ones_diff_cols), mul(zeros_diff_rows, ones_diff_rows))), mul(add(add(zeros_diff_rows, compare_blocks_rows), mul(zeros_diff_cols, zeros_diff_rows)), mul(mul(zeros_diff_rows, compare_blocks_rows), add(ones_diff_cols, compare_blocks_rows)))), mul(add(mul(add(compare_blocks_rows, ones_diff_cols), mul(compare_blocks_cols, compare_blocks_rows)), mul(mul(ones_diff_rows, ones_diff_rows), mul(compare_blocks_rows, ones_diff_rows))), mul(mul(add(zeros_diff_cols, zeros_diff_cols), add(add(add(compare_blocks_cols, add(ones_diff_rows, ones_diff_cols)), mul(add(mul(compare_blocks_cols, ones_diff_cols), ones_diff_cols), ones_diff_rows)), mul(add(compare_blocks_rows, compare_blocks_cols), add(ones_diff_rows, compare_blocks_rows)))), add(mul(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows))))))), mul(zeros_diff_cols, compare_blocks_cols)))
add(add(add(zeros_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_rows)), add(mul(add(zeros_diff_cols, ones_diff_rows), mul(compare_blocks_cols, zeros_diff_rows)), add(add(ones_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols))))
mul(mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, ones_diff_cols)), mul(mul(mul(add(add(ones_diff_rows, add(add(add(compare_blocks_cols, compare_blocks_cols), mul(compare_blocks_rows, ones_diff_cols)), mul(mul(ones_diff_rows, compare_blocks_cols), mul(add(ones_diff_rows, zeros_diff_rows), compare_blocks_cols)))), add(zeros_diff_cols, zeros_diff_rows)), mul(add(zeros_diff_rows, mul(mul(add(ones_diff_cols, ones_diff_rows), add(zeros_diff_cols, zeros_diff_cols)), mul(mul(ones_diff_rows, ones_diff_cols), mul(compare_blocks_rows, zeros_diff_rows)))), mul(ones_diff_cols, ones_diff_rows))), compare_blocks_cols), add(ones_diff_rows, ones_diff_rows)))


INFO:root:hof: COND TREES:
or_(ge(_if_then_else(False, _if_then_else(False, compare_blocks_cols, 3), 4), _if_then_else(le(1, 3), _if_then_else(False, ones_diff_rows, 0), zeros_diff_cols)), le(_if_then_else(True, _if_then_else(False, zeros_diff_cols, 3), _if_then_else(True, 0, ones_diff_rows)), _if_then_else(False, _if_then_else(False, max_row_clue, compare_blocks_rows), compare_blocks_cols)))
or_(or_(and_(True, True), and_(and_(ge(4, ones_diff_cols), True), ge(ones_diff_rows, 2))), and_(and_(or_(False, True), False), and_(True, True)))
le(_if_then_else(or_(ge(max_col_clue, compare_blocks_cols), ge(4, 0)), _if_then_else(and_(True, False), _if_then_else(True, 2, compare_blocks_rows), _if_then_else(True, compare_blocks_cols, ones_diff_cols)), _if_then_else(or_(True, False), _if_then_else(False, zeros_diff_cols, 1), _if_then_else(True, 4, 1))), _if_then_else(or_(ge(ones_diff_rows, 1), ge(max_row_clue, 2)), _if_then_else(and_(False, True), _if_then_else(True, 1, max_row_clue), _if_then_else(False, zeros_diff_rows, ones_diff_rows)), _if_then_else(le(compare_blocks_rows, ones_diff_rows), _if_then_else(False, max_col_clue, ones_diff_cols), _if_then_else(True, ones_diff_rows, 4))))
le(_if_then_else(le(ones_diff_rows, compare_blocks_cols), _if_then_else(False, 2, max_col_clue), _if_then_else(True, zeros_diff_rows, max_row_clue)), _if_then_else(and_(False, True), _if_then_else(False, 4, zeros_diff_rows), _if_then_else(True, zeros_diff_cols, 4)))
le(_if_then_else(le(_if_then_else(True, 3, 1), ones_diff_cols), _if_then_else(ge(max_col_clue, max_row_clue), ones_diff_rows, 3), _if_then_else(False, compare_blocks_rows, max_row_clue)), _if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, compare_blocks_cols), _if_then_else(ge(ones_diff_rows, zeros_diff_rows), zeros_diff_rows, zeros_diff_cols)))
VAL TREES:
mul(add(add(zeros_diff_cols, compare_blocks_rows), mul(zeros_diff_rows, compare_blocks_cols)), add(mul(ones_diff_rows, compare_blocks_rows), mul(compare_blocks_rows, compare_blocks_cols)))
mul(mul(mul(add(compare_blocks_cols, compare_blocks_cols), add(zeros_diff_rows, ones_diff_rows)), add(mul(ones_diff_rows, ones_diff_rows), mul(zeros_diff_cols, ones_diff_rows))), mul(add(mul(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, compare_blocks_cols)), mul(mul(compare_blocks_rows, ones_diff_cols), mul(zeros_diff_cols, zeros_diff_rows))))
add(mul(mul(add(compare_blocks_rows, ones_diff_cols), zeros_diff_cols), add(compare_blocks_cols, zeros_diff_rows)), add(add(add(ones_diff_rows, zeros_diff_rows), compare_blocks_rows), add(zeros_diff_rows, ones_diff_cols)))
mul(add(mul(mul(add(ones_diff_cols, compare_blocks_cols), zeros_diff_cols), compare_blocks_rows), add(ones_diff_cols, ones_diff_rows)), add(mul(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_cols, mul(zeros_diff_rows, ones_diff_rows))), mul(zeros_diff_cols, compare_blocks_cols)))
add(add(add(zeros_diff_cols, ones_diff_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(compare_blocks_cols, compare_blocks_cols), add(add(ones_diff_cols, compare_blocks_cols), mul(ones_diff_cols, zeros_diff_cols))))
mul(mul(mul(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_cols, ones_diff_cols)), mul(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows)))


INFO:root:stats: {'fitness': <deap.tools.support.Statistics object at 0x0000018B560CAA20>, 'size': <deap.tools.support.Statistics object at 0x0000018B560CAA58>}

