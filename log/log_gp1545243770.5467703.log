INFO:root:

*******STARTING!!!******


INFO:root:

*******Configuration******


INFO:root:# NUM_ROWS = 20


INFO:root:NUM_ROWS = 5


INFO:root:# NUM_COLS = 20


INFO:root:NUM_COLS = 5


INFO:root:empty_in_split = '\xa0'


INFO:root:


INFO:root:pickle_unsolved_file_path = 'data/%dx%d_nonograms.pkl' % (NUM_ROWS, NUM_COLS)


INFO:root:pickle_solved_file_path = 'data/%dx%d_nonograms_solved.pkl' % (NUM_ROWS, NUM_COLS)


INFO:root:should_run_in_parallel = True


INFO:root:


INFO:root:NUM_COND_TREES = 5


INFO:root:NUM_VAL_TREES = NUM_COND_TREES + 1


INFO:root:prob_crossover_global = 0.6  # global probability for cx


INFO:root:prob_crossover_individual_cond = 0.8  # probability to cx a specific cond tree in an individual


INFO:root:prob_crossover_individual_val = 0.8  # probability to cx a specific cond tree in an individual


INFO:root:prob_mutate_global = 0.4


INFO:root:prob_mutate_individual_cond = 0.5


INFO:root:prob_mutate_individual_val = 0.5


INFO:root:


INFO:root:points_correct_box = 5


INFO:root:points_incorrect_box = 0


INFO:root:# points_incorrect_box = -2


INFO:root:pop_size = 100


INFO:root:hof_size = 1


INFO:root:# num_gen = 40


INFO:root:num_gen = 10


INFO:root:train_size = 3


INFO:root:

*******DONE!!!******


INFO:root:run time: 83 sec

INFO:root:max possible fitness for the nonograms ran: 76

INFO:root:log:    	      	            fitness            	              size              
   	      	-------------------------------	--------------------------------
gen	nevals	avg    	max    	min    	std    	avg 	max	min	std     
0  	100   	50     	50     	50     	0      	7.25	8  	6  	0.572276
1  	87    	46.7833	56.6667	36.6667	4.872  	7.42	9  	6  	0.650846
2  	70    	48.1667	56.6667	36.6667	4.88478	7.5 	9  	6  	0.728011
3  	77    	48.7   	56.6667	40     	5.83371	7.6 	9  	6  	0.678233
4  	67    	50.95  	56.6667	36.6667	5.22948	7.64	9  	6  	0.793977
5  	70    	52.2167	56.6667	36.6667	5.17502	7.65	9  	6  	0.779423
6  	75    	53.1833	56.6667	40     	4.48513	7.63	9  	6  	0.71631 
7  	76    	52.9667	56.6667	36.6667	5.20993	7.71	10 	6  	0.765441
8  	77    	53.65  	56.6667	40     	4.61095	7.8 	10 	6  	0.927362
9  	74    	52.7167	56.6667	36.6667	5.51591	7.77	11 	6  	0.892805
10 	67    	53.4333	56.6667	40     	4.80058	7.81	11 	6  	1.00693 

INFO:root:pop: COND TREES:
and_(le(max_col_clue, compare_blocks_cols), False)
le(max_col_clue, 0)
and_(ge(_if_then_else(False, 1, ones_diff_cols), _if_then_else(False, _if_then_else(ge(compare_blocks_rows, 3), _if_then_else(True, max_row_clue, compare_blocks_cols), _if_then_else(and_(True, True), ones_diff_rows, 1)), 4)), or_(and_(False, True), ge(_if_then_else(True, 3, 4), _if_then_else(False, 2, max_row_clue))))
le(_if_then_else(False, _if_then_else(True, max_row_clue, 1), 2), ones_diff_cols)
le(4, _if_then_else(True, max_row_clue, max_col_clue))
VAL TREES:
add(mul(add(add(compare_blocks_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_cols)), add(ones_diff_cols, mul(ones_diff_cols, compare_blocks_cols))), add(mul(add(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_rows, zeros_diff_rows)), add(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_cols, ones_diff_cols))))
add(mul(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_rows, ones_diff_cols)), mul(mul(mul(compare_blocks_cols, ones_diff_rows), mul(ones_diff_cols, compare_blocks_rows)), add(zeros_diff_cols, compare_blocks_rows)))
mul(add(add(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols))), mul(mul(add(ones_diff_rows, ones_diff_cols), add(compare_blocks_cols, compare_blocks_cols)), mul(add(ones_diff_cols, ones_diff_cols), mul(compare_blocks_rows, ones_diff_cols))))
mul(mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, compare_blocks_rows)), add(mul(zeros_diff_rows, compare_blocks_rows), add(ones_diff_rows, ones_diff_cols)))
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(add(ones_diff_rows, ones_diff_rows), ones_diff_cols)), mul(add(add(ones_diff_cols, compare_blocks_cols), zeros_diff_rows), mul(add(add(compare_blocks_cols, ones_diff_cols), zeros_diff_rows), zeros_diff_rows)))
mul(compare_blocks_rows, add(mul(ones_diff_rows, compare_blocks_cols), mul(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))))
COND TREES:
le(_if_then_else(and_(ge(0, zeros_diff_cols), and_(False, False)), _if_then_else(le(3, max_row_clue), _if_then_else(False, max_col_clue, compare_blocks_cols), _if_then_else(True, 2, 2)), _if_then_else(ge(max_col_clue, zeros_diff_rows), _if_then_else(True, 4, ones_diff_rows), _if_then_else(False, ones_diff_cols, zeros_diff_rows))), _if_then_else(ge(_if_then_else(and_(True, False), ones_diff_rows, compare_blocks_rows), _if_then_else(False, ones_diff_cols, compare_blocks_cols)), _if_then_else(and_(and_(True, True), and_(False, False)), _if_then_else(True, ones_diff_cols, 4), _if_then_else(True, zeros_diff_rows, zeros_diff_cols)), _if_then_else(or_(True, False), _if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(False, zeros_diff_rows, compare_blocks_cols))))
or_(and_(and_(True, False), and_(True, True)), and_(or_(True, False), or_(False, True)))
or_(ge(4, 2), and_(and_(or_(True, True), True), and_(True, False)))
or_(le(_if_then_else(le(max_row_clue, compare_blocks_rows), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(False, zeros_diff_cols, 0)), _if_then_else(True, 0, ones_diff_cols)), or_(and_(False, False), or_(False, False)))
ge(_if_then_else(le(_if_then_else(ge(ones_diff_rows, zeros_diff_rows), _if_then_else(False, 3, 1), _if_then_else(True, 4, zeros_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, zeros_diff_rows), _if_then_else(False, max_col_clue, zeros_diff_rows))), _if_then_else(le(_if_then_else(True, 3, zeros_diff_cols), _if_then_else(True, 1, ones_diff_rows)), _if_then_else(or_(True, True), _if_then_else(True, 2, ones_diff_rows), _if_then_else(True, max_row_clue, 4)), _if_then_else(and_(True, False), _if_then_else(True, ones_diff_rows, compare_blocks_rows), _if_then_else(False, 4, zeros_diff_rows))), _if_then_else(le(_if_then_else(False, ones_diff_rows, max_row_clue), _if_then_else(False, zeros_diff_cols, 3)), _if_then_else(or_(True, True), _if_then_else(False, _if_then_else(True, 3, 0), 2), _if_then_else(True, max_col_clue, 1)), _if_then_else(or_(False, True), _if_then_else(False, ones_diff_rows, ones_diff_rows), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)))), _if_then_else(le(_if_then_else(or_(False, True), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, 3, ones_diff_rows)), _if_then_else(ge(zeros_diff_rows, 3), _if_then_else(False, max_col_clue, ones_diff_rows), _if_then_else(True, ones_diff_rows, zeros_diff_cols))), _if_then_else(le(_if_then_else(or_(False, False), _if_then_else(False, _if_then_else(False, compare_blocks_cols, 0), 0), _if_then_else(True, ones_diff_cols, zeros_diff_cols)), _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(le(compare_blocks_rows, zeros_diff_cols), _if_then_else(True, 0, 4), _if_then_else(False, zeros_diff_rows, max_col_clue)), _if_then_else(le(3, 1), _if_then_else(True, zeros_diff_cols, max_col_clue), _if_then_else(False, 2, zeros_diff_rows))), _if_then_else(and_(or_(True, True), or_(False, False)), _if_then_else(le(2, ones_diff_cols), _if_then_else(False, 0, ones_diff_rows), _if_then_else(True, 1, 0)), _if_then_else(ge(3, zeros_diff_cols), _if_then_else(False, 4, ones_diff_rows), _if_then_else(False, 2, zeros_diff_rows)))))
VAL TREES:
add(add(add(zeros_diff_cols, mul(compare_blocks_rows, compare_blocks_cols)), add(mul(add(compare_blocks_cols, compare_blocks_rows), zeros_diff_rows), mul(mul(zeros_diff_rows, compare_blocks_rows), compare_blocks_rows))), mul(add(ones_diff_rows, zeros_diff_cols), add(compare_blocks_cols, zeros_diff_rows)))
mul(add(compare_blocks_cols, ones_diff_cols), mul(mul(compare_blocks_rows, ones_diff_rows), zeros_diff_cols))
add(mul(add(mul(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, ones_diff_cols)), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_rows), add(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, add(compare_blocks_rows, compare_blocks_cols))), compare_blocks_rows)))
add(add(add(zeros_diff_cols, ones_diff_cols), add(zeros_diff_rows, compare_blocks_rows)), mul(mul(ones_diff_cols, ones_diff_cols), mul(zeros_diff_rows, ones_diff_rows)))
mul(add(mul(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, zeros_diff_cols)), add(mul(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, ones_diff_cols)))
add(add(add(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, compare_blocks_cols)), mul(mul(mul(zeros_diff_cols, compare_blocks_rows), ones_diff_rows), add(mul(ones_diff_cols, zeros_diff_cols), zeros_diff_cols)))
COND TREES:
and_(or_(and_(True, True), and_(False, True)), and_(and_(True, True), and_(False, False)))
ge(_if_then_else(or_(False, True), _if_then_else(False, max_row_clue, 0), _if_then_else(False, max_row_clue, max_row_clue)), _if_then_else(and_(False, True), _if_then_else(False, 1, ones_diff_cols), _if_then_else(True, 4, max_col_clue)))
and_(ge(_if_then_else(False, 1, ones_diff_cols), _if_then_else(False, max_col_clue, 4)), or_(and_(False, True), ge(4, 2)))
le(_if_then_else(and_(False, False), _if_then_else(False, 1, 2), _if_then_else(True, 1, 2)), _if_then_else(and_(False, False), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, zeros_diff_cols, ones_diff_cols)))
or_(le(_if_then_else(True, 3, zeros_diff_cols), _if_then_else(True, 1, ones_diff_rows)), and_(or_(False, True), le(compare_blocks_rows, zeros_diff_rows)))
VAL TREES:
add(mul(add(add(compare_blocks_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_cols))), add(mul(add(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_rows, zeros_diff_rows)), add(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_cols, ones_diff_cols))))
add(mul(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_rows, ones_diff_cols)), mul(mul(mul(compare_blocks_cols, ones_diff_rows), mul(ones_diff_cols, compare_blocks_rows)), add(zeros_diff_cols, compare_blocks_rows)))
mul(add(add(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols))), mul(mul(add(ones_diff_rows, ones_diff_cols), add(compare_blocks_cols, compare_blocks_cols)), mul(add(ones_diff_cols, ones_diff_cols), mul(compare_blocks_rows, ones_diff_cols))))
mul(mul(add(compare_blocks_cols, zeros_diff_cols), mul(ones_diff_cols, compare_blocks_rows)), add(mul(zeros_diff_rows, compare_blocks_rows), add(ones_diff_rows, ones_diff_cols)))
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(add(ones_diff_rows, ones_diff_rows), ones_diff_cols)), mul(add(zeros_diff_cols, zeros_diff_rows), mul(add(add(compare_blocks_cols, ones_diff_cols), zeros_diff_rows), zeros_diff_rows)))
mul(mul(add(zeros_diff_rows, ones_diff_cols), add(zeros_diff_cols, ones_diff_rows)), add(mul(ones_diff_rows, compare_blocks_cols), mul(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))))
COND TREES:
and_(and_(True, False), False)
le(4, max_row_clue)
and_(ge(_if_then_else(False, 1, ones_diff_cols), _if_then_else(False, _if_then_else(ge(compare_blocks_rows, 3), _if_then_else(True, max_row_clue, compare_blocks_cols), _if_then_else(True, ones_diff_rows, 1)), 4)), or_(and_(False, True), ge(4, 2)))
le(_if_then_else(True, 1, 2), ones_diff_cols)
le(_if_then_else(False, 3, 0), _if_then_else(True, 4, max_col_clue))
VAL TREES:
add(mul(add(add(compare_blocks_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_cols))), add(mul(add(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_rows, zeros_diff_rows)), add(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_cols, ones_diff_cols))))
add(mul(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_rows, ones_diff_cols)), mul(mul(mul(compare_blocks_cols, ones_diff_rows), mul(ones_diff_cols, compare_blocks_rows)), add(zeros_diff_cols, compare_blocks_rows)))
mul(add(add(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols))), mul(mul(add(ones_diff_rows, ones_diff_cols), add(compare_blocks_cols, compare_blocks_cols)), mul(add(ones_diff_cols, ones_diff_cols), mul(compare_blocks_rows, ones_diff_cols))))
mul(mul(add(compare_blocks_cols, zeros_diff_cols), mul(ones_diff_cols, compare_blocks_rows)), add(mul(zeros_diff_rows, compare_blocks_rows), add(ones_diff_rows, ones_diff_cols)))
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(add(ones_diff_rows, ones_diff_rows), ones_diff_cols)), mul(add(zeros_diff_cols, zeros_diff_rows), mul(add(add(compare_blocks_cols, ones_diff_cols), zeros_diff_rows), zeros_diff_rows)))
mul(mul(add(zeros_diff_rows, ones_diff_cols), add(zeros_diff_cols, ones_diff_rows)), add(mul(ones_diff_rows, compare_blocks_cols), mul(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))))
COND TREES:
or_(True, False)
le(_if_then_else(True, 1, ones_diff_rows), 0)
and_(ge(_if_then_else(False, 1, ones_diff_cols), _if_then_else(False, _if_then_else(ge(compare_blocks_rows, 3), _if_then_else(True, max_row_clue, compare_blocks_cols), _if_then_else(True, ones_diff_rows, 1)), 4)), or_(and_(False, True), ge(4, 2)))
le(_if_then_else(True, max_col_clue, ones_diff_cols), ones_diff_rows)
le(_if_then_else(True, 3, _if_then_else(ge(compare_blocks_rows, zeros_diff_rows), _if_then_else(False, 3, 1), _if_then_else(True, max_col_clue, compare_blocks_rows))), _if_then_else(False, zeros_diff_cols, max_row_clue))
VAL TREES:
add(mul(add(add(compare_blocks_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_cols))), add(mul(add(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_rows, zeros_diff_rows)), add(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_cols, ones_diff_cols))))
add(mul(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_rows, ones_diff_cols)), mul(mul(mul(compare_blocks_cols, ones_diff_rows), mul(ones_diff_cols, compare_blocks_rows)), add(zeros_diff_cols, compare_blocks_rows)))
mul(add(add(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols))), mul(mul(add(ones_diff_rows, ones_diff_cols), add(compare_blocks_cols, compare_blocks_cols)), mul(add(ones_diff_cols, ones_diff_cols), mul(compare_blocks_rows, ones_diff_cols))))
mul(mul(add(compare_blocks_cols, zeros_diff_cols), mul(ones_diff_cols, compare_blocks_rows)), add(mul(zeros_diff_rows, compare_blocks_rows), add(ones_diff_rows, ones_diff_cols)))
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(add(ones_diff_rows, ones_diff_rows), ones_diff_cols)), mul(add(zeros_diff_cols, zeros_diff_rows), mul(add(add(compare_blocks_cols, ones_diff_cols), zeros_diff_rows), zeros_diff_rows)))
mul(mul(add(zeros_diff_rows, ones_diff_cols), add(zeros_diff_cols, ones_diff_rows)), add(mul(ones_diff_rows, compare_blocks_cols), mul(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))))
COND TREES:
and_(or_(or_(True, or_(True, False)), and_(False, True)), and_(and_(True, False), and_(False, False)))
ge(_if_then_else(or_(True, False), _if_then_else(False, max_row_clue, 0), _if_then_else(False, max_row_clue, max_row_clue)), _if_then_else(and_(True, False), _if_then_else(ge(_if_then_else(False, 0, max_row_clue), _if_then_else(True, 0, ones_diff_rows)), ones_diff_rows, compare_blocks_cols), _if_then_else(True, 3, ones_diff_cols)))
and_(ge(_if_then_else(False, 1, ones_diff_cols), _if_then_else(False, max_col_clue, 4)), or_(and_(ge(_if_then_else(True, ones_diff_rows, 3), _if_then_else(False, max_col_clue, ones_diff_cols)), True), ge(4, 2)))
le(_if_then_else(and_(False, False), _if_then_else(False, 1, 2), _if_then_else(True, 1, 2)), _if_then_else(and_(False, False), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, zeros_diff_cols, ones_diff_cols)))
or_(le(max_col_clue, _if_then_else(True, 4, max_col_clue)), and_(le(compare_blocks_rows, 0), le(compare_blocks_rows, zeros_diff_rows)))
VAL TREES:
add(mul(add(add(compare_blocks_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_cols))), add(mul(add(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_rows, zeros_diff_rows)), add(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_cols, ones_diff_cols))))
add(mul(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_rows, ones_diff_cols)), mul(mul(mul(compare_blocks_cols, ones_diff_rows), mul(ones_diff_cols, compare_blocks_rows)), add(zeros_diff_cols, compare_blocks_rows)))
mul(add(add(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols))), mul(mul(add(ones_diff_rows, ones_diff_cols), add(compare_blocks_cols, compare_blocks_cols)), mul(add(ones_diff_cols, ones_diff_cols), mul(compare_blocks_rows, ones_diff_cols))))
mul(mul(add(compare_blocks_cols, zeros_diff_cols), mul(ones_diff_cols, compare_blocks_rows)), add(mul(zeros_diff_rows, compare_blocks_rows), add(ones_diff_rows, ones_diff_cols)))
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(add(ones_diff_rows, ones_diff_rows), ones_diff_cols)), mul(add(zeros_diff_cols, zeros_diff_rows), mul(add(add(compare_blocks_cols, ones_diff_cols), zeros_diff_rows), zeros_diff_rows)))
mul(mul(add(zeros_diff_rows, ones_diff_cols), add(zeros_diff_cols, ones_diff_rows)), add(mul(ones_diff_rows, compare_blocks_cols), mul(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))))
COND TREES:
and_(or_(True, and_(False, False)), and_(and_(True, False), and_(False, False)))
ge(0, _if_then_else(True, _if_then_else(True, ones_diff_rows, compare_blocks_cols), _if_then_else(True, 3, ones_diff_cols)))
and_(ge(_if_then_else(False, 1, ones_diff_cols), _if_then_else(False, max_col_clue, 4)), or_(le(zeros_diff_cols, zeros_diff_rows), ge(_if_then_else(ge(_if_then_else(False, max_col_clue, 1), _if_then_else(False, 2, max_row_clue)), 4, compare_blocks_rows), _if_then_else(True, 1, 4))))
le(_if_then_else(True, max_col_clue, ones_diff_rows), _if_then_else(or_(False, False), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, zeros_diff_cols, 0)))
or_(le(_if_then_else(False, 1, 3), _if_then_else(and_(True, False), _if_then_else(True, ones_diff_rows, compare_blocks_rows), _if_then_else(False, 4, zeros_diff_rows))), and_(le(ones_diff_cols, _if_then_else(le(_if_then_else(False, ones_diff_rows, max_row_clue), _if_then_else(False, zeros_diff_cols, 3)), _if_then_else(or_(True, True), _if_then_else(False, 4, 2), _if_then_else(True, max_col_clue, 1)), _if_then_else(or_(False, True), _if_then_else(False, ones_diff_rows, ones_diff_rows), _if_then_else(and_(ge(2, zeros_diff_cols), ge(max_row_clue, 1)), compare_blocks_rows, compare_blocks_cols)))), le(compare_blocks_rows, zeros_diff_rows)))
VAL TREES:
add(mul(add(zeros_diff_rows, zeros_diff_rows), add(mul(zeros_diff_cols, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_cols))), add(mul(add(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_rows, zeros_diff_rows)), add(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_cols, ones_diff_cols))))
add(compare_blocks_rows, mul(mul(add(zeros_diff_cols, zeros_diff_rows), add(zeros_diff_cols, ones_diff_cols)), add(zeros_diff_cols, compare_blocks_rows)))
mul(add(add(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, mul(mul(zeros_diff_rows, compare_blocks_rows), add(ones_diff_rows, ones_diff_rows))))), mul(mul(add(ones_diff_rows, ones_diff_cols), add(zeros_diff_rows, zeros_diff_cols)), mul(add(ones_diff_cols, ones_diff_cols), mul(compare_blocks_rows, ones_diff_cols))))
mul(mul(add(compare_blocks_cols, zeros_diff_cols), mul(ones_diff_cols, compare_blocks_rows)), add(mul(zeros_diff_rows, compare_blocks_rows), add(ones_diff_rows, ones_diff_cols)))
mul(add(add(compare_blocks_cols, mul(zeros_diff_rows, zeros_diff_rows)), mul(add(ones_diff_rows, ones_diff_rows), ones_diff_cols)), mul(add(mul(mul(ones_diff_rows, zeros_diff_rows), mul(ones_diff_rows, zeros_diff_cols)), zeros_diff_rows), mul(add(add(compare_blocks_cols, ones_diff_cols), zeros_diff_rows), zeros_diff_rows)))
mul(mul(add(zeros_diff_rows, ones_diff_cols), add(zeros_diff_cols, ones_diff_rows)), add(mul(ones_diff_rows, compare_blocks_cols), mul(add(zeros_diff_cols, zeros_diff_rows), ones_diff_rows)))
COND TREES:
and_(or_(and_(False, True), ge(max_col_clue, max_row_clue)), ge(0, zeros_diff_cols))
ge(ones_diff_cols, _if_then_else(and_(True, True), _if_then_else(True, ones_diff_cols, max_col_clue), _if_then_else(and_(True, False), 3, ones_diff_cols)))
and_(ge(_if_then_else(or_(or_(and_(or_(False, False), or_(False, le(zeros_diff_cols, 2))), and_(False, True)), and_(False, True)), _if_then_else(or_(False, True), 0, _if_then_else(False, zeros_diff_cols, 3)), _if_then_else(or_(True, True), _if_then_else(False, 1, compare_blocks_rows), _if_then_else(False, zeros_diff_cols, 3))), _if_then_else(False, max_col_clue, 4)), or_(and_(False, True), ge(4, 2)))
le(_if_then_else(False, _if_then_else(False, 1, 2), _if_then_else(True, 1, 2)), _if_then_else(and_(False, False), _if_then_else(False, compare_blocks_rows, 2), ones_diff_cols))
or_(le(_if_then_else(False, 1, 3), _if_then_else(True, 1, ones_diff_rows)), and_(or_(True, True), True))
VAL TREES:
add(mul(add(add(compare_blocks_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_cols)), zeros_diff_rows), add(mul(add(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_rows, zeros_diff_rows)), add(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_cols, ones_diff_cols))))
add(mul(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_rows, ones_diff_cols)), mul(mul(mul(compare_blocks_cols, ones_diff_rows), mul(ones_diff_cols, compare_blocks_rows)), add(zeros_diff_cols, compare_blocks_rows)))
mul(add(add(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols))), mul(mul(add(ones_diff_rows, ones_diff_cols), add(compare_blocks_cols, compare_blocks_cols)), mul(add(ones_diff_cols, ones_diff_cols), mul(compare_blocks_rows, ones_diff_cols))))
mul(ones_diff_rows, zeros_diff_rows)
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(add(ones_diff_rows, ones_diff_rows), ones_diff_cols)), mul(add(zeros_diff_cols, zeros_diff_rows), mul(add(add(compare_blocks_cols, ones_diff_cols), zeros_diff_rows), zeros_diff_rows)))
mul(mul(add(zeros_diff_rows, ones_diff_cols), add(zeros_diff_cols, ones_diff_rows)), add(mul(ones_diff_rows, compare_blocks_cols), mul(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))))
COND TREES:
le(_if_then_else(and_(ge(2, zeros_diff_cols), and_(False, False)), _if_then_else(le(3, max_row_clue), _if_then_else(False, max_col_clue, compare_blocks_cols), _if_then_else(True, 2, 2)), _if_then_else(ge(max_col_clue, zeros_diff_rows), _if_then_else(True, 4, ones_diff_rows), _if_then_else(False, ones_diff_cols, zeros_diff_rows))), _if_then_else(ge(max_row_clue, _if_then_else(False, ones_diff_cols, compare_blocks_cols)), _if_then_else(le(compare_blocks_cols, compare_blocks_rows), _if_then_else(ge(2, compare_blocks_cols), max_row_clue, ones_diff_rows), _if_then_else(True, zeros_diff_rows, zeros_diff_cols)), _if_then_else(or_(True, False), _if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(False, zeros_diff_rows, compare_blocks_cols))))
or_(and_(and_(and_(le(ones_diff_rows, zeros_diff_rows), le(ones_diff_cols, ones_diff_rows)), le(4, 3)), True), le(_if_then_else(True, ones_diff_cols, 0), _if_then_else(or_(True, True), 2, _if_then_else(False, compare_blocks_rows, zeros_diff_cols))))
or_(ge(2, ones_diff_cols), le(compare_blocks_cols, 2))
or_(or_(le(_if_then_else(False, ones_diff_cols, ones_diff_cols), _if_then_else(False, max_col_clue, max_col_clue)), and_(True, False)), or_(and_(False, False), or_(False, and_(and_(False, True), le(0, 3)))))
ge(_if_then_else(le(_if_then_else(ge(ones_diff_rows, zeros_diff_rows), _if_then_else(False, 3, 1), _if_then_else(True, 4, zeros_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, zeros_diff_rows), _if_then_else(False, max_col_clue, zeros_diff_rows))), _if_then_else(or_(False, True), _if_then_else(or_(True, True), _if_then_else(True, 2, ones_diff_rows), _if_then_else(True, max_row_clue, 4)), _if_then_else(and_(True, False), _if_then_else(True, max_col_clue, compare_blocks_rows), _if_then_else(False, 4, zeros_diff_rows))), _if_then_else(le(_if_then_else(True, compare_blocks_cols, 3), _if_then_else(False, zeros_diff_cols, 3)), _if_then_else(or_(True, True), _if_then_else(False, 4, 2), _if_then_else(True, max_col_clue, 1)), _if_then_else(or_(False, True), _if_then_else(False, ones_diff_rows, ones_diff_rows), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)))), _if_then_else(le(_if_then_else(or_(False, True), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, 3, ones_diff_rows)), _if_then_else(ge(zeros_diff_rows, 3), _if_then_else(False, max_col_clue, ones_diff_rows), _if_then_else(True, ones_diff_rows, zeros_diff_cols))), _if_then_else(le(_if_then_else(True, zeros_diff_rows, compare_blocks_rows), _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(le(compare_blocks_rows, zeros_diff_cols), _if_then_else(True, 0, 4), _if_then_else(False, zeros_diff_rows, max_col_clue)), _if_then_else(le(3, 1), _if_then_else(True, zeros_diff_cols, max_col_clue), _if_then_else(False, 2, zeros_diff_rows))), _if_then_else(and_(or_(True, True), or_(False, False)), _if_then_else(le(2, ones_diff_cols), _if_then_else(False, 0, ones_diff_rows), _if_then_else(True, 1, 0)), _if_then_else(ge(3, zeros_diff_cols), _if_then_else(False, 4, ones_diff_rows), _if_then_else(False, 2, zeros_diff_rows)))))
VAL TREES:
add(add(add(zeros_diff_cols, mul(compare_blocks_rows, compare_blocks_cols)), add(mul(add(compare_blocks_cols, compare_blocks_rows), zeros_diff_rows), mul(mul(zeros_diff_rows, compare_blocks_rows), zeros_diff_cols))), mul(add(ones_diff_rows, zeros_diff_cols), add(compare_blocks_cols, zeros_diff_rows)))
mul(mul(mul(ones_diff_cols, zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), mul(add(compare_blocks_cols, ones_diff_rows), add(ones_diff_rows, compare_blocks_cols)))
add(mul(mul(add(add(compare_blocks_rows, compare_blocks_cols), zeros_diff_rows), add(add(ones_diff_cols, compare_blocks_cols), ones_diff_cols)), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_rows), add(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_rows)), compare_blocks_rows)))
add(add(add(zeros_diff_cols, ones_diff_cols), add(zeros_diff_rows, compare_blocks_rows)), mul(mul(ones_diff_cols, ones_diff_cols), mul(zeros_diff_rows, ones_diff_rows)))
mul(add(mul(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, zeros_diff_cols)), add(mul(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, ones_diff_cols)))
add(mul(mul(ones_diff_rows, ones_diff_cols), mul(compare_blocks_rows, ones_diff_rows)), mul(mul(mul(zeros_diff_cols, compare_blocks_rows), ones_diff_rows), add(mul(ones_diff_cols, zeros_diff_cols), zeros_diff_cols)))
COND TREES:
and_(or_(and_(True, and_(False, False)), and_(False, True)), and_(and_(True, False), and_(False, False)))
ge(_if_then_else(ge(_if_then_else(False, ones_diff_rows, compare_blocks_cols), _if_then_else(True, 4, zeros_diff_rows)), _if_then_else(False, max_row_clue, 0), _if_then_else(False, max_row_clue, max_row_clue)), _if_then_else(and_(True, False), _if_then_else(False, ones_diff_rows, compare_blocks_cols), _if_then_else(True, 3, ones_diff_cols)))
and_(ge(_if_then_else(False, 1, ones_diff_cols), _if_then_else(False, max_col_clue, 4)), or_(and_(False, True), ge(_if_then_else(ge(1, compare_blocks_cols), _if_then_else(False, zeros_diff_cols, 1), _if_then_else(False, 1, compare_blocks_rows)), 2)))
le(_if_then_else(and_(False, False), _if_then_else(False, 1, 2), _if_then_else(True, 1, 2)), _if_then_else(and_(False, False), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, zeros_diff_cols, ones_diff_cols)))
or_(le(1, _if_then_else(True, 1, ones_diff_rows)), and_(or_(True, True), le(compare_blocks_rows, zeros_diff_rows)))
VAL TREES:
add(mul(add(add(compare_blocks_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_cols))), add(compare_blocks_cols, add(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_cols, ones_diff_cols))))
add(mul(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_rows, ones_diff_cols)), mul(mul(mul(compare_blocks_cols, ones_diff_rows), mul(ones_diff_cols, compare_blocks_rows)), add(zeros_diff_cols, compare_blocks_rows)))
mul(add(add(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols))), mul(mul(zeros_diff_cols, add(compare_blocks_cols, compare_blocks_cols)), mul(add(ones_diff_cols, ones_diff_cols), mul(compare_blocks_rows, ones_diff_cols))))
mul(mul(add(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_cols, compare_blocks_rows)), add(mul(zeros_diff_rows, compare_blocks_rows), add(ones_diff_rows, ones_diff_cols)))
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(add(ones_diff_rows, ones_diff_rows), ones_diff_cols)), mul(add(zeros_diff_cols, zeros_diff_rows), mul(add(add(compare_blocks_cols, ones_diff_cols), mul(mul(zeros_diff_rows, ones_diff_rows), mul(zeros_diff_rows, zeros_diff_rows))), zeros_diff_rows)))
mul(mul(add(zeros_diff_rows, ones_diff_cols), add(zeros_diff_cols, ones_diff_rows)), add(mul(ones_diff_rows, compare_blocks_cols), mul(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))))
COND TREES:
ge(_if_then_else(and_(ge(3, compare_blocks_rows), and_(False, False)), _if_then_else(and_(True, True), _if_then_else(False, 1, 2), _if_then_else(False, 3, 1)), _if_then_else(ge(zeros_diff_cols, 0), _if_then_else(True, 2, 1), _if_then_else(True, compare_blocks_rows, 2))), _if_then_else(and_(and_(and_(True, False), and_(False, False)), and_(True, True)), _if_then_else(or_(True, True), _if_then_else(False, compare_blocks_rows, 1), _if_then_else(True, ones_diff_cols, ones_diff_cols)), _if_then_else(and_(False, True), _if_then_else(True, 0, 2), _if_then_else(False, 2, 0))))
or_(or_(le(compare_blocks_cols, zeros_diff_cols), and_(True, False)), False)
ge(_if_then_else(or_(or_(True, False), and_(False, True)), _if_then_else(or_(False, True), 0, _if_then_else(False, zeros_diff_cols, 3)), _if_then_else(or_(True, True), _if_then_else(False, 1, compare_blocks_rows), _if_then_else(True, 3, max_col_clue))), _if_then_else(ge(_if_then_else(True, zeros_diff_rows, zeros_diff_cols), _if_then_else(True, max_row_clue, 4)), _if_then_else(ge(ones_diff_cols, 4), _if_then_else(False, max_row_clue, 3), _if_then_else(True, max_row_clue, ones_diff_cols)), _if_then_else(le(max_col_clue, compare_blocks_rows), _if_then_else(True, 3, 3), _if_then_else(True, 3, zeros_diff_rows))))
or_(ge(2, _if_then_else(False, compare_blocks_rows, max_row_clue)), and_(False, False))
or_(le(_if_then_else(True, _if_then_else(True, zeros_diff_rows, max_col_clue), _if_then_else(True, 1, ones_diff_rows)), _if_then_else(and_(True, False), ones_diff_cols, 1)), or_(le(zeros_diff_cols, max_col_clue), or_(False, ge(1, 4))))
VAL TREES:
mul(add(add(ones_diff_cols, ones_diff_cols), add(ones_diff_rows, ones_diff_cols)), add(mul(ones_diff_cols, ones_diff_cols), mul(compare_blocks_cols, ones_diff_cols)))
mul(mul(add(mul(add(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), mul(zeros_diff_cols, zeros_diff_cols))), add(add(add(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, zeros_diff_rows)), mul(mul(ones_diff_rows, ones_diff_cols), add(compare_blocks_rows, compare_blocks_cols)))), mul(add(mul(mul(ones_diff_cols, ones_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(add(compare_blocks_cols, zeros_diff_rows), mul(ones_diff_rows, compare_blocks_cols))), add(compare_blocks_rows, mul(add(compare_blocks_cols, ones_diff_cols), add(ones_diff_rows, compare_blocks_cols)))))
mul(add(mul(add(ones_diff_cols, compare_blocks_rows), mul(add(add(ones_diff_rows, ones_diff_rows), mul(ones_diff_cols, zeros_diff_rows)), compare_blocks_cols)), mul(add(compare_blocks_cols, ones_diff_rows), add(zeros_diff_cols, compare_blocks_cols))), mul(add(add(ones_diff_cols, zeros_diff_cols), add(ones_diff_rows, ones_diff_cols)), mul(mul(ones_diff_rows, zeros_diff_rows), mul(zeros_diff_rows, zeros_diff_cols))))
mul(add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows)), add(add(compare_blocks_rows, compare_blocks_rows), mul(compare_blocks_cols, compare_blocks_cols)))
mul(add(add(add(mul(ones_diff_cols, ones_diff_cols), add(compare_blocks_cols, zeros_diff_cols)), mul(add(compare_blocks_cols, zeros_diff_rows), mul(zeros_diff_rows, ones_diff_rows))), add(add(mul(zeros_diff_cols, compare_blocks_rows), add(compare_blocks_rows, compare_blocks_rows)), add(add(compare_blocks_cols, zeros_diff_cols), mul(compare_blocks_rows, compare_blocks_cols)))), add(mul(mul(mul(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_cols, ones_diff_cols)), mul(mul(zeros_diff_rows, zeros_diff_cols), mul(ones_diff_rows, ones_diff_cols))), mul(mul(add(ones_diff_rows, zeros_diff_rows), mul(ones_diff_rows, zeros_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(ones_diff_rows, zeros_diff_cols)))))
add(add(add(add(compare_blocks_cols, ones_diff_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_cols, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(add(mul(zeros_diff_cols, compare_blocks_rows), mul(zeros_diff_rows, compare_blocks_cols)), mul(mul(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, ones_diff_cols))))
COND TREES:
and_(or_(ge(max_col_clue, max_row_clue), and_(False, False)), and_(and_(True, False), and_(False, False)))
ge(0, _if_then_else(True, _if_then_else(and_(True, False), ones_diff_rows, compare_blocks_cols), _if_then_else(True, 3, ones_diff_cols)))
and_(ge(_if_then_else(False, 1, ones_diff_cols), _if_then_else(False, max_col_clue, 4)), or_(and_(False, True), ge(_if_then_else(ge(_if_then_else(False, max_col_clue, 1), _if_then_else(False, 2, _if_then_else(False, 4, compare_blocks_rows))), 4, compare_blocks_rows), _if_then_else(True, 1, 4))))
le(_if_then_else(True, max_col_clue, ones_diff_rows), _if_then_else(or_(False, False), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, zeros_diff_cols, 0)))
or_(or_(False, False), and_(le(ones_diff_cols, _if_then_else(le(_if_then_else(False, ones_diff_rows, max_row_clue), _if_then_else(False, zeros_diff_cols, 3)), _if_then_else(or_(True, True), _if_then_else(False, 4, 2), _if_then_else(True, max_col_clue, 1)), _if_then_else(or_(False, True), _if_then_else(False, ones_diff_rows, ones_diff_rows), _if_then_else(and_(ge(2, zeros_diff_cols), ge(max_row_clue, 1)), compare_blocks_rows, compare_blocks_cols)))), le(compare_blocks_rows, zeros_diff_rows)))
VAL TREES:
add(mul(add(add(compare_blocks_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_cols))), add(mul(add(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_rows, zeros_diff_rows)), add(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_cols, ones_diff_cols))))
add(compare_blocks_rows, mul(mul(mul(compare_blocks_cols, ones_diff_rows), mul(ones_diff_cols, compare_blocks_rows)), add(zeros_diff_cols, compare_blocks_rows)))
mul(add(add(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols))), mul(mul(add(ones_diff_rows, ones_diff_cols), add(zeros_diff_rows, zeros_diff_cols)), mul(add(ones_diff_cols, ones_diff_cols), mul(compare_blocks_rows, ones_diff_cols))))
mul(mul(add(compare_blocks_cols, zeros_diff_cols), mul(ones_diff_cols, compare_blocks_rows)), add(mul(zeros_diff_rows, compare_blocks_rows), add(ones_diff_rows, ones_diff_cols)))
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(add(ones_diff_rows, ones_diff_rows), ones_diff_cols)), mul(add(mul(mul(ones_diff_rows, zeros_diff_rows), mul(ones_diff_rows, zeros_diff_cols)), zeros_diff_rows), mul(add(add(compare_blocks_cols, ones_diff_cols), zeros_diff_rows), zeros_diff_rows)))
mul(mul(add(zeros_diff_rows, ones_diff_cols), add(zeros_diff_cols, ones_diff_rows)), add(mul(ones_diff_rows, compare_blocks_cols), mul(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))))
COND TREES:
ge(_if_then_else(and_(ge(3, compare_blocks_rows), and_(False, False)), _if_then_else(and_(True, True), _if_then_else(False, 1, 2), _if_then_else(False, 3, 1)), _if_then_else(ge(zeros_diff_cols, 0), _if_then_else(True, 2, 1), 3)), _if_then_else(and_(le(4, compare_blocks_rows), and_(True, True)), _if_then_else(or_(False, False), _if_then_else(False, compare_blocks_rows, 1), _if_then_else(True, ones_diff_cols, ones_diff_cols)), _if_then_else(and_(False, True), _if_then_else(True, 0, 2), _if_then_else(False, 2, 0))))
or_(or_(le(ones_diff_rows, zeros_diff_cols), le(compare_blocks_cols, compare_blocks_rows)), and_(or_(True, False), or_(False, True)))
ge(_if_then_else(or_(or_(True, False), and_(False, True)), _if_then_else(or_(False, True), 0, _if_then_else(False, zeros_diff_cols, 3)), _if_then_else(or_(True, False), _if_then_else(False, 1, compare_blocks_rows), 0)), _if_then_else(ge(_if_then_else(True, zeros_diff_rows, zeros_diff_cols), _if_then_else(True, max_row_clue, _if_then_else(False, 4, zeros_diff_cols))), _if_then_else(ge(ones_diff_cols, 4), _if_then_else(False, max_row_clue, 3), _if_then_else(True, max_row_clue, ones_diff_cols)), _if_then_else(le(max_col_clue, compare_blocks_rows), _if_then_else(True, 3, 3), _if_then_else(True, 3, zeros_diff_rows))))
or_(ge(_if_then_else(True, zeros_diff_cols, ones_diff_cols), _if_then_else(False, compare_blocks_rows, max_row_clue)), le(_if_then_else(True, zeros_diff_cols, _if_then_else(ge(max_row_clue, compare_blocks_cols), _if_then_else(False, ones_diff_rows, 4), _if_then_else(True, ones_diff_cols, 3))), _if_then_else(and_(True, False), zeros_diff_cols, 4)))
or_(False, or_(le(zeros_diff_cols, max_col_clue), or_(False, ge(max_col_clue, 4))))
VAL TREES:
mul(add(add(ones_diff_cols, ones_diff_cols), mul(mul(zeros_diff_cols, ones_diff_rows), mul(zeros_diff_cols, ones_diff_cols))), add(mul(ones_diff_cols, ones_diff_cols), mul(compare_blocks_cols, ones_diff_cols)))
mul(mul(add(mul(add(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), mul(zeros_diff_cols, zeros_diff_cols))), add(add(add(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, zeros_diff_rows)), mul(mul(ones_diff_rows, ones_diff_cols), add(compare_blocks_rows, compare_blocks_cols)))), mul(add(mul(mul(ones_diff_cols, ones_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(add(compare_blocks_cols, zeros_diff_rows), mul(ones_diff_rows, compare_blocks_cols))), add(mul(add(ones_diff_cols, compare_blocks_rows), add(ones_diff_cols, zeros_diff_cols)), mul(add(compare_blocks_cols, ones_diff_cols), add(ones_diff_rows, compare_blocks_cols)))))
mul(add(mul(add(ones_diff_cols, compare_blocks_rows), mul(add(add(ones_diff_rows, ones_diff_rows), mul(ones_diff_cols, zeros_diff_rows)), compare_blocks_cols)), mul(add(compare_blocks_cols, ones_diff_rows), add(zeros_diff_cols, compare_blocks_cols))), mul(add(add(ones_diff_cols, zeros_diff_cols), add(ones_diff_rows, ones_diff_cols)), mul(mul(ones_diff_rows, zeros_diff_rows), mul(zeros_diff_rows, zeros_diff_cols))))
mul(add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows)), add(add(compare_blocks_rows, compare_blocks_rows), mul(compare_blocks_cols, compare_blocks_cols)))
mul(add(add(add(mul(ones_diff_cols, ones_diff_cols), add(compare_blocks_cols, zeros_diff_cols)), mul(add(compare_blocks_cols, zeros_diff_rows), mul(zeros_diff_rows, ones_diff_rows))), add(add(mul(zeros_diff_cols, compare_blocks_rows), add(compare_blocks_rows, compare_blocks_rows)), add(add(compare_blocks_cols, zeros_diff_cols), mul(compare_blocks_rows, compare_blocks_cols)))), add(mul(mul(mul(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_cols, ones_diff_cols)), mul(mul(zeros_diff_rows, zeros_diff_cols), mul(ones_diff_rows, ones_diff_cols))), mul(mul(add(ones_diff_rows, zeros_diff_rows), mul(ones_diff_rows, zeros_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(ones_diff_rows, zeros_diff_cols)))))
add(add(add(add(compare_blocks_cols, ones_diff_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_cols, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(add(mul(zeros_diff_cols, compare_blocks_rows), mul(zeros_diff_rows, compare_blocks_cols)), mul(mul(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, ones_diff_cols))))
COND TREES:
and_(or_(or_(True, False), and_(False, True)), and_(and_(True, le(0, zeros_diff_cols)), and_(False, False)))
ge(0, zeros_diff_cols)
and_(ge(_if_then_else(False, ones_diff_cols, ones_diff_cols), _if_then_else(False, max_col_clue, 4)), or_(and_(False, True), ge(4, 2)))
le(_if_then_else(False, max_col_clue, 4), _if_then_else(and_(True, False), _if_then_else(False, compare_blocks_rows, 2), 2))
or_(ge(_if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(False, _if_then_else(False, 0, 3), 1)), and_(le(ones_diff_cols, zeros_diff_rows), le(compare_blocks_rows, zeros_diff_rows)))
VAL TREES:
add(mul(add(add(compare_blocks_rows, compare_blocks_rows), mul(zeros_diff_cols, ones_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_cols))), add(mul(add(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_rows, zeros_diff_rows)), add(mul(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_rows, zeros_diff_cols)), mul(ones_diff_cols, ones_diff_cols))))
add(mul(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_rows, ones_diff_cols)), mul(mul(mul(compare_blocks_cols, ones_diff_rows), mul(ones_diff_cols, compare_blocks_rows)), add(add(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_cols, zeros_diff_rows))))
mul(add(add(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols))), mul(mul(add(ones_diff_rows, ones_diff_cols), add(compare_blocks_cols, compare_blocks_cols)), mul(add(mul(compare_blocks_cols, ones_diff_rows), ones_diff_cols), mul(compare_blocks_rows, ones_diff_cols))))
mul(mul(add(mul(zeros_diff_cols, zeros_diff_rows), zeros_diff_cols), mul(ones_diff_cols, compare_blocks_rows)), add(mul(zeros_diff_rows, compare_blocks_rows), add(ones_diff_rows, ones_diff_cols)))
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(add(add(add(zeros_diff_rows, compare_blocks_rows), mul(ones_diff_cols, ones_diff_rows)), ones_diff_rows), ones_diff_cols)), mul(add(zeros_diff_cols, zeros_diff_rows), mul(add(add(compare_blocks_cols, ones_diff_cols), zeros_diff_rows), zeros_diff_rows)))
mul(mul(add(zeros_diff_rows, ones_diff_cols), add(zeros_diff_cols, ones_diff_rows)), add(mul(ones_diff_rows, compare_blocks_cols), mul(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))))
COND TREES:
ge(_if_then_else(and_(ge(3, compare_blocks_rows), and_(False, False)), _if_then_else(and_(True, True), _if_then_else(False, 1, 2), _if_then_else(False, 3, 1)), _if_then_else(ge(zeros_diff_cols, 0), _if_then_else(True, 2, 1), _if_then_else(True, compare_blocks_rows, 2))), _if_then_else(and_(le(4, compare_blocks_rows), and_(True, True)), _if_then_else(or_(True, True), _if_then_else(False, compare_blocks_rows, 1), _if_then_else(True, _if_then_else(le(ones_diff_rows, ones_diff_rows), _if_then_else(False, compare_blocks_cols, zeros_diff_cols), _if_then_else(True, max_col_clue, max_row_clue)), ones_diff_cols)), _if_then_else(and_(False, True), _if_then_else(True, 0, 2), _if_then_else(False, 2, 0))))
or_(and_(or_(True, False), or_(False, True)), False)
ge(_if_then_else(or_(or_(True, False), ge(_if_then_else(ge(zeros_diff_cols, compare_blocks_cols), zeros_diff_rows, zeros_diff_cols), _if_then_else(le(ones_diff_cols, 0), max_row_clue, 4))), _if_then_else(or_(False, True), 0, _if_then_else(False, zeros_diff_cols, 3)), _if_then_else(or_(True, True), _if_then_else(False, 1, compare_blocks_rows), _if_then_else(True, 3, max_col_clue))), _if_then_else(ge(_if_then_else(True, zeros_diff_rows, zeros_diff_cols), _if_then_else(True, max_row_clue, 4)), _if_then_else(ge(ones_diff_cols, 4), _if_then_else(False, max_row_clue, 3), _if_then_else(True, max_row_clue, ones_diff_cols)), _if_then_else(le(max_col_clue, compare_blocks_rows), _if_then_else(True, 3, 3), _if_then_else(True, 3, zeros_diff_rows))))
le(_if_then_else(True, compare_blocks_rows, zeros_diff_rows), _if_then_else(False, ones_diff_rows, compare_blocks_cols))
False
VAL TREES:
mul(add(add(ones_diff_cols, ones_diff_cols), add(ones_diff_rows, ones_diff_cols)), add(mul(ones_diff_cols, ones_diff_cols), mul(compare_blocks_cols, ones_diff_cols)))
mul(mul(add(mul(add(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), mul(zeros_diff_cols, zeros_diff_cols))), add(add(add(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, zeros_diff_rows)), mul(mul(ones_diff_rows, ones_diff_cols), add(compare_blocks_rows, compare_blocks_cols)))), mul(add(mul(mul(ones_diff_cols, ones_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(add(compare_blocks_cols, zeros_diff_rows), mul(ones_diff_rows, compare_blocks_cols))), add(compare_blocks_rows, mul(add(compare_blocks_cols, ones_diff_cols), add(ones_diff_rows, compare_blocks_cols)))))
mul(add(mul(add(ones_diff_cols, compare_blocks_rows), mul(add(add(ones_diff_rows, ones_diff_rows), mul(ones_diff_cols, zeros_diff_rows)), compare_blocks_cols)), mul(add(compare_blocks_cols, ones_diff_rows), add(zeros_diff_cols, compare_blocks_cols))), mul(add(add(ones_diff_cols, zeros_diff_cols), add(ones_diff_rows, ones_diff_cols)), mul(mul(ones_diff_rows, zeros_diff_rows), mul(zeros_diff_rows, zeros_diff_cols))))
mul(add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows)), add(add(compare_blocks_rows, compare_blocks_rows), mul(compare_blocks_cols, compare_blocks_cols)))
mul(add(add(add(mul(ones_diff_cols, ones_diff_cols), add(compare_blocks_cols, zeros_diff_cols)), mul(add(compare_blocks_cols, zeros_diff_rows), mul(zeros_diff_rows, ones_diff_rows))), add(add(mul(zeros_diff_cols, compare_blocks_rows), add(compare_blocks_rows, compare_blocks_rows)), add(add(compare_blocks_cols, zeros_diff_cols), mul(compare_blocks_rows, compare_blocks_cols)))), add(mul(mul(mul(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_cols, ones_diff_cols)), mul(mul(zeros_diff_rows, zeros_diff_cols), mul(ones_diff_rows, ones_diff_cols))), mul(mul(add(ones_diff_rows, zeros_diff_rows), mul(ones_diff_rows, zeros_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(ones_diff_rows, zeros_diff_cols)))))
add(add(add(add(compare_blocks_cols, ones_diff_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_cols, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(add(mul(zeros_diff_cols, compare_blocks_rows), mul(zeros_diff_rows, compare_blocks_cols)), mul(mul(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, ones_diff_cols))))
COND TREES:
le(_if_then_else(and_(ge(0, zeros_diff_cols), and_(False, False)), _if_then_else(le(3, max_row_clue), _if_then_else(False, max_col_clue, compare_blocks_cols), _if_then_else(True, 2, ones_diff_rows)), _if_then_else(ge(max_col_clue, zeros_diff_rows), _if_then_else(True, 4, ones_diff_rows), _if_then_else(False, ones_diff_cols, zeros_diff_rows))), _if_then_else(ge(_if_then_else(False, ones_diff_rows, compare_blocks_rows), _if_then_else(False, ones_diff_cols, compare_blocks_cols)), _if_then_else(le(compare_blocks_cols, compare_blocks_rows), _if_then_else(True, ones_diff_cols, 4), _if_then_else(True, zeros_diff_rows, zeros_diff_cols)), _if_then_else(or_(True, False), _if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(False, zeros_diff_rows, compare_blocks_cols))))
or_(and_(and_(True, False), and_(True, True)), and_(or_(True, False), or_(False, True)))
or_(ge(_if_then_else(True, 3, 4), _if_then_else(False, 2, max_row_clue)), and_(and_(or_(True, True), True), and_(True, False)))
or_(le(_if_then_else(le(max_row_clue, compare_blocks_rows), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(False, zeros_diff_cols, 0)), _if_then_else(True, 0, ones_diff_cols)), or_(and_(False, False), or_(False, False)))
ge(_if_then_else(le(_if_then_else(ge(ones_diff_rows, zeros_diff_rows), _if_then_else(False, 3, 1), _if_then_else(True, 4, zeros_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, zeros_diff_rows), _if_then_else(False, max_col_clue, zeros_diff_rows))), _if_then_else(or_(and_(False, False), or_(True, True)), _if_then_else(or_(True, True), _if_then_else(True, 2, ones_diff_rows), _if_then_else(True, max_row_clue, 4)), _if_then_else(and_(True, False), _if_then_else(True, ones_diff_rows, compare_blocks_rows), _if_then_else(False, 4, max_col_clue))), _if_then_else(le(_if_then_else(False, ones_diff_rows, max_row_clue), _if_then_else(False, zeros_diff_cols, 3)), _if_then_else(or_(True, True), _if_then_else(False, 4, 2), _if_then_else(True, max_col_clue, 1)), _if_then_else(or_(False, True), _if_then_else(False, ones_diff_rows, ones_diff_rows), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)))), _if_then_else(le(_if_then_else(or_(False, True), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, 3, ones_diff_rows)), _if_then_else(ge(zeros_diff_rows, 3), _if_then_else(False, max_col_clue, ones_diff_rows), _if_then_else(True, ones_diff_rows, zeros_diff_cols))), _if_then_else(le(_if_then_else(or_(False, False), _if_then_else(False, _if_then_else(False, compare_blocks_cols, 0), 0), _if_then_else(True, ones_diff_cols, zeros_diff_cols)), _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(le(compare_blocks_rows, zeros_diff_cols), _if_then_else(True, 0, 4), _if_then_else(False, zeros_diff_rows, max_col_clue)), _if_then_else(le(3, 1), _if_then_else(True, zeros_diff_cols, max_col_clue), _if_then_else(False, 2, zeros_diff_rows))), _if_then_else(and_(or_(True, True), or_(False, False)), _if_then_else(le(2, ones_diff_cols), _if_then_else(False, 0, ones_diff_rows), _if_then_else(True, 1, 0)), _if_then_else(ge(3, zeros_diff_cols), _if_then_else(False, 4, ones_diff_rows), _if_then_else(False, 2, zeros_diff_rows)))))
VAL TREES:
add(add(add(zeros_diff_cols, mul(compare_blocks_rows, compare_blocks_cols)), add(mul(add(compare_blocks_cols, compare_blocks_rows), zeros_diff_rows), mul(mul(zeros_diff_rows, compare_blocks_rows), compare_blocks_rows))), mul(add(ones_diff_rows, zeros_diff_cols), add(compare_blocks_cols, zeros_diff_rows)))
mul(add(compare_blocks_cols, ones_diff_cols), mul(compare_blocks_cols, zeros_diff_cols))
add(mul(mul(add(add(compare_blocks_rows, compare_blocks_cols), zeros_diff_rows), add(add(ones_diff_cols, compare_blocks_cols), ones_diff_cols)), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_rows), add(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, add(compare_blocks_rows, compare_blocks_cols))), compare_blocks_rows)))
add(add(add(zeros_diff_cols, ones_diff_cols), add(zeros_diff_rows, compare_blocks_rows)), mul(mul(ones_diff_cols, ones_diff_cols), mul(zeros_diff_rows, ones_diff_rows)))
mul(add(mul(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, zeros_diff_cols)), add(mul(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, ones_diff_cols)))
add(mul(mul(ones_diff_rows, ones_diff_cols), add(add(zeros_diff_cols, compare_blocks_rows), add(ones_diff_rows, compare_blocks_cols))), mul(mul(mul(zeros_diff_cols, compare_blocks_rows), ones_diff_rows), add(mul(ones_diff_cols, zeros_diff_cols), zeros_diff_cols)))
COND TREES:
le(_if_then_else(and_(ge(0, zeros_diff_cols), and_(False, False)), _if_then_else(and_(False, False), _if_then_else(ge(zeros_diff_cols, 0), _if_then_else(True, 2, 1), _if_then_else(True, _if_then_else(False, compare_blocks_rows, 1), _if_then_else(True, ones_diff_cols, ones_diff_cols))), _if_then_else(True, 4, ones_diff_rows)), _if_then_else(ge(max_col_clue, zeros_diff_rows), _if_then_else(True, 4, ones_diff_rows), _if_then_else(False, _if_then_else(ge(zeros_diff_cols, 0), _if_then_else(True, 4, 0), _if_then_else(True, max_row_clue, 2)), zeros_diff_rows))), _if_then_else(ge(_if_then_else(False, ones_diff_rows, _if_then_else(True, 4, ones_diff_rows)), _if_then_else(True, ones_diff_cols, compare_blocks_cols)), 0, _if_then_else(or_(True, False), _if_then_else(True, zeros_diff_cols, ones_diff_cols), _if_then_else(False, zeros_diff_rows, compare_blocks_cols))))
or_(and_(and_(True, or_(False, True)), True), and_(or_(True, and_(and_(le(4, zeros_diff_cols), or_(False, True)), True)), le(zeros_diff_rows, ones_diff_rows)))
or_(False, and_(or_(or_(True, False), or_(True, False)), or_(True, True)))
or_(le(_if_then_else(False, _if_then_else(ge(4, compare_blocks_cols), _if_then_else(True, compare_blocks_cols, zeros_diff_rows), _if_then_else(True, zeros_diff_rows, 0)), zeros_diff_rows), _if_then_else(False, ones_diff_cols, zeros_diff_rows)), or_(and_(False, False), or_(True, and_(True, False))))
ge(_if_then_else(le(_if_then_else(True, _if_then_else(True, 1, ones_diff_rows), _if_then_else(False, compare_blocks_cols, 3)), _if_then_else(and_(True, False), ones_diff_cols, 1)), _if_then_else(or_(and_(False, False), or_(le(zeros_diff_cols, max_col_clue), or_(False, ge(1, 4)))), _if_then_else(or_(True, True), _if_then_else(True, 2, ones_diff_rows), _if_then_else(True, max_row_clue, 4)), _if_then_else(and_(True, False), _if_then_else(True, ones_diff_rows, compare_blocks_rows), _if_then_else(False, 4, zeros_diff_rows))), _if_then_else(le(_if_then_else(False, ones_diff_rows, max_row_clue), _if_then_else(False, zeros_diff_cols, 3)), _if_then_else(or_(False, True), _if_then_else(False, 4, 2), _if_then_else(True, max_col_clue, 1)), _if_then_else(or_(False, True), _if_then_else(False, ones_diff_rows, ones_diff_rows), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)))), _if_then_else(le(_if_then_else(and_(True, False), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, 3, ones_diff_rows)), _if_then_else(ge(zeros_diff_rows, 3), _if_then_else(False, max_col_clue, ones_diff_rows), _if_then_else(True, ones_diff_rows, zeros_diff_cols))), _if_then_else(le(_if_then_else(True, zeros_diff_rows, compare_blocks_rows), _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(le(compare_blocks_rows, zeros_diff_cols), _if_then_else(True, 0, 4), _if_then_else(False, zeros_diff_rows, max_col_clue)), _if_then_else(le(3, 1), _if_then_else(True, zeros_diff_cols, max_col_clue), _if_then_else(False, 2, zeros_diff_rows))), _if_then_else(or_(True, True), _if_then_else(le(2, ones_diff_cols), _if_then_else(False, 0, ones_diff_rows), _if_then_else(True, 1, 0)), _if_then_else(ge(3, zeros_diff_cols), _if_then_else(False, 4, ones_diff_rows), _if_then_else(False, 2, zeros_diff_rows)))))
VAL TREES:
add(add(add(zeros_diff_cols, mul(compare_blocks_rows, compare_blocks_cols)), add(mul(add(mul(mul(compare_blocks_rows, zeros_diff_rows), mul(compare_blocks_rows, ones_diff_rows)), compare_blocks_rows), compare_blocks_rows), mul(mul(zeros_diff_rows, compare_blocks_rows), zeros_diff_rows))), mul(add(ones_diff_rows, zeros_diff_cols), add(compare_blocks_cols, zeros_diff_rows)))
mul(mul(mul(ones_diff_cols, mul(mul(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_cols))), add(ones_diff_rows, zeros_diff_rows)), mul(add(compare_blocks_cols, ones_diff_rows), add(ones_diff_rows, compare_blocks_cols)))
add(mul(mul(add(add(compare_blocks_rows, compare_blocks_cols), zeros_diff_rows), add(add(ones_diff_cols, mul(add(ones_diff_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_cols))), ones_diff_cols)), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_rows), add(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_rows)), compare_blocks_rows)))
add(add(add(zeros_diff_cols, add(add(zeros_diff_rows, ones_diff_rows), mul(zeros_diff_rows, zeros_diff_rows))), add(zeros_diff_rows, compare_blocks_rows)), mul(mul(mul(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, zeros_diff_rows)), ones_diff_cols), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_rows, ones_diff_cols))))
mul(add(mul(zeros_diff_rows, ones_diff_rows), add(add(zeros_diff_rows, compare_blocks_rows), add(mul(compare_blocks_cols, ones_diff_rows), add(compare_blocks_cols, zeros_diff_cols)))), add(mul(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, ones_diff_cols)))
add(mul(mul(ones_diff_rows, ones_diff_cols), mul(compare_blocks_rows, add(add(ones_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, compare_blocks_rows)))), mul(mul(mul(zeros_diff_cols, compare_blocks_rows), ones_diff_rows), add(mul(ones_diff_cols, add(ones_diff_cols, compare_blocks_rows)), zeros_diff_cols)))
COND TREES:
ge(_if_then_else(and_(ge(3, compare_blocks_rows), and_(False, or_(True, True))), _if_then_else(and_(True, True), _if_then_else(False, 1, 2), _if_then_else(False, 3, 1)), _if_then_else(or_(False, True), _if_then_else(True, 2, 1), _if_then_else(True, compare_blocks_rows, 2))), _if_then_else(and_(le(4, compare_blocks_rows), and_(True, True)), _if_then_else(or_(True, True), _if_then_else(False, compare_blocks_rows, 1), _if_then_else(True, ones_diff_cols, ones_diff_cols)), _if_then_else(False, _if_then_else(True, 0, 2), _if_then_else(False, 2, 0))))
or_(or_(True, False), False)
ge(_if_then_else(or_(or_(True, False), ge(4, 2)), _if_then_else(or_(False, True), 0, _if_then_else(False, zeros_diff_cols, 3)), _if_then_else(and_(True, False), _if_then_else(False, 1, compare_blocks_rows), _if_then_else(True, 3, max_col_clue))), _if_then_else(ge(_if_then_else(True, zeros_diff_rows, zeros_diff_cols), _if_then_else(True, max_row_clue, 4)), _if_then_else(ge(ones_diff_cols, 4), _if_then_else(False, max_row_clue, 3), _if_then_else(True, max_row_clue, ones_diff_cols)), _if_then_else(le(max_col_clue, compare_blocks_rows), _if_then_else(True, 3, 3), _if_then_else(True, _if_then_else(or_(False, False), _if_then_else(False, ones_diff_cols, zeros_diff_cols), _if_then_else(False, 3, zeros_diff_rows)), zeros_diff_rows))))
or_(and_(and_(and_(False, False), ge(2, 0)), False), le(_if_then_else(True, zeros_diff_cols, 4), _if_then_else(True, zeros_diff_cols, 4)))
or_(le(_if_then_else(ge(ones_diff_rows, zeros_diff_rows), _if_then_else(False, 3, 1), _if_then_else(True, 4, zeros_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, zeros_diff_rows), _if_then_else(False, max_col_clue, zeros_diff_rows))), or_(le(_if_then_else(False, ones_diff_cols, ones_diff_rows), max_col_clue), or_(False, ge(1, 4))))
VAL TREES:
mul(add(add(ones_diff_cols, ones_diff_cols), add(ones_diff_rows, ones_diff_cols)), add(mul(ones_diff_cols, ones_diff_cols), mul(compare_blocks_cols, ones_diff_cols)))
mul(mul(add(mul(add(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), mul(zeros_diff_cols, zeros_diff_cols))), add(add(add(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, zeros_diff_rows)), mul(mul(ones_diff_rows, ones_diff_cols), add(compare_blocks_rows, compare_blocks_cols)))), mul(add(mul(mul(ones_diff_cols, ones_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(add(compare_blocks_cols, zeros_diff_rows), mul(ones_diff_rows, compare_blocks_cols))), add(compare_blocks_rows, mul(add(compare_blocks_cols, ones_diff_cols), add(ones_diff_rows, compare_blocks_cols)))))
mul(add(mul(add(ones_diff_cols, compare_blocks_rows), mul(add(add(ones_diff_rows, ones_diff_rows), mul(ones_diff_cols, zeros_diff_rows)), compare_blocks_cols)), mul(add(compare_blocks_cols, ones_diff_rows), add(zeros_diff_cols, compare_blocks_cols))), mul(add(add(ones_diff_cols, zeros_diff_cols), add(ones_diff_rows, ones_diff_cols)), mul(mul(ones_diff_rows, zeros_diff_rows), mul(zeros_diff_rows, zeros_diff_cols))))
mul(add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows)), add(add(compare_blocks_rows, compare_blocks_rows), mul(compare_blocks_cols, compare_blocks_cols)))
mul(add(add(add(mul(ones_diff_cols, ones_diff_cols), add(compare_blocks_cols, zeros_diff_cols)), mul(add(compare_blocks_cols, zeros_diff_rows), mul(zeros_diff_rows, ones_diff_rows))), add(add(mul(zeros_diff_cols, compare_blocks_rows), add(compare_blocks_rows, compare_blocks_rows)), add(add(compare_blocks_cols, zeros_diff_cols), mul(compare_blocks_rows, compare_blocks_cols)))), add(mul(mul(mul(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_cols, ones_diff_cols)), mul(mul(zeros_diff_rows, zeros_diff_cols), mul(ones_diff_rows, ones_diff_cols))), mul(mul(add(ones_diff_rows, zeros_diff_rows), mul(ones_diff_rows, zeros_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(ones_diff_rows, zeros_diff_cols)))))
add(add(add(add(compare_blocks_cols, ones_diff_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_cols, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(add(mul(zeros_diff_cols, compare_blocks_rows), mul(zeros_diff_rows, compare_blocks_cols)), mul(mul(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, ones_diff_cols))))
COND TREES:
and_(and_(False, False), False)
le(4, 0)
and_(and_(or_(False, False), True), or_(and_(False, True), ge(3, _if_then_else(and_(False, True), _if_then_else(True, compare_blocks_cols, 0), compare_blocks_cols))))
le(_if_then_else(True, max_col_clue, ones_diff_cols), ones_diff_cols)
le(_if_then_else(or_(True, True), _if_then_else(False, zeros_diff_rows, 2), _if_then_else(True, max_col_clue, 1)), max_row_clue)
VAL TREES:
add(mul(add(add(compare_blocks_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_cols))), add(mul(add(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_rows, zeros_diff_rows)), add(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_cols, ones_diff_cols))))
add(mul(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_rows, ones_diff_cols)), mul(mul(mul(compare_blocks_cols, ones_diff_rows), mul(ones_diff_cols, compare_blocks_rows)), add(zeros_diff_cols, compare_blocks_rows)))
mul(add(add(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols))), mul(mul(add(ones_diff_rows, ones_diff_cols), add(compare_blocks_cols, compare_blocks_cols)), mul(add(ones_diff_cols, ones_diff_cols), mul(compare_blocks_rows, ones_diff_cols))))
mul(mul(add(compare_blocks_cols, zeros_diff_cols), mul(ones_diff_cols, compare_blocks_rows)), add(mul(zeros_diff_rows, compare_blocks_rows), add(ones_diff_rows, ones_diff_cols)))
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(add(ones_diff_rows, ones_diff_rows), ones_diff_cols)), mul(add(zeros_diff_cols, zeros_diff_rows), mul(add(add(compare_blocks_cols, ones_diff_cols), zeros_diff_rows), zeros_diff_rows)))
mul(mul(add(zeros_diff_rows, ones_diff_cols), add(zeros_diff_cols, ones_diff_rows)), add(mul(ones_diff_rows, compare_blocks_cols), mul(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))))
COND TREES:
le(_if_then_else(and_(ge(2, zeros_diff_cols), and_(False, False)), _if_then_else(le(3, max_row_clue), _if_then_else(False, max_col_clue, compare_blocks_cols), _if_then_else(True, 2, 2)), _if_then_else(ge(max_col_clue, zeros_diff_rows), _if_then_else(True, 4, ones_diff_rows), _if_then_else(False, ones_diff_cols, zeros_diff_rows))), _if_then_else(ge(max_row_clue, _if_then_else(False, ones_diff_cols, compare_blocks_cols)), _if_then_else(le(compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 0, 4), _if_then_else(True, zeros_diff_rows, zeros_diff_cols)), _if_then_else(or_(True, False), _if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(True, zeros_diff_rows, compare_blocks_cols))))
or_(and_(and_(True, le(4, 3)), True), le(_if_then_else(True, ones_diff_cols, ones_diff_rows), _if_then_else(or_(True, True), 2, _if_then_else(False, compare_blocks_rows, zeros_diff_cols))))
or_(and_(True, True), and_(ge(_if_then_else(False, 1, ones_diff_cols), _if_then_else(False, _if_then_else(ge(compare_blocks_rows, 3), _if_then_else(True, max_row_clue, compare_blocks_cols), _if_then_else(True, ones_diff_rows, 1)), 4)), and_(True, False)))
or_(False, or_(and_(False, False), or_(False, and_(and_(False, True), le(0, 3)))))
ge(_if_then_else(le(_if_then_else(ge(ones_diff_rows, zeros_diff_rows), _if_then_else(False, 3, 1), _if_then_else(True, 4, zeros_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, zeros_diff_rows), _if_then_else(False, max_col_clue, zeros_diff_rows))), _if_then_else(or_(False, True), _if_then_else(or_(True, True), _if_then_else(True, 2, ones_diff_rows), _if_then_else(True, max_row_clue, 4)), _if_then_else(and_(True, False), _if_then_else(True, max_col_clue, compare_blocks_rows), _if_then_else(False, 4, zeros_diff_rows))), _if_then_else(le(_if_then_else(False, ones_diff_rows, max_row_clue), _if_then_else(False, zeros_diff_cols, 3)), _if_then_else(True, 3, 0), _if_then_else(or_(False, True), _if_then_else(False, ones_diff_rows, ones_diff_rows), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)))), _if_then_else(le(_if_then_else(or_(False, True), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, 3, ones_diff_rows)), _if_then_else(ge(zeros_diff_rows, 3), _if_then_else(False, max_col_clue, ones_diff_rows), _if_then_else(True, ones_diff_rows, zeros_diff_cols))), _if_then_else(le(_if_then_else(True, zeros_diff_rows, compare_blocks_rows), _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(le(compare_blocks_rows, zeros_diff_cols), _if_then_else(True, 0, 4), _if_then_else(False, zeros_diff_rows, max_col_clue)), _if_then_else(le(3, 1), _if_then_else(True, zeros_diff_cols, max_col_clue), _if_then_else(False, 2, zeros_diff_rows))), _if_then_else(and_(or_(True, True), or_(False, False)), _if_then_else(le(2, ones_diff_cols), _if_then_else(False, 0, ones_diff_rows), _if_then_else(True, 1, 0)), _if_then_else(ge(3, zeros_diff_cols), _if_then_else(False, 4, ones_diff_rows), _if_then_else(False, 2, zeros_diff_rows)))))
VAL TREES:
add(add(add(zeros_diff_cols, mul(compare_blocks_rows, mul(add(compare_blocks_cols, compare_blocks_cols), mul(zeros_diff_cols, zeros_diff_rows)))), add(mul(add(compare_blocks_cols, compare_blocks_rows), zeros_diff_rows), mul(mul(zeros_diff_rows, compare_blocks_rows), zeros_diff_cols))), mul(add(ones_diff_rows, zeros_diff_cols), add(zeros_diff_rows, compare_blocks_cols)))
mul(mul(mul(add(mul(compare_blocks_rows, compare_blocks_rows), add(zeros_diff_rows, ones_diff_rows)), zeros_diff_rows), add(ones_diff_cols, add(ones_diff_rows, zeros_diff_cols))), mul(add(compare_blocks_cols, ones_diff_rows), add(ones_diff_rows, compare_blocks_cols)))
add(mul(mul(compare_blocks_rows, add(add(ones_diff_cols, compare_blocks_cols), ones_diff_cols)), add(compare_blocks_rows, zeros_diff_cols)), mul(zeros_diff_rows, add(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_rows)), compare_blocks_rows)))
add(add(add(zeros_diff_cols, ones_diff_cols), add(zeros_diff_rows, add(ones_diff_cols, ones_diff_rows))), mul(mul(ones_diff_cols, mul(ones_diff_cols, compare_blocks_rows)), zeros_diff_cols))
add(zeros_diff_cols, ones_diff_rows)
add(mul(mul(ones_diff_rows, ones_diff_cols), mul(compare_blocks_rows, ones_diff_rows)), mul(mul(mul(zeros_diff_cols, ones_diff_rows), ones_diff_rows), add(mul(ones_diff_cols, zeros_diff_cols), zeros_diff_cols)))
COND TREES:
and_(or_(or_(True, False), and_(False, True)), and_(False, and_(False, False)))
ge(0, zeros_diff_cols)
and_(ge(_if_then_else(False, 1, ones_diff_cols), _if_then_else(False, max_col_clue, 4)), ge(_if_then_else(False, 1, ones_diff_cols), _if_then_else(False, max_col_clue, 4)))
le(_if_then_else(False, max_col_clue, 4), _if_then_else(and_(True, False), _if_then_else(False, _if_then_else(False, 1, 2), _if_then_else(True, 1, 2)), _if_then_else(True, zeros_diff_cols, ones_diff_cols)))
or_(ge(_if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(False, _if_then_else(False, 0, 3), max_col_clue)), and_(le(ones_diff_cols, zeros_diff_rows), or_(True, True)))
VAL TREES:
add(mul(add(add(compare_blocks_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_cols))), add(mul(add(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_rows, zeros_diff_rows)), add(mul(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_rows, zeros_diff_cols)), mul(ones_diff_cols, ones_diff_cols))))
add(mul(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_rows, ones_diff_cols)), mul(mul(mul(compare_blocks_cols, ones_diff_rows), mul(ones_diff_cols, compare_blocks_rows)), add(add(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_cols, zeros_diff_rows))))
mul(add(add(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols))), mul(mul(add(ones_diff_rows, ones_diff_cols), add(compare_blocks_cols, compare_blocks_cols)), mul(add(ones_diff_cols, ones_diff_cols), mul(compare_blocks_rows, ones_diff_cols))))
mul(mul(add(mul(zeros_diff_cols, zeros_diff_rows), zeros_diff_cols), mul(ones_diff_cols, compare_blocks_rows)), add(mul(zeros_diff_rows, compare_blocks_rows), add(ones_diff_rows, ones_diff_cols)))
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(add(ones_diff_rows, ones_diff_rows), ones_diff_cols)), mul(add(zeros_diff_cols, zeros_diff_rows), mul(add(add(compare_blocks_cols, ones_diff_cols), zeros_diff_rows), zeros_diff_rows)))
mul(mul(add(zeros_diff_rows, ones_diff_cols), add(zeros_diff_cols, ones_diff_rows)), add(mul(ones_diff_rows, compare_blocks_cols), mul(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))))
COND TREES:
and_(or_(and_(True, True), and_(False, True)), and_(and_(True, True), and_(False, False)))
ge(_if_then_else(or_(False, True), _if_then_else(False, max_row_clue, 0), _if_then_else(False, max_row_clue, max_row_clue)), _if_then_else(and_(False, True), _if_then_else(False, 1, ones_diff_cols), _if_then_else(True, 4, max_col_clue)))
and_(or_(and_(False, True), ge(4, 2)), or_(and_(False, True), ge(4, 2)))
le(_if_then_else(and_(False, False), _if_then_else(False, 1, 2), _if_then_else(True, 1, 2)), _if_then_else(and_(False, and_(False, False)), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, zeros_diff_cols, ones_diff_cols)))
or_(le(_if_then_else(True, 3, zeros_diff_cols), _if_then_else(True, 1, ones_diff_rows)), and_(or_(False, True), le(compare_blocks_rows, zeros_diff_rows)))
VAL TREES:
add(mul(add(mul(compare_blocks_cols, zeros_diff_cols), mul(ones_diff_rows, ones_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_cols))), add(mul(add(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_rows, zeros_diff_rows)), add(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_cols, ones_diff_cols))))
add(mul(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_rows, ones_diff_cols)), mul(mul(mul(compare_blocks_cols, ones_diff_rows), mul(ones_diff_cols, compare_blocks_rows)), ones_diff_cols))
mul(add(add(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols))), mul(mul(add(ones_diff_rows, ones_diff_cols), add(compare_blocks_cols, compare_blocks_cols)), mul(add(ones_diff_cols, ones_diff_cols), mul(compare_blocks_rows, ones_diff_cols))))
mul(mul(add(compare_blocks_cols, zeros_diff_cols), mul(ones_diff_cols, compare_blocks_rows)), add(mul(zeros_diff_rows, compare_blocks_rows), add(ones_diff_rows, ones_diff_cols)))
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(add(ones_diff_rows, ones_diff_rows), ones_diff_cols)), mul(add(zeros_diff_cols, zeros_diff_rows), mul(add(add(compare_blocks_cols, ones_diff_cols), zeros_diff_rows), zeros_diff_rows)))
mul(mul(add(zeros_diff_rows, ones_diff_cols), add(zeros_diff_cols, ones_diff_rows)), add(mul(ones_diff_rows, compare_blocks_cols), mul(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))))
COND TREES:
ge(_if_then_else(and_(ge(3, compare_blocks_rows), and_(False, False)), _if_then_else(and_(True, True), _if_then_else(False, 1, 2), _if_then_else(False, 3, 1)), _if_then_else(ge(zeros_diff_cols, 0), _if_then_else(True, 2, 1), _if_then_else(True, compare_blocks_rows, 2))), _if_then_else(and_(and_(and_(True, False), and_(False, False)), and_(True, True)), _if_then_else(or_(True, True), _if_then_else(False, compare_blocks_rows, 1), _if_then_else(True, ones_diff_cols, ones_diff_cols)), _if_then_else(and_(False, True), _if_then_else(True, 0, 2), _if_then_else(False, 2, 0))))
or_(or_(le(compare_blocks_cols, compare_blocks_cols), and_(True, False)), False)
ge(_if_then_else(or_(or_(True, False), and_(False, True)), _if_then_else(or_(False, True), 0, _if_then_else(False, zeros_diff_cols, 3)), _if_then_else(or_(True, True), _if_then_else(False, 1, compare_blocks_rows), _if_then_else(True, 3, max_col_clue))), _if_then_else(ge(_if_then_else(True, zeros_diff_rows, zeros_diff_cols), _if_then_else(True, max_row_clue, 4)), _if_then_else(ge(ones_diff_cols, 4), _if_then_else(False, max_row_clue, 3), _if_then_else(True, max_row_clue, ones_diff_cols)), _if_then_else(and_(False, True), _if_then_else(True, 3, 3), _if_then_else(True, 3, zeros_diff_rows))))
or_(ge(2, _if_then_else(False, compare_blocks_rows, max_row_clue)), False)
or_(le(_if_then_else(True, _if_then_else(True, zeros_diff_rows, max_col_clue), _if_then_else(True, 1, ones_diff_rows)), _if_then_else(False, ones_diff_cols, 1)), or_(le(zeros_diff_cols, max_col_clue), or_(False, ge(1, 4))))
VAL TREES:
mul(add(add(ones_diff_cols, ones_diff_cols), add(ones_diff_rows, ones_diff_cols)), add(mul(ones_diff_cols, ones_diff_cols), mul(compare_blocks_cols, ones_diff_cols)))
mul(mul(add(mul(add(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), mul(zeros_diff_cols, zeros_diff_cols))), add(add(add(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, zeros_diff_rows)), mul(mul(ones_diff_rows, ones_diff_cols), add(compare_blocks_rows, compare_blocks_cols)))), mul(add(mul(mul(ones_diff_cols, ones_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(add(compare_blocks_cols, zeros_diff_rows), mul(ones_diff_rows, compare_blocks_cols))), add(compare_blocks_rows, mul(add(compare_blocks_cols, ones_diff_cols), add(ones_diff_rows, compare_blocks_cols)))))
mul(add(mul(add(ones_diff_cols, compare_blocks_rows), mul(add(add(ones_diff_rows, ones_diff_rows), mul(ones_diff_cols, zeros_diff_rows)), compare_blocks_cols)), mul(add(compare_blocks_cols, ones_diff_rows), add(zeros_diff_cols, compare_blocks_cols))), mul(add(add(ones_diff_cols, zeros_diff_cols), add(ones_diff_rows, ones_diff_cols)), mul(mul(ones_diff_rows, zeros_diff_rows), mul(zeros_diff_rows, zeros_diff_cols))))
mul(add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows)), add(add(compare_blocks_rows, compare_blocks_rows), mul(compare_blocks_cols, compare_blocks_cols)))
mul(add(add(add(mul(ones_diff_cols, ones_diff_cols), add(compare_blocks_cols, zeros_diff_cols)), mul(add(compare_blocks_cols, zeros_diff_rows), mul(zeros_diff_rows, ones_diff_rows))), add(add(mul(zeros_diff_cols, compare_blocks_rows), add(compare_blocks_rows, compare_blocks_rows)), add(add(compare_blocks_cols, zeros_diff_cols), mul(compare_blocks_rows, compare_blocks_cols)))), add(mul(mul(mul(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_cols, ones_diff_cols)), mul(mul(zeros_diff_rows, zeros_diff_cols), mul(ones_diff_rows, ones_diff_cols))), mul(mul(add(ones_diff_rows, zeros_diff_rows), mul(ones_diff_rows, zeros_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(ones_diff_rows, zeros_diff_cols)))))
add(add(add(add(compare_blocks_cols, ones_diff_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_cols, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(add(mul(zeros_diff_cols, compare_blocks_rows), mul(zeros_diff_rows, compare_blocks_cols)), mul(mul(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, ones_diff_cols))))
COND TREES:
and_(or_(and_(or_(and_(True, True), and_(False, True)), True), and_(False, True)), and_(and_(True, False), and_(False, False)))
ge(_if_then_else(or_(False, True), _if_then_else(False, max_row_clue, 0), _if_then_else(or_(True, False), max_row_clue, max_row_clue)), _if_then_else(and_(True, False), _if_then_else(False, ones_diff_rows, zeros_diff_cols), _if_then_else(or_(False, True), 3, ones_diff_cols)))
and_(ge(_if_then_else(False, 1, ones_diff_cols), 1), or_(le(max_col_clue, compare_blocks_rows), ge(4, 2)))
le(_if_then_else(and_(False, False), 1, _if_then_else(True, 1, 2)), _if_then_else(and_(False, True), _if_then_else(and_(False, False), compare_blocks_rows, 2), _if_then_else(True, zeros_diff_cols, ones_diff_cols)))
le(_if_then_else(False, _if_then_else(True, 3, zeros_diff_cols), 0), _if_then_else(and_(True, False), zeros_diff_cols, max_row_clue))
VAL TREES:
add(mul(add(add(compare_blocks_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_cols))), add(mul(add(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_rows, zeros_diff_rows)), add(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_cols, ones_diff_cols))))
add(mul(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_rows, ones_diff_cols)), mul(mul(mul(compare_blocks_cols, ones_diff_rows), mul(ones_diff_cols, compare_blocks_rows)), add(zeros_diff_cols, compare_blocks_rows)))
mul(add(add(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols))), mul(mul(add(ones_diff_rows, ones_diff_cols), add(compare_blocks_cols, compare_blocks_cols)), mul(add(ones_diff_cols, ones_diff_cols), mul(compare_blocks_rows, ones_diff_cols))))
mul(mul(add(compare_blocks_cols, zeros_diff_cols), mul(ones_diff_cols, compare_blocks_rows)), add(mul(zeros_diff_rows, compare_blocks_rows), add(ones_diff_rows, ones_diff_cols)))
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(add(ones_diff_rows, ones_diff_rows), ones_diff_cols)), mul(add(zeros_diff_cols, zeros_diff_rows), mul(add(add(compare_blocks_cols, ones_diff_cols), zeros_diff_rows), zeros_diff_rows)))
mul(mul(add(zeros_diff_rows, ones_diff_cols), add(zeros_diff_cols, ones_diff_rows)), add(mul(ones_diff_rows, compare_blocks_cols), mul(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))))
COND TREES:
le(_if_then_else(and_(ge(0, zeros_diff_cols), and_(False, False)), _if_then_else(le(3, max_row_clue), _if_then_else(False, max_col_clue, compare_blocks_cols), _if_then_else(True, 2, 2)), _if_then_else(ge(max_col_clue, zeros_diff_rows), _if_then_else(True, 4, compare_blocks_rows), _if_then_else(False, ones_diff_cols, zeros_diff_rows))), _if_then_else(and_(and_(True, False), and_(False, False)), _if_then_else(le(compare_blocks_cols, compare_blocks_rows), _if_then_else(True, ones_diff_cols, 4), _if_then_else(True, zeros_diff_rows, zeros_diff_cols)), _if_then_else(or_(True, False), _if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(False, zeros_diff_rows, compare_blocks_cols))))
or_(and_(and_(True, le(zeros_diff_cols, 3)), True), and_(True, or_(False, True)))
or_(ge(_if_then_else(True, zeros_diff_rows, _if_then_else(False, ones_diff_rows, 1)), _if_then_else(False, 2, max_row_clue)), and_(and_(le(1, max_row_clue), True), and_(True, le(zeros_diff_cols, zeros_diff_rows))))
or_(or_(le(ones_diff_cols, ones_diff_rows), and_(True, False)), or_(and_(False, False), or_(False, False)))
ge(_if_then_else(le(_if_then_else(False, 1, 3), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, zeros_diff_rows), _if_then_else(False, max_col_clue, zeros_diff_rows))), _if_then_else(or_(and_(False, False), or_(True, True)), _if_then_else(or_(True, True), _if_then_else(True, 2, ones_diff_rows), _if_then_else(True, max_row_clue, 4)), _if_then_else(and_(True, False), _if_then_else(True, ones_diff_rows, compare_blocks_rows), _if_then_else(False, 4, zeros_diff_rows))), _if_then_else(le(_if_then_else(False, ones_diff_rows, max_row_clue), _if_then_else(False, zeros_diff_cols, 3)), _if_then_else(or_(True, True), _if_then_else(False, 4, 2), _if_then_else(True, max_col_clue, 1)), _if_then_else(or_(False, True), _if_then_else(False, ones_diff_rows, ones_diff_rows), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)))), _if_then_else(le(_if_then_else(or_(False, True), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, 3, ones_diff_rows)), _if_then_else(ge(zeros_diff_rows, 3), _if_then_else(False, max_col_clue, ones_diff_rows), _if_then_else(True, ones_diff_rows, zeros_diff_cols))), _if_then_else(le(_if_then_else(True, zeros_diff_rows, compare_blocks_rows), _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(le(compare_blocks_rows, zeros_diff_cols), _if_then_else(True, 0, 4), _if_then_else(False, zeros_diff_rows, max_col_clue)), _if_then_else(le(3, 1), _if_then_else(True, zeros_diff_cols, max_col_clue), _if_then_else(False, 2, zeros_diff_rows))), _if_then_else(and_(or_(True, True), or_(False, False)), _if_then_else(le(2, ones_diff_cols), _if_then_else(False, 0, ones_diff_rows), _if_then_else(True, 1, 0)), _if_then_else(ge(3, zeros_diff_cols), _if_then_else(False, 4, ones_diff_rows), _if_then_else(False, 2, zeros_diff_rows)))))
VAL TREES:
add(add(add(zeros_diff_cols, mul(compare_blocks_rows, compare_blocks_cols)), add(mul(add(add(zeros_diff_rows, compare_blocks_cols), compare_blocks_rows), zeros_diff_rows), mul(mul(zeros_diff_rows, compare_blocks_rows), zeros_diff_cols))), mul(add(ones_diff_rows, zeros_diff_cols), add(compare_blocks_cols, zeros_diff_rows)))
mul(mul(mul(ones_diff_cols, zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), mul(ones_diff_cols, add(ones_diff_rows, compare_blocks_cols)))
add(mul(mul(add(add(compare_blocks_rows, compare_blocks_cols), zeros_diff_rows), add(add(ones_diff_cols, compare_blocks_cols), ones_diff_cols)), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_rows), add(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_rows)), compare_blocks_rows)))
add(add(add(zeros_diff_cols, ones_diff_cols), ones_diff_rows), mul(add(ones_diff_rows, ones_diff_rows), mul(zeros_diff_rows, ones_diff_rows)))
mul(add(mul(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, zeros_diff_cols)), add(mul(mul(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, zeros_diff_rows)), compare_blocks_cols), mul(compare_blocks_cols, ones_diff_cols)))
add(mul(mul(ones_diff_rows, ones_diff_cols), mul(compare_blocks_rows, ones_diff_rows)), mul(mul(mul(mul(mul(ones_diff_cols, ones_diff_cols), add(compare_blocks_cols, zeros_diff_cols)), compare_blocks_rows), ones_diff_rows), add(mul(ones_diff_cols, zeros_diff_cols), zeros_diff_cols)))
COND TREES:
le(_if_then_else(and_(ge(0, zeros_diff_cols), and_(False, False)), _if_then_else(le(3, max_row_clue), _if_then_else(False, max_col_clue, compare_blocks_cols), _if_then_else(True, 2, ones_diff_rows)), _if_then_else(ge(max_col_clue, zeros_diff_rows), _if_then_else(True, 4, ones_diff_rows), _if_then_else(False, ones_diff_cols, zeros_diff_rows))), _if_then_else(ge(_if_then_else(False, ones_diff_rows, compare_blocks_rows), _if_then_else(False, ones_diff_cols, compare_blocks_cols)), _if_then_else(le(compare_blocks_cols, compare_blocks_rows), _if_then_else(True, ones_diff_cols, 4), _if_then_else(True, zeros_diff_rows, zeros_diff_cols)), _if_then_else(or_(True, False), _if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(False, zeros_diff_rows, compare_blocks_cols))))
or_(and_(and_(True, False), and_(True, True)), and_(or_(True, False), or_(False, True)))
or_(ge(_if_then_else(True, 3, 4), _if_then_else(False, 2, max_row_clue)), and_(and_(or_(True, True), True), and_(True, False)))
or_(le(_if_then_else(le(max_row_clue, compare_blocks_rows), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(False, zeros_diff_cols, 0)), _if_then_else(True, 0, ones_diff_cols)), or_(and_(False, False), or_(False, False)))
ge(_if_then_else(le(_if_then_else(ge(ones_diff_rows, zeros_diff_rows), _if_then_else(False, 3, 1), _if_then_else(True, 4, zeros_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, zeros_diff_rows), _if_then_else(False, max_col_clue, zeros_diff_rows))), _if_then_else(or_(and_(False, False), or_(True, True)), _if_then_else(or_(True, True), _if_then_else(True, 2, ones_diff_rows), _if_then_else(True, max_row_clue, 4)), _if_then_else(and_(True, False), _if_then_else(True, ones_diff_rows, compare_blocks_rows), _if_then_else(False, 4, max_col_clue))), _if_then_else(le(_if_then_else(False, ones_diff_rows, max_row_clue), _if_then_else(False, zeros_diff_cols, 3)), _if_then_else(or_(True, True), _if_then_else(False, 4, 2), _if_then_else(True, max_col_clue, 1)), _if_then_else(or_(False, True), _if_then_else(False, ones_diff_rows, ones_diff_rows), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)))), _if_then_else(le(_if_then_else(or_(False, True), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, 3, ones_diff_rows)), _if_then_else(ge(zeros_diff_rows, 3), _if_then_else(False, max_col_clue, ones_diff_rows), _if_then_else(True, ones_diff_rows, zeros_diff_cols))), _if_then_else(le(_if_then_else(or_(False, False), _if_then_else(False, _if_then_else(False, compare_blocks_cols, 0), 0), _if_then_else(True, ones_diff_cols, zeros_diff_cols)), _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(le(compare_blocks_rows, zeros_diff_cols), _if_then_else(True, 0, 4), _if_then_else(False, zeros_diff_rows, max_col_clue)), _if_then_else(le(3, 1), _if_then_else(True, zeros_diff_cols, max_col_clue), _if_then_else(False, 2, zeros_diff_rows))), _if_then_else(and_(or_(True, True), or_(False, False)), _if_then_else(le(2, ones_diff_cols), _if_then_else(False, 0, ones_diff_rows), _if_then_else(True, 1, 0)), _if_then_else(ge(3, zeros_diff_cols), _if_then_else(False, 4, ones_diff_rows), _if_then_else(False, 2, zeros_diff_rows)))))
VAL TREES:
add(add(add(zeros_diff_cols, mul(compare_blocks_rows, compare_blocks_cols)), add(mul(add(compare_blocks_cols, compare_blocks_rows), zeros_diff_rows), mul(mul(zeros_diff_rows, compare_blocks_rows), compare_blocks_rows))), mul(add(ones_diff_rows, zeros_diff_cols), add(compare_blocks_cols, zeros_diff_rows)))
mul(add(compare_blocks_cols, ones_diff_cols), mul(compare_blocks_cols, zeros_diff_cols))
add(mul(mul(add(add(compare_blocks_rows, compare_blocks_cols), zeros_diff_rows), add(add(ones_diff_cols, compare_blocks_cols), ones_diff_cols)), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, mul(zeros_diff_rows, ones_diff_cols)), add(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, add(compare_blocks_rows, compare_blocks_cols))), compare_blocks_rows)))
add(mul(compare_blocks_rows, zeros_diff_cols), mul(mul(ones_diff_cols, ones_diff_cols), mul(zeros_diff_rows, ones_diff_rows)))
mul(add(mul(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, zeros_diff_cols)), add(mul(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, ones_diff_cols)))
add(mul(mul(ones_diff_rows, ones_diff_cols), add(add(zeros_diff_cols, compare_blocks_rows), add(ones_diff_rows, compare_blocks_cols))), mul(mul(mul(zeros_diff_cols, compare_blocks_rows), ones_diff_rows), add(mul(ones_diff_cols, zeros_diff_cols), zeros_diff_cols)))
COND TREES:
le(_if_then_else(and_(ge(0, zeros_diff_cols), and_(False, False)), _if_then_else(le(3, max_row_clue), _if_then_else(False, max_col_clue, compare_blocks_cols), ones_diff_cols), _if_then_else(ge(max_col_clue, zeros_diff_rows), _if_then_else(True, 4, ones_diff_rows), _if_then_else(False, ones_diff_cols, zeros_diff_rows))), _if_then_else(and_(le(4, compare_blocks_rows), and_(True, True)), _if_then_else(or_(ge(1, max_col_clue), True), _if_then_else(False, compare_blocks_rows, 1), _if_then_else(True, ones_diff_cols, ones_diff_cols)), _if_then_else(and_(True, False), _if_then_else(True, 0, 2), _if_then_else(False, 2, 0))))
or_(and_(le(_if_then_else(True, ones_diff_cols, 0), ones_diff_cols), and_(True, True)), and_(le(zeros_diff_rows, compare_blocks_rows), and_(False, True)))
or_(ge(_if_then_else(False, max_col_clue, 4), _if_then_else(False, 2, max_row_clue)), and_(and_(or_(True, True), True), and_(True, True)))
or_(or_(False, False), and_(False, False))
ge(_if_then_else(le(_if_then_else(ge(ones_diff_rows, zeros_diff_rows), _if_then_else(False, 3, 1), _if_then_else(True, _if_then_else(True, 2, 4), zeros_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, zeros_diff_rows), _if_then_else(False, max_col_clue, zeros_diff_rows))), _if_then_else(le(_if_then_else(True, _if_then_else(True, zeros_diff_rows, max_col_clue), _if_then_else(False, compare_blocks_cols, 3)), _if_then_else(and_(True, False), ones_diff_cols, 1)), _if_then_else(or_(True, True), _if_then_else(True, 2, ones_diff_rows), _if_then_else(True, _if_then_else(False, max_col_clue, max_row_clue), 4)), _if_then_else(and_(True, False), _if_then_else(True, ones_diff_rows, compare_blocks_rows), _if_then_else(False, 4, zeros_diff_rows))), _if_then_else(le(_if_then_else(False, ones_diff_rows, max_row_clue), _if_then_else(False, zeros_diff_cols, 3)), _if_then_else(or_(True, True), _if_then_else(False, 4, 2), _if_then_else(True, max_col_clue, 1)), _if_then_else(or_(False, True), _if_then_else(False, ones_diff_rows, ones_diff_rows), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)))), _if_then_else(le(_if_then_else(and_(True, False), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, 3, ones_diff_rows)), _if_then_else(ge(zeros_diff_rows, 3), _if_then_else(False, max_col_clue, ones_diff_rows), _if_then_else(False, ones_diff_rows, zeros_diff_cols))), _if_then_else(le(_if_then_else(True, zeros_diff_rows, compare_blocks_rows), _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(le(compare_blocks_rows, zeros_diff_cols), _if_then_else(True, 0, 4), _if_then_else(False, zeros_diff_rows, max_col_clue)), _if_then_else(le(3, 1), _if_then_else(True, zeros_diff_cols, max_col_clue), _if_then_else(False, 2, zeros_diff_rows))), _if_then_else(and_(or_(True, True), or_(False, False)), _if_then_else(le(2, ones_diff_cols), _if_then_else(False, 0, ones_diff_rows), _if_then_else(True, 1, 0)), _if_then_else(ge(3, zeros_diff_cols), _if_then_else(False, 4, ones_diff_rows), _if_then_else(False, 2, zeros_diff_rows)))))
VAL TREES:
add(add(add(zeros_diff_cols, mul(compare_blocks_rows, compare_blocks_cols)), add(mul(add(compare_blocks_cols, compare_blocks_rows), add(mul(ones_diff_cols, ones_diff_cols), mul(ones_diff_rows, compare_blocks_cols))), mul(mul(zeros_diff_rows, compare_blocks_rows), zeros_diff_cols))), mul(add(ones_diff_rows, zeros_diff_cols), add(compare_blocks_cols, zeros_diff_rows)))
mul(mul(mul(ones_diff_cols, zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), mul(add(compare_blocks_cols, ones_diff_rows), add(ones_diff_rows, compare_blocks_cols)))
add(mul(compare_blocks_cols, compare_blocks_cols), mul(add(zeros_diff_cols, compare_blocks_rows), add(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_rows)), compare_blocks_rows)))
add(add(add(zeros_diff_cols, ones_diff_cols), ones_diff_rows), mul(mul(ones_diff_cols, ones_diff_cols), mul(zeros_diff_rows, ones_diff_rows)))
mul(add(mul(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, zeros_diff_cols)), add(mul(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, ones_diff_cols)))
add(mul(mul(ones_diff_rows, ones_diff_cols), mul(compare_blocks_rows, compare_blocks_cols)), mul(mul(mul(zeros_diff_cols, compare_blocks_rows), ones_diff_rows), add(mul(ones_diff_cols, zeros_diff_cols), zeros_diff_cols)))
COND TREES:
and_(or_(ge(max_col_clue, max_row_clue), and_(False, False)), and_(and_(False, True), and_(False, False)))
ge(0, _if_then_else(True, _if_then_else(and_(True, False), ones_diff_rows, compare_blocks_cols), _if_then_else(True, 3, _if_then_else(False, 2, zeros_diff_rows))))
and_(ge(_if_then_else(False, 1, ones_diff_cols), _if_then_else(False, max_col_clue, 4)), or_(and_(False, True), ge(_if_then_else(ge(_if_then_else(False, max_col_clue, 1), _if_then_else(False, 2, max_row_clue)), 4, compare_blocks_rows), _if_then_else(True, 1, 4))))
le(_if_then_else(True, max_col_clue, ones_diff_rows), _if_then_else(or_(le(3, zeros_diff_cols), and_(True, False)), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, zeros_diff_cols, 0)))
or_(le(_if_then_else(False, 1, 3), _if_then_else(and_(True, False), _if_then_else(True, ones_diff_rows, compare_blocks_rows), _if_then_else(False, 4, zeros_diff_rows))), and_(le(ones_diff_cols, _if_then_else(le(_if_then_else(False, ones_diff_rows, max_row_clue), _if_then_else(True, zeros_diff_cols, 3)), _if_then_else(or_(True, True), _if_then_else(False, 4, 2), _if_then_else(True, max_col_clue, 1)), _if_then_else(or_(False, True), _if_then_else(False, ones_diff_rows, ones_diff_rows), _if_then_else(and_(ge(2, zeros_diff_cols), ge(max_row_clue, 1)), compare_blocks_rows, compare_blocks_cols)))), le(compare_blocks_rows, zeros_diff_rows)))
VAL TREES:
add(mul(add(add(compare_blocks_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_cols))), add(mul(add(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_rows, zeros_diff_rows)), add(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_cols, ones_diff_cols))))
add(compare_blocks_rows, mul(mul(mul(compare_blocks_cols, ones_diff_rows), mul(ones_diff_cols, compare_blocks_rows)), add(zeros_diff_cols, compare_blocks_rows)))
mul(add(add(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols))), mul(mul(add(ones_diff_rows, ones_diff_cols), add(zeros_diff_rows, zeros_diff_cols)), mul(add(ones_diff_cols, ones_diff_cols), mul(compare_blocks_rows, ones_diff_cols))))
mul(mul(add(compare_blocks_cols, zeros_diff_cols), mul(ones_diff_cols, compare_blocks_rows)), add(mul(zeros_diff_rows, compare_blocks_rows), add(ones_diff_rows, ones_diff_cols)))
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(add(ones_diff_rows, ones_diff_rows), ones_diff_cols)), mul(add(mul(mul(ones_diff_rows, zeros_diff_rows), mul(ones_diff_rows, zeros_diff_cols)), zeros_diff_rows), mul(add(add(compare_blocks_cols, ones_diff_cols), zeros_diff_rows), zeros_diff_rows)))
mul(mul(add(zeros_diff_rows, ones_diff_cols), add(zeros_diff_cols, ones_diff_rows)), add(mul(ones_diff_rows, compare_blocks_cols), mul(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))))
COND TREES:
ge(_if_then_else(and_(ge(3, compare_blocks_rows), and_(False, False)), _if_then_else(and_(True, True), _if_then_else(False, 1, 2), _if_then_else(False, 3, 1)), _if_then_else(ge(zeros_diff_cols, max_col_clue), _if_then_else(True, 2, 1), 3)), zeros_diff_rows)
or_(or_(le(ones_diff_rows, zeros_diff_cols), le(compare_blocks_cols, compare_blocks_rows)), and_(or_(False, True), or_(False, True)))
ge(_if_then_else(or_(or_(True, False), and_(False, True)), _if_then_else(or_(False, True), 0, _if_then_else(False, zeros_diff_cols, 3)), _if_then_else(or_(True, False), _if_then_else(False, 1, compare_blocks_rows), 0)), _if_then_else(ge(_if_then_else(True, _if_then_else(or_(or_(True, False), ge(_if_then_else(True, zeros_diff_rows, zeros_diff_cols), _if_then_else(le(ones_diff_cols, 0), max_row_clue, 4))), _if_then_else(or_(False, True), 0, _if_then_else(le(zeros_diff_cols, max_col_clue), _if_then_else(True, max_col_clue, 0), _if_then_else(False, max_row_clue, max_row_clue))), _if_then_else(or_(True, True), _if_then_else(False, 1, compare_blocks_rows), _if_then_else(True, 3, max_col_clue))), zeros_diff_cols), _if_then_else(True, max_row_clue, ones_diff_rows)), _if_then_else(ge(ones_diff_cols, 4), _if_then_else(False, max_row_clue, 3), _if_then_else(True, max_row_clue, ones_diff_cols)), _if_then_else(le(max_col_clue, compare_blocks_rows), _if_then_else(True, 3, 3), _if_then_else(True, 3, zeros_diff_rows))))
or_(ge(2, _if_then_else(False, compare_blocks_rows, max_row_clue)), le(_if_then_else(True, zeros_diff_cols, _if_then_else(ge(max_row_clue, compare_blocks_cols), _if_then_else(or_(or_(and_(False, False), le(_if_then_else(False, max_row_clue, 2), _if_then_else(True, ones_diff_rows, zeros_diff_rows))), False), ones_diff_cols, zeros_diff_rows), _if_then_else(True, ones_diff_cols, 3))), _if_then_else(and_(True, False), zeros_diff_cols, 4)))
or_(False, or_(le(zeros_diff_cols, max_col_clue), or_(False, ge(1, _if_then_else(le(compare_blocks_rows, 4), _if_then_else(True, zeros_diff_cols, ones_diff_rows), _if_then_else(True, 3, compare_blocks_rows))))))
VAL TREES:
mul(add(add(ones_diff_cols, ones_diff_cols), mul(mul(zeros_diff_cols, ones_diff_rows), mul(zeros_diff_cols, ones_diff_cols))), add(mul(ones_diff_cols, ones_diff_cols), mul(compare_blocks_cols, ones_diff_cols)))
mul(mul(add(mul(add(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), mul(zeros_diff_cols, zeros_diff_cols))), add(add(add(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, zeros_diff_rows)), mul(mul(ones_diff_rows, ones_diff_cols), add(compare_blocks_rows, compare_blocks_cols)))), mul(add(mul(mul(ones_diff_cols, ones_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(add(compare_blocks_cols, zeros_diff_rows), mul(ones_diff_rows, compare_blocks_cols))), add(mul(add(ones_diff_cols, compare_blocks_rows), add(ones_diff_cols, zeros_diff_cols)), mul(add(compare_blocks_cols, ones_diff_cols), add(ones_diff_rows, compare_blocks_cols)))))
mul(add(mul(add(ones_diff_cols, compare_blocks_rows), mul(add(add(ones_diff_rows, ones_diff_rows), mul(ones_diff_cols, zeros_diff_rows)), compare_blocks_cols)), mul(add(compare_blocks_cols, ones_diff_rows), add(zeros_diff_cols, compare_blocks_cols))), mul(add(add(ones_diff_cols, zeros_diff_cols), add(ones_diff_rows, ones_diff_cols)), mul(mul(ones_diff_rows, zeros_diff_rows), mul(zeros_diff_rows, zeros_diff_cols))))
mul(add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows)), add(add(compare_blocks_rows, compare_blocks_rows), mul(compare_blocks_cols, compare_blocks_cols)))
mul(add(add(add(mul(ones_diff_cols, ones_diff_cols), add(compare_blocks_cols, zeros_diff_cols)), mul(add(compare_blocks_cols, zeros_diff_rows), mul(zeros_diff_rows, ones_diff_rows))), add(add(mul(zeros_diff_cols, compare_blocks_rows), add(compare_blocks_rows, compare_blocks_rows)), add(add(compare_blocks_cols, zeros_diff_cols), mul(compare_blocks_rows, compare_blocks_cols)))), add(mul(mul(mul(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_cols, ones_diff_cols)), mul(mul(zeros_diff_rows, zeros_diff_cols), mul(ones_diff_rows, ones_diff_cols))), mul(mul(add(ones_diff_rows, zeros_diff_rows), mul(ones_diff_rows, zeros_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(ones_diff_rows, zeros_diff_cols)))))
add(add(add(add(compare_blocks_cols, ones_diff_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_cols, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(add(mul(zeros_diff_cols, compare_blocks_rows), mul(zeros_diff_rows, compare_blocks_cols)), mul(mul(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, ones_diff_cols))))
COND TREES:
le(_if_then_else(and_(and_(True, False), and_(False, False)), _if_then_else(le(3, max_row_clue), _if_then_else(False, max_col_clue, compare_blocks_cols), 2), _if_then_else(ge(max_col_clue, _if_then_else(and_(le(4, compare_blocks_rows), and_(True, True)), _if_then_else(or_(False, False), _if_then_else(False, compare_blocks_rows, 1), _if_then_else(True, ones_diff_cols, ones_diff_cols)), _if_then_else(and_(False, True), _if_then_else(True, ones_diff_cols, ones_diff_cols), _if_then_else(False, 2, 0)))), _if_then_else(True, 4, ones_diff_rows), _if_then_else(False, ones_diff_cols, zeros_diff_rows))), _if_then_else(ge(max_row_clue, _if_then_else(False, ones_diff_cols, compare_blocks_cols)), _if_then_else(le(compare_blocks_cols, compare_blocks_rows), _if_then_else(True, 0, 4), _if_then_else(True, zeros_diff_rows, zeros_diff_cols)), _if_then_else(or_(True, False), _if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(False, compare_blocks_rows, 2))))
or_(and_(and_(True, le(4, 3)), le(zeros_diff_cols, 3)), and_(True, False))
or_(ge(_if_then_else(True, zeros_diff_rows, _if_then_else(False, _if_then_else(False, 4, zeros_diff_cols), 1)), _if_then_else(True, 2, max_row_clue)), and_(and_(le(1, max_row_clue), True), and_(True, False)))
or_(or_(le(3, _if_then_else(False, zeros_diff_rows, max_row_clue)), and_(True, False)), or_(and_(False, False), False))
ge(_if_then_else(le(_if_then_else(ge(ones_diff_rows, zeros_diff_rows), _if_then_else(False, 3, 1), _if_then_else(True, 4, zeros_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, zeros_diff_rows), _if_then_else(False, max_col_clue, zeros_diff_rows))), _if_then_else(or_(and_(False, False), or_(True, True)), _if_then_else(or_(True, True), _if_then_else(True, 2, ones_diff_rows), _if_then_else(True, max_row_clue, 4)), _if_then_else(and_(True, False), _if_then_else(True, max_col_clue, compare_blocks_rows), _if_then_else(False, 4, zeros_diff_rows))), _if_then_else(le(_if_then_else(False, 4, max_row_clue), _if_then_else(False, zeros_diff_cols, 3)), _if_then_else(or_(True, True), _if_then_else(False, 4, 2), _if_then_else(True, max_col_clue, 1)), _if_then_else(or_(False, True), _if_then_else(False, ones_diff_rows, ones_diff_rows), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)))), _if_then_else(le(_if_then_else(or_(False, True), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, 3, ones_diff_rows)), _if_then_else(ge(zeros_diff_rows, 3), _if_then_else(False, max_col_clue, ones_diff_rows), _if_then_else(True, ones_diff_rows, zeros_diff_cols))), _if_then_else(le(_if_then_else(True, zeros_diff_rows, compare_blocks_rows), _if_then_else(False, 1, 3)), _if_then_else(le(compare_blocks_rows, zeros_diff_cols), _if_then_else(True, 0, 4), _if_then_else(False, zeros_diff_rows, max_col_clue)), _if_then_else(le(3, 1), _if_then_else(True, zeros_diff_cols, 4), _if_then_else(False, 2, zeros_diff_rows))), _if_then_else(and_(or_(True, True), or_(False, False)), _if_then_else(le(2, ones_diff_cols), _if_then_else(False, 0, ones_diff_rows), _if_then_else(True, 1, 0)), _if_then_else(ge(3, zeros_diff_cols), _if_then_else(False, 4, ones_diff_rows), _if_then_else(False, 2, zeros_diff_rows)))))
VAL TREES:
add(add(add(zeros_diff_cols, mul(compare_blocks_rows, compare_blocks_cols)), add(mul(add(compare_blocks_cols, compare_blocks_rows), zeros_diff_rows), mul(mul(zeros_diff_rows, compare_blocks_rows), zeros_diff_cols))), mul(add(ones_diff_rows, zeros_diff_cols), add(compare_blocks_cols, zeros_diff_rows)))
mul(mul(mul(ones_diff_cols, zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), mul(add(compare_blocks_cols, ones_diff_rows), add(ones_diff_rows, compare_blocks_cols)))
add(mul(mul(add(add(compare_blocks_rows, compare_blocks_cols), zeros_diff_rows), add(add(ones_diff_cols, compare_blocks_cols), ones_diff_cols)), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_rows), add(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_rows)), compare_blocks_rows)))
add(add(add(zeros_diff_cols, ones_diff_cols), add(zeros_diff_rows, compare_blocks_rows)), mul(mul(ones_diff_cols, ones_diff_cols), mul(zeros_diff_rows, ones_diff_rows)))
mul(add(mul(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, zeros_diff_cols)), add(mul(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, ones_diff_cols)))
add(mul(mul(ones_diff_rows, ones_diff_cols), mul(compare_blocks_rows, ones_diff_rows)), mul(mul(mul(zeros_diff_cols, compare_blocks_rows), ones_diff_rows), add(mul(ones_diff_cols, zeros_diff_cols), zeros_diff_cols)))
COND TREES:
and_(or_(or_(True, False), True), False)
ge(4, zeros_diff_cols)
and_(ge(_if_then_else(False, 1, ones_diff_cols), _if_then_else(or_(le(compare_blocks_cols, zeros_diff_rows), le(_if_then_else(ge(compare_blocks_rows, 3), _if_then_else(True, max_row_clue, compare_blocks_cols), _if_then_else(True, ones_diff_rows, 1)), 4)), max_col_clue, 4)), or_(False, ge(4, 2)))
le(_if_then_else(False, max_col_clue, 4), _if_then_else(and_(True, False), _if_then_else(and_(False, le(4, 0)), _if_then_else(False, 1, 2), compare_blocks_rows), _if_then_else(False, 1, 2)))
or_(True, and_(le(ones_diff_cols, _if_then_else(le(compare_blocks_cols, max_row_clue), _if_then_else(False, 4, ones_diff_cols), _if_then_else(False, 1, zeros_diff_rows))), or_(True, True)))
VAL TREES:
add(mul(add(add(compare_blocks_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_cols))), add(mul(add(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_rows, zeros_diff_rows)), add(mul(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_rows, zeros_diff_cols)), mul(ones_diff_cols, ones_diff_cols))))
add(mul(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_rows, ones_diff_cols)), mul(mul(mul(compare_blocks_cols, ones_diff_rows), mul(ones_diff_cols, compare_blocks_rows)), add(add(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_cols, zeros_diff_rows))))
mul(add(add(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols))), mul(mul(add(ones_diff_rows, ones_diff_cols), add(compare_blocks_cols, compare_blocks_cols)), mul(add(ones_diff_cols, ones_diff_cols), mul(compare_blocks_rows, ones_diff_cols))))
mul(mul(add(mul(zeros_diff_cols, zeros_diff_rows), zeros_diff_cols), mul(ones_diff_cols, compare_blocks_rows)), add(mul(zeros_diff_rows, compare_blocks_rows), add(ones_diff_rows, ones_diff_cols)))
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(add(ones_diff_rows, ones_diff_rows), ones_diff_cols)), mul(add(zeros_diff_cols, zeros_diff_rows), mul(add(add(compare_blocks_cols, ones_diff_cols), zeros_diff_rows), zeros_diff_rows)))
mul(mul(add(zeros_diff_rows, ones_diff_cols), add(zeros_diff_cols, ones_diff_rows)), add(mul(ones_diff_rows, compare_blocks_cols), mul(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))))
COND TREES:
and_(or_(and_(True, False), and_(and_(True, False), and_(False, and_(or_(and_(True, True), and_(False, True)), False)))), False)
le(0, 0)
and_(ge(_if_then_else(False, 1, ones_diff_cols), _if_then_else(False, 3, 4)), or_(and_(False, True), ge(4, 2)))
le(_if_then_else(True, zeros_diff_cols, ones_diff_cols), ones_diff_cols)
le(_if_then_else(True, 3, 0), _if_then_else(ge(4, _if_then_else(False, _if_then_else(False, 0, 3), max_col_clue)), max_row_clue, max_col_clue))
VAL TREES:
add(mul(add(add(compare_blocks_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_cols)), add(ones_diff_cols, mul(ones_diff_cols, compare_blocks_cols))), add(mul(add(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_rows, zeros_diff_rows)), add(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_cols, ones_diff_cols))))
add(mul(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_rows, ones_diff_cols)), mul(mul(mul(compare_blocks_cols, ones_diff_rows), mul(ones_diff_cols, compare_blocks_rows)), add(zeros_diff_cols, compare_blocks_rows)))
mul(add(add(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols))), mul(mul(add(ones_diff_rows, ones_diff_cols), add(compare_blocks_cols, compare_blocks_cols)), mul(add(ones_diff_cols, ones_diff_cols), mul(compare_blocks_rows, ones_diff_cols))))
mul(mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, compare_blocks_rows)), add(mul(zeros_diff_rows, compare_blocks_rows), add(ones_diff_rows, ones_diff_cols)))
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(add(ones_diff_rows, ones_diff_rows), ones_diff_cols)), mul(add(add(ones_diff_cols, compare_blocks_cols), zeros_diff_rows), mul(add(add(compare_blocks_cols, ones_diff_cols), zeros_diff_rows), zeros_diff_rows)))
mul(compare_blocks_rows, add(mul(ones_diff_rows, compare_blocks_cols), mul(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))))
COND TREES:
ge(_if_then_else(and_(or_(and_(or_(and_(True, True), and_(False, True)), True), and_(False, True)), False), _if_then_else(ge(2, compare_blocks_cols), max_row_clue, ones_diff_rows), _if_then_else(le(_if_then_else(and_(True, True), 0, zeros_diff_rows), _if_then_else(True, zeros_diff_rows, zeros_diff_rows)), zeros_diff_cols, max_col_clue)), _if_then_else(or_(True, False), _if_then_else(False, compare_blocks_rows, 4), _if_then_else(False, 3, _if_then_else(True, 0, ones_diff_rows))))
le(_if_then_else(or_(True, False), _if_then_else(False, _if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(True, zeros_diff_cols, ones_diff_cols)), _if_then_else(True, 4, 3)), _if_then_else(and_(le(ones_diff_rows, zeros_diff_rows), le(ones_diff_cols, ones_diff_rows)), _if_then_else(True, 0, compare_blocks_cols), _if_then_else(ge(2, max_row_clue), 4, _if_then_else(False, compare_blocks_cols, 0))))
le(_if_then_else(ge(3, _if_then_else(and_(False, True), _if_then_else(True, compare_blocks_cols, 0), compare_blocks_cols)), _if_then_else(False, _if_then_else(or_(ge(_if_then_else(False, 1, ones_diff_cols), 1), True), 3, ones_diff_cols), 2), _if_then_else(False, zeros_diff_cols, max_row_clue)), ones_diff_rows)
le(_if_then_else(False, _if_then_else(False, compare_blocks_rows, max_row_clue), 0), _if_then_else(le(_if_then_else(False, ones_diff_cols, ones_diff_cols), _if_then_else(False, max_col_clue, max_col_clue)), _if_then_else(and_(False, False), _if_then_else(False, 1, 1), _if_then_else(True, compare_blocks_rows, max_row_clue)), _if_then_else(and_(True, False), _if_then_else(False, compare_blocks_cols, ones_diff_rows), _if_then_else(True, compare_blocks_cols, zeros_diff_cols))))
and_(and_(le(_if_then_else(le(compare_blocks_cols, 3), 1, 0), _if_then_else(True, _if_then_else(False, ones_diff_rows, zeros_diff_cols), compare_blocks_cols)), and_(True, or_(False, False))), or_(le(max_col_clue, _if_then_else(True, 4, max_col_clue)), le(_if_then_else(ge(4, compare_blocks_rows), _if_then_else(False, compare_blocks_rows, 3), _if_then_else(False, _if_then_else(False, ones_diff_cols, _if_then_else(True, 4, zeros_diff_cols)), _if_then_else(True, _if_then_else(True, ones_diff_rows, max_row_clue), _if_then_else(True, 4, 2)))), max_row_clue)))
VAL TREES:
mul(mul(mul(add(ones_diff_rows, ones_diff_rows), compare_blocks_rows), mul(ones_diff_rows, compare_blocks_cols)), add(mul(zeros_diff_rows, compare_blocks_rows), add(ones_diff_rows, compare_blocks_rows)))
mul(add(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), add(compare_blocks_rows, ones_diff_rows)), add(mul(ones_diff_cols, zeros_diff_cols), add(compare_blocks_rows, zeros_diff_rows))), add(mul(mul(ones_diff_rows, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_rows)), add(mul(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, zeros_diff_rows)))), mul(add(add(mul(ones_diff_rows, ones_diff_rows), add(compare_blocks_rows, zeros_diff_rows)), add(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_rows, compare_blocks_cols))), mul(mul(mul(zeros_diff_cols, ones_diff_cols), add(ones_diff_rows, ones_diff_rows)), add(add(compare_blocks_cols, compare_blocks_rows), add(zeros_diff_cols, compare_blocks_cols)))))
mul(mul(add(compare_blocks_cols, zeros_diff_cols), mul(add(zeros_diff_cols, ones_diff_rows), add(zeros_diff_rows, zeros_diff_cols))), mul(mul(ones_diff_rows, compare_blocks_rows), add(compare_blocks_cols, zeros_diff_cols)))
add(mul(add(add(ones_diff_cols, compare_blocks_cols), add(add(ones_diff_cols, compare_blocks_cols), ones_diff_cols)), add(mul(zeros_diff_rows, ones_diff_cols), add(ones_diff_cols, compare_blocks_cols))), mul(mul(add(zeros_diff_cols, ones_diff_cols), add(compare_blocks_cols, zeros_diff_cols)), add(add(zeros_diff_cols, ones_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
add(add(mul(zeros_diff_cols, compare_blocks_cols), mul(compare_blocks_rows, ones_diff_cols)), add(mul(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_cols)))
add(add(mul(mul(compare_blocks_rows, zeros_diff_cols), add(compare_blocks_cols, compare_blocks_rows)), add(add(ones_diff_cols, zeros_diff_cols), add(zeros_diff_cols, zeros_diff_cols))), mul(add(mul(ones_diff_cols, zeros_diff_rows), add(zeros_diff_cols, compare_blocks_cols)), add(mul(ones_diff_rows, ones_diff_rows), add(compare_blocks_rows, zeros_diff_rows))))
COND TREES:
and_(False, and_(and_(True, False), and_(False, False)))
ge(_if_then_else(or_(False, True), _if_then_else(False, max_row_clue, 0), _if_then_else(or_(True, False), max_row_clue, max_row_clue)), _if_then_else(and_(True, False), _if_then_else(False, ones_diff_rows, compare_blocks_cols), _if_then_else(or_(False, True), _if_then_else(True, 3, ones_diff_rows), _if_then_else(False, zeros_diff_rows, 4))))
and_(or_(and_(False, True), ge(4, 2)), or_(and_(False, True), ge(4, 2)))
le(_if_then_else(and_(False, False), 1, _if_then_else(True, 1, 2)), _if_then_else(and_(True, True), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, zeros_diff_cols, ones_diff_cols)))
le(_if_then_else(False, _if_then_else(True, 3, zeros_diff_cols), 0), _if_then_else(True, zeros_diff_cols, max_row_clue))
VAL TREES:
add(mul(add(add(compare_blocks_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_cols))), add(mul(add(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_rows, zeros_diff_rows)), add(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_cols, ones_diff_cols))))
add(mul(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_rows, ones_diff_cols)), mul(mul(mul(compare_blocks_cols, ones_diff_rows), mul(ones_diff_cols, compare_blocks_rows)), add(zeros_diff_cols, compare_blocks_rows)))
mul(add(add(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols))), mul(mul(add(ones_diff_rows, ones_diff_cols), add(compare_blocks_cols, compare_blocks_cols)), mul(add(ones_diff_cols, ones_diff_cols), mul(compare_blocks_rows, ones_diff_cols))))
mul(mul(add(compare_blocks_cols, zeros_diff_cols), mul(ones_diff_cols, compare_blocks_rows)), add(mul(zeros_diff_rows, compare_blocks_rows), add(ones_diff_rows, ones_diff_cols)))
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(add(ones_diff_rows, ones_diff_rows), ones_diff_cols)), mul(add(zeros_diff_cols, zeros_diff_rows), mul(add(add(compare_blocks_cols, ones_diff_cols), zeros_diff_rows), zeros_diff_rows)))
mul(mul(add(zeros_diff_rows, ones_diff_cols), add(zeros_diff_cols, ones_diff_rows)), add(mul(ones_diff_rows, compare_blocks_cols), mul(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))))
COND TREES:
le(_if_then_else(and_(ge(0, zeros_diff_cols), and_(False, False)), _if_then_else(le(3, max_row_clue), _if_then_else(False, max_col_clue, compare_blocks_cols), 2), _if_then_else(ge(max_col_clue, zeros_diff_rows), _if_then_else(True, 4, ones_diff_rows), _if_then_else(False, ones_diff_cols, zeros_diff_rows))), _if_then_else(ge(max_row_clue, _if_then_else(False, ones_diff_cols, compare_blocks_cols)), _if_then_else(le(3, max_row_clue), _if_then_else(False, max_col_clue, compare_blocks_cols), _if_then_else(ge(max_col_clue, max_row_clue), 2, 2)), _if_then_else(or_(True, True), _if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(False, zeros_diff_rows, compare_blocks_cols))))
or_(and_(and_(True, False), True), True)
or_(True, and_(and_(le(1, max_row_clue), ge(_if_then_else(False, max_col_clue, 1), _if_then_else(False, 2, max_row_clue))), and_(True, False)))
or_(or_(le(3, ones_diff_rows), and_(True, False)), or_(False, False))
ge(_if_then_else(le(_if_then_else(ge(ones_diff_rows, zeros_diff_rows), _if_then_else(False, 3, 1), _if_then_else(True, 4, zeros_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, zeros_diff_rows), _if_then_else(False, max_col_clue, zeros_diff_rows))), _if_then_else(or_(and_(False, False), or_(True, True)), _if_then_else(or_(True, True), _if_then_else(True, 2, ones_diff_rows), _if_then_else(True, max_row_clue, 4)), _if_then_else(and_(True, False), _if_then_else(True, max_col_clue, compare_blocks_rows), _if_then_else(False, 4, zeros_diff_rows))), _if_then_else(le(_if_then_else(False, ones_diff_rows, max_row_clue), _if_then_else(False, zeros_diff_cols, 3)), _if_then_else(or_(True, True), _if_then_else(False, 4, 2), _if_then_else(True, max_col_clue, 1)), _if_then_else(or_(False, True), _if_then_else(False, _if_then_else(False, zeros_diff_cols, max_row_clue), ones_diff_rows), _if_then_else(True, 2, ones_diff_rows)))), _if_then_else(le(_if_then_else(or_(False, True), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, 3, ones_diff_rows)), _if_then_else(ge(zeros_diff_rows, 3), _if_then_else(False, max_col_clue, ones_diff_rows), _if_then_else(True, ones_diff_rows, zeros_diff_cols))), _if_then_else(le(_if_then_else(True, zeros_diff_rows, compare_blocks_rows), _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(le(compare_blocks_rows, zeros_diff_cols), _if_then_else(True, 0, 4), _if_then_else(False, zeros_diff_rows, max_col_clue)), _if_then_else(le(3, 1), _if_then_else(True, zeros_diff_cols, 4), _if_then_else(False, 2, zeros_diff_rows))), _if_then_else(and_(or_(True, True), or_(False, False)), _if_then_else(le(2, ones_diff_cols), _if_then_else(False, 0, ones_diff_rows), _if_then_else(True, 1, 0)), _if_then_else(ge(3, zeros_diff_cols), _if_then_else(False, 4, ones_diff_rows), _if_then_else(False, 2, zeros_diff_rows)))))
VAL TREES:
add(add(add(zeros_diff_cols, mul(compare_blocks_rows, compare_blocks_cols)), add(mul(add(compare_blocks_cols, compare_blocks_rows), zeros_diff_rows), mul(mul(zeros_diff_rows, compare_blocks_rows), zeros_diff_cols))), mul(add(ones_diff_rows, zeros_diff_cols), add(compare_blocks_cols, zeros_diff_rows)))
mul(mul(mul(ones_diff_cols, zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), mul(add(compare_blocks_cols, ones_diff_rows), add(ones_diff_rows, compare_blocks_cols)))
add(mul(mul(add(add(compare_blocks_rows, compare_blocks_cols), zeros_diff_rows), add(add(ones_diff_cols, compare_blocks_cols), ones_diff_cols)), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_rows), add(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_rows)), compare_blocks_rows)))
add(add(add(zeros_diff_cols, ones_diff_cols), add(zeros_diff_rows, compare_blocks_rows)), mul(mul(ones_diff_cols, ones_diff_cols), mul(zeros_diff_rows, ones_diff_rows)))
mul(add(mul(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, zeros_diff_cols)), add(mul(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, ones_diff_cols)))
add(mul(mul(ones_diff_rows, ones_diff_cols), mul(compare_blocks_rows, ones_diff_rows)), mul(mul(mul(zeros_diff_cols, compare_blocks_rows), ones_diff_rows), add(mul(ones_diff_cols, zeros_diff_cols), zeros_diff_cols)))
COND TREES:
and_(and_(True, False), False)
le(_if_then_else(True, 1, _if_then_else(False, zeros_diff_cols, compare_blocks_cols)), 0)
and_(ge(_if_then_else(False, 1, _if_then_else(True, zeros_diff_rows, ones_diff_cols)), _if_then_else(False, _if_then_else(ge(compare_blocks_rows, 3), _if_then_else(True, max_row_clue, compare_blocks_cols), _if_then_else(ge(_if_then_else(True, zeros_diff_rows, _if_then_else(False, ones_diff_rows, 1)), _if_then_else(True, 2, max_row_clue)), ones_diff_rows, 1)), 4)), or_(and_(False, True), ge(4, 2)))
le(_if_then_else(True, max_col_clue, ones_diff_cols), ones_diff_rows)
le(_if_then_else(True, 3, _if_then_else(ge(compare_blocks_rows, zeros_diff_rows), _if_then_else(False, 3, 1), _if_then_else(le(compare_blocks_rows, 4), _if_then_else(True, ones_diff_cols, 0), _if_then_else(True, 2, ones_diff_rows)))), ones_diff_rows)
VAL TREES:
add(mul(add(add(compare_blocks_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_cols))), add(mul(add(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_rows, zeros_diff_rows)), add(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_cols, ones_diff_cols))))
add(mul(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_rows, ones_diff_cols)), mul(mul(mul(compare_blocks_cols, ones_diff_rows), mul(ones_diff_cols, compare_blocks_rows)), add(zeros_diff_cols, compare_blocks_rows)))
mul(add(add(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols))), mul(mul(add(ones_diff_rows, ones_diff_cols), add(compare_blocks_cols, compare_blocks_cols)), mul(add(ones_diff_cols, ones_diff_cols), mul(compare_blocks_rows, ones_diff_cols))))
mul(mul(add(compare_blocks_cols, zeros_diff_cols), mul(ones_diff_cols, compare_blocks_rows)), add(mul(zeros_diff_rows, compare_blocks_rows), add(ones_diff_rows, ones_diff_cols)))
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(add(ones_diff_rows, ones_diff_rows), ones_diff_cols)), mul(add(zeros_diff_cols, zeros_diff_rows), mul(add(add(compare_blocks_cols, ones_diff_cols), zeros_diff_rows), zeros_diff_rows)))
mul(mul(add(zeros_diff_rows, ones_diff_cols), add(zeros_diff_cols, ones_diff_rows)), add(mul(ones_diff_rows, compare_blocks_cols), mul(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))))
COND TREES:
and_(or_(False, and_(False, True)), and_(and_(True, False), and_(False, False)))
ge(_if_then_else(or_(False, True), _if_then_else(False, max_row_clue, 0), _if_then_else(or_(True, False), max_row_clue, max_row_clue)), _if_then_else(True, 3, ones_diff_cols))
and_(or_(and_(False, True), ge(_if_then_else(ge(_if_then_else(False, max_col_clue, 1), _if_then_else(False, 2, max_row_clue)), 4, compare_blocks_rows), _if_then_else(True, 1, 4))), False)
le(_if_then_else(and_(False, False), _if_then_else(False, 1, 2), _if_then_else(True, 1, 2)), _if_then_else(and_(False, True), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, zeros_diff_cols, ones_diff_cols)))
le(_if_then_else(False, 3, 0), _if_then_else(False, zeros_diff_cols, max_row_clue))
VAL TREES:
add(mul(add(add(compare_blocks_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_cols))), add(mul(add(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_rows, zeros_diff_rows)), add(mul(ones_diff_cols, zeros_diff_cols), mul(ones_diff_cols, ones_diff_cols))))
add(mul(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_rows, ones_diff_cols)), mul(mul(mul(compare_blocks_cols, ones_diff_rows), mul(ones_diff_cols, compare_blocks_rows)), add(zeros_diff_cols, ones_diff_rows)))
mul(add(add(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols))), mul(mul(add(ones_diff_rows, ones_diff_cols), add(compare_blocks_cols, add(mul(ones_diff_cols, ones_diff_rows), mul(compare_blocks_cols, compare_blocks_cols)))), mul(add(ones_diff_cols, ones_diff_cols), mul(compare_blocks_rows, ones_diff_cols))))
mul(mul(add(compare_blocks_cols, zeros_diff_cols), mul(ones_diff_cols, compare_blocks_rows)), add(mul(zeros_diff_rows, compare_blocks_rows), add(ones_diff_rows, mul(add(zeros_diff_cols, compare_blocks_rows), mul(compare_blocks_cols, compare_blocks_rows)))))
mul(add(add(compare_blocks_cols, mul(compare_blocks_cols, ones_diff_cols)), mul(zeros_diff_rows, ones_diff_cols)), mul(add(zeros_diff_cols, zeros_diff_rows), mul(add(add(compare_blocks_cols, ones_diff_cols), zeros_diff_rows), zeros_diff_rows)))
mul(add(compare_blocks_rows, ones_diff_rows), mul(ones_diff_cols, ones_diff_cols))
COND TREES:
and_(or_(ge(max_col_clue, max_row_clue), and_(False, False)), and_(and_(True, False), and_(False, False)))
ge(0, _if_then_else(True, _if_then_else(and_(True, False), ones_diff_rows, compare_blocks_cols), _if_then_else(and_(True, False), _if_then_else(False, ones_diff_rows, compare_blocks_cols), _if_then_else(True, 3, ones_diff_cols))))
and_(ge(_if_then_else(False, 1, ones_diff_cols), _if_then_else(False, max_col_clue, 4)), ge(_if_then_else(False, 1, ones_diff_cols), _if_then_else(False, ones_diff_rows, 4)))
le(_if_then_else(True, max_col_clue, ones_diff_rows), _if_then_else(or_(False, False), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, zeros_diff_cols, 0)))
or_(le(_if_then_else(False, 1, 3), _if_then_else(and_(True, False), _if_then_else(True, ones_diff_rows, compare_blocks_rows), _if_then_else(False, 4, zeros_diff_rows))), and_(le(ones_diff_cols, _if_then_else(le(_if_then_else(False, ones_diff_rows, max_row_clue), _if_then_else(False, zeros_diff_cols, 3)), _if_then_else(or_(True, True), _if_then_else(False, 4, 2), _if_then_else(True, max_col_clue, 1)), _if_then_else(or_(False, True), _if_then_else(False, ones_diff_rows, ones_diff_rows), _if_then_else(and_(ge(2, zeros_diff_cols), ge(max_row_clue, 1)), compare_blocks_rows, compare_blocks_cols)))), le(compare_blocks_rows, zeros_diff_rows)))
VAL TREES:
add(mul(add(add(compare_blocks_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(ones_diff_cols, add(mul(compare_blocks_cols, compare_blocks_rows), add(compare_blocks_cols, ones_diff_cols))))), add(mul(add(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_rows, zeros_diff_rows)), add(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_cols, ones_diff_cols))))
compare_blocks_cols
mul(add(add(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols))), mul(mul(add(ones_diff_rows, ones_diff_cols), add(zeros_diff_rows, zeros_diff_cols)), mul(add(ones_diff_cols, ones_diff_cols), mul(compare_blocks_rows, ones_diff_cols))))
mul(mul(add(compare_blocks_cols, zeros_diff_cols), mul(ones_diff_cols, compare_blocks_rows)), add(mul(zeros_diff_rows, compare_blocks_rows), add(ones_diff_rows, ones_diff_cols)))
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(add(ones_diff_rows, ones_diff_rows), ones_diff_cols)), mul(add(mul(mul(ones_diff_rows, zeros_diff_rows), mul(ones_diff_rows, zeros_diff_cols)), zeros_diff_rows), mul(add(mul(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_rows)), zeros_diff_rows), zeros_diff_rows)))
mul(ones_diff_rows, add(mul(ones_diff_rows, compare_blocks_cols), mul(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))))
COND TREES:
le(_if_then_else(and_(ge(0, zeros_diff_cols), and_(False, False)), _if_then_else(le(3, max_row_clue), _if_then_else(False, max_col_clue, compare_blocks_cols), _if_then_else(True, 2, 2)), _if_then_else(ge(max_col_clue, zeros_diff_rows), _if_then_else(True, 4, compare_blocks_rows), _if_then_else(False, ones_diff_cols, zeros_diff_rows))), _if_then_else(and_(ge(0, zeros_diff_cols), and_(False, False)), _if_then_else(le(compare_blocks_cols, compare_blocks_rows), _if_then_else(True, ones_diff_cols, 4), _if_then_else(True, zeros_diff_rows, zeros_diff_cols)), _if_then_else(or_(True, False), _if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(False, zeros_diff_rows, compare_blocks_cols))))
or_(and_(and_(True, True), True), and_(True, or_(False, True)))
or_(ge(_if_then_else(True, zeros_diff_rows, _if_then_else(False, ones_diff_rows, 1)), _if_then_else(False, 2, max_row_clue)), and_(and_(le(1, max_row_clue), True), and_(True, le(zeros_diff_cols, zeros_diff_rows))))
or_(or_(le(ones_diff_cols, ones_diff_rows), and_(True, False)), False)
ge(_if_then_else(le(_if_then_else(False, ones_diff_rows, zeros_diff_rows), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, zeros_diff_rows), _if_then_else(False, max_col_clue, zeros_diff_rows))), _if_then_else(or_(and_(False, False), or_(True, True)), _if_then_else(or_(True, True), _if_then_else(True, 2, ones_diff_rows), _if_then_else(True, max_row_clue, 4)), _if_then_else(and_(True, False), _if_then_else(True, ones_diff_rows, compare_blocks_rows), _if_then_else(False, 4, zeros_diff_rows))), _if_then_else(le(_if_then_else(False, ones_diff_rows, max_row_clue), _if_then_else(False, zeros_diff_cols, 3)), _if_then_else(or_(True, True), _if_then_else(False, 4, 2), _if_then_else(True, max_col_clue, 1)), _if_then_else(or_(False, True), _if_then_else(False, ones_diff_rows, ones_diff_rows), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)))), _if_then_else(le(_if_then_else(or_(False, True), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, 3, ones_diff_rows)), _if_then_else(ge(zeros_diff_rows, 3), _if_then_else(False, max_col_clue, ones_diff_rows), _if_then_else(True, ones_diff_rows, zeros_diff_cols))), _if_then_else(le(_if_then_else(True, zeros_diff_rows, compare_blocks_rows), _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(le(compare_blocks_rows, zeros_diff_cols), _if_then_else(True, 0, 4), _if_then_else(False, zeros_diff_rows, max_col_clue)), _if_then_else(le(3, 1), _if_then_else(True, zeros_diff_cols, max_col_clue), _if_then_else(False, 2, zeros_diff_rows))), _if_then_else(and_(or_(True, True), or_(False, False)), _if_then_else(le(2, ones_diff_cols), _if_then_else(False, 0, ones_diff_rows), _if_then_else(True, 1, 0)), _if_then_else(ge(3, zeros_diff_cols), _if_then_else(False, 4, ones_diff_rows), _if_then_else(False, 2, zeros_diff_rows)))))
VAL TREES:
add(add(add(zeros_diff_cols, mul(compare_blocks_rows, compare_blocks_cols)), add(mul(add(add(zeros_diff_rows, compare_blocks_cols), compare_blocks_rows), zeros_diff_rows), mul(mul(zeros_diff_rows, compare_blocks_rows), zeros_diff_cols))), mul(add(ones_diff_rows, zeros_diff_cols), add(compare_blocks_cols, zeros_diff_rows)))
mul(mul(mul(ones_diff_cols, zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), mul(ones_diff_cols, add(ones_diff_rows, compare_blocks_cols)))
add(mul(mul(add(add(compare_blocks_rows, compare_blocks_cols), zeros_diff_rows), add(add(ones_diff_cols, compare_blocks_cols), ones_diff_cols)), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_rows), add(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_rows)), compare_blocks_rows)))
add(add(add(zeros_diff_cols, ones_diff_cols), ones_diff_rows), mul(add(ones_diff_rows, ones_diff_rows), mul(zeros_diff_rows, ones_diff_rows)))
mul(add(mul(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, zeros_diff_cols)), add(mul(mul(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, zeros_diff_rows)), compare_blocks_cols), mul(compare_blocks_cols, ones_diff_cols)))
add(mul(mul(ones_diff_rows, ones_diff_cols), mul(compare_blocks_rows, ones_diff_rows)), mul(mul(mul(mul(mul(ones_diff_cols, ones_diff_cols), add(compare_blocks_cols, zeros_diff_cols)), compare_blocks_rows), ones_diff_rows), add(mul(ones_diff_cols, zeros_diff_cols), zeros_diff_cols)))
COND TREES:
and_(or_(and_(True, True), and_(False, True)), and_(and_(True, True), and_(False, False)))
ge(_if_then_else(or_(False, True), _if_then_else(False, max_row_clue, 0), _if_then_else(False, max_row_clue, max_row_clue)), _if_then_else(and_(False, True), _if_then_else(False, 1, ones_diff_cols), _if_then_else(True, 4, max_col_clue)))
and_(False, or_(and_(False, True), ge(4, 2)))
le(_if_then_else(and_(False, False), _if_then_else(False, 1, 0), _if_then_else(True, 1, 2)), _if_then_else(and_(False, False), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, zeros_diff_cols, ones_diff_cols)))
or_(le(_if_then_else(True, 3, zeros_diff_cols), _if_then_else(True, 1, ones_diff_rows)), and_(or_(False, True), le(compare_blocks_rows, zeros_diff_rows)))
VAL TREES:
add(mul(add(add(compare_blocks_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_cols))), add(mul(add(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_rows, zeros_diff_rows)), add(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_cols, ones_diff_cols))))
add(mul(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_rows, ones_diff_cols)), mul(mul(mul(compare_blocks_cols, ones_diff_rows), mul(ones_diff_cols, compare_blocks_rows)), add(zeros_diff_cols, compare_blocks_rows)))
mul(add(add(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols))), mul(mul(add(ones_diff_rows, ones_diff_cols), add(compare_blocks_cols, compare_blocks_cols)), mul(add(ones_diff_cols, ones_diff_cols), mul(compare_blocks_rows, ones_diff_cols))))
mul(mul(add(compare_blocks_cols, zeros_diff_cols), mul(ones_diff_cols, compare_blocks_rows)), add(mul(zeros_diff_rows, compare_blocks_rows), add(ones_diff_rows, ones_diff_cols)))
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(add(ones_diff_rows, ones_diff_rows), ones_diff_cols)), mul(add(zeros_diff_cols, zeros_diff_rows), mul(add(add(compare_blocks_cols, ones_diff_cols), zeros_diff_rows), zeros_diff_rows)))
mul(mul(add(zeros_diff_rows, ones_diff_cols), add(zeros_diff_cols, ones_diff_rows)), add(mul(ones_diff_rows, compare_blocks_cols), mul(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))))
COND TREES:
le(_if_then_else(and_(ge(0, zeros_diff_cols), and_(False, False)), 1, _if_then_else(or_(True, False), _if_then_else(True, 4, ones_diff_rows), _if_then_else(False, ones_diff_cols, zeros_diff_rows))), _if_then_else(ge(_if_then_else(False, ones_diff_rows, compare_blocks_rows), _if_then_else(False, ones_diff_cols, compare_blocks_cols)), _if_then_else(le(compare_blocks_cols, compare_blocks_rows), _if_then_else(True, ones_diff_cols, 4), _if_then_else(True, zeros_diff_rows, zeros_diff_cols)), _if_then_else(or_(True, False), _if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(False, zeros_diff_rows, compare_blocks_cols))))
or_(and_(le(ones_diff_cols, _if_then_else(False, 2, zeros_diff_rows)), and_(True, True)), and_(or_(True, False), or_(False, True)))
True
or_(or_(or_(and_(True, False), and_(True, False)), and_(True, False)), False)
ge(_if_then_else(le(_if_then_else(ge(ones_diff_rows, zeros_diff_rows), _if_then_else(False, 3, 1), _if_then_else(True, _if_then_else(True, 2, 4), zeros_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, zeros_diff_rows), _if_then_else(False, max_col_clue, zeros_diff_rows))), _if_then_else(or_(and_(False, False), or_(True, True)), _if_then_else(or_(True, True), _if_then_else(True, 2, ones_diff_rows), _if_then_else(True, _if_then_else(False, 3, 0), 4)), _if_then_else(and_(True, False), _if_then_else(True, ones_diff_rows, compare_blocks_rows), _if_then_else(False, 4, zeros_diff_rows))), _if_then_else(le(_if_then_else(False, ones_diff_rows, max_row_clue), _if_then_else(False, zeros_diff_cols, 3)), _if_then_else(or_(True, True), _if_then_else(True, 2, ones_diff_rows), _if_then_else(True, max_row_clue, 4)), _if_then_else(or_(False, ge(ones_diff_rows, zeros_diff_cols)), _if_then_else(False, ones_diff_rows, ones_diff_rows), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)))), _if_then_else(le(_if_then_else(or_(False, True), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, 3, ones_diff_rows)), _if_then_else(ge(zeros_diff_rows, 3), _if_then_else(False, max_col_clue, ones_diff_rows), _if_then_else(True, ones_diff_rows, zeros_diff_cols))), _if_then_else(le(_if_then_else(True, zeros_diff_rows, compare_blocks_rows), _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(le(compare_blocks_rows, zeros_diff_cols), _if_then_else(True, 0, 4), _if_then_else(False, zeros_diff_rows, max_col_clue)), _if_then_else(le(3, 1), _if_then_else(True, zeros_diff_cols, max_col_clue), _if_then_else(False, 2, zeros_diff_rows))), _if_then_else(and_(or_(True, True), or_(False, False)), _if_then_else(le(2, ones_diff_cols), _if_then_else(False, 0, ones_diff_rows), _if_then_else(True, 1, 0)), _if_then_else(ge(3, zeros_diff_cols), _if_then_else(False, 4, ones_diff_rows), _if_then_else(False, 2, zeros_diff_rows)))))
VAL TREES:
add(add(add(zeros_diff_cols, mul(compare_blocks_rows, compare_blocks_cols)), add(mul(add(compare_blocks_cols, compare_blocks_rows), add(mul(ones_diff_cols, ones_diff_cols), mul(ones_diff_rows, compare_blocks_cols))), mul(mul(zeros_diff_rows, compare_blocks_rows), zeros_diff_cols))), mul(add(ones_diff_rows, zeros_diff_cols), add(compare_blocks_cols, zeros_diff_rows)))
mul(mul(mul(ones_diff_cols, zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), mul(add(compare_blocks_cols, ones_diff_rows), add(ones_diff_rows, compare_blocks_cols)))
add(mul(compare_blocks_cols, compare_blocks_cols), mul(add(zeros_diff_cols, compare_blocks_rows), add(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_rows)), compare_blocks_rows)))
add(add(add(zeros_diff_cols, ones_diff_cols), ones_diff_rows), mul(mul(ones_diff_cols, ones_diff_cols), mul(zeros_diff_rows, ones_diff_rows)))
mul(add(mul(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, zeros_diff_cols)), add(mul(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, ones_diff_cols)))
add(mul(mul(ones_diff_rows, ones_diff_cols), mul(compare_blocks_rows, compare_blocks_cols)), mul(mul(mul(zeros_diff_cols, compare_blocks_rows), ones_diff_rows), add(mul(ones_diff_cols, zeros_diff_cols), zeros_diff_cols)))
COND TREES:
le(_if_then_else(and_(ge(0, zeros_diff_cols), and_(False, False)), _if_then_else(le(3, max_row_clue), _if_then_else(False, max_col_clue, compare_blocks_cols), ones_diff_cols), _if_then_else(ge(max_col_clue, zeros_diff_rows), _if_then_else(True, 4, ones_diff_rows), _if_then_else(False, ones_diff_cols, zeros_diff_rows))), _if_then_else(and_(le(4, compare_blocks_rows), and_(True, True)), _if_then_else(or_(ge(1, max_col_clue), True), _if_then_else(False, compare_blocks_rows, 1), _if_then_else(True, _if_then_else(True, 2, 1), ones_diff_cols)), _if_then_else(and_(False, True), _if_then_else(True, 0, 2), _if_then_else(False, 2, 0))))
or_(and_(le(_if_then_else(True, ones_diff_cols, 0), _if_then_else(False, 2, zeros_diff_rows)), and_(True, True)), or_(le(compare_blocks_cols, zeros_diff_cols), le(zeros_diff_rows, compare_blocks_rows)))
or_(ge(_if_then_else(True, zeros_diff_rows, _if_then_else(False, max_col_clue, 1)), _if_then_else(False, 2, max_row_clue)), and_(and_(or_(True, True), True), and_(True, True)))
or_(or_(le(3, zeros_diff_cols), and_(True, False)), or_(and_(False, ge(2, _if_then_else(False, compare_blocks_rows, max_row_clue))), False))
ge(_if_then_else(le(_if_then_else(ge(ones_diff_rows, zeros_diff_rows), _if_then_else(False, 3, 1), _if_then_else(True, _if_then_else(True, 2, 4), zeros_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, zeros_diff_rows), _if_then_else(False, max_col_clue, zeros_diff_rows))), _if_then_else(le(_if_then_else(True, _if_then_else(True, zeros_diff_rows, max_col_clue), _if_then_else(False, compare_blocks_cols, 3)), _if_then_else(and_(True, False), ones_diff_cols, 1)), _if_then_else(or_(True, True), _if_then_else(True, 2, ones_diff_rows), _if_then_else(True, _if_then_else(False, max_col_clue, max_row_clue), 4)), _if_then_else(and_(True, False), _if_then_else(True, ones_diff_rows, compare_blocks_rows), _if_then_else(False, 4, zeros_diff_rows))), _if_then_else(le(_if_then_else(False, ones_diff_rows, max_row_clue), _if_then_else(False, zeros_diff_cols, 3)), _if_then_else(or_(True, True), _if_then_else(False, 4, 2), _if_then_else(True, max_col_clue, 1)), _if_then_else(or_(False, True), _if_then_else(False, ones_diff_rows, ones_diff_rows), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)))), _if_then_else(le(_if_then_else(or_(False, True), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, 3, ones_diff_rows)), _if_then_else(ge(zeros_diff_rows, 3), _if_then_else(False, max_col_clue, ones_diff_rows), _if_then_else(True, ones_diff_rows, zeros_diff_cols))), _if_then_else(le(_if_then_else(True, zeros_diff_rows, compare_blocks_rows), _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(le(compare_blocks_rows, zeros_diff_cols), _if_then_else(True, 0, 4), _if_then_else(False, zeros_diff_rows, max_col_clue)), _if_then_else(le(3, 1), _if_then_else(True, zeros_diff_cols, max_col_clue), _if_then_else(False, 2, zeros_diff_rows))), _if_then_else(and_(or_(True, True), or_(False, False)), _if_then_else(le(2, ones_diff_cols), _if_then_else(False, 0, ones_diff_rows), _if_then_else(True, 1, 0)), _if_then_else(ge(3, zeros_diff_cols), _if_then_else(False, 4, ones_diff_rows), _if_then_else(False, 2, zeros_diff_rows)))))
VAL TREES:
add(add(add(zeros_diff_cols, mul(compare_blocks_rows, compare_blocks_cols)), add(mul(add(compare_blocks_cols, compare_blocks_rows), add(mul(ones_diff_cols, ones_diff_cols), mul(ones_diff_rows, compare_blocks_cols))), mul(mul(zeros_diff_rows, compare_blocks_rows), zeros_diff_cols))), mul(add(ones_diff_rows, zeros_diff_cols), add(compare_blocks_cols, zeros_diff_rows)))
mul(mul(mul(ones_diff_cols, zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), mul(add(compare_blocks_cols, ones_diff_rows), add(ones_diff_rows, compare_blocks_cols)))
add(mul(compare_blocks_cols, compare_blocks_cols), mul(add(zeros_diff_cols, compare_blocks_rows), add(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_rows)), compare_blocks_rows)))
add(add(add(zeros_diff_cols, ones_diff_cols), ones_diff_rows), mul(mul(ones_diff_cols, ones_diff_cols), mul(zeros_diff_rows, ones_diff_rows)))
mul(add(mul(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, zeros_diff_cols)), add(mul(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, ones_diff_cols)))
add(mul(mul(ones_diff_rows, ones_diff_cols), mul(compare_blocks_rows, compare_blocks_cols)), mul(mul(mul(zeros_diff_cols, compare_blocks_rows), ones_diff_rows), add(mul(ones_diff_cols, zeros_diff_cols), zeros_diff_cols)))
COND TREES:
le(_if_then_else(and_(and_(True, False), and_(False, False)), _if_then_else(le(3, max_row_clue), _if_then_else(False, max_col_clue, compare_blocks_cols), _if_then_else(True, 2, 2)), _if_then_else(ge(max_col_clue, zeros_diff_rows), _if_then_else(True, 4, ones_diff_rows), _if_then_else(False, ones_diff_cols, zeros_diff_rows))), _if_then_else(ge(_if_then_else(False, ones_diff_rows, compare_blocks_rows), _if_then_else(False, ones_diff_cols, compare_blocks_cols)), _if_then_else(and_(and_(True, True), and_(False, False)), _if_then_else(True, ones_diff_cols, 4), _if_then_else(True, zeros_diff_rows, zeros_diff_cols)), _if_then_else(or_(True, False), _if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(False, zeros_diff_rows, compare_blocks_cols))))
or_(and_(and_(True, False), and_(True, True)), and_(or_(True, False), or_(False, True)))
or_(ge(_if_then_else(True, _if_then_else(ge(compare_blocks_rows, 3), _if_then_else(True, max_row_clue, compare_blocks_cols), _if_then_else(True, ones_diff_rows, 1)), 4), _if_then_else(False, 2, max_row_clue)), and_(and_(or_(True, True), True), and_(True, False)))
or_(le(_if_then_else(le(max_row_clue, compare_blocks_rows), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(False, zeros_diff_cols, 0)), _if_then_else(True, 0, ones_diff_cols)), or_(and_(True, False), or_(False, False)))
ge(_if_then_else(le(_if_then_else(ge(ones_diff_rows, zeros_diff_rows), _if_then_else(False, 3, 1), _if_then_else(True, 4, zeros_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, zeros_diff_rows), _if_then_else(False, max_col_clue, zeros_diff_rows))), _if_then_else(le(_if_then_else(True, 3, zeros_diff_cols), _if_then_else(True, 1, ones_diff_rows)), _if_then_else(or_(True, True), _if_then_else(True, 2, ones_diff_rows), _if_then_else(True, max_row_clue, 4)), _if_then_else(and_(True, False), _if_then_else(True, ones_diff_rows, compare_blocks_rows), _if_then_else(False, 3, 0))), _if_then_else(le(_if_then_else(False, ones_diff_rows, max_row_clue), _if_then_else(False, zeros_diff_cols, 3)), _if_then_else(or_(True, True), _if_then_else(False, 4, 2), _if_then_else(True, max_col_clue, 1)), _if_then_else(or_(False, True), _if_then_else(False, ones_diff_rows, ones_diff_rows), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)))), _if_then_else(le(_if_then_else(or_(False, True), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, 3, ones_diff_rows)), _if_then_else(ge(zeros_diff_rows, 3), _if_then_else(False, max_col_clue, ones_diff_rows), _if_then_else(True, ones_diff_rows, zeros_diff_cols))), _if_then_else(le(_if_then_else(or_(False, False), _if_then_else(False, _if_then_else(False, compare_blocks_cols, 0), 0), _if_then_else(True, ones_diff_cols, zeros_diff_cols)), _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(le(compare_blocks_rows, zeros_diff_cols), _if_then_else(True, 0, 4), _if_then_else(False, zeros_diff_rows, max_col_clue)), _if_then_else(le(3, 1), _if_then_else(True, zeros_diff_cols, max_col_clue), _if_then_else(False, 2, zeros_diff_rows))), _if_then_else(and_(or_(True, True), or_(False, False)), _if_then_else(le(2, ones_diff_cols), _if_then_else(False, 0, ones_diff_rows), _if_then_else(True, 1, 0)), _if_then_else(ge(3, zeros_diff_cols), _if_then_else(False, 4, ones_diff_rows), _if_then_else(False, 2, zeros_diff_rows)))))
VAL TREES:
add(add(add(zeros_diff_cols, mul(compare_blocks_rows, compare_blocks_cols)), add(mul(add(compare_blocks_cols, compare_blocks_rows), zeros_diff_rows), mul(mul(zeros_diff_rows, compare_blocks_rows), compare_blocks_rows))), mul(add(ones_diff_rows, zeros_diff_cols), add(compare_blocks_cols, zeros_diff_rows)))
mul(add(compare_blocks_cols, ones_diff_cols), mul(compare_blocks_cols, zeros_diff_cols))
add(mul(mul(add(add(compare_blocks_rows, compare_blocks_cols), zeros_diff_rows), add(add(ones_diff_cols, compare_blocks_cols), ones_diff_cols)), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_rows), add(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, add(compare_blocks_rows, compare_blocks_cols))), compare_blocks_rows)))
add(add(add(zeros_diff_cols, ones_diff_cols), add(zeros_diff_rows, compare_blocks_rows)), mul(mul(ones_diff_cols, ones_diff_cols), mul(zeros_diff_rows, ones_diff_rows)))
mul(add(mul(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, zeros_diff_cols)), add(mul(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, ones_diff_cols)))
add(mul(mul(ones_diff_rows, ones_diff_cols), add(add(zeros_diff_cols, compare_blocks_rows), add(ones_diff_rows, compare_blocks_cols))), mul(mul(mul(zeros_diff_cols, compare_blocks_rows), ones_diff_rows), add(mul(ones_diff_cols, zeros_diff_cols), zeros_diff_cols)))
COND TREES:
and_(ge(0, zeros_diff_cols), False)
le(4, max_row_clue)
and_(ge(_if_then_else(False, 1, ones_diff_cols), _if_then_else(False, 3, 4)), or_(and_(False, True), ge(4, 2)))
le(_if_then_else(False, 1, 2), ones_diff_cols)
le(_if_then_else(False, 4, zeros_diff_rows), _if_then_else(True, 4, max_col_clue))
VAL TREES:
add(mul(add(add(compare_blocks_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_cols))), add(mul(add(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_rows, zeros_diff_rows)), add(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_cols, ones_diff_cols))))
add(mul(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_rows, ones_diff_cols)), mul(mul(mul(compare_blocks_cols, ones_diff_rows), mul(ones_diff_cols, compare_blocks_rows)), add(zeros_diff_cols, compare_blocks_rows)))
mul(add(add(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols))), mul(mul(add(ones_diff_rows, ones_diff_cols), add(compare_blocks_cols, compare_blocks_cols)), mul(add(ones_diff_cols, ones_diff_cols), mul(compare_blocks_rows, ones_diff_cols))))
mul(mul(add(compare_blocks_cols, zeros_diff_cols), mul(ones_diff_cols, compare_blocks_rows)), add(mul(zeros_diff_rows, compare_blocks_rows), add(ones_diff_rows, ones_diff_cols)))
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(add(ones_diff_rows, ones_diff_rows), ones_diff_cols)), mul(add(zeros_diff_cols, zeros_diff_rows), mul(add(add(compare_blocks_cols, ones_diff_cols), zeros_diff_rows), zeros_diff_rows)))
mul(mul(add(zeros_diff_rows, ones_diff_cols), add(zeros_diff_cols, ones_diff_rows)), add(mul(ones_diff_rows, compare_blocks_cols), mul(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))))
COND TREES:
and_(or_(and_(True, False), and_(and_(True, False), False)), False)
le(4, 0)
and_(ge(_if_then_else(False, 1, ones_diff_cols), _if_then_else(False, _if_then_else(ge(compare_blocks_rows, 3), _if_then_else(True, max_row_clue, compare_blocks_cols), _if_then_else(True, ones_diff_rows, 1)), 4)), or_(and_(False, True), ge(4, 2)))
le(_if_then_else(False, 1, 2), ones_diff_cols)
le(_if_then_else(True, 3, 0), _if_then_else(True, max_row_clue, max_col_clue))
VAL TREES:
add(mul(add(add(compare_blocks_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_cols)), add(ones_diff_cols, mul(ones_diff_cols, compare_blocks_cols))), add(mul(add(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_rows, zeros_diff_rows)), add(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_cols, ones_diff_cols))))
add(mul(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_rows, ones_diff_cols)), mul(mul(mul(compare_blocks_cols, ones_diff_rows), mul(ones_diff_cols, compare_blocks_rows)), add(zeros_diff_cols, compare_blocks_rows)))
mul(add(add(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols))), mul(mul(add(ones_diff_rows, ones_diff_cols), add(compare_blocks_cols, compare_blocks_cols)), mul(add(ones_diff_cols, ones_diff_cols), mul(compare_blocks_rows, ones_diff_cols))))
mul(mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, compare_blocks_rows)), add(mul(zeros_diff_rows, compare_blocks_rows), add(ones_diff_rows, ones_diff_cols)))
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(add(ones_diff_rows, ones_diff_rows), ones_diff_cols)), mul(add(add(ones_diff_cols, compare_blocks_cols), zeros_diff_rows), mul(add(add(compare_blocks_cols, ones_diff_cols), zeros_diff_rows), zeros_diff_rows)))
mul(compare_blocks_rows, add(mul(ones_diff_rows, compare_blocks_cols), mul(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))))
COND TREES:
and_(or_(and_(True, and_(False, False)), and_(False, True)), and_(and_(True, False), and_(False, False)))
ge(_if_then_else(ge(_if_then_else(False, ones_diff_rows, compare_blocks_cols), _if_then_else(True, 4, zeros_diff_rows)), _if_then_else(False, max_row_clue, 0), _if_then_else(False, max_row_clue, max_row_clue)), _if_then_else(and_(True, False), _if_then_else(False, ones_diff_rows, compare_blocks_cols), _if_then_else(True, 3, ones_diff_cols)))
and_(ge(_if_then_else(False, 1, ones_diff_cols), _if_then_else(False, max_col_clue, 4)), or_(and_(False, True), ge(_if_then_else(ge(1, compare_blocks_cols), _if_then_else(False, zeros_diff_cols, 1), _if_then_else(False, 1, compare_blocks_rows)), 2)))
le(_if_then_else(and_(False, False), _if_then_else(False, 1, 2), _if_then_else(True, 1, 2)), _if_then_else(and_(False, False), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, zeros_diff_cols, ones_diff_cols)))
or_(le(1, _if_then_else(True, 1, ones_diff_rows)), and_(or_(True, True), le(compare_blocks_rows, zeros_diff_rows)))
VAL TREES:
add(mul(add(add(compare_blocks_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_cols))), add(compare_blocks_cols, add(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_cols, ones_diff_cols))))
add(mul(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_rows, ones_diff_cols)), mul(mul(mul(compare_blocks_cols, ones_diff_rows), mul(ones_diff_cols, compare_blocks_rows)), add(zeros_diff_cols, compare_blocks_rows)))
mul(add(add(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols))), mul(mul(zeros_diff_cols, add(compare_blocks_cols, compare_blocks_cols)), mul(add(ones_diff_cols, ones_diff_cols), mul(compare_blocks_rows, ones_diff_cols))))
mul(mul(add(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_cols, compare_blocks_rows)), add(mul(zeros_diff_rows, compare_blocks_rows), add(ones_diff_rows, ones_diff_cols)))
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(add(ones_diff_rows, ones_diff_rows), ones_diff_cols)), mul(add(zeros_diff_cols, zeros_diff_rows), mul(add(add(compare_blocks_cols, ones_diff_cols), mul(mul(zeros_diff_rows, ones_diff_rows), mul(zeros_diff_rows, zeros_diff_rows))), zeros_diff_rows)))
mul(mul(add(zeros_diff_rows, ones_diff_cols), add(zeros_diff_cols, ones_diff_rows)), add(mul(ones_diff_rows, compare_blocks_cols), mul(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))))
COND TREES:
le(_if_then_else(and_(ge(0, _if_then_else(or_(True, False), _if_then_else(False, zeros_diff_rows, zeros_diff_rows), _if_then_else(False, 2, max_row_clue))), and_(False, False)), _if_then_else(le(3, max_row_clue), _if_then_else(False, max_col_clue, compare_blocks_cols), 2), _if_then_else(ge(max_col_clue, zeros_diff_rows), _if_then_else(True, 4, ones_diff_rows), _if_then_else(False, ones_diff_cols, zeros_diff_rows))), _if_then_else(ge(max_row_clue, _if_then_else(False, ones_diff_cols, compare_blocks_cols)), _if_then_else(le(3, max_row_clue), _if_then_else(False, max_col_clue, compare_blocks_cols), _if_then_else(ge(max_col_clue, max_row_clue), 2, 2)), _if_then_else(or_(True, False), _if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(False, zeros_diff_rows, compare_blocks_cols))))
or_(and_(and_(True, False), True), True)
or_(ge(_if_then_else(True, zeros_diff_rows, _if_then_else(False, ones_diff_rows, 1)), _if_then_else(True, 2, max_row_clue)), and_(and_(le(1, max_row_clue), ge(_if_then_else(False, max_col_clue, 1), _if_then_else(False, 2, max_row_clue))), and_(True, False)))
or_(or_(le(3, ones_diff_rows), le(4, 1)), or_(False, False))
ge(_if_then_else(le(_if_then_else(ge(ones_diff_rows, zeros_diff_rows), _if_then_else(False, 3, 1), _if_then_else(True, 4, zeros_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, zeros_diff_rows), _if_then_else(False, max_col_clue, zeros_diff_rows))), _if_then_else(or_(and_(False, False), or_(True, True)), _if_then_else(or_(True, True), _if_then_else(True, 2, ones_diff_rows), _if_then_else(True, max_row_clue, 4)), _if_then_else(and_(True, False), _if_then_else(True, max_col_clue, compare_blocks_rows), _if_then_else(False, 4, zeros_diff_rows))), _if_then_else(le(_if_then_else(False, ones_diff_rows, max_row_clue), _if_then_else(False, zeros_diff_cols, 3)), _if_then_else(or_(True, True), _if_then_else(False, 4, 2), _if_then_else(True, max_col_clue, 1)), _if_then_else(or_(False, True), _if_then_else(False, ones_diff_rows, ones_diff_rows), _if_then_else(True, 2, ones_diff_rows)))), _if_then_else(le(_if_then_else(or_(False, True), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, 3, ones_diff_rows)), _if_then_else(ge(zeros_diff_rows, 3), _if_then_else(False, max_col_clue, ones_diff_rows), _if_then_else(True, ones_diff_rows, zeros_diff_cols))), _if_then_else(le(_if_then_else(True, zeros_diff_rows, compare_blocks_rows), _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(le(compare_blocks_rows, zeros_diff_cols), _if_then_else(True, 0, 4), _if_then_else(False, zeros_diff_rows, max_col_clue)), _if_then_else(le(3, 1), _if_then_else(True, zeros_diff_cols, 4), _if_then_else(False, 2, zeros_diff_rows))), _if_then_else(and_(or_(True, True), or_(False, False)), _if_then_else(le(2, ones_diff_cols), _if_then_else(False, 0, ones_diff_rows), _if_then_else(True, 1, 0)), _if_then_else(ge(3, zeros_diff_cols), _if_then_else(False, 4, ones_diff_rows), _if_then_else(False, 2, zeros_diff_rows)))))
VAL TREES:
add(add(add(zeros_diff_cols, mul(compare_blocks_rows, compare_blocks_cols)), add(mul(add(compare_blocks_cols, compare_blocks_rows), zeros_diff_rows), mul(mul(zeros_diff_rows, compare_blocks_rows), zeros_diff_cols))), mul(add(ones_diff_rows, zeros_diff_cols), add(compare_blocks_cols, zeros_diff_rows)))
mul(mul(mul(ones_diff_cols, zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), mul(add(compare_blocks_cols, ones_diff_rows), add(ones_diff_rows, compare_blocks_cols)))
add(mul(mul(add(add(compare_blocks_rows, compare_blocks_cols), zeros_diff_rows), add(add(ones_diff_cols, compare_blocks_cols), ones_diff_cols)), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_rows), add(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_rows)), compare_blocks_rows)))
add(add(add(zeros_diff_cols, ones_diff_cols), add(zeros_diff_rows, compare_blocks_rows)), mul(mul(ones_diff_cols, ones_diff_cols), mul(zeros_diff_rows, ones_diff_rows)))
mul(add(mul(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, zeros_diff_cols)), add(mul(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, ones_diff_cols)))
add(mul(mul(ones_diff_rows, ones_diff_cols), mul(compare_blocks_rows, ones_diff_rows)), mul(mul(mul(zeros_diff_cols, compare_blocks_rows), ones_diff_rows), add(mul(ones_diff_cols, zeros_diff_cols), zeros_diff_cols)))
COND TREES:
le(_if_then_else(le(_if_then_else(and_(True, True), _if_then_else(False, 0, compare_blocks_rows), _if_then_else(False, 3, ones_diff_cols)), _if_then_else(or_(True, False), _if_then_else(False, ones_diff_rows, 0), _if_then_else(False, 0, 4))), _if_then_else(ge(_if_then_else(True, max_row_clue, ones_diff_cols), _if_then_else(or_(True, False), 4, max_col_clue)), _if_then_else(or_(True, False), _if_then_else(True, ones_diff_rows, 1), _if_then_else(True, compare_blocks_rows, 1)), _if_then_else(or_(False, False), _if_then_else(True, 2, 4), _if_then_else(True, 2, 4))), _if_then_else(ge(_if_then_else(True, zeros_diff_rows, max_col_clue), _if_then_else(True, ones_diff_rows, zeros_diff_rows)), _if_then_else(ge(zeros_diff_rows, max_row_clue), _if_then_else(False, 2, compare_blocks_cols), _if_then_else(False, max_col_clue, 0)), _if_then_else(le(ones_diff_rows, max_col_clue), _if_then_else(False, 3, max_row_clue), _if_then_else(False, 4, zeros_diff_cols)))), _if_then_else(and_(or_(or_(True, True), le(0, zeros_diff_cols)), or_(ge(ones_diff_cols, 1), ge(0, ones_diff_cols))), _if_then_else(ge(_if_then_else(False, max_row_clue, zeros_diff_rows), _if_then_else(True, 2, 0)), _if_then_else(le(3, ones_diff_cols), _if_then_else(False, zeros_diff_cols, compare_blocks_cols), _if_then_else(False, 0, zeros_diff_rows)), _if_then_else(ge(1, compare_blocks_cols), _if_then_else(True, ones_diff_rows, compare_blocks_cols), _if_then_else(False, 3, 3))), _if_then_else(or_(le(_if_then_else(le(0, zeros_diff_rows), _if_then_else(False, 1, max_col_clue), _if_then_else(False, 4, ones_diff_rows)), 2), or_(False, False)), _if_then_else(ge(2, max_row_clue), _if_then_else(False, zeros_diff_cols, compare_blocks_rows), _if_then_else(False, 1, 0)), _if_then_else(or_(True, True), _if_then_else(False, zeros_diff_rows, ones_diff_cols), _if_then_else(True, zeros_diff_cols, zeros_diff_cols)))))
le(_if_then_else(True, 2, zeros_diff_cols), _if_then_else(le(_if_then_else(True, max_col_clue, ones_diff_rows), _if_then_else(True, max_row_clue, ones_diff_cols)), _if_then_else(False, _if_then_else(False, zeros_diff_cols, max_col_clue), _if_then_else(False, max_row_clue, compare_blocks_rows)), _if_then_else(False, ones_diff_cols, _if_then_else(False, 0, ones_diff_rows))))
ge(_if_then_else(le(_if_then_else(True, max_row_clue, 3), _if_then_else(True, ones_diff_rows, zeros_diff_cols)), _if_then_else(le(3, max_row_clue), _if_then_else(False, max_row_clue, ones_diff_cols), _if_then_else(False, 2, ones_diff_cols)), _if_then_else(ge(zeros_diff_rows, zeros_diff_cols), _if_then_else(False, 1, 2), _if_then_else(True, max_col_clue, compare_blocks_cols))), _if_then_else(or_(False, False), _if_then_else(le(ones_diff_cols, max_col_clue), _if_then_else(True, zeros_diff_rows, 1), _if_then_else(False, max_row_clue, ones_diff_rows)), _if_then_else(le(zeros_diff_rows, 3), _if_then_else(True, compare_blocks_rows, 0), _if_then_else(True, 0, zeros_diff_cols))))
or_(or_(and_(ge(4, ones_diff_cols), le(ones_diff_cols, 2)), or_(or_(False, True), or_(True, False))), ge(_if_then_else(le(_if_then_else(True, 0, zeros_diff_rows), zeros_diff_rows), _if_then_else(False, ones_diff_cols, max_col_clue), _if_then_else(True, zeros_diff_rows, zeros_diff_rows)), _if_then_else(or_(True, ge(_if_then_else(False, 1, 1), 4)), _if_then_else(True, max_col_clue, ones_diff_rows), _if_then_else(True, max_col_clue, zeros_diff_rows))))
ge(_if_then_else(or_(False, and_(True, or_(False, False))), _if_then_else(True, _if_then_else(True, 0, compare_blocks_cols), _if_then_else(True, 0, max_col_clue)), _if_then_else(False, _if_then_else(True, ones_diff_rows, zeros_diff_cols), zeros_diff_cols)), _if_then_else(le(compare_blocks_cols, 2), _if_then_else(True, _if_then_else(True, compare_blocks_rows, max_row_clue), max_col_clue), _if_then_else(or_(True, True), compare_blocks_rows, 3)))
VAL TREES:
add(add(add(compare_blocks_cols, zeros_diff_cols), mul(compare_blocks_cols, compare_blocks_cols)), mul(add(ones_diff_rows, zeros_diff_cols), add(zeros_diff_rows, compare_blocks_cols)))
mul(add(mul(compare_blocks_rows, zeros_diff_cols), add(compare_blocks_cols, zeros_diff_cols)), mul(mul(mul(ones_diff_rows, add(compare_blocks_cols, zeros_diff_rows)), compare_blocks_cols), add(ones_diff_cols, compare_blocks_cols)))
mul(add(add(ones_diff_cols, compare_blocks_rows), mul(zeros_diff_rows, zeros_diff_rows)), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, compare_blocks_cols)))
add(mul(mul(compare_blocks_cols, compare_blocks_cols), mul(compare_blocks_rows, mul(compare_blocks_rows, zeros_diff_rows))), mul(add(ones_diff_rows, ones_diff_cols), mul(compare_blocks_cols, zeros_diff_cols)))
add(add(add(add(zeros_diff_cols, compare_blocks_cols), mul(ones_diff_cols, ones_diff_rows)), mul(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_rows))), mul(add(add(ones_diff_cols, zeros_diff_cols), mul(ones_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_rows, zeros_diff_rows), mul(ones_diff_rows, zeros_diff_rows))))
mul(add(add(mul(zeros_diff_rows, zeros_diff_cols), ones_diff_cols), mul(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, add(ones_diff_cols, ones_diff_rows)), mul(ones_diff_cols, zeros_diff_cols)))
COND TREES:
and_(or_(and_(True, True), False), and_(and_(True, True), and_(False, False)))
ge(_if_then_else(or_(False, True), _if_then_else(False, max_row_clue, 0), _if_then_else(False, max_row_clue, max_row_clue)), _if_then_else(and_(False, True), _if_then_else(False, 1, ones_diff_cols), _if_then_else(True, 4, 0)))
and_(False, or_(and_(and_(and_(False, True), or_(False, False)), True), ge(4, 2)))
le(_if_then_else(and_(False, False), _if_then_else(False, 1, 0), _if_then_else(True, 1, 2)), _if_then_else(and_(False, False), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, zeros_diff_cols, ones_diff_cols)))
or_(le(_if_then_else(True, 3, zeros_diff_cols), _if_then_else(True, 1, ones_diff_rows)), and_(False, le(compare_blocks_rows, zeros_diff_rows)))
VAL TREES:
add(mul(add(add(compare_blocks_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_cols))), add(mul(add(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_rows, zeros_diff_rows)), add(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_cols, ones_diff_cols))))
add(mul(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_rows, ones_diff_cols)), mul(mul(mul(compare_blocks_cols, ones_diff_rows), mul(ones_diff_cols, compare_blocks_rows)), add(zeros_diff_cols, compare_blocks_rows)))
mul(add(add(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols))), mul(mul(add(ones_diff_rows, ones_diff_cols), add(compare_blocks_cols, compare_blocks_cols)), mul(add(ones_diff_cols, ones_diff_cols), mul(compare_blocks_rows, ones_diff_cols))))
mul(mul(add(compare_blocks_cols, zeros_diff_cols), mul(ones_diff_cols, compare_blocks_rows)), add(mul(zeros_diff_rows, compare_blocks_rows), add(ones_diff_rows, ones_diff_cols)))
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(add(ones_diff_rows, ones_diff_rows), ones_diff_cols)), mul(add(zeros_diff_cols, zeros_diff_rows), mul(add(add(compare_blocks_cols, ones_diff_cols), zeros_diff_rows), zeros_diff_rows)))
mul(mul(add(zeros_diff_rows, ones_diff_cols), add(zeros_diff_cols, ones_diff_rows)), add(mul(ones_diff_rows, compare_blocks_cols), mul(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))))
COND TREES:
and_(or_(or_(True, False), and_(False, True)), and_(and_(True, le(0, zeros_diff_cols)), and_(False, False)))
ge(max_col_clue, zeros_diff_cols)
and_(ge(_if_then_else(False, ones_diff_cols, ones_diff_cols), _if_then_else(False, max_col_clue, 4)), or_(and_(False, True), ge(4, 2)))
le(_if_then_else(False, max_col_clue, 4), _if_then_else(and_(True, False), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, zeros_diff_cols, ones_diff_cols)))
or_(ge(_if_then_else(or_(False, True), compare_blocks_cols, compare_blocks_rows), _if_then_else(False, _if_then_else(False, 0, 3), max_col_clue)), and_(le(ones_diff_cols, zeros_diff_rows), le(compare_blocks_rows, zeros_diff_rows)))
VAL TREES:
add(mul(add(add(compare_blocks_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_cols))), add(mul(add(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_rows, zeros_diff_rows)), add(mul(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_rows, zeros_diff_cols)), mul(ones_diff_cols, ones_diff_cols))))
add(mul(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_rows, ones_diff_cols)), mul(mul(mul(compare_blocks_cols, ones_diff_rows), mul(ones_diff_cols, compare_blocks_rows)), add(add(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_cols, zeros_diff_rows))))
mul(add(add(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols))), mul(mul(add(ones_diff_rows, ones_diff_cols), add(compare_blocks_cols, compare_blocks_cols)), mul(add(ones_diff_cols, ones_diff_cols), mul(compare_blocks_rows, ones_diff_cols))))
mul(mul(add(mul(zeros_diff_cols, zeros_diff_rows), zeros_diff_cols), mul(ones_diff_cols, compare_blocks_rows)), add(mul(zeros_diff_rows, compare_blocks_rows), add(ones_diff_rows, ones_diff_cols)))
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(add(ones_diff_rows, ones_diff_rows), ones_diff_cols)), mul(add(zeros_diff_cols, zeros_diff_rows), mul(add(add(compare_blocks_cols, ones_diff_cols), zeros_diff_rows), zeros_diff_rows)))
mul(mul(add(zeros_diff_rows, ones_diff_cols), add(zeros_diff_cols, ones_diff_rows)), add(mul(ones_diff_rows, compare_blocks_cols), mul(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))))
COND TREES:
le(_if_then_else(le(_if_then_else(and_(True, True), _if_then_else(False, 0, compare_blocks_rows), _if_then_else(False, 3, ones_diff_cols)), _if_then_else(or_(True, False), _if_then_else(False, ones_diff_rows, 0), _if_then_else(False, 0, 4))), _if_then_else(ge(_if_then_else(True, max_row_clue, ones_diff_cols), _if_then_else(or_(True, False), 4, max_col_clue)), _if_then_else(or_(True, False), _if_then_else(True, ones_diff_rows, 1), _if_then_else(True, compare_blocks_rows, 1)), _if_then_else(or_(False, False), _if_then_else(True, 2, 4), _if_then_else(True, 2, 4))), _if_then_else(ge(_if_then_else(True, zeros_diff_rows, max_col_clue), _if_then_else(True, ones_diff_rows, zeros_diff_rows)), _if_then_else(ge(zeros_diff_rows, max_row_clue), _if_then_else(False, 2, compare_blocks_cols), _if_then_else(False, max_col_clue, 0)), _if_then_else(le(ones_diff_rows, max_col_clue), _if_then_else(False, 3, max_row_clue), _if_then_else(False, 4, zeros_diff_cols)))), _if_then_else(and_(or_(or_(True, True), le(0, zeros_diff_cols)), or_(ge(ones_diff_cols, 1), ge(0, ones_diff_cols))), _if_then_else(ge(_if_then_else(False, max_row_clue, zeros_diff_rows), _if_then_else(True, 2, 0)), _if_then_else(le(3, ones_diff_cols), _if_then_else(False, zeros_diff_cols, compare_blocks_cols), _if_then_else(False, 0, zeros_diff_rows)), _if_then_else(ge(1, compare_blocks_cols), _if_then_else(True, ones_diff_rows, compare_blocks_cols), _if_then_else(False, 3, 3))), _if_then_else(or_(le(_if_then_else(le(0, zeros_diff_rows), _if_then_else(False, 1, max_col_clue), _if_then_else(False, 4, ones_diff_rows)), 2), or_(False, False)), _if_then_else(ge(2, max_row_clue), _if_then_else(False, zeros_diff_cols, compare_blocks_rows), _if_then_else(False, 1, 0)), _if_then_else(or_(True, True), _if_then_else(False, zeros_diff_rows, ones_diff_cols), _if_then_else(True, zeros_diff_cols, zeros_diff_cols)))))
le(_if_then_else(True, 2, zeros_diff_cols), _if_then_else(le(_if_then_else(True, max_col_clue, ones_diff_rows), _if_then_else(True, max_row_clue, ones_diff_cols)), _if_then_else(False, _if_then_else(False, zeros_diff_cols, max_col_clue), _if_then_else(False, max_row_clue, compare_blocks_rows)), _if_then_else(False, ones_diff_cols, _if_then_else(False, 0, ones_diff_rows))))
ge(_if_then_else(ge(4, 2), _if_then_else(le(3, max_row_clue), _if_then_else(False, max_row_clue, ones_diff_cols), _if_then_else(False, 2, ones_diff_cols)), _if_then_else(ge(zeros_diff_rows, zeros_diff_cols), _if_then_else(False, 1, 2), _if_then_else(True, max_col_clue, compare_blocks_cols))), _if_then_else(or_(False, False), _if_then_else(le(ones_diff_cols, max_col_clue), _if_then_else(True, zeros_diff_rows, 1), _if_then_else(False, max_row_clue, ones_diff_rows)), _if_then_else(le(zeros_diff_rows, 3), _if_then_else(True, compare_blocks_rows, 0), _if_then_else(True, 0, zeros_diff_cols))))
or_(or_(and_(ge(4, ones_diff_cols), le(ones_diff_cols, 2)), or_(or_(False, True), or_(True, False))), ge(_if_then_else(le(_if_then_else(True, 0, zeros_diff_rows), zeros_diff_rows), _if_then_else(False, ones_diff_cols, max_col_clue), _if_then_else(True, zeros_diff_rows, zeros_diff_rows)), _if_then_else(or_(True, ge(_if_then_else(False, 1, 1), 4)), _if_then_else(True, max_col_clue, ones_diff_rows), _if_then_else(True, max_col_clue, zeros_diff_rows))))
ge(_if_then_else(or_(False, and_(True, or_(False, False))), _if_then_else(True, _if_then_else(True, 0, compare_blocks_cols), _if_then_else(True, 0, max_col_clue)), _if_then_else(False, _if_then_else(True, ones_diff_rows, max_col_clue), zeros_diff_cols)), _if_then_else(le(compare_blocks_cols, 2), _if_then_else(True, _if_then_else(True, compare_blocks_rows, max_row_clue), max_col_clue), _if_then_else(or_(True, True), compare_blocks_rows, 3)))
VAL TREES:
add(add(add(compare_blocks_cols, ones_diff_cols), mul(compare_blocks_cols, compare_blocks_cols)), mul(add(ones_diff_rows, zeros_diff_cols), add(zeros_diff_rows, compare_blocks_cols)))
mul(add(mul(compare_blocks_rows, zeros_diff_cols), add(compare_blocks_cols, zeros_diff_cols)), mul(mul(mul(ones_diff_rows, add(compare_blocks_cols, zeros_diff_rows)), compare_blocks_cols), add(ones_diff_cols, compare_blocks_cols)))
mul(add(add(ones_diff_cols, compare_blocks_rows), mul(add(compare_blocks_cols, ones_diff_cols), zeros_diff_rows)), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, compare_blocks_cols)))
add(mul(mul(compare_blocks_cols, compare_blocks_cols), mul(compare_blocks_rows, mul(compare_blocks_rows, zeros_diff_rows))), mul(add(ones_diff_rows, ones_diff_cols), mul(compare_blocks_cols, zeros_diff_cols)))
add(add(add(add(zeros_diff_cols, compare_blocks_cols), mul(ones_diff_cols, ones_diff_rows)), mul(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_rows))), mul(add(add(ones_diff_cols, zeros_diff_cols), mul(ones_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_rows, zeros_diff_rows), mul(ones_diff_rows, zeros_diff_rows))))
mul(add(add(mul(zeros_diff_rows, mul(add(compare_blocks_cols, compare_blocks_rows), add(zeros_diff_cols, compare_blocks_rows))), ones_diff_cols), mul(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, add(ones_diff_cols, ones_diff_rows)), mul(ones_diff_cols, zeros_diff_cols)))
COND TREES:
and_(or_(or_(True, False), and_(False, True)), and_(and_(True, False), and_(False, False)))
ge(_if_then_else(or_(True, False), _if_then_else(False, max_row_clue, 0), _if_then_else(False, max_row_clue, max_row_clue)), _if_then_else(and_(True, False), _if_then_else(False, ones_diff_rows, compare_blocks_cols), _if_then_else(True, 3, ones_diff_cols)))
and_(ge(_if_then_else(False, 1, ones_diff_cols), _if_then_else(False, max_col_clue, 4)), or_(and_(False, True), le(_if_then_else(True, max_row_clue, 3), _if_then_else(True, ones_diff_rows, zeros_diff_cols))))
le(_if_then_else(and_(False, False), _if_then_else(False, 1, 2), _if_then_else(True, 1, 2)), _if_then_else(and_(False, False), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, zeros_diff_cols, ones_diff_cols)))
or_(le(max_col_clue, _if_then_else(True, 4, zeros_diff_cols)), and_(or_(True, True), le(compare_blocks_rows, zeros_diff_rows)))
VAL TREES:
add(mul(add(add(compare_blocks_rows, compare_blocks_rows), mul(add(zeros_diff_cols, compare_blocks_rows), ones_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_cols))), add(mul(add(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_rows, zeros_diff_rows)), add(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_cols, ones_diff_cols))))
add(mul(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_rows, ones_diff_cols)), mul(mul(mul(compare_blocks_cols, ones_diff_rows), mul(ones_diff_cols, compare_blocks_rows)), add(add(ones_diff_rows, compare_blocks_rows), compare_blocks_rows)))
mul(add(add(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols))), mul(mul(add(ones_diff_rows, ones_diff_cols), add(compare_blocks_cols, compare_blocks_cols)), mul(add(ones_diff_cols, ones_diff_cols), mul(zeros_diff_cols, zeros_diff_rows))))
mul(mul(add(compare_blocks_cols, zeros_diff_cols), mul(ones_diff_cols, compare_blocks_rows)), add(mul(zeros_diff_rows, compare_blocks_rows), add(ones_diff_rows, ones_diff_cols)))
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(add(ones_diff_rows, ones_diff_rows), ones_diff_cols)), mul(add(zeros_diff_cols, zeros_diff_rows), mul(add(add(compare_blocks_cols, ones_diff_cols), zeros_diff_rows), zeros_diff_rows)))
mul(mul(add(zeros_diff_rows, ones_diff_cols), add(zeros_diff_cols, ones_diff_rows)), add(mul(ones_diff_rows, compare_blocks_cols), mul(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))))
COND TREES:
and_(or_(and_(True, and_(False, False)), and_(False, True)), and_(and_(True, False), and_(False, False)))
ge(_if_then_else(ge(_if_then_else(False, ones_diff_rows, compare_blocks_cols), _if_then_else(True, 4, zeros_diff_rows)), _if_then_else(False, max_row_clue, 0), _if_then_else(False, max_row_clue, max_row_clue)), _if_then_else(and_(True, False), _if_then_else(False, ones_diff_rows, compare_blocks_cols), _if_then_else(True, 3, ones_diff_cols)))
and_(ge(_if_then_else(False, 1, ones_diff_cols), _if_then_else(False, max_col_clue, 4)), or_(and_(False, True), ge(_if_then_else(ge(1, compare_blocks_cols), _if_then_else(False, zeros_diff_cols, 1), _if_then_else(False, 1, compare_blocks_rows)), 2)))
le(_if_then_else(and_(False, False), _if_then_else(False, 1, 2), _if_then_else(True, 1, 2)), _if_then_else(and_(False, False), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, zeros_diff_cols, ones_diff_cols)))
or_(le(1, _if_then_else(True, 1, ones_diff_rows)), and_(or_(True, True), le(compare_blocks_rows, zeros_diff_rows)))
VAL TREES:
add(mul(add(add(compare_blocks_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_cols))), add(compare_blocks_cols, add(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_cols, ones_diff_cols))))
add(mul(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_rows, ones_diff_cols)), mul(mul(mul(compare_blocks_cols, ones_diff_rows), mul(ones_diff_cols, compare_blocks_rows)), add(zeros_diff_cols, compare_blocks_rows)))
mul(add(add(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols))), mul(mul(zeros_diff_cols, add(compare_blocks_cols, compare_blocks_cols)), mul(add(ones_diff_cols, ones_diff_cols), mul(compare_blocks_rows, ones_diff_cols))))
mul(mul(add(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_cols, compare_blocks_rows)), add(mul(zeros_diff_rows, compare_blocks_rows), add(ones_diff_rows, ones_diff_cols)))
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(add(ones_diff_rows, ones_diff_rows), ones_diff_cols)), mul(add(zeros_diff_cols, zeros_diff_rows), mul(add(add(compare_blocks_cols, ones_diff_cols), mul(mul(zeros_diff_rows, ones_diff_rows), mul(zeros_diff_rows, zeros_diff_rows))), zeros_diff_rows)))
mul(mul(add(zeros_diff_rows, ones_diff_cols), add(zeros_diff_cols, ones_diff_rows)), add(mul(ones_diff_rows, compare_blocks_cols), mul(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))))
COND TREES:
and_(or_(or_(True, False), and_(False, True)), and_(and_(True, False), and_(False, False)))
ge(_if_then_else(or_(True, False), _if_then_else(False, max_row_clue, 0), _if_then_else(False, max_row_clue, max_row_clue)), _if_then_else(and_(True, False), _if_then_else(False, ones_diff_rows, compare_blocks_cols), _if_then_else(True, 3, ones_diff_cols)))
and_(ge(_if_then_else(False, 1, ones_diff_cols), _if_then_else(False, max_col_clue, 4)), or_(and_(False, True), ge(4, 2)))
le(_if_then_else(and_(False, False), _if_then_else(False, 1, 2), _if_then_else(True, 1, 2)), _if_then_else(and_(False, False), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, zeros_diff_cols, ones_diff_cols)))
or_(le(max_col_clue, _if_then_else(True, 4, max_col_clue)), and_(or_(True, True), le(compare_blocks_rows, zeros_diff_rows)))
VAL TREES:
add(mul(add(add(compare_blocks_rows, compare_blocks_rows), mul(add(zeros_diff_cols, compare_blocks_rows), ones_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_cols))), add(mul(add(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_rows, zeros_diff_rows)), add(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_cols, ones_diff_cols))))
add(mul(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_rows, ones_diff_cols)), mul(mul(mul(compare_blocks_cols, ones_diff_rows), mul(ones_diff_cols, compare_blocks_rows)), add(add(ones_diff_rows, compare_blocks_rows), compare_blocks_rows)))
mul(add(add(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols))), mul(mul(add(ones_diff_rows, ones_diff_cols), add(compare_blocks_cols, compare_blocks_cols)), mul(add(ones_diff_cols, ones_diff_cols), mul(zeros_diff_cols, zeros_diff_rows))))
mul(mul(add(compare_blocks_cols, zeros_diff_cols), mul(ones_diff_cols, compare_blocks_rows)), add(mul(zeros_diff_rows, compare_blocks_rows), add(ones_diff_rows, ones_diff_cols)))
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(add(ones_diff_rows, ones_diff_rows), ones_diff_cols)), mul(add(zeros_diff_cols, zeros_diff_rows), mul(add(add(compare_blocks_cols, ones_diff_cols), zeros_diff_rows), zeros_diff_rows)))
mul(mul(add(zeros_diff_rows, ones_diff_cols), add(zeros_diff_cols, ones_diff_rows)), add(mul(ones_diff_rows, compare_blocks_cols), mul(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))))
COND TREES:
False
le(_if_then_else(or_(True, False), _if_then_else(False, _if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(True, zeros_diff_cols, ones_diff_cols)), _if_then_else(True, 4, 3)), _if_then_else(and_(le(ones_diff_rows, zeros_diff_rows), le(ones_diff_cols, ones_diff_rows)), _if_then_else(True, 0, compare_blocks_cols), _if_then_else(ge(2, max_row_clue), 4, _if_then_else(False, compare_blocks_cols, 0))))
le(_if_then_else(ge(4, 2), _if_then_else(False, _if_then_else(or_(False, True), 3, ones_diff_cols), 2), _if_then_else(ge(_if_then_else(False, zeros_diff_rows, 4), _if_then_else(True, 4, 1)), zeros_diff_cols, max_row_clue)), ones_diff_rows)
le(_if_then_else(False, _if_then_else(False, compare_blocks_rows, max_row_clue), 0), _if_then_else(le(_if_then_else(False, ones_diff_cols, ones_diff_cols), _if_then_else(False, max_col_clue, max_col_clue)), _if_then_else(and_(False, False), _if_then_else(False, 1, 1), _if_then_else(True, compare_blocks_rows, max_row_clue)), _if_then_else(and_(True, False), _if_then_else(True, compare_blocks_cols, ones_diff_rows), _if_then_else(True, compare_blocks_cols, zeros_diff_cols))))
and_(and_(le(_if_then_else(le(compare_blocks_cols, 3), 1, 0), _if_then_else(True, _if_then_else(False, ones_diff_rows, zeros_diff_cols), compare_blocks_cols)), and_(True, or_(False, False))), or_(le(max_col_clue, _if_then_else(True, 4, max_col_clue)), le(_if_then_else(ge(4, compare_blocks_rows), _if_then_else(False, compare_blocks_rows, 3), _if_then_else(False, _if_then_else(False, ones_diff_cols, _if_then_else(True, 4, zeros_diff_cols)), _if_then_else(True, _if_then_else(True, ones_diff_rows, ones_diff_cols), _if_then_else(True, 4, 2)))), max_row_clue)))
VAL TREES:
mul(mul(mul(add(ones_diff_rows, ones_diff_rows), compare_blocks_rows), mul(ones_diff_rows, compare_blocks_cols)), add(mul(zeros_diff_rows, compare_blocks_rows), add(ones_diff_rows, compare_blocks_rows)))
mul(add(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), add(compare_blocks_rows, ones_diff_rows)), add(mul(ones_diff_cols, zeros_diff_cols), add(compare_blocks_rows, zeros_diff_rows))), add(mul(mul(ones_diff_rows, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_rows)), add(mul(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, zeros_diff_rows)))), mul(add(add(mul(ones_diff_rows, ones_diff_rows), add(compare_blocks_rows, zeros_diff_rows)), add(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_rows, compare_blocks_cols))), mul(mul(mul(zeros_diff_cols, ones_diff_cols), add(ones_diff_rows, ones_diff_rows)), add(add(compare_blocks_cols, compare_blocks_rows), add(zeros_diff_cols, compare_blocks_cols)))))
mul(mul(add(compare_blocks_cols, zeros_diff_cols), mul(add(zeros_diff_cols, ones_diff_rows), add(zeros_diff_rows, zeros_diff_cols))), mul(mul(ones_diff_rows, compare_blocks_rows), add(compare_blocks_cols, zeros_diff_cols)))
add(mul(add(add(ones_diff_cols, compare_blocks_cols), add(add(ones_diff_cols, compare_blocks_cols), ones_diff_cols)), add(mul(zeros_diff_rows, ones_diff_cols), add(ones_diff_cols, compare_blocks_cols))), mul(mul(add(zeros_diff_cols, ones_diff_cols), add(compare_blocks_cols, zeros_diff_cols)), add(add(zeros_diff_cols, ones_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
add(add(mul(zeros_diff_cols, compare_blocks_cols), mul(compare_blocks_rows, ones_diff_cols)), add(mul(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_cols)))
add(add(mul(mul(compare_blocks_rows, zeros_diff_cols), add(compare_blocks_cols, compare_blocks_rows)), add(add(ones_diff_cols, zeros_diff_cols), add(zeros_diff_cols, zeros_diff_cols))), mul(add(mul(ones_diff_cols, zeros_diff_rows), add(zeros_diff_cols, compare_blocks_cols)), add(mul(ones_diff_rows, ones_diff_rows), add(compare_blocks_rows, zeros_diff_rows))))
COND TREES:
and_(and_(True, False), False)
le(4, max_row_clue)
and_(ge(_if_then_else(False, 1, ones_diff_cols), _if_then_else(False, _if_then_else(ge(compare_blocks_rows, 3), _if_then_else(True, max_row_clue, compare_blocks_cols), _if_then_else(True, ones_diff_rows, 1)), 4)), or_(and_(False, True), ge(4, 2)))
le(_if_then_else(True, 1, 2), ones_diff_cols)
le(_if_then_else(False, 3, 0), _if_then_else(True, 4, max_col_clue))
VAL TREES:
add(mul(add(add(compare_blocks_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_cols))), add(mul(add(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_rows, zeros_diff_rows)), add(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_cols, ones_diff_cols))))
add(mul(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_rows, ones_diff_cols)), mul(mul(mul(compare_blocks_cols, ones_diff_rows), mul(ones_diff_cols, compare_blocks_rows)), add(zeros_diff_cols, compare_blocks_rows)))
mul(add(add(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols))), mul(mul(add(ones_diff_rows, ones_diff_cols), add(compare_blocks_cols, compare_blocks_cols)), mul(add(ones_diff_cols, ones_diff_cols), mul(compare_blocks_rows, ones_diff_cols))))
mul(mul(add(compare_blocks_cols, zeros_diff_cols), mul(ones_diff_cols, compare_blocks_rows)), add(mul(zeros_diff_rows, compare_blocks_rows), add(ones_diff_rows, ones_diff_cols)))
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(add(ones_diff_rows, ones_diff_rows), ones_diff_cols)), mul(add(zeros_diff_cols, zeros_diff_rows), mul(add(add(compare_blocks_cols, ones_diff_cols), zeros_diff_rows), zeros_diff_rows)))
mul(mul(add(zeros_diff_rows, ones_diff_cols), add(zeros_diff_cols, ones_diff_rows)), add(mul(ones_diff_rows, compare_blocks_cols), mul(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))))
COND TREES:
ge(_if_then_else(and_(ge(3, compare_blocks_rows), and_(False, False)), _if_then_else(False, _if_then_else(False, 1, 2), _if_then_else(False, 3, 1)), _if_then_else(ge(zeros_diff_cols, 0), _if_then_else(True, 2, 1), 3)), _if_then_else(and_(le(4, compare_blocks_rows), and_(True, True)), _if_then_else(or_(False, False), _if_then_else(False, compare_blocks_rows, 1), _if_then_else(True, ones_diff_cols, ones_diff_cols)), _if_then_else(and_(False, True), _if_then_else(True, ones_diff_cols, ones_diff_cols), _if_then_else(False, 2, 0))))
or_(or_(le(0, zeros_diff_cols), le(compare_blocks_cols, compare_blocks_rows)), and_(or_(False, True), or_(False, True)))
ge(_if_then_else(or_(or_(True, False), and_(False, True)), ones_diff_cols, _if_then_else(or_(True, False), _if_then_else(False, 1, compare_blocks_rows), 0)), _if_then_else(ge(_if_then_else(True, _if_then_else(or_(or_(True, False), ge(_if_then_else(True, zeros_diff_rows, zeros_diff_cols), _if_then_else(le(ones_diff_cols, 0), max_row_clue, 4))), _if_then_else(or_(False, True), 0, _if_then_else(False, zeros_diff_cols, 3)), _if_then_else(or_(True, True), _if_then_else(False, 1, compare_blocks_rows), _if_then_else(True, 3, max_col_clue))), zeros_diff_cols), _if_then_else(True, max_row_clue, _if_then_else(False, 4, zeros_diff_cols))), _if_then_else(ge(ones_diff_cols, 4), _if_then_else(False, max_row_clue, 3), _if_then_else(True, max_row_clue, ones_diff_cols)), _if_then_else(le(max_col_clue, compare_blocks_rows), _if_then_else(True, 3, 3), _if_then_else(True, 3, zeros_diff_rows))))
or_(ge(2, _if_then_else(False, compare_blocks_rows, max_row_clue)), True)
or_(True, or_(le(zeros_diff_cols, max_col_clue), or_(False, ge(1, 4))))
VAL TREES:
mul(add(add(ones_diff_cols, ones_diff_cols), mul(mul(zeros_diff_cols, ones_diff_rows), mul(zeros_diff_cols, ones_diff_cols))), add(mul(ones_diff_cols, ones_diff_cols), mul(compare_blocks_cols, ones_diff_cols)))
mul(mul(add(mul(add(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), mul(zeros_diff_cols, zeros_diff_cols))), add(add(add(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, zeros_diff_rows)), mul(mul(ones_diff_rows, ones_diff_cols), add(compare_blocks_rows, compare_blocks_cols)))), mul(add(mul(mul(ones_diff_cols, ones_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(add(compare_blocks_cols, zeros_diff_rows), mul(ones_diff_rows, compare_blocks_cols))), add(mul(add(ones_diff_cols, compare_blocks_rows), add(ones_diff_cols, zeros_diff_cols)), mul(add(compare_blocks_cols, ones_diff_cols), add(ones_diff_rows, compare_blocks_cols)))))
mul(add(mul(add(ones_diff_cols, compare_blocks_rows), mul(add(add(ones_diff_rows, ones_diff_rows), mul(ones_diff_cols, zeros_diff_rows)), compare_blocks_cols)), mul(add(compare_blocks_cols, ones_diff_rows), add(zeros_diff_cols, compare_blocks_cols))), mul(add(add(ones_diff_cols, zeros_diff_cols), add(ones_diff_rows, ones_diff_cols)), mul(mul(ones_diff_rows, zeros_diff_rows), mul(zeros_diff_rows, zeros_diff_cols))))
mul(add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows)), add(add(compare_blocks_rows, compare_blocks_rows), mul(mul(compare_blocks_rows, zeros_diff_rows), compare_blocks_cols)))
mul(add(add(add(mul(ones_diff_cols, ones_diff_cols), add(compare_blocks_cols, zeros_diff_cols)), mul(add(compare_blocks_cols, zeros_diff_rows), mul(zeros_diff_rows, ones_diff_rows))), add(add(mul(zeros_diff_cols, compare_blocks_rows), add(compare_blocks_rows, compare_blocks_rows)), add(add(compare_blocks_cols, zeros_diff_cols), mul(compare_blocks_rows, compare_blocks_cols)))), add(mul(mul(mul(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_cols, ones_diff_cols)), mul(mul(zeros_diff_rows, zeros_diff_cols), mul(ones_diff_rows, ones_diff_cols))), mul(mul(add(ones_diff_rows, zeros_diff_rows), mul(ones_diff_rows, zeros_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(ones_diff_rows, zeros_diff_cols)))))
add(add(add(add(compare_blocks_cols, ones_diff_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_cols, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(add(mul(zeros_diff_cols, compare_blocks_rows), mul(zeros_diff_rows, compare_blocks_cols)), mul(mul(mul(zeros_diff_rows, ones_diff_rows), zeros_diff_cols), add(ones_diff_rows, ones_diff_cols))))
COND TREES:
and_(and_(and_(True, True), False), False)
le(4, ones_diff_rows)
and_(ge(_if_then_else(False, 1, _if_then_else(or_(False, True), 0, _if_then_else(False, zeros_diff_cols, 3))), _if_then_else(False, _if_then_else(ge(compare_blocks_rows, 3), _if_then_else(True, max_row_clue, compare_blocks_cols), _if_then_else(True, ones_diff_rows, 1)), 4)), or_(and_(False, True), ge(3, _if_then_else(and_(False, True), _if_then_else(True, compare_blocks_cols, 0), compare_blocks_cols))))
le(_if_then_else(le(_if_then_else(True, zeros_diff_cols, _if_then_else(ge(max_row_clue, compare_blocks_cols), _if_then_else(False, ones_diff_cols, zeros_diff_rows), _if_then_else(True, ones_diff_cols, 3))), _if_then_else(and_(True, False), zeros_diff_cols, 4)), max_col_clue, ones_diff_cols), ones_diff_cols)
le(_if_then_else(False, 3, 0), max_row_clue)
VAL TREES:
add(mul(add(add(compare_blocks_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_cols))), add(mul(add(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_rows, zeros_diff_rows)), add(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_cols, ones_diff_cols))))
add(mul(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_rows, ones_diff_cols)), mul(mul(mul(compare_blocks_cols, ones_diff_rows), mul(add(zeros_diff_cols, compare_blocks_cols), mul(ones_diff_cols, ones_diff_cols))), add(zeros_diff_cols, compare_blocks_rows)))
mul(add(add(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(compare_blocks_rows, mul(zeros_diff_cols, ones_diff_cols))), mul(mul(add(ones_diff_rows, ones_diff_cols), add(compare_blocks_cols, compare_blocks_cols)), mul(add(ones_diff_cols, ones_diff_cols), mul(compare_blocks_rows, ones_diff_cols))))
mul(mul(add(compare_blocks_cols, zeros_diff_cols), mul(ones_diff_cols, compare_blocks_rows)), add(mul(zeros_diff_rows, compare_blocks_rows), add(ones_diff_rows, ones_diff_cols)))
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(add(ones_diff_rows, ones_diff_rows), ones_diff_cols)), mul(add(zeros_diff_cols, zeros_diff_rows), mul(add(add(compare_blocks_cols, ones_diff_cols), zeros_diff_rows), zeros_diff_rows)))
mul(mul(add(zeros_diff_rows, ones_diff_cols), add(zeros_diff_cols, ones_diff_rows)), add(mul(ones_diff_rows, compare_blocks_cols), mul(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))))
COND TREES:
le(_if_then_else(and_(ge(2, zeros_diff_cols), and_(False, False)), _if_then_else(le(3, max_row_clue), _if_then_else(False, max_col_clue, compare_blocks_cols), _if_then_else(True, 2, 2)), _if_then_else(ge(max_col_clue, zeros_diff_rows), _if_then_else(True, 4, ones_diff_rows), _if_then_else(False, ones_diff_cols, zeros_diff_rows))), _if_then_else(ge(max_row_clue, _if_then_else(False, ones_diff_cols, compare_blocks_cols)), _if_then_else(le(compare_blocks_cols, compare_blocks_rows), _if_then_else(ge(2, compare_blocks_cols), max_row_clue, ones_diff_rows), _if_then_else(True, zeros_diff_rows, zeros_diff_cols)), _if_then_else(or_(True, False), _if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(False, zeros_diff_rows, compare_blocks_cols))))
or_(and_(and_(and_(le(ones_diff_rows, zeros_diff_rows), le(ones_diff_cols, ones_diff_rows)), le(4, 3)), True), le(_if_then_else(True, ones_diff_cols, 0), _if_then_else(or_(True, True), 2, _if_then_else(False, compare_blocks_rows, zeros_diff_cols))))
or_(and_(True, True), and_(and_(or_(False, False), True), and_(False, True)))
or_(or_(le(_if_then_else(False, ones_diff_cols, ones_diff_cols), _if_then_else(False, max_col_clue, max_col_clue)), and_(True, False)), or_(and_(False, False), or_(False, and_(and_(False, True), le(0, 3)))))
ge(_if_then_else(le(_if_then_else(ge(ones_diff_rows, zeros_diff_rows), _if_then_else(False, 3, 1), _if_then_else(True, 4, zeros_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, zeros_diff_rows), _if_then_else(False, max_col_clue, zeros_diff_rows))), _if_then_else(or_(False, True), _if_then_else(or_(True, True), _if_then_else(True, 2, ones_diff_rows), _if_then_else(True, max_row_clue, 4)), _if_then_else(and_(True, False), _if_then_else(True, max_col_clue, compare_blocks_rows), _if_then_else(False, 4, zeros_diff_rows))), _if_then_else(le(_if_then_else(False, ones_diff_rows, max_row_clue), _if_then_else(False, zeros_diff_cols, 3)), _if_then_else(or_(True, True), _if_then_else(False, 4, 2), _if_then_else(True, max_col_clue, 1)), _if_then_else(or_(False, True), _if_then_else(False, ones_diff_rows, ones_diff_rows), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)))), _if_then_else(le(_if_then_else(or_(False, True), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, 3, ones_diff_rows)), _if_then_else(ge(zeros_diff_rows, 3), _if_then_else(False, max_col_clue, ones_diff_rows), _if_then_else(True, ones_diff_rows, zeros_diff_cols))), _if_then_else(le(_if_then_else(True, zeros_diff_rows, compare_blocks_rows), _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(le(compare_blocks_rows, zeros_diff_cols), _if_then_else(True, 0, 4), _if_then_else(False, zeros_diff_rows, max_col_clue)), _if_then_else(le(3, 1), _if_then_else(True, zeros_diff_cols, max_col_clue), _if_then_else(False, 2, zeros_diff_rows))), _if_then_else(and_(or_(True, True), or_(False, False)), _if_then_else(le(2, ones_diff_cols), _if_then_else(False, 0, ones_diff_rows), _if_then_else(True, 1, 0)), _if_then_else(ge(3, zeros_diff_cols), _if_then_else(False, 4, ones_diff_rows), _if_then_else(False, 2, zeros_diff_rows)))))
VAL TREES:
add(add(add(zeros_diff_cols, mul(compare_blocks_rows, compare_blocks_cols)), add(mul(add(compare_blocks_cols, compare_blocks_rows), zeros_diff_rows), mul(mul(zeros_diff_rows, compare_blocks_rows), zeros_diff_cols))), mul(add(ones_diff_rows, zeros_diff_cols), add(compare_blocks_cols, zeros_diff_rows)))
mul(mul(mul(ones_diff_cols, zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), mul(add(compare_blocks_cols, ones_diff_rows), add(ones_diff_rows, compare_blocks_cols)))
add(mul(mul(add(add(compare_blocks_rows, compare_blocks_cols), zeros_diff_rows), add(add(ones_diff_cols, compare_blocks_cols), ones_diff_cols)), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_rows), add(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_rows)), compare_blocks_rows)))
add(add(add(zeros_diff_cols, ones_diff_cols), add(zeros_diff_rows, compare_blocks_rows)), mul(mul(ones_diff_cols, ones_diff_cols), mul(zeros_diff_rows, ones_diff_rows)))
mul(add(mul(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, zeros_diff_cols)), add(mul(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, ones_diff_cols)))
add(mul(mul(ones_diff_rows, ones_diff_cols), mul(compare_blocks_rows, ones_diff_rows)), mul(mul(mul(zeros_diff_cols, compare_blocks_rows), ones_diff_rows), add(mul(ones_diff_cols, zeros_diff_cols), zeros_diff_cols)))
COND TREES:
le(_if_then_else(and_(ge(2, zeros_diff_cols), and_(False, False)), _if_then_else(le(3, max_row_clue), _if_then_else(False, max_col_clue, compare_blocks_cols), _if_then_else(True, 2, 2)), _if_then_else(ge(max_col_clue, zeros_diff_rows), _if_then_else(True, 4, ones_diff_rows), _if_then_else(False, ones_diff_cols, zeros_diff_rows))), _if_then_else(ge(max_row_clue, _if_then_else(False, ones_diff_cols, compare_blocks_cols)), _if_then_else(le(compare_blocks_cols, compare_blocks_rows), _if_then_else(ge(2, compare_blocks_cols), max_row_clue, ones_diff_rows), _if_then_else(True, zeros_diff_rows, zeros_diff_cols)), _if_then_else(or_(True, False), _if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(False, zeros_diff_rows, compare_blocks_cols))))
or_(and_(and_(and_(le(ones_diff_rows, zeros_diff_rows), le(ones_diff_cols, ones_diff_rows)), le(4, 3)), True), le(_if_then_else(True, ones_diff_cols, 0), _if_then_else(or_(True, True), 2, _if_then_else(False, compare_blocks_rows, zeros_diff_cols))))
or_(and_(True, True), and_(and_(or_(False, False), True), and_(False, True)))
or_(or_(le(_if_then_else(False, ones_diff_cols, ones_diff_cols), _if_then_else(False, max_col_clue, max_col_clue)), and_(True, False)), or_(and_(False, False), or_(False, and_(and_(False, True), le(0, 3)))))
ge(_if_then_else(le(_if_then_else(ge(ones_diff_rows, zeros_diff_rows), _if_then_else(False, 3, 1), _if_then_else(True, 4, zeros_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, zeros_diff_rows), _if_then_else(False, max_col_clue, zeros_diff_rows))), _if_then_else(or_(False, True), _if_then_else(or_(True, True), _if_then_else(True, 2, ones_diff_rows), _if_then_else(True, max_row_clue, 4)), _if_then_else(and_(True, False), _if_then_else(True, max_col_clue, compare_blocks_rows), _if_then_else(False, 4, zeros_diff_rows))), _if_then_else(le(_if_then_else(False, ones_diff_rows, max_row_clue), _if_then_else(False, zeros_diff_cols, 3)), _if_then_else(or_(True, True), _if_then_else(False, 4, 2), _if_then_else(True, max_col_clue, 1)), _if_then_else(or_(False, True), _if_then_else(False, ones_diff_rows, ones_diff_rows), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)))), _if_then_else(le(_if_then_else(or_(False, True), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, 3, ones_diff_rows)), _if_then_else(ge(zeros_diff_rows, 3), _if_then_else(False, max_col_clue, ones_diff_rows), _if_then_else(True, ones_diff_rows, zeros_diff_cols))), _if_then_else(le(_if_then_else(True, zeros_diff_rows, compare_blocks_rows), _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(le(compare_blocks_rows, zeros_diff_cols), _if_then_else(True, 0, 4), _if_then_else(False, zeros_diff_rows, max_col_clue)), _if_then_else(le(3, 1), _if_then_else(True, zeros_diff_cols, max_col_clue), _if_then_else(False, 2, zeros_diff_rows))), _if_then_else(and_(or_(True, True), or_(False, False)), _if_then_else(le(2, ones_diff_cols), _if_then_else(False, 0, ones_diff_rows), _if_then_else(True, 1, 0)), _if_then_else(ge(3, zeros_diff_cols), _if_then_else(False, 4, ones_diff_rows), _if_then_else(False, 2, zeros_diff_rows)))))
VAL TREES:
add(add(add(zeros_diff_cols, mul(compare_blocks_rows, compare_blocks_cols)), add(mul(add(compare_blocks_cols, compare_blocks_rows), zeros_diff_rows), mul(mul(zeros_diff_rows, compare_blocks_rows), zeros_diff_cols))), mul(add(ones_diff_rows, zeros_diff_cols), add(compare_blocks_cols, zeros_diff_rows)))
mul(mul(mul(ones_diff_cols, zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), mul(add(compare_blocks_cols, ones_diff_rows), add(ones_diff_rows, compare_blocks_cols)))
add(mul(mul(add(add(compare_blocks_rows, compare_blocks_cols), zeros_diff_rows), add(add(ones_diff_cols, compare_blocks_cols), ones_diff_cols)), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_rows), add(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_rows)), compare_blocks_rows)))
add(add(add(zeros_diff_cols, ones_diff_cols), add(zeros_diff_rows, compare_blocks_rows)), mul(mul(ones_diff_cols, ones_diff_cols), mul(zeros_diff_rows, ones_diff_rows)))
mul(add(mul(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, zeros_diff_cols)), add(mul(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, ones_diff_cols)))
add(mul(mul(ones_diff_rows, ones_diff_cols), mul(compare_blocks_rows, ones_diff_rows)), mul(mul(mul(zeros_diff_cols, compare_blocks_rows), ones_diff_rows), add(mul(ones_diff_cols, zeros_diff_cols), zeros_diff_cols)))
COND TREES:
and_(or_(and_(True, False), and_(and_(True, False), False)), False)
le(4, 0)
and_(ge(_if_then_else(False, 1, ones_diff_cols), _if_then_else(False, _if_then_else(ge(compare_blocks_rows, 3), _if_then_else(True, _if_then_else(True, max_row_clue, 2), compare_blocks_cols), _if_then_else(True, ones_diff_rows, 1)), 4)), or_(and_(False, True), ge(4, 2)))
le(_if_then_else(False, compare_blocks_cols, compare_blocks_cols), ones_diff_cols)
le(_if_then_else(True, 3, 0), _if_then_else(True, max_row_clue, max_col_clue))
VAL TREES:
add(mul(add(add(compare_blocks_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_cols)), add(ones_diff_cols, mul(ones_diff_cols, compare_blocks_cols))), add(mul(add(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_rows, zeros_diff_rows)), add(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_cols, ones_diff_cols))))
add(mul(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_rows, ones_diff_cols)), mul(mul(mul(compare_blocks_cols, ones_diff_rows), mul(ones_diff_cols, compare_blocks_rows)), add(zeros_diff_cols, compare_blocks_rows)))
mul(add(add(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols))), mul(mul(add(ones_diff_rows, ones_diff_cols), add(compare_blocks_cols, compare_blocks_cols)), mul(add(ones_diff_cols, ones_diff_cols), mul(compare_blocks_rows, ones_diff_cols))))
mul(mul(add(ones_diff_rows, compare_blocks_rows), mul(ones_diff_cols, compare_blocks_rows)), add(mul(zeros_diff_rows, compare_blocks_rows), add(ones_diff_rows, ones_diff_cols)))
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(add(ones_diff_rows, ones_diff_rows), ones_diff_cols)), mul(add(add(ones_diff_cols, compare_blocks_cols), zeros_diff_rows), mul(add(add(compare_blocks_cols, ones_diff_cols), zeros_diff_rows), zeros_diff_rows)))
mul(compare_blocks_rows, add(mul(ones_diff_rows, compare_blocks_cols), mul(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))))
COND TREES:
and_(or_(ge(max_col_clue, max_row_clue), and_(False, False)), and_(and_(True, False), and_(False, False)))
ge(0, _if_then_else(True, _if_then_else(and_(True, False), ones_diff_rows, compare_blocks_cols), _if_then_else(True, 3, ones_diff_cols)))
and_(ge(_if_then_else(False, 1, ones_diff_cols), _if_then_else(False, max_col_clue, 4)), or_(and_(False, True), ge(_if_then_else(ge(_if_then_else(False, max_col_clue, 1), _if_then_else(False, 2, max_row_clue)), 4, compare_blocks_rows), _if_then_else(True, 1, 4))))
le(_if_then_else(True, max_col_clue, ones_diff_rows), _if_then_else(or_(False, False), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, zeros_diff_cols, 0)))
or_(le(_if_then_else(False, 1, 3), _if_then_else(and_(True, False), _if_then_else(True, ones_diff_rows, compare_blocks_rows), _if_then_else(False, 4, zeros_diff_rows))), and_(le(ones_diff_cols, _if_then_else(le(_if_then_else(False, ones_diff_rows, max_row_clue), _if_then_else(False, zeros_diff_cols, 3)), _if_then_else(or_(True, True), _if_then_else(False, 4, 2), _if_then_else(True, max_col_clue, 1)), _if_then_else(or_(False, True), _if_then_else(False, ones_diff_rows, ones_diff_rows), _if_then_else(and_(ge(2, zeros_diff_cols), ge(max_row_clue, 1)), compare_blocks_rows, compare_blocks_cols)))), le(compare_blocks_rows, zeros_diff_rows)))
VAL TREES:
add(mul(add(add(compare_blocks_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_cols))), add(mul(add(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_rows, zeros_diff_rows)), add(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_cols, ones_diff_cols))))
add(compare_blocks_rows, mul(mul(mul(compare_blocks_cols, ones_diff_rows), mul(ones_diff_cols, compare_blocks_rows)), add(zeros_diff_cols, compare_blocks_rows)))
mul(add(add(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols))), mul(mul(add(ones_diff_rows, ones_diff_cols), add(zeros_diff_rows, zeros_diff_cols)), mul(add(ones_diff_cols, ones_diff_cols), mul(compare_blocks_rows, ones_diff_cols))))
mul(mul(add(compare_blocks_cols, zeros_diff_cols), mul(ones_diff_cols, compare_blocks_rows)), add(mul(zeros_diff_rows, compare_blocks_rows), add(ones_diff_rows, ones_diff_cols)))
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(add(ones_diff_rows, ones_diff_rows), ones_diff_cols)), mul(add(mul(mul(ones_diff_rows, zeros_diff_rows), mul(ones_diff_rows, zeros_diff_cols)), zeros_diff_rows), mul(add(add(compare_blocks_cols, ones_diff_cols), zeros_diff_rows), zeros_diff_rows)))
mul(mul(add(zeros_diff_rows, ones_diff_cols), add(zeros_diff_cols, ones_diff_rows)), add(mul(ones_diff_rows, compare_blocks_cols), mul(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))))
COND TREES:
le(_if_then_else(and_(ge(0, zeros_diff_cols), and_(False, False)), _if_then_else(and_(False, False), _if_then_else(ge(zeros_diff_cols, 0), _if_then_else(True, 2, 1), _if_then_else(True, _if_then_else(False, compare_blocks_rows, 1), _if_then_else(True, ones_diff_cols, ones_diff_cols))), _if_then_else(or_(and_(True, True), and_(False, True)), 4, ones_diff_rows)), _if_then_else(ge(max_col_clue, zeros_diff_rows), _if_then_else(True, 4, ones_diff_rows), _if_then_else(False, _if_then_else(or_(False, True), _if_then_else(True, 4, 0), _if_then_else(True, max_row_clue, 2)), zeros_diff_rows))), _if_then_else(ge(_if_then_else(False, ones_diff_rows, _if_then_else(True, 4, ones_diff_rows)), _if_then_else(True, ones_diff_cols, compare_blocks_cols)), 0, _if_then_else(or_(True, False), _if_then_else(True, zeros_diff_cols, ones_diff_cols), _if_then_else(False, zeros_diff_rows, compare_blocks_cols))))
or_(and_(and_(or_(True, False), or_(False, True)), True), and_(or_(True, or_(False, True)), le(zeros_diff_rows, ones_diff_rows)))
or_(False, and_(or_(or_(True, False), or_(and_(False, True), ge(4, 2))), and_(True, False)))
or_(le(_if_then_else(False, _if_then_else(ge(4, compare_blocks_cols), _if_then_else(True, compare_blocks_cols, zeros_diff_rows), _if_then_else(True, zeros_diff_rows, 0)), zeros_diff_rows), zeros_diff_cols), or_(and_(False, False), or_(True, and_(True, False))))
ge(_if_then_else(le(_if_then_else(ge(ones_diff_rows, zeros_diff_rows), _if_then_else(False, 3, 1), _if_then_else(True, 3, zeros_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, zeros_diff_rows), _if_then_else(False, max_col_clue, zeros_diff_rows))), _if_then_else(or_(and_(False, False), or_(le(zeros_diff_cols, max_col_clue), or_(False, ge(1, 4)))), _if_then_else(or_(True, True), _if_then_else(True, 2, ones_diff_rows), _if_then_else(True, max_row_clue, 4)), _if_then_else(and_(True, False), _if_then_else(True, ones_diff_rows, compare_blocks_rows), _if_then_else(False, 4, zeros_diff_rows))), _if_then_else(le(_if_then_else(False, ones_diff_rows, max_row_clue), _if_then_else(False, zeros_diff_cols, 3)), _if_then_else(or_(False, True), _if_then_else(False, 4, 2), _if_then_else(True, max_col_clue, 1)), _if_then_else(or_(False, True), _if_then_else(False, ones_diff_rows, ones_diff_rows), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)))), _if_then_else(le(_if_then_else(and_(True, False), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, 3, ones_diff_rows)), _if_then_else(ge(zeros_diff_rows, 3), _if_then_else(False, max_col_clue, ones_diff_rows), _if_then_else(True, ones_diff_rows, zeros_diff_cols))), _if_then_else(le(_if_then_else(True, zeros_diff_rows, compare_blocks_rows), _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(le(compare_blocks_rows, zeros_diff_cols), _if_then_else(True, 0, 4), _if_then_else(False, zeros_diff_rows, max_col_clue)), _if_then_else(le(3, 1), _if_then_else(True, zeros_diff_cols, max_col_clue), _if_then_else(False, 2, zeros_diff_rows))), _if_then_else(or_(True, True), _if_then_else(le(2, ones_diff_cols), _if_then_else(False, 0, ones_diff_rows), _if_then_else(True, 1, 0)), _if_then_else(ge(3, zeros_diff_cols), _if_then_else(False, 4, ones_diff_rows), _if_then_else(False, 2, zeros_diff_rows)))))
VAL TREES:
add(add(add(zeros_diff_cols, mul(compare_blocks_rows, compare_blocks_cols)), add(mul(add(mul(mul(compare_blocks_rows, zeros_diff_rows), mul(compare_blocks_rows, ones_diff_rows)), compare_blocks_rows), zeros_diff_rows), mul(mul(zeros_diff_rows, compare_blocks_rows), zeros_diff_rows))), mul(add(ones_diff_rows, zeros_diff_cols), add(compare_blocks_cols, zeros_diff_rows)))
mul(mul(mul(ones_diff_cols, mul(mul(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_cols))), add(ones_diff_rows, zeros_diff_rows)), mul(add(compare_blocks_cols, ones_diff_rows), add(ones_diff_rows, compare_blocks_cols)))
add(mul(mul(add(add(compare_blocks_rows, compare_blocks_cols), zeros_diff_rows), add(add(ones_diff_cols, mul(add(ones_diff_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_cols))), ones_diff_cols)), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_rows), add(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_rows)), compare_blocks_rows)))
add(add(add(zeros_diff_cols, ones_diff_cols), add(zeros_diff_rows, compare_blocks_rows)), mul(mul(mul(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, zeros_diff_rows)), ones_diff_cols), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_rows, ones_diff_cols))))
mul(add(mul(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, add(mul(compare_blocks_cols, ones_diff_rows), add(compare_blocks_cols, zeros_diff_cols)))), add(mul(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, ones_diff_cols)))
add(mul(mul(ones_diff_rows, ones_diff_cols), mul(compare_blocks_rows, add(add(ones_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, compare_blocks_rows)))), mul(mul(mul(zeros_diff_cols, compare_blocks_rows), ones_diff_rows), add(mul(ones_diff_cols, zeros_diff_cols), zeros_diff_cols)))
COND TREES:
and_(or_(and_(True, True), and_(False, True)), and_(and_(True, False), and_(False, False)))
ge(_if_then_else(and_(and_(le(4, zeros_diff_cols), or_(False, True)), True), _if_then_else(False, max_row_clue, 0), _if_then_else(or_(True, False), max_row_clue, max_row_clue)), _if_then_else(and_(True, False), _if_then_else(False, ones_diff_rows, compare_blocks_cols), _if_then_else(or_(False, True), 3, ones_diff_cols)))
and_(ge(_if_then_else(False, 1, ones_diff_cols), 1), or_(True, False))
le(_if_then_else(and_(False, False), 1, _if_then_else(True, 1, 2)), _if_then_else(and_(False, True), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, _if_then_else(True, zeros_diff_cols, 4), ones_diff_cols)))
le(_if_then_else(False, _if_then_else(True, 4, zeros_diff_cols), 0), _if_then_else(False, zeros_diff_cols, max_row_clue))
VAL TREES:
add(mul(add(add(compare_blocks_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_cols))), add(mul(add(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_rows, zeros_diff_rows)), add(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_cols, ones_diff_cols))))
add(mul(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_rows, ones_diff_cols)), mul(mul(mul(compare_blocks_cols, ones_diff_rows), mul(ones_diff_cols, compare_blocks_rows)), add(zeros_diff_cols, compare_blocks_rows)))
mul(add(add(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols))), mul(mul(add(ones_diff_rows, ones_diff_cols), add(compare_blocks_cols, compare_blocks_cols)), mul(add(ones_diff_cols, ones_diff_cols), mul(compare_blocks_rows, ones_diff_cols))))
mul(mul(add(compare_blocks_cols, zeros_diff_cols), mul(ones_diff_cols, compare_blocks_rows)), add(mul(zeros_diff_rows, compare_blocks_rows), add(ones_diff_rows, ones_diff_cols)))
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(add(ones_diff_rows, ones_diff_rows), ones_diff_cols)), mul(add(zeros_diff_cols, zeros_diff_rows), mul(add(add(compare_blocks_cols, ones_diff_cols), zeros_diff_rows), zeros_diff_rows)))
mul(mul(add(zeros_diff_rows, ones_diff_cols), add(zeros_diff_cols, ones_diff_rows)), add(mul(ones_diff_rows, compare_blocks_cols), mul(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))))
COND TREES:
le(_if_then_else(and_(ge(0, zeros_diff_cols), and_(False, False)), _if_then_else(le(3, max_row_clue), _if_then_else(False, max_col_clue, compare_blocks_cols), ones_diff_cols), _if_then_else(ge(max_col_clue, zeros_diff_rows), _if_then_else(True, 4, ones_diff_rows), _if_then_else(False, ones_diff_cols, zeros_diff_rows))), _if_then_else(and_(le(4, compare_blocks_rows), and_(True, True)), _if_then_else(or_(ge(1, max_col_clue), True), _if_then_else(False, compare_blocks_rows, 1), _if_then_else(True, ones_diff_cols, ones_diff_cols)), _if_then_else(and_(False, True), _if_then_else(True, 0, 2), _if_then_else(False, 2, 0))))
or_(and_(le(_if_then_else(True, ones_diff_cols, 0), _if_then_else(False, 2, zeros_diff_rows)), and_(True, True)), and_(le(zeros_diff_rows, compare_blocks_rows), and_(False, True)))
or_(ge(_if_then_else(False, max_col_clue, 4), _if_then_else(False, 2, max_row_clue)), and_(and_(or_(True, True), True), and_(True, True)))
or_(or_(le(3, zeros_diff_cols), and_(True, False)), and_(False, False))
ge(_if_then_else(le(_if_then_else(ge(ones_diff_rows, zeros_diff_rows), _if_then_else(False, 3, 1), _if_then_else(True, _if_then_else(True, 2, 4), zeros_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, zeros_diff_rows), _if_then_else(False, max_col_clue, zeros_diff_rows))), _if_then_else(le(_if_then_else(True, _if_then_else(True, zeros_diff_rows, max_col_clue), _if_then_else(False, compare_blocks_cols, 3)), _if_then_else(and_(True, False), ones_diff_cols, 1)), _if_then_else(or_(True, True), _if_then_else(True, 2, ones_diff_rows), _if_then_else(True, _if_then_else(False, max_col_clue, max_row_clue), 4)), _if_then_else(and_(True, False), _if_then_else(True, ones_diff_rows, compare_blocks_rows), _if_then_else(False, 4, zeros_diff_rows))), _if_then_else(le(_if_then_else(False, ones_diff_rows, max_row_clue), _if_then_else(False, zeros_diff_cols, 3)), _if_then_else(or_(True, True), _if_then_else(False, 4, 2), _if_then_else(True, max_col_clue, 1)), _if_then_else(or_(False, True), _if_then_else(False, ones_diff_rows, ones_diff_rows), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)))), _if_then_else(le(_if_then_else(and_(True, False), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, 3, ones_diff_rows)), _if_then_else(ge(zeros_diff_rows, 3), _if_then_else(False, max_col_clue, ones_diff_rows), _if_then_else(True, ones_diff_rows, zeros_diff_cols))), _if_then_else(le(_if_then_else(True, zeros_diff_rows, compare_blocks_rows), _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(le(compare_blocks_rows, zeros_diff_cols), _if_then_else(True, 0, 4), _if_then_else(False, zeros_diff_rows, max_col_clue)), _if_then_else(le(3, 1), _if_then_else(True, zeros_diff_cols, max_col_clue), _if_then_else(False, 2, zeros_diff_rows))), _if_then_else(and_(or_(True, True), or_(False, False)), _if_then_else(le(2, ones_diff_cols), _if_then_else(False, 0, ones_diff_rows), _if_then_else(True, 1, 0)), _if_then_else(ge(3, zeros_diff_cols), _if_then_else(False, 4, ones_diff_rows), _if_then_else(False, 2, zeros_diff_rows)))))
VAL TREES:
add(add(add(zeros_diff_cols, mul(compare_blocks_rows, compare_blocks_cols)), add(mul(add(compare_blocks_cols, compare_blocks_rows), add(mul(ones_diff_cols, ones_diff_cols), mul(ones_diff_rows, compare_blocks_cols))), mul(mul(zeros_diff_rows, compare_blocks_rows), zeros_diff_cols))), mul(add(ones_diff_rows, zeros_diff_cols), add(compare_blocks_cols, zeros_diff_rows)))
mul(mul(mul(ones_diff_cols, zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), mul(add(compare_blocks_cols, ones_diff_rows), add(ones_diff_rows, compare_blocks_cols)))
add(mul(compare_blocks_cols, compare_blocks_cols), mul(add(zeros_diff_cols, compare_blocks_rows), add(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_rows)), compare_blocks_rows)))
add(add(add(zeros_diff_cols, ones_diff_cols), ones_diff_rows), mul(mul(ones_diff_cols, ones_diff_cols), mul(zeros_diff_rows, ones_diff_rows)))
mul(add(mul(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, zeros_diff_cols)), add(mul(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, ones_diff_cols)))
add(mul(mul(ones_diff_rows, ones_diff_cols), mul(compare_blocks_rows, compare_blocks_cols)), mul(mul(mul(zeros_diff_cols, compare_blocks_rows), ones_diff_rows), add(mul(ones_diff_cols, zeros_diff_cols), zeros_diff_cols)))
COND TREES:
le(_if_then_else(le(_if_then_else(and_(True, True), _if_then_else(False, 0, compare_blocks_rows), _if_then_else(False, 3, ones_diff_cols)), _if_then_else(or_(True, False), _if_then_else(False, ones_diff_rows, 0), _if_then_else(False, 0, 4))), _if_then_else(ge(_if_then_else(True, max_row_clue, ones_diff_cols), _if_then_else(or_(True, False), 4, max_col_clue)), _if_then_else(or_(True, False), _if_then_else(True, ones_diff_rows, 1), _if_then_else(True, compare_blocks_rows, 1)), _if_then_else(or_(False, False), _if_then_else(True, 2, 4), _if_then_else(True, 2, 4))), _if_then_else(ge(_if_then_else(True, zeros_diff_rows, max_col_clue), _if_then_else(True, ones_diff_rows, zeros_diff_rows)), _if_then_else(ge(zeros_diff_rows, max_row_clue), _if_then_else(False, 2, compare_blocks_cols), _if_then_else(False, max_col_clue, 0)), _if_then_else(le(ones_diff_rows, max_col_clue), _if_then_else(False, 3, max_row_clue), _if_then_else(False, 4, zeros_diff_cols)))), _if_then_else(and_(or_(or_(True, True), le(0, zeros_diff_cols)), or_(ge(ones_diff_cols, 1), ge(0, ones_diff_cols))), _if_then_else(ge(_if_then_else(False, max_row_clue, zeros_diff_rows), _if_then_else(True, 2, 0)), _if_then_else(le(3, ones_diff_cols), _if_then_else(False, zeros_diff_cols, compare_blocks_cols), _if_then_else(False, 0, zeros_diff_rows)), _if_then_else(ge(1, compare_blocks_cols), _if_then_else(True, ones_diff_rows, compare_blocks_cols), _if_then_else(False, 3, 3))), _if_then_else(or_(le(_if_then_else(le(0, zeros_diff_rows), _if_then_else(False, 1, max_col_clue), _if_then_else(False, 4, ones_diff_rows)), 2), or_(False, False)), _if_then_else(ge(2, max_row_clue), _if_then_else(False, zeros_diff_cols, compare_blocks_rows), _if_then_else(False, 1, 0)), _if_then_else(or_(True, True), _if_then_else(False, zeros_diff_rows, ones_diff_cols), _if_then_else(True, zeros_diff_cols, zeros_diff_cols)))))
le(_if_then_else(True, 2, zeros_diff_cols), _if_then_else(le(_if_then_else(True, max_col_clue, ones_diff_rows), _if_then_else(True, max_row_clue, ones_diff_cols)), _if_then_else(False, _if_then_else(False, zeros_diff_cols, max_col_clue), _if_then_else(False, max_row_clue, compare_blocks_rows)), _if_then_else(False, ones_diff_cols, _if_then_else(False, 0, ones_diff_rows))))
ge(_if_then_else(le(_if_then_else(True, max_row_clue, 3), _if_then_else(True, ones_diff_rows, zeros_diff_cols)), _if_then_else(le(3, max_row_clue), _if_then_else(False, max_row_clue, ones_diff_cols), _if_then_else(False, 2, ones_diff_cols)), _if_then_else(ge(zeros_diff_rows, zeros_diff_cols), _if_then_else(False, 1, 2), _if_then_else(True, max_col_clue, compare_blocks_cols))), _if_then_else(or_(False, False), _if_then_else(le(ones_diff_cols, max_col_clue), _if_then_else(True, zeros_diff_rows, 1), _if_then_else(False, max_row_clue, ones_diff_rows)), _if_then_else(le(zeros_diff_rows, 3), _if_then_else(True, compare_blocks_rows, 0), _if_then_else(True, 0, zeros_diff_cols))))
or_(or_(and_(ge(4, ones_diff_cols), le(ones_diff_cols, 2)), or_(or_(False, True), or_(True, False))), ge(_if_then_else(le(_if_then_else(True, 0, zeros_diff_rows), zeros_diff_rows), _if_then_else(False, ones_diff_cols, max_col_clue), _if_then_else(True, zeros_diff_rows, zeros_diff_rows)), _if_then_else(or_(True, ge(_if_then_else(False, 1, 1), 4)), _if_then_else(True, max_col_clue, ones_diff_rows), _if_then_else(True, max_col_clue, zeros_diff_rows))))
ge(_if_then_else(or_(False, and_(True, or_(False, False))), _if_then_else(True, _if_then_else(True, 0, compare_blocks_cols), _if_then_else(True, 0, max_col_clue)), _if_then_else(False, _if_then_else(True, ones_diff_rows, zeros_diff_cols), zeros_diff_cols)), _if_then_else(le(compare_blocks_cols, 2), _if_then_else(True, _if_then_else(True, compare_blocks_rows, max_row_clue), max_col_clue), _if_then_else(or_(True, True), compare_blocks_rows, 3)))
VAL TREES:
add(add(add(compare_blocks_cols, zeros_diff_cols), mul(compare_blocks_cols, compare_blocks_cols)), mul(add(ones_diff_rows, zeros_diff_cols), add(zeros_diff_rows, compare_blocks_cols)))
mul(add(mul(compare_blocks_rows, zeros_diff_cols), add(compare_blocks_cols, zeros_diff_cols)), mul(mul(mul(ones_diff_rows, add(compare_blocks_cols, zeros_diff_rows)), compare_blocks_cols), add(ones_diff_cols, compare_blocks_cols)))
mul(add(add(ones_diff_cols, compare_blocks_rows), mul(zeros_diff_rows, zeros_diff_rows)), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, compare_blocks_cols)))
add(mul(mul(compare_blocks_cols, compare_blocks_cols), mul(compare_blocks_rows, mul(compare_blocks_rows, zeros_diff_rows))), mul(add(ones_diff_rows, ones_diff_cols), mul(compare_blocks_cols, zeros_diff_cols)))
add(add(add(add(zeros_diff_cols, compare_blocks_cols), mul(ones_diff_cols, ones_diff_rows)), mul(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_rows))), mul(add(add(ones_diff_cols, zeros_diff_cols), mul(ones_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_rows, zeros_diff_rows), mul(ones_diff_rows, zeros_diff_rows))))
mul(add(add(mul(zeros_diff_rows, zeros_diff_cols), ones_diff_cols), mul(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, add(ones_diff_cols, ones_diff_rows)), mul(ones_diff_cols, zeros_diff_cols)))
COND TREES:
le(_if_then_else(and_(ge(0, zeros_diff_cols), and_(False, False)), _if_then_else(le(3, max_row_clue), _if_then_else(False, max_col_clue, compare_blocks_cols), _if_then_else(True, 2, 2)), _if_then_else(ge(max_col_clue, zeros_diff_rows), _if_then_else(True, 4, compare_blocks_rows), _if_then_else(False, ones_diff_cols, zeros_diff_rows))), _if_then_else(and_(and_(True, False), and_(False, False)), _if_then_else(False, 2, 0), _if_then_else(or_(True, False), _if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(False, zeros_diff_rows, compare_blocks_cols))))
or_(and_(and_(True, or_(False, True)), True), and_(True, or_(False, True)))
or_(ge(_if_then_else(True, zeros_diff_rows, _if_then_else(False, ones_diff_rows, 1)), _if_then_else(False, 2, max_row_clue)), and_(and_(le(1, max_row_clue), True), and_(True, le(zeros_diff_cols, zeros_diff_rows))))
or_(or_(le(ones_diff_cols, _if_then_else(True, compare_blocks_rows, zeros_diff_rows)), and_(True, False)), or_(and_(False, False), or_(False, False)))
ge(_if_then_else(le(_if_then_else(False, 1, 3), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, zeros_diff_rows), _if_then_else(False, max_col_clue, zeros_diff_rows))), _if_then_else(or_(and_(False, False), or_(True, True)), _if_then_else(or_(True, True), _if_then_else(True, 2, ones_diff_rows), _if_then_else(True, max_row_clue, 4)), _if_then_else(and_(True, False), _if_then_else(True, ones_diff_rows, compare_blocks_rows), _if_then_else(False, 4, zeros_diff_rows))), _if_then_else(le(_if_then_else(False, ones_diff_rows, max_row_clue), _if_then_else(False, zeros_diff_cols, 3)), _if_then_else(or_(True, True), _if_then_else(False, 4, 2), _if_then_else(True, max_col_clue, 1)), _if_then_else(or_(False, True), _if_then_else(False, ones_diff_rows, ones_diff_rows), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)))), _if_then_else(le(_if_then_else(or_(False, True), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, 3, ones_diff_rows)), _if_then_else(ge(zeros_diff_rows, 3), _if_then_else(False, max_col_clue, ones_diff_rows), _if_then_else(True, ones_diff_rows, zeros_diff_cols))), _if_then_else(le(_if_then_else(True, zeros_diff_rows, compare_blocks_rows), _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(le(compare_blocks_rows, zeros_diff_cols), _if_then_else(True, 0, 4), _if_then_else(False, zeros_diff_rows, max_col_clue)), _if_then_else(le(3, 1), _if_then_else(True, zeros_diff_cols, max_col_clue), _if_then_else(False, 2, zeros_diff_rows))), _if_then_else(and_(or_(True, True), or_(False, False)), _if_then_else(le(2, ones_diff_cols), _if_then_else(False, 0, ones_diff_rows), _if_then_else(True, 1, 0)), _if_then_else(ge(3, zeros_diff_cols), _if_then_else(False, 4, ones_diff_rows), _if_then_else(False, 2, zeros_diff_rows)))))
VAL TREES:
add(add(add(zeros_diff_cols, mul(compare_blocks_rows, compare_blocks_cols)), add(mul(add(add(zeros_diff_rows, compare_blocks_cols), compare_blocks_rows), zeros_diff_rows), mul(mul(zeros_diff_rows, compare_blocks_rows), zeros_diff_cols))), mul(add(ones_diff_rows, zeros_diff_cols), add(compare_blocks_cols, zeros_diff_rows)))
mul(mul(mul(ones_diff_cols, zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), mul(ones_diff_cols, add(ones_diff_rows, compare_blocks_cols)))
add(mul(mul(add(add(compare_blocks_rows, compare_blocks_cols), zeros_diff_rows), add(add(ones_diff_cols, compare_blocks_cols), ones_diff_cols)), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_rows), add(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_rows)), compare_blocks_rows)))
add(add(add(zeros_diff_cols, ones_diff_cols), ones_diff_rows), mul(add(ones_diff_rows, ones_diff_rows), mul(zeros_diff_rows, ones_diff_rows)))
mul(add(mul(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, zeros_diff_cols)), add(mul(mul(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, zeros_diff_rows)), compare_blocks_cols), mul(compare_blocks_cols, ones_diff_cols)))
add(mul(mul(ones_diff_rows, ones_diff_cols), mul(compare_blocks_rows, ones_diff_rows)), mul(mul(mul(mul(mul(ones_diff_cols, ones_diff_cols), add(compare_blocks_cols, zeros_diff_cols)), compare_blocks_rows), ones_diff_rows), add(mul(ones_diff_cols, zeros_diff_cols), zeros_diff_cols)))
COND TREES:
ge(_if_then_else(and_(ge(3, compare_blocks_rows), and_(False, False)), _if_then_else(and_(True, True), _if_then_else(False, 1, 2), _if_then_else(False, 3, 1)), _if_then_else(ge(zeros_diff_cols, 0), _if_then_else(True, 2, 1), _if_then_else(True, compare_blocks_rows, 2))), _if_then_else(and_(le(4, compare_blocks_rows), and_(True, True)), _if_then_else(or_(True, True), _if_then_else(False, compare_blocks_rows, 1), _if_then_else(True, _if_then_else(le(ones_diff_rows, ones_diff_rows), _if_then_else(False, compare_blocks_cols, zeros_diff_cols), _if_then_else(True, max_col_clue, max_row_clue)), ones_diff_cols)), _if_then_else(and_(False, True), _if_then_else(True, 0, 2), _if_then_else(le(compare_blocks_cols, compare_blocks_rows), _if_then_else(True, ones_diff_cols, 4), _if_then_else(True, zeros_diff_rows, zeros_diff_cols)))))
or_(and_(or_(True, False), le(zeros_diff_cols, 3)), False)
ge(_if_then_else(or_(or_(True, False), ge(_if_then_else(ge(zeros_diff_cols, compare_blocks_cols), zeros_diff_rows, zeros_diff_cols), _if_then_else(le(ones_diff_cols, 0), max_row_clue, 4))), _if_then_else(or_(False, True), 0, _if_then_else(False, zeros_diff_cols, 3)), _if_then_else(or_(True, True), _if_then_else(False, 1, compare_blocks_rows), _if_then_else(True, 3, max_col_clue))), _if_then_else(ge(_if_then_else(True, zeros_diff_rows, zeros_diff_cols), _if_then_else(True, max_row_clue, 4)), _if_then_else(ge(ones_diff_cols, 4), _if_then_else(False, max_row_clue, 3), _if_then_else(True, max_row_clue, ones_diff_cols)), _if_then_else(le(max_col_clue, compare_blocks_rows), _if_then_else(True, 3, 3), _if_then_else(True, 3, zeros_diff_rows))))
le(ones_diff_rows, _if_then_else(False, ones_diff_rows, compare_blocks_cols))
False
VAL TREES:
mul(add(add(ones_diff_cols, ones_diff_cols), add(ones_diff_rows, ones_diff_cols)), add(mul(ones_diff_cols, ones_diff_cols), mul(compare_blocks_cols, ones_diff_cols)))
mul(mul(add(mul(add(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), mul(zeros_diff_cols, zeros_diff_cols))), add(add(add(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, zeros_diff_rows)), mul(mul(ones_diff_rows, ones_diff_cols), add(compare_blocks_rows, compare_blocks_cols)))), mul(add(mul(mul(ones_diff_cols, ones_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(add(compare_blocks_cols, zeros_diff_rows), mul(ones_diff_rows, compare_blocks_cols))), add(compare_blocks_rows, mul(add(compare_blocks_cols, ones_diff_cols), add(ones_diff_rows, compare_blocks_cols)))))
mul(add(mul(add(ones_diff_cols, compare_blocks_rows), mul(add(add(ones_diff_rows, ones_diff_rows), mul(ones_diff_cols, zeros_diff_rows)), compare_blocks_cols)), mul(add(compare_blocks_cols, ones_diff_rows), add(zeros_diff_cols, compare_blocks_cols))), mul(add(add(ones_diff_cols, zeros_diff_cols), add(ones_diff_rows, ones_diff_cols)), mul(mul(ones_diff_rows, zeros_diff_rows), mul(zeros_diff_rows, zeros_diff_cols))))
mul(add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows)), add(add(compare_blocks_rows, compare_blocks_rows), mul(compare_blocks_cols, compare_blocks_cols)))
mul(add(add(add(mul(ones_diff_cols, ones_diff_cols), add(compare_blocks_cols, zeros_diff_cols)), mul(add(compare_blocks_cols, zeros_diff_rows), mul(zeros_diff_rows, ones_diff_rows))), add(add(mul(zeros_diff_cols, compare_blocks_rows), add(compare_blocks_rows, compare_blocks_rows)), add(add(compare_blocks_cols, zeros_diff_cols), mul(compare_blocks_rows, compare_blocks_cols)))), add(mul(mul(mul(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_cols, ones_diff_cols)), mul(mul(zeros_diff_rows, zeros_diff_cols), mul(ones_diff_rows, ones_diff_cols))), mul(mul(add(ones_diff_rows, zeros_diff_rows), mul(ones_diff_rows, zeros_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(ones_diff_rows, zeros_diff_cols)))))
add(add(add(add(compare_blocks_cols, ones_diff_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_cols, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(add(mul(zeros_diff_cols, compare_blocks_rows), mul(zeros_diff_rows, compare_blocks_cols)), mul(mul(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, ones_diff_cols))))
COND TREES:
and_(True, and_(and_(True, True), and_(or_(and_(True, True), and_(False, True)), False)))
ge(_if_then_else(True, _if_then_else(False, max_row_clue, 0), _if_then_else(False, max_row_clue, max_row_clue)), _if_then_else(and_(False, True), _if_then_else(False, 1, ones_diff_cols), _if_then_else(True, 4, max_col_clue)))
and_(ge(_if_then_else(False, _if_then_else(False, ones_diff_rows, 4), ones_diff_cols), _if_then_else(False, max_col_clue, 4)), or_(and_(False, True), ge(4, 2)))
le(_if_then_else(and_(False, False), _if_then_else(False, _if_then_else(False, 1, 2), 2), _if_then_else(True, 1, 2)), _if_then_else(and_(False, False), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, zeros_diff_cols, ones_diff_cols)))
or_(le(3, _if_then_else(True, 1, ones_diff_rows)), and_(or_(le(compare_blocks_rows, zeros_diff_rows), True), le(compare_blocks_rows, zeros_diff_rows)))
VAL TREES:
add(mul(add(add(compare_blocks_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_cols))), add(mul(add(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_rows, zeros_diff_rows)), add(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_cols, ones_diff_cols))))
add(mul(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_rows, ones_diff_cols)), mul(mul(mul(compare_blocks_cols, ones_diff_rows), mul(ones_diff_cols, compare_blocks_rows)), add(zeros_diff_cols, compare_blocks_rows)))
mul(add(add(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols))), mul(mul(add(ones_diff_rows, ones_diff_cols), add(compare_blocks_cols, compare_blocks_cols)), mul(add(ones_diff_cols, ones_diff_cols), mul(compare_blocks_rows, ones_diff_cols))))
mul(mul(add(compare_blocks_cols, zeros_diff_cols), mul(ones_diff_cols, compare_blocks_rows)), add(mul(zeros_diff_rows, compare_blocks_rows), add(ones_diff_rows, ones_diff_cols)))
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(add(ones_diff_rows, ones_diff_rows), ones_diff_cols)), mul(add(zeros_diff_cols, zeros_diff_rows), mul(add(add(compare_blocks_cols, ones_diff_cols), zeros_diff_rows), zeros_diff_rows)))
mul(mul(add(zeros_diff_rows, ones_diff_cols), add(zeros_diff_cols, ones_diff_rows)), add(mul(ones_diff_rows, compare_blocks_cols), mul(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))))
COND TREES:
and_(False, and_(and_(True, True), and_(False, False)))
ge(_if_then_else(or_(False, True), _if_then_else(False, max_row_clue, 0), _if_then_else(False, max_row_clue, max_row_clue)), _if_then_else(and_(False, True), _if_then_else(False, 1, ones_diff_cols), _if_then_else(True, 4, max_col_clue)))
and_(False, or_(and_(False, True), ge(4, 2)))
le(_if_then_else(and_(False, False), _if_then_else(False, 1, 0), _if_then_else(True, 1, 2)), _if_then_else(and_(False, False), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, zeros_diff_cols, ones_diff_cols)))
or_(le(_if_then_else(True, 3, zeros_diff_cols), _if_then_else(True, 1, ones_diff_rows)), and_(or_(False, True), False))
VAL TREES:
add(mul(add(add(compare_blocks_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_cols))), add(mul(add(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_rows, zeros_diff_rows)), add(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_cols, ones_diff_cols))))
add(mul(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_rows, ones_diff_cols)), mul(mul(mul(compare_blocks_cols, ones_diff_rows), mul(ones_diff_cols, compare_blocks_rows)), add(zeros_diff_cols, compare_blocks_rows)))
mul(add(add(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols))), mul(mul(add(ones_diff_rows, ones_diff_cols), add(compare_blocks_cols, compare_blocks_cols)), mul(add(ones_diff_cols, ones_diff_cols), mul(compare_blocks_rows, ones_diff_cols))))
mul(mul(add(compare_blocks_cols, zeros_diff_cols), mul(ones_diff_cols, compare_blocks_rows)), add(mul(zeros_diff_rows, compare_blocks_rows), add(ones_diff_rows, ones_diff_cols)))
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(add(ones_diff_rows, ones_diff_rows), ones_diff_cols)), mul(add(zeros_diff_cols, zeros_diff_rows), mul(add(add(compare_blocks_cols, ones_diff_cols), zeros_diff_rows), zeros_diff_rows)))
mul(mul(add(zeros_diff_rows, ones_diff_cols), add(zeros_diff_cols, ones_diff_rows)), add(mul(ones_diff_rows, compare_blocks_cols), mul(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))))
COND TREES:
and_(or_(False, and_(False, True)), and_(and_(True, False), and_(False, False)))
ge(_if_then_else(or_(False, True), _if_then_else(False, max_row_clue, 0), _if_then_else(or_(True, False), max_row_clue, max_row_clue)), _if_then_else(and_(True, False), _if_then_else(False, ones_diff_rows, compare_blocks_cols), _if_then_else(True, 3, ones_diff_cols)))
and_(ge(_if_then_else(False, 1, ones_diff_cols), _if_then_else(False, ones_diff_rows, 4)), False)
le(_if_then_else(and_(False, False), _if_then_else(False, 1, 2), _if_then_else(True, 1, 2)), _if_then_else(and_(False, True), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, zeros_diff_cols, ones_diff_cols)))
le(_if_then_else(False, 3, 0), _if_then_else(False, zeros_diff_cols, max_row_clue))
VAL TREES:
add(mul(add(add(compare_blocks_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_cols))), add(mul(add(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_rows, zeros_diff_rows)), add(mul(ones_diff_cols, zeros_diff_rows), mul(ones_diff_cols, ones_diff_cols))))
add(mul(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_rows, ones_diff_cols)), mul(mul(mul(compare_blocks_cols, ones_diff_rows), mul(ones_diff_cols, compare_blocks_rows)), add(zeros_diff_cols, ones_diff_rows)))
mul(add(add(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols))), mul(mul(add(ones_diff_rows, ones_diff_cols), add(compare_blocks_cols, compare_blocks_cols)), mul(add(ones_diff_cols, ones_diff_cols), mul(compare_blocks_rows, ones_diff_cols))))
mul(mul(add(compare_blocks_cols, zeros_diff_cols), mul(ones_diff_cols, compare_blocks_rows)), add(mul(zeros_diff_rows, compare_blocks_rows), add(ones_diff_rows, mul(add(zeros_diff_cols, compare_blocks_rows), mul(compare_blocks_cols, compare_blocks_rows)))))
mul(add(add(compare_blocks_cols, mul(compare_blocks_cols, ones_diff_cols)), mul(add(ones_diff_rows, ones_diff_rows), ones_diff_cols)), mul(add(zeros_diff_cols, zeros_diff_rows), mul(add(add(compare_blocks_cols, ones_diff_cols), zeros_diff_rows), zeros_diff_rows)))
mul(mul(add(zeros_diff_rows, ones_diff_cols), add(zeros_diff_cols, ones_diff_rows)), add(mul(ones_diff_rows, compare_blocks_cols), mul(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))))
COND TREES:
le(_if_then_else(le(_if_then_else(and_(True, True), _if_then_else(False, 0, compare_blocks_rows), _if_then_else(False, 3, ones_diff_cols)), _if_then_else(or_(True, False), _if_then_else(False, ones_diff_rows, 0), _if_then_else(False, 0, 4))), _if_then_else(ge(_if_then_else(True, max_row_clue, ones_diff_cols), _if_then_else(or_(True, False), 4, max_col_clue)), _if_then_else(or_(True, False), _if_then_else(True, ones_diff_rows, 1), _if_then_else(True, compare_blocks_rows, 1)), _if_then_else(or_(False, False), _if_then_else(True, 2, 4), _if_then_else(True, 2, 4))), _if_then_else(ge(_if_then_else(True, zeros_diff_rows, max_col_clue), _if_then_else(True, ones_diff_rows, zeros_diff_rows)), _if_then_else(ge(zeros_diff_rows, max_row_clue), _if_then_else(False, 2, compare_blocks_cols), _if_then_else(False, max_col_clue, 0)), _if_then_else(le(ones_diff_rows, max_col_clue), _if_then_else(False, 3, max_row_clue), _if_then_else(False, 4, zeros_diff_cols)))), _if_then_else(and_(or_(or_(True, True), le(0, zeros_diff_cols)), or_(ge(ones_diff_cols, 1), ge(0, ones_diff_cols))), _if_then_else(ge(_if_then_else(False, max_row_clue, zeros_diff_rows), _if_then_else(True, 2, 0)), _if_then_else(le(3, ones_diff_cols), _if_then_else(False, zeros_diff_cols, compare_blocks_cols), _if_then_else(False, 0, zeros_diff_rows)), _if_then_else(ge(1, compare_blocks_cols), _if_then_else(True, ones_diff_rows, compare_blocks_cols), _if_then_else(False, 3, 3))), _if_then_else(or_(le(_if_then_else(le(0, zeros_diff_rows), _if_then_else(False, 1, max_col_clue), _if_then_else(False, 4, ones_diff_rows)), 2), or_(False, False)), _if_then_else(ge(2, max_row_clue), _if_then_else(False, zeros_diff_cols, compare_blocks_rows), _if_then_else(False, 1, 0)), _if_then_else(or_(True, True), _if_then_else(False, zeros_diff_rows, ones_diff_cols), _if_then_else(True, zeros_diff_cols, zeros_diff_cols)))))
le(_if_then_else(True, 2, zeros_diff_cols), _if_then_else(le(_if_then_else(True, max_col_clue, ones_diff_rows), _if_then_else(True, max_row_clue, ones_diff_cols)), _if_then_else(False, _if_then_else(False, zeros_diff_cols, max_col_clue), _if_then_else(False, max_row_clue, compare_blocks_rows)), _if_then_else(False, ones_diff_cols, _if_then_else(False, 0, ones_diff_rows))))
ge(_if_then_else(le(_if_then_else(True, max_row_clue, 3), _if_then_else(True, ones_diff_rows, zeros_diff_cols)), _if_then_else(le(3, max_row_clue), _if_then_else(False, max_row_clue, ones_diff_cols), _if_then_else(False, 2, ones_diff_cols)), _if_then_else(ge(zeros_diff_rows, zeros_diff_cols), _if_then_else(False, 1, 2), _if_then_else(True, max_col_clue, compare_blocks_cols))), _if_then_else(or_(False, False), _if_then_else(le(ones_diff_cols, max_col_clue), _if_then_else(True, zeros_diff_rows, 1), _if_then_else(False, max_row_clue, ones_diff_rows)), _if_then_else(le(zeros_diff_rows, 3), _if_then_else(True, compare_blocks_rows, 0), _if_then_else(True, 0, zeros_diff_cols))))
or_(or_(and_(ge(4, ones_diff_cols), le(ones_diff_cols, 2)), or_(or_(False, True), or_(True, False))), ge(_if_then_else(le(_if_then_else(True, 0, zeros_diff_rows), zeros_diff_rows), _if_then_else(False, ones_diff_cols, max_col_clue), _if_then_else(True, zeros_diff_rows, zeros_diff_rows)), _if_then_else(or_(True, ge(_if_then_else(False, 1, 1), 4)), _if_then_else(True, max_col_clue, ones_diff_rows), _if_then_else(True, max_col_clue, zeros_diff_rows))))
ge(_if_then_else(or_(False, and_(True, or_(False, False))), _if_then_else(True, _if_then_else(True, 0, compare_blocks_cols), _if_then_else(True, 0, max_col_clue)), _if_then_else(False, _if_then_else(True, ones_diff_rows, zeros_diff_cols), zeros_diff_cols)), _if_then_else(le(compare_blocks_cols, 2), _if_then_else(True, _if_then_else(True, compare_blocks_rows, max_row_clue), max_col_clue), _if_then_else(or_(True, True), compare_blocks_rows, 3)))
VAL TREES:
add(add(add(compare_blocks_cols, zeros_diff_cols), mul(compare_blocks_cols, compare_blocks_cols)), mul(add(ones_diff_rows, zeros_diff_cols), add(zeros_diff_rows, compare_blocks_cols)))
mul(add(mul(compare_blocks_rows, zeros_diff_cols), add(compare_blocks_cols, zeros_diff_cols)), mul(mul(mul(ones_diff_rows, add(compare_blocks_cols, zeros_diff_rows)), compare_blocks_cols), add(ones_diff_cols, compare_blocks_cols)))
mul(add(add(ones_diff_cols, compare_blocks_rows), mul(zeros_diff_rows, zeros_diff_rows)), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, compare_blocks_cols)))
add(mul(mul(compare_blocks_cols, compare_blocks_cols), mul(compare_blocks_rows, mul(compare_blocks_rows, zeros_diff_rows))), mul(add(ones_diff_rows, ones_diff_cols), mul(compare_blocks_cols, zeros_diff_cols)))
add(add(add(add(zeros_diff_cols, compare_blocks_cols), mul(ones_diff_cols, ones_diff_rows)), mul(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_rows))), mul(add(add(ones_diff_cols, zeros_diff_cols), mul(ones_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_rows, zeros_diff_rows), mul(ones_diff_rows, zeros_diff_rows))))
mul(add(add(mul(zeros_diff_rows, zeros_diff_cols), ones_diff_cols), mul(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_cols, add(ones_diff_cols, ones_diff_rows)), mul(ones_diff_cols, zeros_diff_cols)))
COND TREES:
le(_if_then_else(and_(ge(0, zeros_diff_cols), and_(False, False)), _if_then_else(and_(False, True), _if_then_else(False, max_col_clue, compare_blocks_cols), 2), _if_then_else(ge(max_col_clue, zeros_diff_rows), _if_then_else(True, 4, ones_diff_rows), _if_then_else(False, ones_diff_cols, zeros_diff_rows))), _if_then_else(ge(max_row_clue, _if_then_else(False, ones_diff_cols, compare_blocks_cols)), _if_then_else(and_(True, le(0, zeros_diff_cols)), _if_then_else(True, 0, 4), _if_then_else(True, zeros_diff_rows, zeros_diff_cols)), _if_then_else(or_(True, False), _if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(False, zeros_diff_rows, compare_blocks_cols))))
or_(and_(and_(True, and_(True, False)), True), True)
or_(ge(_if_then_else(False, 4, 4), _if_then_else(True, 2, max_row_clue)), and_(and_(le(1, max_row_clue), True), and_(True, False)))
or_(or_(and_(False, False), and_(True, False)), or_(and_(False, False), or_(False, False)))
ge(_if_then_else(le(_if_then_else(ge(ones_diff_rows, zeros_diff_rows), _if_then_else(False, 3, 1), _if_then_else(True, 4, zeros_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, zeros_diff_rows), _if_then_else(False, max_col_clue, zeros_diff_rows))), _if_then_else(or_(and_(False, False), or_(True, True)), _if_then_else(or_(True, True), _if_then_else(True, 2, ones_diff_rows), _if_then_else(True, max_row_clue, 4)), _if_then_else(and_(True, False), _if_then_else(True, max_col_clue, compare_blocks_rows), _if_then_else(False, 4, zeros_diff_rows))), _if_then_else(le(_if_then_else(False, ones_diff_rows, max_row_clue), _if_then_else(False, zeros_diff_cols, 3)), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(or_(False, True), _if_then_else(False, ones_diff_rows, ones_diff_rows), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)))), _if_then_else(le(max_col_clue, _if_then_else(False, zeros_diff_cols, max_row_clue)), _if_then_else(le(_if_then_else(True, zeros_diff_rows, compare_blocks_rows), _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(le(compare_blocks_rows, zeros_diff_cols), _if_then_else(True, 0, 4), _if_then_else(False, zeros_diff_rows, max_col_clue)), _if_then_else(le(3, 1), _if_then_else(True, zeros_diff_cols, 4), _if_then_else(False, 2, zeros_diff_rows))), _if_then_else(and_(or_(True, True), or_(False, False)), _if_then_else(le(2, ones_diff_cols), _if_then_else(False, 0, ones_diff_rows), _if_then_else(True, 1, 0)), _if_then_else(ge(3, zeros_diff_cols), _if_then_else(False, 4, ones_diff_rows), _if_then_else(False, 2, zeros_diff_rows)))))
VAL TREES:
add(add(add(zeros_diff_cols, mul(compare_blocks_rows, compare_blocks_cols)), add(mul(add(compare_blocks_cols, compare_blocks_rows), zeros_diff_rows), mul(mul(zeros_diff_rows, compare_blocks_rows), zeros_diff_cols))), mul(add(ones_diff_rows, zeros_diff_cols), add(compare_blocks_cols, zeros_diff_rows)))
mul(mul(mul(ones_diff_cols, zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), mul(add(compare_blocks_cols, ones_diff_rows), add(ones_diff_rows, compare_blocks_cols)))
add(mul(mul(add(add(compare_blocks_rows, compare_blocks_cols), zeros_diff_rows), add(add(ones_diff_cols, compare_blocks_cols), ones_diff_cols)), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_rows), add(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_rows)), compare_blocks_rows)))
add(add(add(zeros_diff_cols, ones_diff_cols), zeros_diff_cols), mul(mul(ones_diff_cols, ones_diff_cols), mul(zeros_diff_rows, ones_diff_rows)))
mul(add(mul(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, zeros_diff_cols)), add(mul(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, ones_diff_cols)))
add(mul(mul(ones_diff_rows, ones_diff_cols), mul(compare_blocks_rows, ones_diff_rows)), mul(mul(mul(zeros_diff_cols, compare_blocks_rows), ones_diff_rows), add(mul(ones_diff_cols, zeros_diff_cols), add(zeros_diff_cols, ones_diff_rows))))
COND TREES:
and_(or_(or_(True, False), and_(False, True)), and_(le(compare_blocks_cols, compare_blocks_rows), and_(False, False)))
ge(0, zeros_diff_cols)
and_(ge(_if_then_else(False, ones_diff_cols, ones_diff_cols), _if_then_else(False, max_col_clue, max_col_clue)), or_(and_(False, True), ge(4, 2)))
le(_if_then_else(False, max_col_clue, 4), _if_then_else(and_(True, False), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, zeros_diff_cols, ones_diff_cols)))
or_(ge(_if_then_else(or_(True, True), _if_then_else(False, 4, 2), _if_then_else(True, max_col_clue, 1)), _if_then_else(False, _if_then_else(False, 0, 3), max_col_clue)), and_(le(ones_diff_cols, zeros_diff_rows), le(compare_blocks_rows, zeros_diff_rows)))
VAL TREES:
add(mul(add(add(compare_blocks_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_cols))), add(mul(add(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_rows, zeros_diff_rows)), add(mul(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_rows, zeros_diff_cols)), mul(ones_diff_cols, ones_diff_cols))))
add(mul(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_rows, ones_diff_cols)), mul(mul(mul(compare_blocks_cols, ones_diff_rows), mul(ones_diff_cols, compare_blocks_rows)), add(add(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_cols, zeros_diff_rows))))
mul(add(add(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols))), mul(mul(add(ones_diff_rows, ones_diff_cols), add(compare_blocks_cols, compare_blocks_cols)), mul(add(ones_diff_cols, ones_diff_cols), mul(compare_blocks_rows, ones_diff_cols))))
mul(mul(add(mul(zeros_diff_cols, zeros_diff_rows), zeros_diff_cols), mul(ones_diff_cols, compare_blocks_rows)), add(mul(zeros_diff_rows, compare_blocks_rows), add(ones_diff_rows, ones_diff_cols)))
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(add(ones_diff_rows, ones_diff_rows), ones_diff_cols)), mul(add(zeros_diff_cols, zeros_diff_rows), mul(add(add(compare_blocks_cols, ones_diff_cols), zeros_diff_rows), zeros_diff_rows)))
mul(mul(add(zeros_diff_rows, ones_diff_cols), add(zeros_diff_cols, ones_diff_rows)), add(mul(ones_diff_rows, compare_blocks_cols), mul(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))))
COND TREES:
le(_if_then_else(and_(ge(0, zeros_diff_cols), and_(False, False)), _if_then_else(le(3, max_row_clue), _if_then_else(False, max_col_clue, compare_blocks_cols), _if_then_else(True, 2, 2)), _if_then_else(ge(max_col_clue, zeros_diff_rows), _if_then_else(True, 4, ones_diff_rows), _if_then_else(False, ones_diff_cols, zeros_diff_rows))), _if_then_else(ge(_if_then_else(False, ones_diff_rows, compare_blocks_rows), _if_then_else(and_(True, True), ones_diff_cols, compare_blocks_cols)), _if_then_else(le(compare_blocks_cols, compare_blocks_rows), _if_then_else(True, ones_diff_cols, 4), _if_then_else(True, zeros_diff_rows, zeros_diff_cols)), _if_then_else(or_(True, False), _if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(False, zeros_diff_rows, compare_blocks_cols))))
or_(and_(and_(True, False), and_(False, True)), and_(or_(True, False), or_(False, True)))
or_(ge(_if_then_else(False, _if_then_else(False, ones_diff_rows, 4), ones_diff_cols), _if_then_else(False, 2, max_row_clue)), and_(and_(or_(True, True), True), and_(True, False)))
or_(le(_if_then_else(le(max_row_clue, compare_blocks_rows), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(False, zeros_diff_cols, 0)), _if_then_else(True, 0, ones_diff_cols)), or_(and_(False, False), or_(False, False)))
ge(_if_then_else(le(_if_then_else(ge(ones_diff_rows, zeros_diff_rows), _if_then_else(False, 3, 1), _if_then_else(True, 4, zeros_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, zeros_diff_rows), _if_then_else(False, max_col_clue, zeros_diff_rows))), _if_then_else(or_(and_(False, False), or_(True, True)), _if_then_else(or_(True, True), _if_then_else(True, 2, ones_diff_rows), _if_then_else(True, max_row_clue, 4)), _if_then_else(and_(True, False), _if_then_else(True, ones_diff_rows, compare_blocks_rows), _if_then_else(False, 4, zeros_diff_rows))), _if_then_else(le(_if_then_else(False, ones_diff_rows, max_row_clue), _if_then_else(False, zeros_diff_cols, 3)), _if_then_else(or_(True, True), _if_then_else(False, 4, 2), _if_then_else(True, max_col_clue, 1)), _if_then_else(or_(False, True), _if_then_else(False, ones_diff_rows, ones_diff_rows), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)))), _if_then_else(le(_if_then_else(or_(False, True), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, 3, ones_diff_rows)), _if_then_else(ge(zeros_diff_rows, 3), _if_then_else(False, max_col_clue, ones_diff_rows), _if_then_else(True, ones_diff_rows, zeros_diff_cols))), _if_then_else(le(_if_then_else(or_(False, False), _if_then_else(False, _if_then_else(False, compare_blocks_cols, 0), 0), _if_then_else(True, ones_diff_cols, zeros_diff_cols)), _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(le(compare_blocks_rows, zeros_diff_cols), _if_then_else(True, 0, 4), _if_then_else(False, zeros_diff_rows, max_col_clue)), _if_then_else(le(3, 1), _if_then_else(True, zeros_diff_cols, max_col_clue), _if_then_else(False, 2, zeros_diff_rows))), _if_then_else(and_(or_(True, True), or_(False, False)), _if_then_else(le(2, ones_diff_cols), _if_then_else(False, 0, ones_diff_rows), _if_then_else(True, 1, 0)), _if_then_else(True, _if_then_else(False, 4, ones_diff_rows), _if_then_else(False, 2, zeros_diff_rows)))))
VAL TREES:
add(add(add(zeros_diff_cols, mul(compare_blocks_rows, compare_blocks_cols)), add(mul(add(compare_blocks_cols, compare_blocks_rows), zeros_diff_rows), mul(mul(zeros_diff_rows, compare_blocks_rows), compare_blocks_rows))), mul(add(ones_diff_rows, zeros_diff_cols), add(compare_blocks_cols, zeros_diff_rows)))
mul(add(compare_blocks_cols, ones_diff_cols), mul(compare_blocks_cols, zeros_diff_cols))
add(mul(mul(add(add(compare_blocks_rows, compare_blocks_cols), zeros_diff_rows), add(add(ones_diff_cols, compare_blocks_cols), ones_diff_cols)), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_rows), add(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, add(compare_blocks_rows, compare_blocks_cols))), compare_blocks_rows)))
add(add(add(zeros_diff_cols, ones_diff_cols), add(zeros_diff_rows, compare_blocks_rows)), mul(mul(ones_diff_cols, ones_diff_cols), mul(mul(compare_blocks_rows, compare_blocks_rows), ones_diff_rows)))
mul(add(mul(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, zeros_diff_cols)), add(mul(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, ones_diff_cols)))
add(mul(mul(ones_diff_rows, ones_diff_cols), add(add(zeros_diff_cols, compare_blocks_rows), add(ones_diff_rows, compare_blocks_cols))), mul(mul(mul(zeros_diff_cols, compare_blocks_rows), ones_diff_rows), add(mul(ones_diff_cols, zeros_diff_cols), zeros_diff_cols)))
COND TREES:
and_(True, and_(False, and_(False, False)))
ge(_if_then_else(True, _if_then_else(False, max_row_clue, 0), _if_then_else(True, max_row_clue, max_row_clue)), _if_then_else(and_(False, True), _if_then_else(False, 1, ones_diff_cols), _if_then_else(True, 4, max_col_clue)))
and_(ge(_if_then_else(True, 3, 4), _if_then_else(False, max_col_clue, 4)), or_(and_(False, True), ge(4, 2)))
le(_if_then_else(and_(False, False), _if_then_else(False, _if_then_else(False, 1, 2), 2), _if_then_else(True, 1, 2)), _if_then_else(and_(False, False), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, zeros_diff_cols, ones_diff_cols)))
or_(le(3, _if_then_else(ge(3, zeros_diff_cols), 1, ones_diff_rows)), and_(or_(False, True), le(compare_blocks_rows, zeros_diff_rows)))
VAL TREES:
add(mul(add(add(compare_blocks_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_cols))), add(mul(add(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_rows, zeros_diff_rows)), add(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_cols, ones_diff_cols))))
add(mul(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_rows, ones_diff_cols)), mul(mul(mul(compare_blocks_cols, ones_diff_rows), mul(ones_diff_cols, compare_blocks_rows)), add(zeros_diff_cols, compare_blocks_rows)))
mul(add(add(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols))), mul(mul(add(ones_diff_rows, ones_diff_cols), add(compare_blocks_cols, compare_blocks_cols)), mul(add(ones_diff_cols, ones_diff_cols), mul(compare_blocks_rows, ones_diff_cols))))
mul(mul(add(compare_blocks_cols, zeros_diff_cols), mul(ones_diff_cols, compare_blocks_rows)), compare_blocks_cols)
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(add(ones_diff_rows, ones_diff_rows), ones_diff_cols)), add(mul(zeros_diff_rows, compare_blocks_rows), add(compare_blocks_cols, ones_diff_rows)))
mul(mul(add(zeros_diff_rows, ones_diff_cols), add(zeros_diff_cols, ones_diff_rows)), add(mul(ones_diff_rows, compare_blocks_cols), mul(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, add(compare_blocks_cols, ones_diff_cols)))))
COND TREES:
ge(_if_then_else(and_(ge(3, compare_blocks_rows), False), _if_then_else(and_(True, True), _if_then_else(False, 1, 2), _if_then_else(False, 3, 1)), _if_then_else(ge(zeros_diff_cols, 0), _if_then_else(True, 2, 1), _if_then_else(True, compare_blocks_rows, 2))), _if_then_else(and_(le(4, compare_blocks_rows), and_(True, True)), _if_then_else(or_(True, True), _if_then_else(False, compare_blocks_rows, 1), _if_then_else(True, ones_diff_cols, ones_diff_cols)), _if_then_else(and_(False, True), _if_then_else(True, 0, 2), _if_then_else(False, 2, 0))))
or_(or_(le(compare_blocks_cols, zeros_diff_cols), le(zeros_diff_rows, compare_blocks_rows)), and_(or_(True, False), or_(False, True)))
ge(_if_then_else(or_(or_(True, False), and_(False, True)), _if_then_else(or_(False, True), 0, _if_then_else(False, zeros_diff_rows, 3)), _if_then_else(or_(True, False), _if_then_else(False, 1, compare_blocks_rows), _if_then_else(True, 3, max_col_clue))), _if_then_else(ge(_if_then_else(True, zeros_diff_rows, zeros_diff_cols), _if_then_else(True, max_row_clue, 4)), _if_then_else(ge(ones_diff_cols, 4), _if_then_else(False, max_row_clue, 3), _if_then_else(True, max_row_clue, ones_diff_cols)), _if_then_else(le(max_col_clue, compare_blocks_rows), _if_then_else(True, 3, 3), _if_then_else(True, 3, zeros_diff_rows))))
or_(ge(2, _if_then_else(False, compare_blocks_rows, max_row_clue)), le(_if_then_else(False, ones_diff_cols, zeros_diff_rows), _if_then_else(le(3, ones_diff_rows), zeros_diff_cols, 4)))
or_(le(_if_then_else(or_(False, False), _if_then_else(True, zeros_diff_rows, max_col_clue), _if_then_else(False, compare_blocks_cols, compare_blocks_rows)), _if_then_else(and_(True, False), ones_diff_cols, 1)), or_(le(zeros_diff_cols, max_col_clue), or_(False, ge(1, 4))))
VAL TREES:
mul(add(add(ones_diff_cols, ones_diff_cols), mul(mul(zeros_diff_cols, ones_diff_rows), mul(zeros_diff_cols, ones_diff_cols))), add(mul(ones_diff_cols, ones_diff_cols), mul(compare_blocks_cols, ones_diff_cols)))
mul(mul(add(mul(add(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), mul(zeros_diff_cols, zeros_diff_cols))), add(add(add(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, zeros_diff_rows)), mul(mul(ones_diff_rows, ones_diff_cols), add(compare_blocks_rows, compare_blocks_cols)))), add(add(ones_diff_rows, zeros_diff_rows), add(ones_diff_cols, ones_diff_rows)))
mul(add(mul(add(ones_diff_cols, compare_blocks_rows), mul(add(add(ones_diff_rows, add(mul(compare_blocks_cols, ones_diff_rows), mul(compare_blocks_rows, compare_blocks_rows))), mul(ones_diff_cols, zeros_diff_rows)), compare_blocks_cols)), mul(add(compare_blocks_cols, ones_diff_rows), add(zeros_diff_cols, compare_blocks_cols))), mul(add(add(ones_diff_cols, zeros_diff_cols), add(ones_diff_rows, ones_diff_cols)), mul(mul(ones_diff_rows, zeros_diff_rows), mul(zeros_diff_rows, zeros_diff_cols))))
mul(add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows)), add(add(compare_blocks_rows, compare_blocks_rows), mul(compare_blocks_cols, compare_blocks_cols)))
mul(add(add(add(mul(ones_diff_cols, ones_diff_cols), add(compare_blocks_cols, zeros_diff_cols)), mul(add(compare_blocks_cols, zeros_diff_rows), mul(zeros_diff_rows, ones_diff_rows))), add(add(mul(zeros_diff_cols, compare_blocks_rows), add(compare_blocks_rows, compare_blocks_rows)), add(add(compare_blocks_cols, zeros_diff_cols), mul(compare_blocks_rows, compare_blocks_cols)))), add(mul(mul(mul(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_cols, ones_diff_cols)), mul(mul(zeros_diff_rows, zeros_diff_cols), mul(ones_diff_rows, ones_diff_cols))), mul(mul(add(ones_diff_rows, zeros_diff_rows), mul(ones_diff_rows, zeros_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(ones_diff_rows, zeros_diff_cols)))))
add(add(add(add(add(compare_blocks_rows, zeros_diff_rows), mul(ones_diff_rows, zeros_diff_cols)), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_cols, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(add(mul(zeros_diff_cols, compare_blocks_rows), mul(zeros_diff_rows, compare_blocks_cols)), mul(mul(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, ones_diff_cols))))
COND TREES:
le(_if_then_else(and_(ge(0, zeros_diff_cols), and_(False, False)), _if_then_else(and_(False, False), _if_then_else(ge(zeros_diff_cols, 0), _if_then_else(True, 2, 1), _if_then_else(True, _if_then_else(False, compare_blocks_rows, 1), _if_then_else(True, ones_diff_cols, ones_diff_cols))), _if_then_else(True, 4, ones_diff_rows)), _if_then_else(ge(max_col_clue, zeros_diff_rows), _if_then_else(True, 4, ones_diff_rows), _if_then_else(False, _if_then_else(or_(False, True), _if_then_else(True, 4, 0), _if_then_else(True, max_row_clue, 2)), zeros_diff_rows))), _if_then_else(ge(_if_then_else(False, ones_diff_rows, _if_then_else(True, 4, ones_diff_rows)), _if_then_else(True, ones_diff_cols, compare_blocks_cols)), 0, _if_then_else(or_(True, False), _if_then_else(True, zeros_diff_cols, ones_diff_cols), _if_then_else(False, zeros_diff_rows, compare_blocks_cols))))
or_(and_(and_(or_(True, False), or_(False, True)), True), and_(or_(True, and_(and_(le(4, zeros_diff_cols), or_(False, True)), True)), le(zeros_diff_rows, ones_diff_rows)))
or_(False, and_(or_(or_(True, False), or_(True, False)), and_(True, False)))
or_(le(_if_then_else(False, _if_then_else(ge(4, compare_blocks_cols), _if_then_else(True, compare_blocks_cols, zeros_diff_rows), _if_then_else(True, zeros_diff_rows, 0)), zeros_diff_rows), _if_then_else(True, zeros_diff_cols, 4)), or_(and_(False, False), or_(True, and_(True, False))))
ge(_if_then_else(le(_if_then_else(ge(ones_diff_rows, zeros_diff_rows), _if_then_else(False, 3, 1), _if_then_else(True, 4, zeros_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, zeros_diff_rows), _if_then_else(False, max_col_clue, zeros_diff_rows))), _if_then_else(or_(and_(False, False), or_(le(zeros_diff_cols, max_col_clue), or_(False, ge(1, 4)))), _if_then_else(or_(True, True), _if_then_else(True, 2, ones_diff_rows), _if_then_else(True, max_row_clue, 4)), _if_then_else(and_(True, False), _if_then_else(True, ones_diff_rows, compare_blocks_rows), _if_then_else(False, 4, zeros_diff_rows))), _if_then_else(le(_if_then_else(False, ones_diff_rows, max_row_clue), _if_then_else(False, zeros_diff_cols, 3)), _if_then_else(or_(False, True), _if_then_else(False, 4, 2), _if_then_else(True, max_col_clue, 1)), _if_then_else(or_(False, True), _if_then_else(False, ones_diff_rows, ones_diff_rows), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)))), _if_then_else(le(_if_then_else(and_(True, False), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, 3, ones_diff_rows)), _if_then_else(ge(zeros_diff_rows, 3), _if_then_else(False, max_col_clue, ones_diff_rows), _if_then_else(True, ones_diff_rows, zeros_diff_cols))), _if_then_else(le(_if_then_else(True, zeros_diff_rows, compare_blocks_rows), _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(le(compare_blocks_rows, zeros_diff_cols), _if_then_else(True, 0, 4), _if_then_else(False, zeros_diff_rows, max_col_clue)), _if_then_else(le(3, 1), _if_then_else(True, zeros_diff_cols, max_col_clue), _if_then_else(False, 2, zeros_diff_rows))), _if_then_else(or_(True, True), _if_then_else(le(2, ones_diff_cols), _if_then_else(False, 0, ones_diff_rows), _if_then_else(True, 1, 0)), _if_then_else(ge(3, zeros_diff_cols), _if_then_else(False, 4, ones_diff_rows), _if_then_else(False, 2, zeros_diff_rows)))))
VAL TREES:
add(add(add(zeros_diff_cols, mul(compare_blocks_rows, compare_blocks_cols)), add(mul(add(mul(mul(compare_blocks_rows, zeros_diff_rows), mul(compare_blocks_rows, ones_diff_rows)), compare_blocks_rows), zeros_diff_rows), mul(mul(zeros_diff_rows, compare_blocks_rows), zeros_diff_rows))), mul(add(ones_diff_rows, zeros_diff_cols), add(compare_blocks_cols, zeros_diff_rows)))
mul(mul(mul(ones_diff_cols, mul(mul(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_cols))), add(ones_diff_rows, zeros_diff_rows)), mul(add(compare_blocks_cols, ones_diff_rows), add(ones_diff_rows, compare_blocks_cols)))
add(mul(mul(add(add(compare_blocks_rows, compare_blocks_cols), zeros_diff_rows), add(add(ones_diff_cols, mul(add(ones_diff_rows, ones_diff_cols), add(compare_blocks_rows, zeros_diff_cols))), ones_diff_cols)), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_rows), add(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_rows)), compare_blocks_rows)))
add(add(add(zeros_diff_cols, ones_diff_cols), add(zeros_diff_rows, compare_blocks_rows)), mul(mul(mul(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, zeros_diff_rows)), ones_diff_cols), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_rows, ones_diff_cols))))
mul(add(mul(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, add(mul(compare_blocks_cols, ones_diff_rows), add(compare_blocks_cols, zeros_diff_cols)))), add(mul(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, ones_diff_cols)))
add(mul(mul(ones_diff_rows, ones_diff_cols), mul(compare_blocks_rows, add(add(ones_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, compare_blocks_rows)))), mul(mul(mul(zeros_diff_cols, compare_blocks_rows), ones_diff_rows), add(mul(ones_diff_cols, zeros_diff_cols), zeros_diff_cols)))
COND TREES:
le(_if_then_else(and_(ge(0, zeros_diff_cols), and_(False, False)), _if_then_else(le(3, max_row_clue), _if_then_else(and_(ge(0, zeros_diff_cols), and_(False, False)), _if_then_else(le(compare_blocks_cols, compare_blocks_rows), _if_then_else(True, ones_diff_cols, 4), _if_then_else(True, zeros_diff_rows, zeros_diff_cols)), _if_then_else(or_(True, False), _if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(False, zeros_diff_rows, compare_blocks_cols))), ones_diff_cols), _if_then_else(ge(max_col_clue, zeros_diff_rows), _if_then_else(True, 4, ones_diff_rows), _if_then_else(False, ones_diff_cols, zeros_diff_rows))), _if_then_else(and_(le(4, compare_blocks_rows), and_(True, True)), _if_then_else(or_(ge(1, max_col_clue), True), _if_then_else(False, compare_blocks_rows, 1), _if_then_else(True, _if_then_else(True, 2, 1), ones_diff_cols)), _if_then_else(and_(False, True), _if_then_else(True, 0, _if_then_else(or_(False, True), _if_then_else(True, 2, zeros_diff_rows), _if_then_else(True, 1, max_col_clue))), _if_then_else(False, 2, 0))))
and_(False, False)
or_(ge(_if_then_else(True, zeros_diff_rows, _if_then_else(False, max_col_clue, 1)), _if_then_else(False, 2, max_row_clue)), and_(and_(True, True), and_(True, True)))
or_(False, or_(and_(False, ge(2, _if_then_else(False, compare_blocks_rows, max_row_clue))), False))
ge(_if_then_else(le(_if_then_else(ge(ones_diff_rows, zeros_diff_rows), _if_then_else(False, 3, 1), _if_then_else(True, _if_then_else(True, 2, 4), zeros_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, zeros_diff_rows), _if_then_else(False, max_col_clue, zeros_diff_rows))), _if_then_else(le(_if_then_else(True, _if_then_else(True, zeros_diff_rows, max_col_clue), _if_then_else(False, compare_blocks_cols, 3)), _if_then_else(and_(True, False), ones_diff_cols, 1)), _if_then_else(or_(True, True), _if_then_else(True, 2, ones_diff_rows), _if_then_else(True, _if_then_else(False, max_col_clue, max_row_clue), 4)), _if_then_else(and_(True, False), _if_then_else(True, ones_diff_rows, compare_blocks_rows), _if_then_else(False, 4, zeros_diff_rows))), _if_then_else(le(_if_then_else(False, ones_diff_rows, max_row_clue), _if_then_else(False, zeros_diff_cols, 3)), _if_then_else(or_(True, True), _if_then_else(False, 4, 2), _if_then_else(True, max_col_clue, 1)), _if_then_else(or_(False, True), _if_then_else(False, ones_diff_rows, ones_diff_rows), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)))), _if_then_else(le(_if_then_else(or_(False, True), _if_then_else(or_(True, True), _if_then_else(True, 4, 1), _if_then_else(False, ones_diff_cols, 1)), _if_then_else(True, 3, ones_diff_rows)), _if_then_else(ge(zeros_diff_rows, 3), _if_then_else(False, max_col_clue, ones_diff_rows), _if_then_else(True, ones_diff_rows, zeros_diff_cols))), _if_then_else(le(_if_then_else(True, zeros_diff_rows, compare_blocks_rows), _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(le(compare_blocks_rows, zeros_diff_cols), _if_then_else(True, 0, 4), _if_then_else(False, zeros_diff_rows, max_col_clue)), _if_then_else(le(3, 1), _if_then_else(True, zeros_diff_cols, max_col_clue), _if_then_else(False, 2, zeros_diff_rows))), _if_then_else(and_(or_(True, True), or_(False, False)), _if_then_else(le(2, ones_diff_cols), _if_then_else(False, 0, ones_diff_rows), _if_then_else(True, 1, 0)), _if_then_else(ge(3, zeros_diff_cols), _if_then_else(False, 4, ones_diff_rows), _if_then_else(False, 2, zeros_diff_rows)))))
VAL TREES:
add(add(add(zeros_diff_cols, mul(compare_blocks_rows, compare_blocks_cols)), add(mul(add(compare_blocks_cols, compare_blocks_rows), add(mul(ones_diff_cols, ones_diff_cols), mul(ones_diff_rows, compare_blocks_cols))), mul(mul(zeros_diff_rows, compare_blocks_rows), zeros_diff_cols))), mul(add(ones_diff_rows, zeros_diff_cols), add(compare_blocks_cols, zeros_diff_rows)))
mul(mul(mul(ones_diff_cols, zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), mul(add(compare_blocks_cols, ones_diff_rows), add(ones_diff_rows, compare_blocks_cols)))
add(mul(compare_blocks_cols, compare_blocks_cols), mul(add(zeros_diff_cols, compare_blocks_rows), add(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_rows)), compare_blocks_rows)))
add(add(add(zeros_diff_cols, ones_diff_cols), ones_diff_rows), mul(mul(ones_diff_cols, ones_diff_cols), mul(zeros_diff_rows, ones_diff_rows)))
mul(add(mul(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, zeros_diff_cols)), add(mul(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, ones_diff_cols)))
add(mul(mul(ones_diff_rows, ones_diff_cols), mul(compare_blocks_rows, compare_blocks_cols)), mul(mul(mul(zeros_diff_cols, compare_blocks_rows), ones_diff_rows), add(mul(ones_diff_cols, zeros_diff_cols), zeros_diff_cols)))
COND TREES:
le(_if_then_else(and_(ge(0, zeros_diff_cols), and_(False, False)), _if_then_else(le(3, max_row_clue), _if_then_else(False, max_col_clue, compare_blocks_cols), _if_then_else(True, 2, 2)), _if_then_else(ge(max_col_clue, zeros_diff_rows), _if_then_else(True, 4, compare_blocks_rows), _if_then_else(False, ones_diff_cols, zeros_diff_rows))), _if_then_else(False, max_col_clue, compare_blocks_cols))
or_(and_(and_(True, True), and_(le(_if_then_else(True, ones_diff_cols, 0), _if_then_else(False, 2, zeros_diff_rows)), and_(True, True))), and_(True, or_(False, True)))
or_(ge(_if_then_else(True, zeros_diff_rows, _if_then_else(False, ones_diff_rows, 1)), _if_then_else(False, 2, max_row_clue)), and_(and_(le(1, max_row_clue), or_(True, True)), and_(True, le(zeros_diff_cols, zeros_diff_rows))))
or_(or_(le(ones_diff_cols, ones_diff_rows), and_(True, False)), False)
ge(_if_then_else(le(_if_then_else(False, ones_diff_rows, zeros_diff_rows), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, zeros_diff_rows), _if_then_else(False, max_col_clue, zeros_diff_rows))), _if_then_else(or_(and_(False, False), or_(True, True)), _if_then_else(or_(True, True), _if_then_else(True, 2, ones_diff_rows), _if_then_else(True, max_row_clue, 4)), _if_then_else(and_(True, False), _if_then_else(True, ones_diff_rows, compare_blocks_rows), _if_then_else(False, 4, zeros_diff_rows))), _if_then_else(le(_if_then_else(False, ones_diff_rows, max_row_clue), _if_then_else(False, zeros_diff_cols, 3)), _if_then_else(or_(True, True), _if_then_else(False, 4, 2), _if_then_else(True, max_col_clue, 1)), _if_then_else(or_(False, True), _if_then_else(False, ones_diff_rows, ones_diff_rows), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)))), _if_then_else(le(_if_then_else(or_(False, True), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, 3, ones_diff_rows)), _if_then_else(ge(zeros_diff_rows, 3), _if_then_else(False, max_col_clue, ones_diff_rows), _if_then_else(True, ones_diff_rows, zeros_diff_cols))), _if_then_else(le(_if_then_else(True, zeros_diff_rows, compare_blocks_rows), _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(le(compare_blocks_rows, zeros_diff_cols), _if_then_else(True, 0, 4), _if_then_else(False, zeros_diff_rows, max_col_clue)), _if_then_else(le(3, 1), _if_then_else(True, zeros_diff_cols, max_col_clue), _if_then_else(False, 2, zeros_diff_rows))), _if_then_else(and_(or_(True, True), or_(False, False)), _if_then_else(le(2, ones_diff_cols), _if_then_else(False, 0, ones_diff_rows), _if_then_else(True, 1, 0)), _if_then_else(ge(3, zeros_diff_cols), _if_then_else(False, 4, ones_diff_rows), _if_then_else(False, 2, zeros_diff_rows)))))
VAL TREES:
add(add(add(zeros_diff_cols, mul(compare_blocks_rows, compare_blocks_cols)), add(mul(add(add(zeros_diff_rows, compare_blocks_cols), compare_blocks_rows), zeros_diff_rows), mul(mul(zeros_diff_rows, compare_blocks_rows), zeros_diff_cols))), mul(add(ones_diff_rows, zeros_diff_cols), add(compare_blocks_cols, zeros_diff_rows)))
mul(mul(mul(ones_diff_cols, zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), mul(ones_diff_cols, add(ones_diff_rows, compare_blocks_cols)))
add(mul(mul(add(add(compare_blocks_rows, compare_blocks_cols), zeros_diff_rows), add(add(ones_diff_cols, compare_blocks_cols), ones_diff_cols)), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_rows), add(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_rows)), compare_blocks_rows)))
add(add(add(zeros_diff_cols, ones_diff_cols), ones_diff_rows), mul(add(ones_diff_rows, ones_diff_rows), mul(zeros_diff_rows, ones_diff_rows)))
mul(add(mul(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, zeros_diff_cols)), add(mul(mul(add(ones_diff_cols, zeros_diff_rows), add(compare_blocks_cols, mul(compare_blocks_rows, ones_diff_rows))), compare_blocks_cols), mul(compare_blocks_cols, ones_diff_cols)))
add(mul(mul(ones_diff_rows, ones_diff_cols), ones_diff_rows), mul(mul(mul(mul(mul(ones_diff_cols, ones_diff_cols), add(compare_blocks_cols, zeros_diff_cols)), compare_blocks_rows), ones_diff_rows), add(mul(ones_diff_cols, zeros_diff_cols), zeros_diff_cols)))
COND TREES:
le(_if_then_else(and_(ge(0, zeros_diff_cols), and_(False, False)), _if_then_else(and_(False, False), _if_then_else(ge(zeros_diff_cols, 0), _if_then_else(True, 2, 1), _if_then_else(True, compare_blocks_rows, 2)), _if_then_else(True, 2, 2)), _if_then_else(ge(max_col_clue, zeros_diff_rows), _if_then_else(True, 4, ones_diff_rows), _if_then_else(False, ones_diff_cols, zeros_diff_rows))), _if_then_else(ge(_if_then_else(False, ones_diff_rows, _if_then_else(True, 4, ones_diff_rows)), _if_then_else(False, ones_diff_cols, compare_blocks_cols)), 0, _if_then_else(and_(False, True), _if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(False, ones_diff_cols, compare_blocks_cols))))
or_(False, and_(or_(True, False), or_(False, True)))
or_(ge(_if_then_else(True, zeros_diff_rows, _if_then_else(False, max_col_clue, 4)), _if_then_else(False, 2, max_row_clue)), and_(or_(or_(True, False), False), and_(True, False)))
or_(or_(True, and_(True, False)), or_(and_(False, False), and_(False, False)))
ge(_if_then_else(le(_if_then_else(ge(ones_diff_rows, zeros_diff_rows), _if_then_else(False, 3, 1), _if_then_else(True, 4, zeros_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, zeros_diff_rows), _if_then_else(False, max_col_clue, zeros_diff_rows))), _if_then_else(le(compare_blocks_rows, zeros_diff_rows), _if_then_else(or_(True, True), _if_then_else(True, 2, ones_diff_rows), _if_then_else(True, max_row_clue, 4)), _if_then_else(and_(True, False), _if_then_else(True, ones_diff_rows, compare_blocks_rows), _if_then_else(False, 4, zeros_diff_rows))), _if_then_else(le(_if_then_else(False, ones_diff_rows, max_row_clue), _if_then_else(False, zeros_diff_cols, 3)), _if_then_else(or_(True, True), _if_then_else(False, 4, 2), _if_then_else(True, max_col_clue, 1)), _if_then_else(or_(False, True), _if_then_else(False, ones_diff_rows, ones_diff_rows), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)))), _if_then_else(le(_if_then_else(or_(False, False), _if_then_else(False, max_col_clue, 2), _if_then_else(True, 3, ones_diff_rows)), _if_then_else(ge(zeros_diff_rows, 3), _if_then_else(False, max_col_clue, ones_diff_rows), _if_then_else(True, ones_diff_rows, zeros_diff_cols))), _if_then_else(le(_if_then_else(True, zeros_diff_rows, compare_blocks_rows), _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(le(compare_blocks_rows, zeros_diff_cols), _if_then_else(True, 0, 4), _if_then_else(False, zeros_diff_rows, max_col_clue)), _if_then_else(le(3, 1), _if_then_else(True, zeros_diff_cols, max_col_clue), _if_then_else(False, 2, zeros_diff_rows))), _if_then_else(and_(and_(True, False), or_(False, False)), _if_then_else(le(2, ones_diff_cols), _if_then_else(False, 0, ones_diff_rows), _if_then_else(True, 1, 0)), _if_then_else(ge(3, zeros_diff_cols), _if_then_else(False, 4, ones_diff_rows), _if_then_else(False, 2, zeros_diff_rows)))))
VAL TREES:
add(add(add(zeros_diff_cols, add(compare_blocks_cols, zeros_diff_rows)), add(mul(add(compare_blocks_cols, compare_blocks_rows), zeros_diff_rows), mul(mul(zeros_diff_rows, compare_blocks_rows), zeros_diff_rows))), mul(add(ones_diff_rows, zeros_diff_cols), compare_blocks_rows))
mul(mul(mul(ones_diff_cols, mul(mul(zeros_diff_cols, compare_blocks_cols), add(compare_blocks_cols, zeros_diff_cols))), add(ones_diff_rows, zeros_diff_rows)), mul(add(compare_blocks_cols, ones_diff_rows), add(ones_diff_rows, compare_blocks_cols)))
add(mul(mul(add(add(compare_blocks_rows, compare_blocks_cols), zeros_diff_rows), add(add(ones_diff_cols, compare_blocks_cols), ones_diff_cols)), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_rows), add(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_rows)), compare_blocks_rows)))
add(add(add(zeros_diff_cols, ones_diff_cols), add(zeros_diff_rows, zeros_diff_cols)), mul(mul(mul(add(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, zeros_diff_rows)), ones_diff_cols), add(add(zeros_diff_rows, ones_diff_rows), add(ones_diff_rows, ones_diff_cols))))
mul(add(mul(zeros_diff_rows, mul(compare_blocks_cols, zeros_diff_rows)), add(compare_blocks_rows, zeros_diff_cols)), add(mul(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, ones_diff_cols)))
add(mul(mul(ones_diff_rows, ones_diff_cols), mul(compare_blocks_rows, add(add(ones_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, compare_blocks_rows)))), mul(mul(add(ones_diff_cols, ones_diff_cols), ones_diff_rows), add(mul(ones_diff_cols, zeros_diff_cols), zeros_diff_cols)))
COND TREES:
and_(or_(or_(True, False), or_(True, False)), and_(and_(True, False), and_(False, False)))
ge(_if_then_else(or_(False, True), _if_then_else(False, max_row_clue, 0), _if_then_else(False, max_row_clue, max_row_clue)), _if_then_else(and_(True, False), _if_then_else(False, ones_diff_rows, compare_blocks_cols), _if_then_else(True, 3, ones_diff_cols)))
and_(ge(_if_then_else(False, 1, ones_diff_cols), _if_then_else(False, compare_blocks_cols, 4)), or_(and_(False, True), ge(4, 2)))
le(_if_then_else(and_(False, False), _if_then_else(False, 1, 2), _if_then_else(True, 1, 2)), _if_then_else(and_(False, False), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, zeros_diff_cols, ones_diff_cols)))
or_(le(max_col_clue, _if_then_else(True, 4, max_col_clue)), and_(or_(True, True), or_(and_(False, False), or_(True, True))))
VAL TREES:
add(mul(add(add(compare_blocks_rows, compare_blocks_rows), mul(add(zeros_diff_cols, compare_blocks_rows), ones_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_cols))), add(mul(add(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_rows, zeros_diff_rows)), add(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_cols, ones_diff_cols))))
add(mul(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_rows, ones_diff_cols)), mul(mul(mul(compare_blocks_cols, ones_diff_rows), mul(ones_diff_cols, compare_blocks_rows)), add(add(ones_diff_rows, compare_blocks_rows), compare_blocks_rows)))
mul(add(add(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols))), mul(mul(add(ones_diff_rows, ones_diff_cols), add(compare_blocks_cols, compare_blocks_cols)), mul(add(ones_diff_cols, ones_diff_cols), mul(zeros_diff_cols, zeros_diff_rows))))
mul(mul(add(compare_blocks_cols, zeros_diff_cols), mul(ones_diff_cols, compare_blocks_rows)), add(mul(zeros_diff_rows, compare_blocks_rows), add(ones_diff_rows, ones_diff_cols)))
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(add(ones_diff_rows, ones_diff_rows), ones_diff_cols)), mul(add(zeros_diff_cols, zeros_diff_rows), mul(add(add(compare_blocks_cols, ones_diff_cols), zeros_diff_rows), zeros_diff_rows)))
mul(mul(add(zeros_diff_rows, ones_diff_cols), add(zeros_diff_cols, ones_diff_rows)), add(mul(ones_diff_rows, compare_blocks_cols), mul(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))))
COND TREES:
and_(or_(ge(0, compare_blocks_rows), and_(False, True)), and_(False, and_(False, False)))
ge(0, zeros_diff_cols)
and_(ge(_if_then_else(False, 1, ones_diff_cols), _if_then_else(False, max_col_clue, 4)), and_(False, True))
le(_if_then_else(False, max_col_clue, 4), _if_then_else(and_(True, False), _if_then_else(and_(False, False), _if_then_else(False, 1, 2), _if_then_else(True, 1, 2)), _if_then_else(True, zeros_diff_cols, ones_diff_cols)))
or_(ge(_if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(False, _if_then_else(False, 0, 3), max_col_clue)), and_(le(ones_diff_cols, zeros_diff_rows), le(compare_blocks_rows, zeros_diff_rows)))
VAL TREES:
add(mul(add(add(compare_blocks_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_cols))), add(mul(add(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_rows, zeros_diff_rows)), add(mul(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_rows, zeros_diff_cols)), mul(ones_diff_cols, ones_diff_cols))))
add(mul(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_rows, ones_diff_cols)), mul(mul(mul(compare_blocks_cols, ones_diff_rows), mul(ones_diff_cols, compare_blocks_rows)), add(add(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_cols, zeros_diff_rows))))
mul(add(add(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols))), mul(mul(add(ones_diff_rows, ones_diff_cols), add(compare_blocks_cols, compare_blocks_cols)), mul(add(ones_diff_cols, ones_diff_cols), mul(compare_blocks_rows, ones_diff_cols))))
mul(mul(add(mul(zeros_diff_cols, zeros_diff_rows), zeros_diff_cols), mul(ones_diff_cols, compare_blocks_rows)), add(mul(zeros_diff_rows, compare_blocks_rows), add(ones_diff_rows, ones_diff_cols)))
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(add(ones_diff_rows, ones_diff_rows), ones_diff_cols)), mul(add(zeros_diff_cols, zeros_diff_rows), mul(add(add(compare_blocks_cols, ones_diff_cols), zeros_diff_rows), zeros_diff_rows)))
mul(mul(add(zeros_diff_rows, ones_diff_cols), add(zeros_diff_cols, ones_diff_rows)), add(mul(ones_diff_rows, compare_blocks_cols), mul(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))))
COND TREES:
and_(or_(and_(or_(True, False), and_(False, False)), and_(False, True)), and_(and_(True, False), and_(False, False)))
ge(_if_then_else(or_(False, True), _if_then_else(False, max_row_clue, 0), _if_then_else(False, max_row_clue, max_row_clue)), _if_then_else(and_(True, False), _if_then_else(False, 4, compare_blocks_cols), _if_then_else(True, 3, ones_diff_cols)))
and_(ge(_if_then_else(True, zeros_diff_rows, zeros_diff_cols), max_row_clue), or_(or_(and_(False, True), ge(4, 2)), ge(4, 2)))
le(_if_then_else(or_(le(3, zeros_diff_cols), or_(and_(False, False), or_(False, False))), _if_then_else(False, 1, 2), _if_then_else(and_(True, False), zeros_diff_cols, 4)), _if_then_else(and_(False, False), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, zeros_diff_cols, ones_diff_cols)))
or_(le(_if_then_else(False, 1, _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, zeros_diff_rows), _if_then_else(False, max_col_clue, zeros_diff_rows))), _if_then_else(True, 1, ones_diff_rows)), and_(and_(True, False), or_(True, True)))
VAL TREES:
add(mul(add(add(compare_blocks_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_cols))), add(mul(add(compare_blocks_cols, compare_blocks_rows), mul(mul(ones_diff_rows, zeros_diff_cols), zeros_diff_rows)), add(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_cols, ones_diff_cols))))
add(mul(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_rows, ones_diff_cols)), mul(mul(mul(compare_blocks_cols, ones_diff_rows), mul(ones_diff_cols, compare_blocks_rows)), add(zeros_diff_cols, compare_blocks_rows)))
mul(add(add(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols))), mul(mul(add(ones_diff_rows, ones_diff_cols), add(compare_blocks_cols, compare_blocks_cols)), mul(add(ones_diff_cols, ones_diff_cols), mul(compare_blocks_rows, ones_diff_cols))))
mul(mul(add(add(ones_diff_rows, zeros_diff_cols), zeros_diff_cols), mul(ones_diff_cols, compare_blocks_rows)), add(mul(zeros_diff_rows, compare_blocks_rows), add(ones_diff_rows, ones_diff_cols)))
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(add(ones_diff_rows, ones_diff_rows), ones_diff_cols)), mul(add(zeros_diff_cols, zeros_diff_rows), mul(add(add(compare_blocks_cols, ones_diff_cols), zeros_diff_rows), zeros_diff_rows)))
mul(mul(add(zeros_diff_rows, ones_diff_cols), add(zeros_diff_cols, ones_diff_rows)), add(mul(ones_diff_rows, compare_blocks_cols), mul(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))))
COND TREES:
ge(_if_then_else(and_(ge(3, compare_blocks_rows), and_(or_(le(4, 0), ge(1, 1)), False)), _if_then_else(and_(True, True), _if_then_else(False, 1, 2), _if_then_else(False, 3, 1)), _if_then_else(ge(zeros_diff_cols, 0), _if_then_else(False, 2, 1), _if_then_else(True, compare_blocks_rows, 2))), _if_then_else(and_(le(4, compare_blocks_rows), and_(True, True)), _if_then_else(or_(True, True), _if_then_else(False, compare_blocks_rows, 1), _if_then_else(True, ones_diff_cols, ones_diff_cols)), _if_then_else(and_(False, True), _if_then_else(True, 0, 2), _if_then_else(False, 2, 0))))
or_(and_(or_(True, False), or_(False, True)), False)
ge(_if_then_else(or_(or_(True, False), ge(_if_then_else(True, zeros_diff_rows, zeros_diff_cols), _if_then_else(le(ones_diff_cols, 0), max_row_clue, 4))), _if_then_else(or_(False, True), 0, _if_then_else(False, zeros_diff_cols, 3)), _if_then_else(or_(True, True), _if_then_else(False, 1, compare_blocks_rows), _if_then_else(True, 3, max_col_clue))), _if_then_else(ge(_if_then_else(True, zeros_diff_rows, zeros_diff_cols), _if_then_else(True, max_row_clue, 4)), _if_then_else(ge(ones_diff_cols, 4), _if_then_else(False, max_row_clue, 3), _if_then_else(True, max_row_clue, ones_diff_cols)), _if_then_else(le(max_col_clue, compare_blocks_rows), _if_then_else(True, 3, 3), _if_then_else(True, 3, zeros_diff_rows))))
or_(and_(True, False), le(_if_then_else(False, ones_diff_cols, zeros_diff_rows), _if_then_else(True, zeros_diff_cols, _if_then_else(or_(True, False), _if_then_else(True, 1, 0), _if_then_else(True, compare_blocks_rows, compare_blocks_cols)))))
or_(le(_if_then_else(True, 1, _if_then_else(False, compare_blocks_cols, 3)), _if_then_else(and_(True, False), _if_then_else(False, 1, 3), 1)), or_(le(zeros_diff_cols, max_col_clue), or_(False, ge(1, 4))))
VAL TREES:
mul(add(add(ones_diff_cols, ones_diff_cols), add(ones_diff_rows, ones_diff_cols)), add(mul(ones_diff_cols, ones_diff_cols), mul(compare_blocks_cols, ones_diff_cols)))
mul(mul(add(mul(add(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_rows, zeros_diff_cols)), add(mul(ones_diff_rows, zeros_diff_rows), mul(zeros_diff_cols, zeros_diff_cols))), add(add(add(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, zeros_diff_rows)), mul(mul(ones_diff_rows, ones_diff_cols), add(compare_blocks_rows, compare_blocks_cols)))), mul(add(mul(mul(ones_diff_cols, ones_diff_rows), add(zeros_diff_rows, ones_diff_cols)), add(add(compare_blocks_cols, zeros_diff_rows), mul(ones_diff_rows, compare_blocks_cols))), add(compare_blocks_rows, mul(add(compare_blocks_cols, ones_diff_cols), add(ones_diff_rows, compare_blocks_cols)))))
mul(add(mul(add(ones_diff_cols, compare_blocks_rows), mul(add(add(ones_diff_rows, ones_diff_rows), mul(ones_diff_cols, zeros_diff_rows)), compare_blocks_cols)), mul(add(compare_blocks_cols, ones_diff_rows), add(zeros_diff_cols, compare_blocks_cols))), mul(add(add(ones_diff_cols, zeros_diff_cols), add(ones_diff_rows, ones_diff_cols)), mul(mul(ones_diff_rows, zeros_diff_rows), mul(zeros_diff_rows, zeros_diff_cols))))
mul(add(mul(zeros_diff_rows, compare_blocks_cols), add(ones_diff_rows, ones_diff_rows)), add(add(compare_blocks_rows, compare_blocks_rows), mul(compare_blocks_cols, compare_blocks_cols)))
mul(add(add(add(mul(ones_diff_cols, ones_diff_cols), add(compare_blocks_cols, zeros_diff_cols)), mul(add(compare_blocks_cols, zeros_diff_rows), mul(zeros_diff_rows, ones_diff_rows))), add(add(mul(zeros_diff_cols, compare_blocks_rows), add(compare_blocks_rows, compare_blocks_rows)), add(add(compare_blocks_cols, zeros_diff_cols), mul(compare_blocks_rows, compare_blocks_cols)))), add(mul(mul(mul(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_cols, ones_diff_cols)), mul(mul(zeros_diff_rows, zeros_diff_cols), mul(ones_diff_rows, ones_diff_cols))), mul(mul(add(ones_diff_rows, zeros_diff_rows), mul(ones_diff_rows, zeros_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(ones_diff_rows, zeros_diff_cols)))))
add(add(add(add(compare_blocks_cols, ones_diff_cols), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(compare_blocks_cols, ones_diff_rows), mul(ones_diff_rows, compare_blocks_rows))), mul(add(mul(zeros_diff_cols, compare_blocks_rows), mul(zeros_diff_rows, compare_blocks_cols)), mul(mul(zeros_diff_cols, zeros_diff_cols), add(ones_diff_rows, ones_diff_cols))))
COND TREES:
and_(True, and_(and_(True, True), and_(False, True)))
ge(_if_then_else(True, _if_then_else(False, max_row_clue, ones_diff_cols), _if_then_else(False, max_row_clue, max_row_clue)), _if_then_else(and_(False, True), _if_then_else(False, 1, ones_diff_cols), _if_then_else(True, 4, max_col_clue)))
and_(ge(_if_then_else(False, _if_then_else(False, ones_diff_rows, 4), ones_diff_cols), _if_then_else(False, max_col_clue, 4)), or_(False, ge(4, 2)))
le(_if_then_else(and_(False, False), ones_diff_cols, _if_then_else(True, 1, 2)), _if_then_else(and_(False, False), _if_then_else(False, 4, 2), _if_then_else(True, zeros_diff_cols, ones_diff_cols)))
or_(le(3, _if_then_else(True, 1, ones_diff_rows)), and_(or_(False, True), le(ones_diff_cols, zeros_diff_rows)))
VAL TREES:
add(mul(add(add(compare_blocks_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_cols))), add(mul(add(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_rows, zeros_diff_rows)), add(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_cols, ones_diff_cols))))
add(mul(mul(compare_blocks_rows, compare_blocks_cols), mul(ones_diff_rows, ones_diff_cols)), mul(mul(mul(compare_blocks_cols, ones_diff_rows), mul(ones_diff_cols, compare_blocks_rows)), add(zeros_diff_cols, compare_blocks_rows)))
mul(add(add(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols))), mul(mul(add(ones_diff_rows, ones_diff_cols), add(compare_blocks_cols, compare_blocks_cols)), mul(add(ones_diff_cols, ones_diff_cols), mul(mul(add(zeros_diff_rows, ones_diff_cols), add(ones_diff_rows, ones_diff_rows)), ones_diff_cols))))
mul(mul(add(compare_blocks_cols, zeros_diff_cols), mul(ones_diff_cols, compare_blocks_rows)), add(compare_blocks_cols, add(ones_diff_rows, ones_diff_cols)))
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(add(ones_diff_rows, ones_diff_rows), ones_diff_cols)), mul(add(zeros_diff_cols, zeros_diff_rows), mul(add(add(compare_blocks_cols, ones_diff_cols), zeros_diff_rows), zeros_diff_rows)))
mul(mul(add(zeros_diff_rows, ones_diff_cols), add(zeros_diff_cols, ones_diff_rows)), add(mul(ones_diff_rows, compare_blocks_cols), mul(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))))
COND TREES:
and_(or_(and_(True, True), and_(False, True)), and_(False, False))
ge(_if_then_else(and_(or_(True, and_(le(ones_diff_rows, zeros_diff_rows), le(ones_diff_cols, ones_diff_rows))), le(ones_diff_cols, ones_diff_rows)), _if_then_else(False, max_row_clue, 0), _if_then_else(False, max_row_clue, max_row_clue)), _if_then_else(and_(True, False), _if_then_else(False, ones_diff_rows, compare_blocks_cols), _if_then_else(True, 3, ones_diff_cols)))
and_(ge(_if_then_else(False, _if_then_else(True, max_row_clue, 4), 2), _if_then_else(False, max_col_clue, 4)), or_(and_(False, True), ge(2, 2)))
le(_if_then_else(True, compare_blocks_cols, ones_diff_rows), _if_then_else(ge(2, _if_then_else(False, compare_blocks_rows, max_row_clue)), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, zeros_diff_cols, ones_diff_cols)))
or_(ge(1, 4), and_(or_(False, True), le(compare_blocks_rows, zeros_diff_rows)))
VAL TREES:
add(mul(add(add(compare_blocks_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_cols))), add(mul(add(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_rows, zeros_diff_rows)), add(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_cols, ones_diff_cols))))
add(mul(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_rows, ones_diff_cols)), mul(mul(mul(compare_blocks_cols, ones_diff_rows), mul(ones_diff_cols, compare_blocks_rows)), add(zeros_diff_cols, compare_blocks_rows)))
mul(add(add(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols))), mul(mul(add(ones_diff_rows, ones_diff_cols), add(compare_blocks_cols, compare_blocks_cols)), mul(add(ones_diff_cols, ones_diff_cols), mul(compare_blocks_rows, ones_diff_cols))))
mul(mul(add(compare_blocks_cols, zeros_diff_cols), mul(ones_diff_cols, compare_blocks_rows)), add(mul(zeros_diff_rows, compare_blocks_rows), add(ones_diff_rows, ones_diff_cols)))
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(add(ones_diff_rows, ones_diff_rows), ones_diff_cols)), mul(add(zeros_diff_cols, zeros_diff_rows), mul(add(add(compare_blocks_cols, ones_diff_cols), zeros_diff_rows), zeros_diff_rows)))
mul(mul(add(zeros_diff_rows, ones_diff_cols), add(zeros_diff_cols, ones_diff_rows)), add(mul(ones_diff_rows, compare_blocks_cols), mul(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))))
COND TREES:
and_(or_(ge(max_col_clue, max_row_clue), and_(False, False)), and_(and_(True, False), and_(False, False)))
ge(0, _if_then_else(True, _if_then_else(and_(True, False), ones_diff_rows, compare_blocks_cols), _if_then_else(True, 3, ones_diff_cols)))
and_(ge(_if_then_else(False, 1, ones_diff_cols), _if_then_else(False, max_col_clue, 4)), or_(and_(False, True), ge(_if_then_else(ge(_if_then_else(False, max_col_clue, 1), _if_then_else(False, 2, max_row_clue)), 4, compare_blocks_rows), _if_then_else(True, 1, 4))))
le(_if_then_else(True, max_col_clue, ones_diff_rows), _if_then_else(or_(False, False), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, zeros_diff_cols, 0)))
or_(le(_if_then_else(False, 1, 3), _if_then_else(and_(True, False), _if_then_else(True, ones_diff_rows, compare_blocks_rows), _if_then_else(False, 4, zeros_diff_rows))), and_(le(ones_diff_cols, _if_then_else(le(_if_then_else(False, ones_diff_rows, max_row_clue), _if_then_else(False, zeros_diff_cols, 3)), _if_then_else(or_(True, True), _if_then_else(False, 4, 2), _if_then_else(True, max_col_clue, 1)), _if_then_else(or_(False, True), _if_then_else(False, ones_diff_rows, ones_diff_rows), _if_then_else(and_(ge(2, zeros_diff_cols), ge(max_row_clue, 1)), compare_blocks_rows, compare_blocks_cols)))), le(compare_blocks_rows, zeros_diff_rows)))
VAL TREES:
add(mul(add(add(compare_blocks_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(add(add(compare_blocks_cols, ones_diff_cols), mul(compare_blocks_cols, ones_diff_cols)), compare_blocks_cols))), add(mul(add(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_rows, zeros_diff_rows)), add(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_cols, ones_diff_cols))))
add(compare_blocks_rows, mul(mul(mul(compare_blocks_cols, ones_diff_rows), mul(ones_diff_cols, compare_blocks_rows)), add(zeros_diff_cols, compare_blocks_rows)))
add(zeros_diff_cols, compare_blocks_cols)
mul(mul(add(compare_blocks_cols, zeros_diff_cols), mul(ones_diff_cols, compare_blocks_rows)), add(mul(zeros_diff_rows, compare_blocks_rows), add(ones_diff_rows, ones_diff_cols)))
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(add(ones_diff_rows, ones_diff_rows), ones_diff_cols)), mul(add(mul(mul(ones_diff_rows, zeros_diff_rows), mul(ones_diff_rows, zeros_diff_cols)), zeros_diff_rows), mul(add(add(compare_blocks_cols, ones_diff_cols), zeros_diff_rows), zeros_diff_rows)))
mul(mul(add(zeros_diff_rows, ones_diff_cols), add(zeros_diff_cols, ones_diff_rows)), add(mul(ones_diff_rows, compare_blocks_cols), mul(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))))
COND TREES:
le(_if_then_else(le(compare_blocks_cols, zeros_diff_rows), _if_then_else(le(3, max_row_clue), _if_then_else(False, max_col_clue, compare_blocks_cols), _if_then_else(True, 2, 2)), _if_then_else(ge(max_col_clue, zeros_diff_rows), _if_then_else(True, 4, ones_diff_rows), _if_then_else(False, ones_diff_cols, zeros_diff_rows))), _if_then_else(ge(_if_then_else(False, _if_then_else(True, ones_diff_rows, 0), compare_blocks_rows), _if_then_else(le(compare_blocks_cols, compare_blocks_rows), _if_then_else(True, ones_diff_cols, 4), _if_then_else(True, zeros_diff_rows, zeros_diff_cols))), _if_then_else(le(compare_blocks_cols, compare_blocks_rows), _if_then_else(True, ones_diff_cols, 4), _if_then_else(True, zeros_diff_rows, zeros_diff_cols)), _if_then_else(or_(True, False), _if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(False, zeros_diff_rows, compare_blocks_cols))))
or_(and_(False, and_(True, True)), and_(or_(True, ge(_if_then_else(le(_if_then_else(True, zeros_diff_cols, 1), _if_then_else(False, 1, max_row_clue)), _if_then_else(and_(False, False), _if_then_else(True, ones_diff_cols, 1), _if_then_else(True, max_col_clue, 0)), _if_then_else(le(ones_diff_rows, ones_diff_rows), _if_then_else(True, compare_blocks_rows, 3), _if_then_else(True, 4, ones_diff_cols))), _if_then_else(and_(or_(True, False), or_(True, False)), _if_then_else(ge(ones_diff_rows, 2), _if_then_else(False, max_row_clue, 2), _if_then_else(False, 3, 0)), _if_then_else(and_(True, True), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(False, zeros_diff_cols, 2))))), or_(False, True)))
or_(le(zeros_diff_cols, zeros_diff_rows), and_(and_(le(1, max_row_clue), True), and_(and_(and_(or_(False, False), or_(False, False)), True), ge(zeros_diff_rows, 3))))
or_(or_(and_(True, False), and_(True, False)), or_(and_(False, False), False))
ge(_if_then_else(le(_if_then_else(ge(ones_diff_rows, zeros_diff_rows), _if_then_else(False, 3, 1), _if_then_else(True, 4, zeros_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, zeros_diff_rows), _if_then_else(False, max_col_clue, zeros_diff_rows))), _if_then_else(or_(and_(False, False), or_(True, True)), _if_then_else(or_(True, True), _if_then_else(True, 2, ones_diff_rows), _if_then_else(True, max_row_clue, 4)), _if_then_else(and_(True, or_(False, True)), _if_then_else(True, ones_diff_rows, compare_blocks_rows), _if_then_else(False, 4, zeros_diff_rows))), _if_then_else(le(_if_then_else(False, ones_diff_rows, max_row_clue), 3), _if_then_else(or_(True, True), _if_then_else(False, 4, 2), _if_then_else(True, ones_diff_rows, 1)), _if_then_else(or_(False, True), _if_then_else(False, ones_diff_rows, ones_diff_rows), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)))), _if_then_else(le(_if_then_else(or_(False, True), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, 3, ones_diff_rows)), _if_then_else(ge(zeros_diff_rows, 3), _if_then_else(False, max_col_clue, ones_diff_rows), _if_then_else(True, ones_diff_rows, zeros_diff_cols))), _if_then_else(le(_if_then_else(True, zeros_diff_rows, compare_blocks_rows), _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(le(compare_blocks_rows, zeros_diff_cols), _if_then_else(True, 0, 4), _if_then_else(False, zeros_diff_rows, max_col_clue)), _if_then_else(le(3, 1), _if_then_else(True, zeros_diff_cols, max_col_clue), _if_then_else(False, 2, zeros_diff_rows))), _if_then_else(and_(or_(True, True), or_(False, False)), _if_then_else(le(2, ones_diff_cols), _if_then_else(False, 0, ones_diff_rows), _if_then_else(True, ones_diff_rows, 0)), _if_then_else(ge(3, zeros_diff_cols), _if_then_else(False, 4, ones_diff_rows), _if_then_else(False, 2, zeros_diff_rows)))))
VAL TREES:
add(add(add(zeros_diff_cols, mul(compare_blocks_rows, compare_blocks_cols)), add(mul(add(compare_blocks_cols, compare_blocks_rows), zeros_diff_rows), mul(mul(zeros_diff_rows, compare_blocks_rows), zeros_diff_cols))), mul(add(ones_diff_rows, zeros_diff_cols), add(compare_blocks_cols, zeros_diff_rows)))
mul(mul(mul(ones_diff_cols, zeros_diff_rows), add(ones_diff_rows, add(ones_diff_rows, ones_diff_cols))), mul(add(compare_blocks_cols, ones_diff_rows), add(ones_diff_rows, compare_blocks_cols)))
add(mul(mul(add(add(compare_blocks_rows, compare_blocks_cols), zeros_diff_rows), add(add(ones_diff_cols, compare_blocks_cols), ones_diff_cols)), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_rows), add(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_rows)), compare_blocks_rows)))
add(add(add(zeros_diff_cols, ones_diff_cols), add(zeros_diff_rows, compare_blocks_rows)), mul(mul(ones_diff_cols, ones_diff_cols), mul(zeros_diff_rows, ones_diff_rows)))
mul(add(mul(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_rows)), add(mul(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, ones_diff_cols)))
add(mul(mul(ones_diff_rows, ones_diff_cols), mul(compare_blocks_rows, ones_diff_rows)), mul(mul(mul(zeros_diff_cols, compare_blocks_rows), ones_diff_rows), add(mul(ones_diff_cols, zeros_diff_cols), zeros_diff_cols)))
COND TREES:
le(_if_then_else(and_(ge(0, zeros_diff_cols), and_(False, False)), _if_then_else(le(3, max_row_clue), _if_then_else(False, max_col_clue, compare_blocks_cols), _if_then_else(True, 2, 2)), _if_then_else(ge(max_col_clue, zeros_diff_rows), _if_then_else(True, 4, ones_diff_rows), _if_then_else(False, ones_diff_cols, zeros_diff_rows))), _if_then_else(ge(_if_then_else(False, ones_diff_rows, compare_blocks_rows), _if_then_else(False, ones_diff_cols, compare_blocks_cols)), _if_then_else(le(compare_blocks_cols, compare_blocks_rows), _if_then_else(True, ones_diff_cols, 4), _if_then_else(True, zeros_diff_rows, zeros_diff_cols)), _if_then_else(or_(True, False), _if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(False, zeros_diff_rows, compare_blocks_cols))))
or_(and_(and_(True, False), and_(True, True)), and_(or_(True, False), or_(False, True)))
or_(ge(_if_then_else(True, 3, 4), _if_then_else(False, 2, max_row_clue)), and_(and_(or_(True, True), True), and_(True, False)))
or_(le(_if_then_else(le(max_row_clue, compare_blocks_rows), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(False, zeros_diff_cols, 0)), _if_then_else(True, 0, ones_diff_cols)), or_(and_(False, False), or_(False, False)))
ge(_if_then_else(le(_if_then_else(ge(ones_diff_rows, zeros_diff_rows), _if_then_else(False, 3, 1), _if_then_else(True, 4, zeros_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, zeros_diff_rows), _if_then_else(False, max_col_clue, zeros_diff_rows))), _if_then_else(or_(and_(False, False), or_(True, True)), _if_then_else(or_(True, True), _if_then_else(True, 2, ones_diff_rows), _if_then_else(True, max_row_clue, 4)), _if_then_else(and_(True, False), _if_then_else(True, ones_diff_rows, compare_blocks_rows), _if_then_else(False, 4, zeros_diff_rows))), _if_then_else(le(_if_then_else(False, ones_diff_rows, max_row_clue), _if_then_else(False, zeros_diff_cols, 3)), _if_then_else(or_(True, True), _if_then_else(False, 4, 2), _if_then_else(True, max_col_clue, 1)), _if_then_else(or_(False, True), _if_then_else(False, ones_diff_rows, ones_diff_rows), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)))), _if_then_else(le(_if_then_else(or_(False, True), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, 3, ones_diff_rows)), _if_then_else(ge(zeros_diff_rows, 3), _if_then_else(False, max_col_clue, ones_diff_rows), _if_then_else(True, ones_diff_rows, zeros_diff_cols))), _if_then_else(le(_if_then_else(or_(False, False), _if_then_else(False, _if_then_else(False, compare_blocks_cols, 0), 0), _if_then_else(True, ones_diff_cols, zeros_diff_cols)), _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(le(compare_blocks_rows, zeros_diff_cols), _if_then_else(True, 0, 4), _if_then_else(False, zeros_diff_rows, max_col_clue)), _if_then_else(le(3, 1), _if_then_else(True, zeros_diff_cols, max_col_clue), _if_then_else(False, 2, zeros_diff_rows))), _if_then_else(and_(or_(True, True), or_(False, False)), _if_then_else(le(2, ones_diff_cols), _if_then_else(False, 0, ones_diff_rows), _if_then_else(True, 1, 0)), _if_then_else(ge(3, zeros_diff_cols), _if_then_else(False, 4, ones_diff_rows), _if_then_else(False, 2, zeros_diff_rows)))))
VAL TREES:
add(add(add(zeros_diff_cols, mul(compare_blocks_rows, compare_blocks_cols)), add(mul(add(compare_blocks_cols, compare_blocks_rows), zeros_diff_rows), mul(mul(zeros_diff_rows, compare_blocks_rows), compare_blocks_rows))), mul(add(ones_diff_rows, zeros_diff_cols), add(compare_blocks_cols, zeros_diff_rows)))
mul(add(compare_blocks_cols, ones_diff_cols), mul(compare_blocks_cols, zeros_diff_cols))
add(mul(mul(add(add(compare_blocks_rows, compare_blocks_cols), zeros_diff_rows), add(add(ones_diff_cols, compare_blocks_cols), ones_diff_cols)), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_rows), add(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, add(compare_blocks_rows, compare_blocks_cols))), compare_blocks_rows)))
add(add(add(zeros_diff_cols, ones_diff_cols), add(zeros_diff_rows, compare_blocks_rows)), mul(mul(ones_diff_cols, ones_diff_cols), mul(zeros_diff_rows, ones_diff_rows)))
mul(add(mul(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, zeros_diff_cols)), add(mul(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, ones_diff_cols)))
add(mul(mul(ones_diff_rows, ones_diff_cols), add(add(zeros_diff_cols, compare_blocks_rows), add(ones_diff_rows, compare_blocks_cols))), mul(mul(mul(zeros_diff_cols, compare_blocks_rows), ones_diff_rows), add(mul(ones_diff_cols, zeros_diff_cols), zeros_diff_cols)))
COND TREES:
le(_if_then_else(le(_if_then_else(and_(True, True), _if_then_else(False, 0, compare_blocks_rows), _if_then_else(False, 3, ones_diff_cols)), _if_then_else(or_(True, False), _if_then_else(False, ones_diff_rows, 0), _if_then_else(False, 0, 4))), _if_then_else(ge(_if_then_else(True, max_row_clue, ones_diff_cols), _if_then_else(or_(True, False), 4, max_col_clue)), _if_then_else(or_(True, False), _if_then_else(True, ones_diff_rows, 1), _if_then_else(True, compare_blocks_rows, 1)), _if_then_else(or_(False, True), _if_then_else(True, 2, 4), _if_then_else(True, 2, 4))), _if_then_else(ge(_if_then_else(True, zeros_diff_rows, max_col_clue), _if_then_else(True, ones_diff_rows, zeros_diff_rows)), _if_then_else(ge(zeros_diff_rows, max_row_clue), _if_then_else(False, 2, compare_blocks_cols), _if_then_else(False, max_col_clue, 0)), _if_then_else(le(ones_diff_rows, max_col_clue), _if_then_else(False, 3, max_row_clue), _if_then_else(False, 4, zeros_diff_cols)))), _if_then_else(and_(or_(or_(True, True), le(0, zeros_diff_cols)), or_(ge(ones_diff_cols, 1), ge(0, ones_diff_cols))), _if_then_else(ge(_if_then_else(False, max_row_clue, zeros_diff_rows), _if_then_else(True, 2, 0)), _if_then_else(le(3, ones_diff_cols), _if_then_else(False, zeros_diff_cols, compare_blocks_cols), _if_then_else(False, 0, zeros_diff_rows)), _if_then_else(ge(1, compare_blocks_cols), _if_then_else(True, ones_diff_rows, compare_blocks_cols), _if_then_else(False, 3, 3))), _if_then_else(or_(le(_if_then_else(le(0, zeros_diff_rows), _if_then_else(False, 1, max_col_clue), _if_then_else(False, 4, ones_diff_rows)), 2), or_(False, False)), _if_then_else(ge(2, max_row_clue), _if_then_else(False, zeros_diff_cols, compare_blocks_rows), _if_then_else(False, 1, 0)), _if_then_else(or_(True, True), _if_then_else(False, zeros_diff_rows, ones_diff_cols), _if_then_else(True, zeros_diff_cols, zeros_diff_cols)))))
le(_if_then_else(ge(_if_then_else(le(_if_then_else(True, zeros_diff_cols, 1), _if_then_else(False, 1, max_row_clue)), _if_then_else(and_(False, False), _if_then_else(True, ones_diff_cols, 1), _if_then_else(True, max_col_clue, 0)), _if_then_else(le(ones_diff_rows, ones_diff_rows), _if_then_else(False, 1, ones_diff_cols), _if_then_else(True, 4, ones_diff_cols))), _if_then_else(and_(or_(True, False), or_(True, False)), _if_then_else(ge(ones_diff_rows, 2), _if_then_else(False, max_row_clue, 2), _if_then_else(False, 3, 0)), _if_then_else(and_(True, True), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(False, zeros_diff_cols, 2)))), 2, zeros_diff_cols), _if_then_else(le(_if_then_else(True, max_col_clue, ones_diff_rows), _if_then_else(True, max_row_clue, ones_diff_cols)), _if_then_else(False, _if_then_else(False, zeros_diff_cols, max_col_clue), _if_then_else(False, max_row_clue, compare_blocks_rows)), _if_then_else(False, ones_diff_cols, _if_then_else(False, 0, ones_diff_rows))))
ge(_if_then_else(le(_if_then_else(True, max_row_clue, 3), _if_then_else(True, ones_diff_rows, zeros_diff_cols)), _if_then_else(le(3, max_row_clue), _if_then_else(False, max_row_clue, ones_diff_cols), _if_then_else(False, 2, ones_diff_cols)), _if_then_else(ge(zeros_diff_rows, zeros_diff_cols), _if_then_else(False, 1, 2), _if_then_else(True, max_col_clue, compare_blocks_cols))), _if_then_else(or_(False, False), _if_then_else(le(ones_diff_cols, max_col_clue), _if_then_else(True, zeros_diff_rows, 1), _if_then_else(False, max_row_clue, ones_diff_rows)), _if_then_else(le(zeros_diff_rows, 3), _if_then_else(True, compare_blocks_rows, 0), _if_then_else(True, 0, zeros_diff_cols))))
or_(or_(and_(ge(4, ones_diff_cols), le(ones_diff_cols, 2)), or_(or_(False, True), or_(True, False))), ge(_if_then_else(le(_if_then_else(False, 0, zeros_diff_rows), zeros_diff_rows), _if_then_else(False, ones_diff_cols, max_col_clue), _if_then_else(True, zeros_diff_rows, zeros_diff_rows)), _if_then_else(or_(True, ge(_if_then_else(False, 1, 1), 4)), _if_then_else(True, max_col_clue, ones_diff_rows), _if_then_else(True, max_col_clue, zeros_diff_rows))))
ge(_if_then_else(or_(False, and_(True, or_(False, False))), _if_then_else(True, _if_then_else(True, 0, compare_blocks_cols), _if_then_else(True, 0, max_col_clue)), _if_then_else(False, _if_then_else(True, ones_diff_rows, zeros_diff_cols), zeros_diff_cols)), _if_then_else(le(compare_blocks_cols, 2), _if_then_else(True, _if_then_else(True, compare_blocks_rows, max_row_clue), max_col_clue), _if_then_else(or_(True, True), compare_blocks_rows, 3)))
VAL TREES:
add(add(add(compare_blocks_cols, zeros_diff_cols), mul(compare_blocks_cols, ones_diff_rows)), mul(add(ones_diff_rows, zeros_diff_cols), add(zeros_diff_rows, compare_blocks_cols)))
mul(add(mul(compare_blocks_rows, zeros_diff_cols), add(compare_blocks_cols, zeros_diff_cols)), mul(mul(mul(ones_diff_rows, add(compare_blocks_cols, zeros_diff_rows)), compare_blocks_cols), add(ones_diff_cols, compare_blocks_cols)))
mul(add(add(ones_diff_cols, compare_blocks_rows), mul(zeros_diff_rows, zeros_diff_rows)), add(add(compare_blocks_cols, zeros_diff_cols), add(zeros_diff_rows, add(add(zeros_diff_cols, compare_blocks_cols), add(ones_diff_rows, zeros_diff_cols)))))
add(mul(mul(compare_blocks_cols, compare_blocks_cols), mul(compare_blocks_rows, mul(compare_blocks_rows, zeros_diff_rows))), mul(add(ones_diff_rows, ones_diff_cols), mul(mul(zeros_diff_cols, zeros_diff_cols), zeros_diff_cols)))
add(add(add(add(zeros_diff_cols, compare_blocks_cols), mul(ones_diff_cols, ones_diff_rows)), mul(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_cols, zeros_diff_rows))), mul(add(add(ones_diff_cols, zeros_diff_cols), mul(ones_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_rows, zeros_diff_rows), mul(ones_diff_rows, zeros_diff_rows))))
mul(add(add(mul(zeros_diff_rows, zeros_diff_cols), ones_diff_cols), mul(zeros_diff_rows, ones_diff_cols)), add(mul(compare_blocks_rows, ones_diff_rows), mul(ones_diff_cols, zeros_diff_cols)))
COND TREES:
le(_if_then_else(le(compare_blocks_cols, zeros_diff_rows), _if_then_else(le(3, max_row_clue), _if_then_else(False, max_col_clue, compare_blocks_cols), _if_then_else(True, 2, 2)), _if_then_else(ge(max_col_clue, zeros_diff_rows), _if_then_else(True, 4, ones_diff_rows), _if_then_else(False, ones_diff_cols, zeros_diff_rows))), _if_then_else(ge(_if_then_else(False, _if_then_else(True, ones_diff_rows, 0), compare_blocks_rows), _if_then_else(le(compare_blocks_cols, compare_blocks_rows), _if_then_else(False, ones_diff_cols, 4), _if_then_else(True, zeros_diff_rows, zeros_diff_cols))), _if_then_else(le(compare_blocks_cols, compare_blocks_rows), _if_then_else(True, ones_diff_cols, 4), _if_then_else(True, zeros_diff_rows, zeros_diff_cols)), _if_then_else(or_(True, False), _if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(False, zeros_diff_rows, compare_blocks_cols))))
or_(and_(False, and_(True, True)), and_(or_(True, True), or_(False, True)))
or_(le(zeros_diff_cols, zeros_diff_rows), and_(and_(le(1, max_row_clue), True), and_(and_(and_(or_(False, False), or_(False, False)), True), ge(zeros_diff_rows, 3))))
or_(or_(and_(True, False), and_(True, False)), and_(True, le(max_row_clue, 3)))
ge(_if_then_else(le(_if_then_else(ge(ones_diff_rows, zeros_diff_rows), _if_then_else(False, 3, 1), _if_then_else(True, 4, zeros_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, zeros_diff_rows), _if_then_else(False, max_col_clue, zeros_diff_rows))), _if_then_else(or_(and_(False, False), or_(True, True)), _if_then_else(or_(True, True), _if_then_else(True, 2, ones_diff_rows), _if_then_else(True, max_row_clue, 4)), _if_then_else(and_(True, or_(False, True)), _if_then_else(True, ones_diff_rows, compare_blocks_rows), _if_then_else(False, 4, zeros_diff_rows))), _if_then_else(le(_if_then_else(False, ones_diff_rows, max_row_clue), _if_then_else(False, zeros_diff_cols, 3)), _if_then_else(or_(True, True), _if_then_else(False, 4, 2), _if_then_else(True, ones_diff_rows, 1)), _if_then_else(or_(False, True), _if_then_else(False, ones_diff_rows, ones_diff_rows), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)))), _if_then_else(le(_if_then_else(or_(False, True), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, 3, ones_diff_rows)), _if_then_else(ge(zeros_diff_rows, 3), _if_then_else(False, max_col_clue, ones_diff_rows), _if_then_else(True, ones_diff_rows, zeros_diff_cols))), _if_then_else(le(_if_then_else(True, zeros_diff_rows, compare_blocks_rows), _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(le(compare_blocks_rows, zeros_diff_cols), _if_then_else(True, 0, 4), _if_then_else(False, zeros_diff_rows, max_col_clue)), _if_then_else(le(3, 1), _if_then_else(True, zeros_diff_cols, max_col_clue), _if_then_else(False, 2, _if_then_else(or_(False, False), _if_then_else(True, max_col_clue, zeros_diff_rows), _if_then_else(True, compare_blocks_cols, ones_diff_cols))))), _if_then_else(and_(or_(True, True), or_(False, False)), _if_then_else(le(2, ones_diff_cols), _if_then_else(False, 0, ones_diff_rows), _if_then_else(True, ones_diff_rows, 0)), _if_then_else(ge(3, zeros_diff_cols), _if_then_else(False, 4, ones_diff_rows), _if_then_else(False, 2, zeros_diff_rows)))))
VAL TREES:
add(add(add(zeros_diff_cols, mul(compare_blocks_rows, compare_blocks_cols)), add(mul(add(compare_blocks_cols, compare_blocks_rows), zeros_diff_rows), mul(mul(zeros_diff_rows, compare_blocks_rows), zeros_diff_cols))), mul(add(ones_diff_rows, zeros_diff_cols), add(compare_blocks_cols, zeros_diff_rows)))
mul(mul(mul(ones_diff_cols, zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), mul(add(compare_blocks_cols, ones_diff_rows), add(ones_diff_rows, compare_blocks_cols)))
add(mul(mul(add(add(compare_blocks_rows, compare_blocks_cols), zeros_diff_rows), add(add(ones_diff_cols, compare_blocks_cols), ones_diff_cols)), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_rows), add(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_rows)), compare_blocks_rows)))
add(add(add(zeros_diff_cols, ones_diff_cols), add(zeros_diff_rows, compare_blocks_rows)), mul(mul(ones_diff_cols, ones_diff_cols), mul(zeros_diff_rows, ones_diff_rows)))
mul(add(mul(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, zeros_diff_cols)), add(mul(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, ones_diff_cols)))
add(mul(mul(ones_diff_rows, ones_diff_cols), mul(compare_blocks_rows, ones_diff_rows)), mul(mul(mul(zeros_diff_cols, compare_blocks_rows), ones_diff_rows), add(mul(ones_diff_cols, zeros_diff_cols), zeros_diff_cols)))
COND TREES:
and_(or_(or_(True, False), True), and_(False, and_(or_(and_(True, True), and_(False, True)), False)))
ge(0, zeros_diff_cols)
and_(ge(_if_then_else(False, 1, ones_diff_cols), _if_then_else(or_(le(compare_blocks_cols, zeros_diff_rows), le(3, 4)), max_col_clue, 4)), or_(False, ge(4, 2)))
le(_if_then_else(False, max_col_clue, 4), _if_then_else(and_(True, False), _if_then_else(and_(False, le(4, 0)), _if_then_else(False, 1, 2), compare_blocks_rows), _if_then_else(True, zeros_diff_cols, ones_diff_cols)))
or_(ge(4, _if_then_else(False, _if_then_else(False, 0, 3), max_col_clue)), and_(le(ones_diff_cols, _if_then_else(le(compare_blocks_cols, max_row_clue), _if_then_else(False, 4, ones_diff_cols), _if_then_else(False, 1, zeros_diff_rows))), or_(True, True)))
VAL TREES:
add(mul(add(add(compare_blocks_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_cols))), add(mul(add(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_rows, zeros_diff_rows)), add(mul(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_rows, zeros_diff_cols)), mul(ones_diff_cols, ones_diff_cols))))
add(mul(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_rows, ones_diff_cols)), mul(mul(mul(compare_blocks_cols, ones_diff_rows), mul(ones_diff_cols, compare_blocks_rows)), add(add(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_cols, zeros_diff_rows))))
mul(add(add(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols))), mul(mul(add(ones_diff_rows, ones_diff_cols), add(compare_blocks_cols, compare_blocks_cols)), mul(add(ones_diff_cols, ones_diff_cols), mul(compare_blocks_rows, ones_diff_cols))))
mul(mul(add(mul(zeros_diff_cols, zeros_diff_rows), zeros_diff_cols), mul(ones_diff_cols, compare_blocks_rows)), add(mul(zeros_diff_rows, compare_blocks_rows), add(ones_diff_rows, ones_diff_cols)))
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(add(ones_diff_rows, ones_diff_rows), ones_diff_cols)), mul(add(zeros_diff_cols, zeros_diff_rows), mul(add(add(compare_blocks_cols, ones_diff_cols), zeros_diff_rows), zeros_diff_rows)))
mul(mul(add(zeros_diff_rows, ones_diff_cols), add(zeros_diff_cols, ones_diff_rows)), add(mul(ones_diff_rows, compare_blocks_cols), mul(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))))
COND TREES:
False
le(_if_then_else(or_(True, False), _if_then_else(False, _if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(True, zeros_diff_cols, ones_diff_cols)), _if_then_else(True, 4, 3)), _if_then_else(and_(le(ones_diff_rows, zeros_diff_rows), le(ones_diff_cols, ones_diff_rows)), _if_then_else(True, 0, compare_blocks_cols), _if_then_else(ge(2, max_row_clue), 4, _if_then_else(False, compare_blocks_cols, 0))))
le(_if_then_else(ge(4, 2), _if_then_else(False, _if_then_else(or_(False, True), 3, ones_diff_cols), 2), _if_then_else(ge(_if_then_else(False, zeros_diff_rows, 4), _if_then_else(True, 4, 1)), zeros_diff_cols, max_row_clue)), ones_diff_rows)
le(_if_then_else(False, _if_then_else(False, compare_blocks_rows, max_row_clue), 0), _if_then_else(le(_if_then_else(False, ones_diff_cols, ones_diff_cols), _if_then_else(False, max_col_clue, max_col_clue)), _if_then_else(and_(False, False), _if_then_else(False, 1, 1), _if_then_else(True, compare_blocks_rows, max_row_clue)), _if_then_else(and_(True, False), _if_then_else(True, compare_blocks_cols, ones_diff_rows), _if_then_else(True, compare_blocks_cols, zeros_diff_cols))))
and_(and_(le(_if_then_else(le(compare_blocks_cols, 3), 1, 0), _if_then_else(True, _if_then_else(False, ones_diff_rows, zeros_diff_cols), compare_blocks_cols)), and_(True, or_(False, False))), or_(le(max_col_clue, _if_then_else(True, 4, max_col_clue)), le(_if_then_else(ge(4, compare_blocks_rows), _if_then_else(False, compare_blocks_rows, 3), _if_then_else(False, _if_then_else(False, ones_diff_cols, _if_then_else(True, 4, zeros_diff_cols)), _if_then_else(True, _if_then_else(True, ones_diff_rows, ones_diff_cols), _if_then_else(True, 4, 2)))), max_row_clue)))
VAL TREES:
mul(mul(mul(add(ones_diff_rows, ones_diff_rows), compare_blocks_rows), mul(ones_diff_rows, compare_blocks_cols)), add(mul(zeros_diff_rows, compare_blocks_rows), add(ones_diff_rows, compare_blocks_rows)))
mul(add(mul(mul(mul(compare_blocks_rows, zeros_diff_cols), add(compare_blocks_rows, ones_diff_rows)), add(mul(ones_diff_cols, zeros_diff_cols), add(compare_blocks_rows, zeros_diff_rows))), add(mul(mul(ones_diff_rows, zeros_diff_cols), mul(zeros_diff_cols, ones_diff_rows)), add(mul(zeros_diff_rows, ones_diff_rows), add(ones_diff_cols, zeros_diff_rows)))), mul(add(add(mul(ones_diff_rows, ones_diff_rows), add(compare_blocks_rows, zeros_diff_rows)), add(mul(compare_blocks_cols, zeros_diff_cols), mul(zeros_diff_rows, compare_blocks_cols))), mul(mul(mul(zeros_diff_cols, ones_diff_cols), add(ones_diff_rows, ones_diff_rows)), add(add(compare_blocks_cols, compare_blocks_rows), add(zeros_diff_cols, compare_blocks_cols)))))
mul(mul(add(compare_blocks_cols, zeros_diff_cols), mul(add(zeros_diff_cols, ones_diff_rows), add(zeros_diff_rows, zeros_diff_cols))), mul(mul(ones_diff_rows, compare_blocks_rows), add(compare_blocks_cols, zeros_diff_cols)))
add(mul(add(add(ones_diff_cols, compare_blocks_cols), add(add(ones_diff_cols, compare_blocks_cols), ones_diff_cols)), add(mul(zeros_diff_rows, ones_diff_cols), add(ones_diff_cols, compare_blocks_cols))), mul(mul(add(zeros_diff_cols, ones_diff_cols), add(compare_blocks_cols, zeros_diff_cols)), add(add(zeros_diff_cols, ones_diff_rows), add(compare_blocks_cols, compare_blocks_cols))))
add(add(mul(zeros_diff_cols, compare_blocks_cols), mul(compare_blocks_rows, ones_diff_cols)), add(mul(compare_blocks_rows, ones_diff_rows), add(ones_diff_cols, ones_diff_cols)))
add(add(mul(mul(compare_blocks_rows, zeros_diff_cols), add(compare_blocks_cols, compare_blocks_rows)), add(add(ones_diff_cols, zeros_diff_cols), add(zeros_diff_cols, zeros_diff_cols))), mul(add(mul(ones_diff_cols, zeros_diff_rows), add(zeros_diff_cols, compare_blocks_cols)), add(mul(ones_diff_rows, ones_diff_rows), add(compare_blocks_rows, zeros_diff_rows))))
COND TREES:
le(_if_then_else(le(compare_blocks_cols, zeros_diff_rows), _if_then_else(le(3, max_row_clue), _if_then_else(False, max_col_clue, compare_blocks_cols), _if_then_else(True, 2, 2)), _if_then_else(ge(max_col_clue, zeros_diff_rows), _if_then_else(True, 4, ones_diff_rows), _if_then_else(False, ones_diff_cols, zeros_diff_rows))), _if_then_else(ge(_if_then_else(False, _if_then_else(True, ones_diff_rows, 0), compare_blocks_rows), _if_then_else(le(compare_blocks_cols, compare_blocks_rows), _if_then_else(True, ones_diff_cols, 4), _if_then_else(True, zeros_diff_rows, zeros_diff_cols))), _if_then_else(le(compare_blocks_cols, compare_blocks_rows), _if_then_else(True, ones_diff_cols, 4), _if_then_else(True, zeros_diff_rows, zeros_diff_cols)), _if_then_else(or_(True, False), _if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(False, zeros_diff_rows, compare_blocks_cols))))
or_(and_(False, and_(True, True)), and_(or_(True, ge(_if_then_else(le(_if_then_else(True, zeros_diff_cols, 1), _if_then_else(False, 1, max_row_clue)), _if_then_else(and_(False, False), _if_then_else(True, ones_diff_cols, 1), _if_then_else(True, max_col_clue, 0)), _if_then_else(le(ones_diff_rows, ones_diff_rows), _if_then_else(True, compare_blocks_rows, 3), _if_then_else(True, 4, ones_diff_cols))), _if_then_else(and_(or_(True, False), or_(True, False)), _if_then_else(ge(ones_diff_rows, 2), _if_then_else(False, max_row_clue, 2), _if_then_else(False, 3, 0)), _if_then_else(and_(True, True), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(False, zeros_diff_cols, 2))))), or_(False, True)))
or_(le(zeros_diff_cols, zeros_diff_rows), and_(and_(le(1, max_row_clue), True), and_(and_(and_(or_(False, False), or_(False, False)), True), ge(zeros_diff_rows, 3))))
or_(or_(and_(True, False), and_(True, False)), or_(and_(False, False), False))
ge(_if_then_else(le(_if_then_else(ge(ones_diff_rows, zeros_diff_rows), _if_then_else(False, 3, 1), _if_then_else(True, 4, zeros_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, zeros_diff_rows), _if_then_else(False, max_col_clue, zeros_diff_rows))), _if_then_else(or_(and_(False, False), or_(True, True)), _if_then_else(or_(True, True), _if_then_else(True, 2, ones_diff_rows), _if_then_else(True, max_row_clue, 4)), _if_then_else(and_(True, or_(False, True)), _if_then_else(True, ones_diff_rows, compare_blocks_rows), _if_then_else(False, 4, zeros_diff_rows))), _if_then_else(le(_if_then_else(False, ones_diff_rows, max_row_clue), 3), _if_then_else(or_(True, True), _if_then_else(False, 4, 2), _if_then_else(True, ones_diff_rows, 1)), _if_then_else(or_(False, True), _if_then_else(False, ones_diff_rows, ones_diff_rows), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)))), _if_then_else(le(_if_then_else(or_(False, True), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, 3, ones_diff_rows)), _if_then_else(ge(zeros_diff_rows, 3), _if_then_else(False, max_col_clue, ones_diff_rows), _if_then_else(True, ones_diff_rows, zeros_diff_cols))), _if_then_else(le(_if_then_else(True, zeros_diff_rows, compare_blocks_rows), _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(le(compare_blocks_rows, zeros_diff_cols), _if_then_else(True, 0, 4), _if_then_else(False, zeros_diff_rows, max_col_clue)), _if_then_else(le(3, 1), _if_then_else(True, zeros_diff_cols, max_col_clue), _if_then_else(False, 2, zeros_diff_rows))), _if_then_else(and_(or_(True, True), or_(False, False)), _if_then_else(le(2, ones_diff_cols), _if_then_else(False, 0, ones_diff_rows), _if_then_else(True, ones_diff_rows, 0)), _if_then_else(ge(3, zeros_diff_cols), _if_then_else(False, 4, ones_diff_rows), _if_then_else(False, 2, zeros_diff_rows)))))
VAL TREES:
add(add(add(zeros_diff_cols, mul(compare_blocks_rows, compare_blocks_cols)), add(mul(add(compare_blocks_cols, compare_blocks_rows), zeros_diff_rows), mul(mul(zeros_diff_rows, compare_blocks_rows), zeros_diff_cols))), mul(add(ones_diff_rows, zeros_diff_cols), add(compare_blocks_cols, zeros_diff_rows)))
mul(mul(mul(ones_diff_cols, zeros_diff_rows), add(ones_diff_rows, add(ones_diff_rows, ones_diff_cols))), mul(add(compare_blocks_cols, ones_diff_rows), add(ones_diff_rows, compare_blocks_cols)))
add(mul(mul(add(add(compare_blocks_rows, compare_blocks_cols), zeros_diff_rows), add(add(ones_diff_cols, compare_blocks_cols), ones_diff_cols)), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_rows), add(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_rows)), compare_blocks_rows)))
add(add(add(zeros_diff_cols, ones_diff_cols), add(zeros_diff_rows, compare_blocks_rows)), mul(mul(ones_diff_cols, ones_diff_cols), mul(zeros_diff_rows, ones_diff_rows)))
mul(add(mul(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, ones_diff_rows)), add(mul(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, ones_diff_cols)))
add(mul(mul(ones_diff_rows, ones_diff_cols), mul(compare_blocks_rows, ones_diff_rows)), mul(mul(mul(zeros_diff_cols, compare_blocks_rows), ones_diff_rows), add(mul(ones_diff_cols, zeros_diff_cols), zeros_diff_cols)))
COND TREES:
le(_if_then_else(and_(ge(0, zeros_diff_cols), and_(False, False)), _if_then_else(le(3, max_row_clue), _if_then_else(False, max_col_clue, compare_blocks_cols), ones_diff_cols), _if_then_else(ge(max_col_clue, zeros_diff_rows), _if_then_else(True, 4, ones_diff_rows), _if_then_else(False, ones_diff_cols, zeros_diff_rows))), _if_then_else(and_(le(4, compare_blocks_rows), and_(True, True)), _if_then_else(or_(ge(1, max_col_clue), True), _if_then_else(False, compare_blocks_rows, 1), _if_then_else(True, _if_then_else(True, 2, 1), _if_then_else(True, ones_diff_cols, ones_diff_rows))), _if_then_else(and_(False, True), _if_then_else(True, 0, 2), _if_then_else(False, 2, 0))))
or_(and_(le(_if_then_else(True, ones_diff_cols, 0), _if_then_else(False, 2, zeros_diff_rows)), and_(True, True)), or_(le(compare_blocks_cols, zeros_diff_cols), le(zeros_diff_rows, compare_blocks_rows)))
or_(ge(_if_then_else(True, zeros_diff_rows, _if_then_else(False, max_col_clue, 1)), _if_then_else(False, 2, max_row_clue)), and_(and_(or_(True, True), True), and_(le(_if_then_else(False, 0, 2), _if_then_else(True, 1, 1)), True)))
or_(or_(le(3, zeros_diff_cols), and_(True, False)), or_(and_(False, ge(2, _if_then_else(False, compare_blocks_rows, max_row_clue))), False))
ge(_if_then_else(le(_if_then_else(ge(ones_diff_rows, zeros_diff_rows), _if_then_else(False, 3, 1), _if_then_else(True, _if_then_else(True, 2, 4), zeros_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, zeros_diff_rows), _if_then_else(False, max_col_clue, zeros_diff_rows))), _if_then_else(le(_if_then_else(True, _if_then_else(True, zeros_diff_rows, max_col_clue), _if_then_else(False, compare_blocks_cols, 3)), _if_then_else(and_(True, False), ones_diff_cols, 1)), _if_then_else(or_(True, True), _if_then_else(True, 2, ones_diff_rows), _if_then_else(True, _if_then_else(False, max_col_clue, max_row_clue), 4)), _if_then_else(and_(True, False), _if_then_else(True, ones_diff_rows, compare_blocks_rows), _if_then_else(False, 4, zeros_diff_rows))), _if_then_else(le(_if_then_else(False, ones_diff_rows, max_row_clue), _if_then_else(False, zeros_diff_cols, 3)), _if_then_else(or_(True, True), _if_then_else(False, 4, 2), _if_then_else(True, max_col_clue, 1)), _if_then_else(or_(False, True), _if_then_else(False, ones_diff_rows, ones_diff_rows), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)))), _if_then_else(le(_if_then_else(or_(False, True), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, 3, ones_diff_rows)), _if_then_else(ge(zeros_diff_rows, 3), _if_then_else(False, max_col_clue, ones_diff_rows), _if_then_else(True, ones_diff_rows, zeros_diff_cols))), _if_then_else(le(_if_then_else(True, zeros_diff_rows, compare_blocks_rows), _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(le(compare_blocks_rows, zeros_diff_cols), _if_then_else(True, 0, 4), _if_then_else(False, zeros_diff_rows, max_col_clue)), _if_then_else(le(3, 1), _if_then_else(True, zeros_diff_cols, max_col_clue), _if_then_else(False, 2, zeros_diff_rows))), _if_then_else(and_(or_(True, True), or_(False, False)), _if_then_else(le(2, ones_diff_cols), _if_then_else(False, 0, ones_diff_rows), _if_then_else(True, 1, 0)), _if_then_else(ge(3, zeros_diff_cols), _if_then_else(False, 4, ones_diff_rows), _if_then_else(False, 2, zeros_diff_rows)))))
VAL TREES:
add(add(add(zeros_diff_cols, mul(compare_blocks_rows, compare_blocks_cols)), add(mul(add(compare_blocks_cols, compare_blocks_rows), add(mul(ones_diff_cols, ones_diff_cols), mul(ones_diff_rows, compare_blocks_cols))), mul(mul(zeros_diff_rows, compare_blocks_rows), zeros_diff_cols))), mul(add(ones_diff_rows, zeros_diff_cols), add(compare_blocks_cols, zeros_diff_rows)))
mul(mul(mul(ones_diff_cols, zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), mul(add(compare_blocks_cols, ones_diff_rows), add(ones_diff_rows, compare_blocks_cols)))
add(mul(compare_blocks_cols, compare_blocks_cols), mul(add(zeros_diff_cols, compare_blocks_rows), add(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_rows)), compare_blocks_rows)))
add(add(add(zeros_diff_cols, ones_diff_cols), ones_diff_rows), mul(mul(ones_diff_cols, ones_diff_cols), mul(zeros_diff_rows, ones_diff_rows)))
mul(add(mul(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, zeros_diff_cols)), add(mul(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, ones_diff_cols)))
add(mul(mul(ones_diff_rows, ones_diff_cols), mul(compare_blocks_rows, compare_blocks_cols)), mul(mul(mul(zeros_diff_cols, compare_blocks_rows), ones_diff_rows), add(mul(ones_diff_cols, zeros_diff_cols), zeros_diff_cols)))
COND TREES:
and_(or_(and_(True, True), and_(False, True)), and_(or_(and_(True, False), and_(and_(True, False), and_(False, False))), and_(False, False)))
ge(_if_then_else(or_(False, True), _if_then_else(False, max_row_clue, 0), _if_then_else(or_(True, False), 0, max_row_clue)), _if_then_else(and_(True, False), _if_then_else(False, ones_diff_rows, compare_blocks_cols), _if_then_else(True, 3, ones_diff_cols)))
and_(ge(_if_then_else(False, 1, ones_diff_cols), _if_then_else(True, ones_diff_rows, 4)), or_(and_(False, True), ge(4, 2)))
le(_if_then_else(and_(False, False), _if_then_else(False, 1, 2), _if_then_else(True, 1, _if_then_else(False, 0, 1))), _if_then_else(and_(False, True), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, zeros_diff_cols, ones_diff_cols)))
le(_if_then_else(False, _if_then_else(and_(False, True), _if_then_else(True, zeros_diff_rows, 2), _if_then_else(True, 1, max_col_clue)), 0), _if_then_else(True, zeros_diff_cols, max_row_clue))
VAL TREES:
add(mul(add(add(compare_blocks_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_cols))), add(mul(add(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_rows, zeros_diff_rows)), add(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_cols, ones_diff_cols))))
add(mul(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_rows, ones_diff_cols)), mul(mul(mul(compare_blocks_cols, ones_diff_rows), mul(ones_diff_cols, compare_blocks_rows)), add(zeros_diff_cols, compare_blocks_rows)))
mul(add(add(add(compare_blocks_rows, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols))), mul(mul(add(ones_diff_rows, ones_diff_cols), add(compare_blocks_cols, compare_blocks_cols)), mul(add(ones_diff_cols, ones_diff_cols), mul(compare_blocks_rows, ones_diff_cols))))
mul(mul(add(compare_blocks_cols, zeros_diff_cols), mul(ones_diff_cols, compare_blocks_rows)), add(mul(zeros_diff_rows, compare_blocks_rows), add(ones_diff_rows, ones_diff_cols)))
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(add(ones_diff_rows, ones_diff_rows), ones_diff_cols)), mul(add(zeros_diff_cols, zeros_diff_rows), mul(add(add(compare_blocks_cols, ones_diff_cols), zeros_diff_rows), zeros_diff_rows)))
mul(mul(add(zeros_diff_rows, ones_diff_cols), add(zeros_diff_cols, ones_diff_rows)), add(mul(ones_diff_rows, compare_blocks_cols), mul(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))))
COND TREES:
le(_if_then_else(and_(ge(0, zeros_diff_cols), and_(False, False)), _if_then_else(le(3, max_row_clue), _if_then_else(False, max_col_clue, compare_blocks_cols), _if_then_else(True, 2, ones_diff_rows)), _if_then_else(ge(max_col_clue, zeros_diff_rows), _if_then_else(True, 4, ones_diff_rows), _if_then_else(False, ones_diff_cols, zeros_diff_rows))), _if_then_else(ge(_if_then_else(False, ones_diff_rows, compare_blocks_rows), _if_then_else(False, ones_diff_cols, compare_blocks_cols)), _if_then_else(le(compare_blocks_cols, compare_blocks_rows), _if_then_else(True, ones_diff_cols, 4), _if_then_else(True, zeros_diff_rows, zeros_diff_cols)), _if_then_else(or_(True, False), _if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(False, zeros_diff_rows, compare_blocks_cols))))
or_(and_(and_(True, False), and_(True, True)), and_(or_(True, False), or_(False, True)))
or_(ge(_if_then_else(True, 3, 4), _if_then_else(False, 2, max_row_clue)), and_(and_(or_(True, True), True), and_(True, False)))
or_(le(_if_then_else(le(max_row_clue, compare_blocks_rows), _if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(False, zeros_diff_cols, 0)), _if_then_else(True, 0, ones_diff_cols)), or_(and_(False, False), or_(False, False)))
ge(_if_then_else(le(_if_then_else(ge(ones_diff_rows, zeros_diff_rows), _if_then_else(False, 3, 1), _if_then_else(True, 4, zeros_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, zeros_diff_rows), _if_then_else(False, max_col_clue, zeros_diff_rows))), _if_then_else(or_(and_(False, False), or_(True, True)), _if_then_else(or_(True, True), _if_then_else(True, 2, ones_diff_rows), _if_then_else(True, max_row_clue, 4)), _if_then_else(and_(True, False), _if_then_else(True, ones_diff_rows, compare_blocks_rows), _if_then_else(False, 4, max_col_clue))), _if_then_else(le(_if_then_else(False, ones_diff_rows, max_row_clue), _if_then_else(False, zeros_diff_cols, 3)), _if_then_else(or_(True, True), _if_then_else(False, 4, 2), _if_then_else(True, max_col_clue, 1)), _if_then_else(or_(False, True), _if_then_else(False, ones_diff_rows, ones_diff_rows), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)))), _if_then_else(le(_if_then_else(or_(False, True), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, 3, ones_diff_rows)), _if_then_else(ge(zeros_diff_rows, 3), _if_then_else(False, max_col_clue, ones_diff_rows), _if_then_else(True, ones_diff_rows, zeros_diff_cols))), _if_then_else(le(_if_then_else(or_(False, False), _if_then_else(False, _if_then_else(False, compare_blocks_cols, 0), 0), _if_then_else(True, ones_diff_cols, zeros_diff_cols)), _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(le(compare_blocks_rows, zeros_diff_cols), _if_then_else(True, 0, 4), _if_then_else(False, zeros_diff_rows, max_col_clue)), _if_then_else(le(3, 1), _if_then_else(True, zeros_diff_cols, max_col_clue), _if_then_else(False, 2, zeros_diff_rows))), _if_then_else(and_(or_(True, True), or_(False, False)), _if_then_else(le(2, ones_diff_cols), _if_then_else(False, 0, ones_diff_rows), _if_then_else(True, 1, 0)), _if_then_else(ge(3, zeros_diff_cols), _if_then_else(False, 4, ones_diff_rows), _if_then_else(False, 2, zeros_diff_rows)))))
VAL TREES:
add(add(add(zeros_diff_cols, mul(compare_blocks_rows, compare_blocks_cols)), add(mul(add(compare_blocks_cols, compare_blocks_rows), zeros_diff_rows), mul(mul(zeros_diff_rows, compare_blocks_rows), compare_blocks_rows))), mul(add(ones_diff_rows, zeros_diff_cols), add(compare_blocks_cols, zeros_diff_rows)))
mul(add(compare_blocks_cols, ones_diff_cols), mul(compare_blocks_cols, zeros_diff_cols))
add(mul(mul(add(add(compare_blocks_rows, compare_blocks_cols), zeros_diff_rows), add(add(ones_diff_cols, compare_blocks_cols), ones_diff_cols)), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_rows), add(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, add(compare_blocks_rows, compare_blocks_cols))), compare_blocks_rows)))
add(add(add(zeros_diff_cols, ones_diff_cols), add(zeros_diff_rows, compare_blocks_rows)), mul(mul(ones_diff_cols, ones_diff_cols), mul(zeros_diff_rows, ones_diff_rows)))
mul(add(mul(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, zeros_diff_cols)), add(mul(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, ones_diff_cols)))
add(mul(mul(ones_diff_rows, ones_diff_cols), add(add(zeros_diff_cols, compare_blocks_rows), add(ones_diff_rows, compare_blocks_cols))), mul(mul(mul(zeros_diff_cols, compare_blocks_rows), ones_diff_rows), add(mul(ones_diff_cols, zeros_diff_cols), zeros_diff_cols)))
COND TREES:
and_(or_(or_(True, False), and_(False, True)), and_(False, and_(False, False)))
ge(0, zeros_diff_cols)
and_(ge(_if_then_else(False, 1, ones_diff_cols), _if_then_else(False, max_col_clue, 4)), or_(and_(False, True), ge(4, 2)))
le(_if_then_else(False, max_col_clue, 4), _if_then_else(and_(True, False), _if_then_else(and_(False, False), _if_then_else(False, 1, 2), _if_then_else(True, 1, 2)), _if_then_else(True, zeros_diff_cols, ones_diff_cols)))
or_(ge(_if_then_else(False, compare_blocks_cols, compare_blocks_rows), _if_then_else(False, _if_then_else(False, 0, 3), max_col_clue)), and_(le(ones_diff_cols, zeros_diff_rows), or_(True, True)))
VAL TREES:
add(mul(add(add(compare_blocks_rows, compare_blocks_rows), mul(ones_diff_rows, ones_diff_cols)), add(mul(zeros_diff_cols, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_cols))), add(mul(add(compare_blocks_cols, compare_blocks_rows), mul(ones_diff_rows, zeros_diff_rows)), add(mul(mul(ones_diff_cols, ones_diff_cols), add(zeros_diff_rows, zeros_diff_cols)), mul(ones_diff_cols, ones_diff_cols))))
add(mul(mul(ones_diff_cols, compare_blocks_cols), mul(ones_diff_rows, ones_diff_cols)), mul(mul(mul(compare_blocks_cols, ones_diff_rows), mul(ones_diff_cols, compare_blocks_rows)), add(add(compare_blocks_cols, zeros_diff_rows), add(compare_blocks_cols, zeros_diff_rows))))
mul(add(add(add(zeros_diff_cols, compare_blocks_cols), add(zeros_diff_rows, zeros_diff_rows)), mul(mul(zeros_diff_rows, compare_blocks_cols), mul(zeros_diff_cols, ones_diff_cols))), mul(mul(add(ones_diff_rows, ones_diff_cols), add(compare_blocks_cols, compare_blocks_cols)), mul(add(ones_diff_cols, ones_diff_cols), mul(compare_blocks_rows, ones_diff_cols))))
mul(mul(add(mul(zeros_diff_cols, zeros_diff_rows), zeros_diff_cols), mul(ones_diff_cols, compare_blocks_rows)), add(mul(zeros_diff_rows, compare_blocks_rows), add(ones_diff_rows, ones_diff_cols)))
mul(add(add(compare_blocks_cols, zeros_diff_rows), mul(add(ones_diff_rows, ones_diff_rows), ones_diff_cols)), mul(add(zeros_diff_cols, zeros_diff_rows), mul(add(add(compare_blocks_cols, ones_diff_cols), zeros_diff_rows), zeros_diff_rows)))
mul(mul(add(zeros_diff_rows, ones_diff_cols), add(zeros_diff_cols, ones_diff_rows)), add(mul(ones_diff_rows, compare_blocks_cols), mul(add(zeros_diff_cols, zeros_diff_rows), mul(compare_blocks_cols, ones_diff_rows))))
COND TREES:
le(_if_then_else(le(compare_blocks_cols, zeros_diff_rows), _if_then_else(le(3, max_row_clue), _if_then_else(False, max_col_clue, compare_blocks_cols), _if_then_else(True, 2, 2)), _if_then_else(ge(max_col_clue, _if_then_else(and_(True, True), _if_then_else(True, zeros_diff_rows, 3), _if_then_else(True, ones_diff_rows, 3))), _if_then_else(True, 4, ones_diff_rows), _if_then_else(False, ones_diff_cols, zeros_diff_rows))), _if_then_else(ge(_if_then_else(False, _if_then_else(True, ones_diff_rows, 0), compare_blocks_rows), _if_then_else(le(compare_blocks_cols, compare_blocks_rows), _if_then_else(True, ones_diff_cols, 4), _if_then_else(True, zeros_diff_rows, zeros_diff_cols))), _if_then_else(le(compare_blocks_cols, compare_blocks_rows), _if_then_else(True, ones_diff_cols, 4), _if_then_else(True, zeros_diff_rows, zeros_diff_cols)), _if_then_else(ge(max_col_clue, zeros_diff_rows), _if_then_else(False, zeros_diff_cols, ones_diff_cols), _if_then_else(False, zeros_diff_rows, compare_blocks_cols))))
or_(and_(False, and_(True, True)), and_(or_(True, ge(_if_then_else(le(_if_then_else(True, zeros_diff_cols, 1), _if_then_else(False, 1, max_row_clue)), _if_then_else(and_(False, False), _if_then_else(True, _if_then_else(True, ones_diff_cols, 0), 1), _if_then_else(True, max_col_clue, 0)), _if_then_else(le(ones_diff_rows, ones_diff_rows), _if_then_else(False, 1, ones_diff_cols), _if_then_else(True, 4, ones_diff_cols))), _if_then_else(and_(or_(True, False), or_(True, False)), _if_then_else(ge(ones_diff_rows, 2), _if_then_else(False, max_row_clue, 2), _if_then_else(False, 3, 0)), _if_then_else(and_(True, True), _if_then_else(True, zeros_diff_cols, max_row_clue), _if_then_else(False, zeros_diff_cols, 2))))), or_(False, True)))
or_(le(zeros_diff_cols, zeros_diff_rows), and_(and_(le(1, max_row_clue), True), and_(and_(and_(or_(False, False), or_(False, False)), True), ge(zeros_diff_rows, 3))))
or_(le(2, zeros_diff_cols), and_(False, and_(le(2, 0), or_(False, False))))
ge(_if_then_else(le(_if_then_else(ge(ones_diff_rows, zeros_diff_rows), _if_then_else(False, 3, 1), _if_then_else(True, 4, zeros_diff_cols)), _if_then_else(or_(False, False), _if_then_else(False, max_col_clue, zeros_diff_rows), _if_then_else(False, max_col_clue, zeros_diff_rows))), _if_then_else(or_(and_(False, False), or_(True, True)), _if_then_else(or_(True, True), _if_then_else(False, 4, 2), _if_then_else(True, max_col_clue, 1)), _if_then_else(and_(True, or_(False, True)), _if_then_else(True, ones_diff_rows, compare_blocks_rows), _if_then_else(False, 4, zeros_diff_rows))), _if_then_else(le(_if_then_else(False, ones_diff_rows, max_row_clue), _if_then_else(False, zeros_diff_cols, 3)), _if_then_else(or_(True, True), _if_then_else(False, 4, 2), _if_then_else(True, ones_diff_rows, 1)), _if_then_else(or_(False, True), _if_then_else(False, ones_diff_rows, ones_diff_rows), _if_then_else(False, compare_blocks_rows, compare_blocks_cols)))), _if_then_else(le(_if_then_else(or_(False, True), _if_then_else(False, compare_blocks_rows, 2), _if_then_else(True, 3, ones_diff_rows)), _if_then_else(ge(zeros_diff_rows, 3), _if_then_else(False, max_col_clue, ones_diff_rows), _if_then_else(True, ones_diff_rows, zeros_diff_cols))), _if_then_else(le(_if_then_else(True, zeros_diff_rows, compare_blocks_rows), _if_then_else(False, ones_diff_rows, zeros_diff_rows)), _if_then_else(le(compare_blocks_rows, zeros_diff_cols), _if_then_else(True, 0, 4), _if_then_else(False, zeros_diff_rows, max_col_clue)), _if_then_else(le(3, 1), _if_then_else(True, zeros_diff_cols, max_col_clue), _if_then_else(False, 2, zeros_diff_rows))), _if_then_else(and_(or_(True, True), or_(False, False)), _if_then_else(le(2, ones_diff_cols), _if_then_else(False, 0, ones_diff_rows), _if_then_else(True, ones_diff_rows, 0)), _if_then_else(ge(3, zeros_diff_cols), _if_then_else(False, 4, ones_diff_rows), _if_then_else(False, 2, zeros_diff_rows)))))
VAL TREES:
add(add(add(zeros_diff_cols, mul(compare_blocks_rows, compare_blocks_cols)), add(mul(add(compare_blocks_cols, compare_blocks_rows), zeros_diff_rows), mul(mul(zeros_diff_rows, compare_blocks_rows), zeros_diff_cols))), mul(add(ones_diff_rows, zeros_diff_cols), add(compare_blocks_cols, zeros_diff_rows)))
mul(mul(mul(ones_diff_cols, zeros_diff_rows), add(ones_diff_rows, zeros_diff_rows)), mul(add(compare_blocks_cols, ones_diff_rows), add(ones_diff_rows, compare_blocks_cols)))
add(mul(mul(add(add(compare_blocks_rows, compare_blocks_cols), zeros_diff_rows), add(add(ones_diff_cols, compare_blocks_cols), ones_diff_cols)), mul(zeros_diff_rows, compare_blocks_cols)), mul(add(zeros_diff_cols, compare_blocks_rows), add(mul(add(ones_diff_cols, ones_diff_cols), mul(ones_diff_cols, zeros_diff_rows)), compare_blocks_rows)))
add(add(add(zeros_diff_cols, ones_diff_cols), add(zeros_diff_rows, compare_blocks_rows)), mul(mul(ones_diff_cols, ones_diff_cols), mul(zeros_diff_rows, ones_diff_rows)))
mul(add(mul(zeros_diff_rows, ones_diff_rows), add(compare_blocks_rows, zeros_diff_cols)), add(mul(ones_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, ones_diff_cols)))
add(mul(mul(ones_diff_rows, ones_diff_cols), mul(compare_blocks_rows, ones_diff_rows)), mul(mul(mul(zeros_diff_cols, compare_blocks_rows), ones_diff_rows), add(mul(ones_diff_cols, zeros_diff_cols), zeros_diff_cols)))


INFO:root:hof: COND TREES:
ge(_if_then_else(le(2, _if_then_else(False, max_col_clue, zeros_diff_rows)), _if_then_else(False, compare_blocks_cols, 0), _if_then_else(False, _if_then_else(True, max_col_clue, 3), _if_then_else(True, 3, compare_blocks_rows))), _if_then_else(ge(max_row_clue, _if_then_else(True, max_col_clue, 2)), _if_then_else(True, _if_then_else(False, ones_diff_rows, zeros_diff_cols), _if_then_else(True, 2, compare_blocks_rows)), _if_then_else(False, zeros_diff_cols, ones_diff_cols)))
le(_if_then_else(and_(True, or_(False, False)), _if_then_else(True, ones_diff_rows, 2), _if_then_else(True, _if_then_else(False, ones_diff_rows, ones_diff_rows), _if_then_else(False, 2, ones_diff_cols))), _if_then_else(or_(True, False), _if_then_else(True, _if_then_else(True, 4, 0), zeros_diff_cols), _if_then_else(and_(False, False), ones_diff_rows, _if_then_else(True, zeros_diff_rows, zeros_diff_cols))))
and_(le(_if_then_else(False, max_col_clue, zeros_diff_rows), _if_then_else(True, max_row_clue, 1)), or_(or_(True, True), le(ones_diff_cols, 2)))
or_(and_(ge(_if_then_else(False, compare_blocks_cols, 4), _if_then_else(True, zeros_diff_rows, ones_diff_cols)), ge(_if_then_else(False, ones_diff_cols, 1), _if_then_else(False, ones_diff_cols, 1))), and_(or_(ge(ones_diff_rows, 1), le(max_row_clue, 0)), le(_if_then_else(False, compare_blocks_rows, max_col_clue), _if_then_else(True, 4, zeros_diff_cols))))
and_(le(_if_then_else(False, _if_then_else(True, zeros_diff_rows, 3), 1), _if_then_else(False, _if_then_else(False, 0, compare_blocks_cols), 3)), and_(ge(2, 4), le(zeros_diff_rows, ones_diff_rows)))
VAL TREES:
add(add(add(ones_diff_cols, compare_blocks_rows), mul(zeros_diff_cols, ones_diff_cols)), mul(add(zeros_diff_cols, zeros_diff_rows), add(compare_blocks_rows, ones_diff_cols)))
mul(add(mul(add(add(compare_blocks_cols, ones_diff_cols), add(zeros_diff_cols, zeros_diff_cols)), mul(mul(ones_diff_cols, compare_blocks_rows), mul(ones_diff_rows, ones_diff_rows))), mul(add(mul(ones_diff_rows, compare_blocks_rows), add(ones_diff_cols, ones_diff_cols)), add(mul(compare_blocks_cols, compare_blocks_rows), add(ones_diff_rows, compare_blocks_cols)))), mul(mul(add(add(zeros_diff_rows, ones_diff_rows), mul(ones_diff_rows, ones_diff_rows)), mul(mul(compare_blocks_cols, zeros_diff_rows), mul(ones_diff_cols, compare_blocks_cols))), add(mul(add(ones_diff_rows, zeros_diff_rows), mul(ones_diff_cols, ones_diff_rows)), mul(mul(compare_blocks_rows, compare_blocks_cols), mul(ones_diff_rows, zeros_diff_cols)))))
mul(add(mul(compare_blocks_cols, ones_diff_rows), mul(zeros_diff_rows, zeros_diff_rows)), add(add(ones_diff_rows, compare_blocks_rows), add(compare_blocks_cols, compare_blocks_cols)))
add(mul(mul(add(zeros_diff_cols, compare_blocks_cols), mul(compare_blocks_cols, ones_diff_cols)), mul(mul(ones_diff_rows, ones_diff_cols), mul(zeros_diff_cols, ones_diff_rows))), mul(mul(add(compare_blocks_cols, compare_blocks_rows), mul(zeros_diff_rows, compare_blocks_rows)), mul(mul(ones_diff_rows, ones_diff_cols), mul(zeros_diff_rows, ones_diff_rows))))
mul(add(mul(ones_diff_cols, compare_blocks_rows), mul(ones_diff_cols, zeros_diff_rows)), add(add(add(compare_blocks_cols, zeros_diff_cols), ones_diff_rows), add(zeros_diff_cols, zeros_diff_cols)))
mul(add(mul(compare_blocks_cols, add(compare_blocks_cols, compare_blocks_cols)), mul(compare_blocks_rows, compare_blocks_rows)), mul(add(compare_blocks_rows, zeros_diff_cols), mul(add(ones_diff_rows, zeros_diff_cols), mul(ones_diff_rows, ones_diff_cols))))


INFO:root:stats: {'fitness': <deap.tools.support.Statistics object at 0x000001DA242A4A58>, 'size': <deap.tools.support.Statistics object at 0x000001DA242A4A90>}

